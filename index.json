{
  "api/core/Cuemon.IO.StreamUtility.html": {
    "href": "api/core/Cuemon.IO.StreamUtility.html",
    "title": "Class StreamUtility | Cuemon .NET Standard",
    "keywords": "Class StreamUtility This utility class is designed to make System.IO.Stream operations easier to work with. Inheritance System.Object StreamUtility Namespace : Cuemon.IO Assembly : Cuemon.Core.dll Syntax public static class StreamUtility Methods | Improve this Doc CombineStreams(Stream[]) Combines a variable number of streams into one stream. Declaration public static Stream CombineStreams(params Stream[] streams) Parameters Type Name Description System.IO.Stream [] streams The streams to combine. Returns Type Description System.IO.Stream A variable number of streams combined into one stream . | Improve this Doc CopyStream(Stream) Creates and returns a seekable copy of the source System.IO.Stream . Declaration public static Stream CopyStream(Stream source) Parameters Type Name Description System.IO.Stream source The source System.IO.Stream to create a copy from. Returns Type Description System.IO.Stream A seekable System.IO.Stream that will contain the contents of the source stream. | Improve this Doc CopyStream(Stream, Boolean) Creates and returns a seekable copy of the source System.IO.Stream . Declaration public static Stream CopyStream(Stream source, bool leaveStreamOpen) Parameters Type Name Description System.IO.Stream source The source System.IO.Stream to create a copy from. System.Boolean leaveStreamOpen if true , the source System.IO.Stream is being left open; otherwise it is being closed and disposed. Returns Type Description System.IO.Stream A seekable System.IO.Stream that will contain the contents of the source stream. | Improve this Doc CopyStream(Stream, Boolean, Int32) Creates and returns a seekable copy of the source System.IO.Stream . Declaration public static Stream CopyStream(Stream source, bool leaveStreamOpen, int bufferSize) Parameters Type Name Description System.IO.Stream source The source System.IO.Stream to create a copy from. System.Boolean leaveStreamOpen if true , the source System.IO.Stream is being left open; otherwise it is being closed and disposed. System.Int32 bufferSize The size of the buffer. This value must be greater than zero. The default size is 2048. Returns Type Description System.IO.Stream A seekable System.IO.Stream that will contain the contents of the source stream. | Improve this Doc CopyStream(Stream, Stream) Reads all the bytes from the source stream and writes them to the destination stream. Declaration public static void CopyStream(Stream source, Stream destination) Parameters Type Name Description System.IO.Stream source The stream to read the contents from. System.IO.Stream destination The stream that will contain the contents of the source stream. | Improve this Doc CopyStream(Stream, Stream, Int32) Reads all the bytes from the source stream and writes them to the destination stream, using the specified buffer size of bufferSize . Declaration public static void CopyStream(Stream source, Stream destination, int bufferSize) Parameters Type Name Description System.IO.Stream source The stream to read the contents from. System.IO.Stream destination The stream that will contain the contents of the source stream. System.Int32 bufferSize The size of the buffer. This value must be greater than zero. The default size is 2048. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.StreamConverterExtensions.html": {
    "href": "api/core/Cuemon.IO.StreamConverterExtensions.html",
    "title": "Class StreamConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class StreamConverterExtensions This is an extension implementation of the StreamConverter class. Inheritance System.Object StreamConverterExtensions Namespace : Cuemon.IO Assembly : Cuemon.IO.dll Syntax public static class StreamConverterExtensions Methods | Improve this Doc RemovePreamble(Stream, Encoding) Removes the preamble information (if present) from the specified System.IO.Stream , and source is being closed and disposed. Declaration public static Stream RemovePreamble(this Stream source, Encoding encoding) Parameters Type Name Description System.IO.Stream source The input System.IO.Stream to process. System.Text.Encoding encoding The encoding to use when determining the preamble to remove. Returns Type Description System.IO.Stream A System.IO.Stream without preamble information. | Improve this Doc ToStream(Byte[]) Converts the specified value to a System.IO.Stream . Declaration public static Stream ToStream(this byte[] value) Parameters Type Name Description System.Byte [] value The byte array to be converted. Returns Type Description System.IO.Stream A System.IO.Stream object. | Improve this Doc ToStream(String, Action<EncodingOptions>) Converts the specified value to a System.IO.Stream . Declaration public static Stream ToStream(this string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The string to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream object. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.StreamConverter.html": {
    "href": "api/core/Cuemon.IO.StreamConverter.html",
    "title": "Class StreamConverter | Cuemon .NET Standard",
    "keywords": "Class StreamConverter This utility class is designed to make System.IO.Stream related conversions easier to work with. Inheritance System.Object StreamConverter Namespace : Cuemon.IO Assembly : Cuemon.IO.dll Syntax public static class StreamConverter Methods | Improve this Doc FromBytes(Byte[]) Converts the specified value to a System.IO.Stream . Declaration public static Stream FromBytes(byte[] value) Parameters Type Name Description System.Byte [] value The byte array to be converted. Returns Type Description System.IO.Stream A System.IO.Stream object. | Improve this Doc FromString(String, Action<EncodingOptions>) Converts the specified value to a System.IO.Stream . Declaration public static Stream FromString(string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The string to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream object. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc RemovePreamble(Stream, Encoding) Removes the preamble information (if present) from the specified System.IO.Stream , and source is being closed and disposed. Declaration public static Stream RemovePreamble(Stream source, Encoding encoding) Parameters Type Name Description System.IO.Stream source The input System.IO.Stream to process. System.Text.Encoding encoding The encoding to use when determining the preamble to remove. Returns Type Description System.IO.Stream A System.IO.Stream without preamble information. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.GuidUtility.html": {
    "href": "api/core/Cuemon.GuidUtility.html",
    "title": "Class GuidUtility | Cuemon .NET Standard",
    "keywords": "Class GuidUtility This utility class is designed to make some System.Guid operations easier to work with. Inheritance System.Object GuidUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class GuidUtility Methods | Improve this Doc TryParse(String, GuidFormats, out Guid) Converts the string representation of a GUID to its equivalent System.Guid structure. Declaration public static bool TryParse(string value, GuidFormats format, out Guid result) Parameters Type Name Description System.String value The GUID to convert. GuidFormats format A bitmask comprised of one or more GuidFormats that specify how the GUID parsing is conducted. System.Guid result The structure that will contain the parsed value. Returns Type Description System.Boolean true if the parse operation was successful; otherwise, false . Remarks This method returns false if value is null or not in a recognized format, and does not throw an exception. Only 32 digits ( NumberFormat ); 32 digits separated by hyphens ( DigitFormat ); 32 digits separated by hyphens, enclosed in brackets ( BraceFormat ) and 32 digits separated by hyphens, enclosed in parentheses ( ParenthesisFormat ) is supported. For more information refer to this page @ StackOverflow: http://stackoverflow.com/questions/968175/what-is-the-string-length-of-a-guid | Improve this Doc TryParse(String, out Guid) Converts the string representation of a GUID to its equivalent System.Guid structure. Declaration public static bool TryParse(string value, out Guid result) Parameters Type Name Description System.String value The GUID to convert. System.Guid result The structure that will contain the parsed value. Returns Type Description System.Boolean true if the parse operation was successful; otherwise, false . Remarks This method returns false if value is null or not in a recognized format, and does not throw an exception. Default implementation for this overload evaluates only on DigitFormat | BraceFormat | ParenthesisFormat , eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses. The reason not to include NumberFormat , eg. 32 digits is the possible unintended GUID result of a MD5 string representation. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.GuidFormats.html": {
    "href": "api/core/Cuemon.GuidFormats.html",
    "title": "Enum GuidFormats | Cuemon .NET Standard",
    "keywords": "Enum GuidFormats Specifies allowed GUID formats in parsing related methods. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax [Flags] public enum GuidFormats Fields Name Description Any Specified any of the supported GUID formats (N,D,B,P). BraceFormat Specified the brace format (B) which consist of 32 digits separated by hyphens, enclosed in brackets, eg. {12345678-1234-1234-1234-123456789abc}. DigitFormat Specified the digit format (D) which consist of 32 digits separated by hyphens, eg. 12345678-1234-1234-1234-123456789abc. NumberFormat Specified the number format (N) which consist of 32 digits, eg. 12345678123412341234123456789abc. ParenthesisFormat Specified the brace format (P) which consist of 32 digits separated by hyphens, enclosed in parentheses, eg. (12345678-1234-1234-1234-123456789abc). Extension Methods ByteConverterExtensions.ToByteArray<GuidFormats>() ConverterExtensions.ParseWith<GuidFormats, TResult>(Func<GuidFormats, TResult>) ConverterExtensions.ParseWith<GuidFormats, T, TResult>(Func<GuidFormats, T, TResult>, T) ConverterExtensions.ParseWith<GuidFormats, T1, T2, TResult>(Func<GuidFormats, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<GuidFormats, T1, T2, T3, TResult>(Func<GuidFormats, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<GuidFormats, T1, T2, T3, T4, TResult>(Func<GuidFormats, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<GuidFormats, T1, T2, T3, T4, T5, TResult>(Func<GuidFormats, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<GuidFormats, T1, T2, T3, T4, T5, T6, TResult>(Func<GuidFormats, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<GuidFormats, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<GuidFormats, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<GuidFormats, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<GuidFormats, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<GuidFormats, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<GuidFormats, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<GuidFormats>() DelegateUtilityExtensions.DynamicWrap<GuidFormats>() TweakerExtensions.Adjust<GuidFormats>(Func<GuidFormats, GuidFormats>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<GuidFormats>() WrapperExtensions.UseWrapper<GuidFormats>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<GuidFormats>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<GuidFormats>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.GuidConverterExtensions.html": {
    "href": "api/core/Cuemon.GuidConverterExtensions.html",
    "title": "Class GuidConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class GuidConverterExtensions This is an extension implementation of the GuidConverter class. Inheritance System.Object GuidConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class GuidConverterExtensions Methods | Improve this Doc ToGuid(String) Converts the specified value of a GUID to its equivalent System.Guid structure. Declaration public static Guid ToGuid(this string value) Parameters Type Name Description System.String value The GUID to be converted. Returns Type Description System.Guid A System.Guid that is equivalent to value . Exceptions Type Condition System.ArgumentNullException value is null. System.FormatException The specified value was not recognized to be a GUID. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.GuidConverter.html": {
    "href": "api/core/Cuemon.GuidConverter.html",
    "title": "Class GuidConverter | Cuemon .NET Standard",
    "keywords": "Class GuidConverter This utility class is designed to make System.Guid related conversions easier to work with. Inheritance System.Object GuidConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class GuidConverter Methods | Improve this Doc FromString(String) Converts the specified value of a GUID to its equivalent System.Guid structure. Declaration public static Guid FromString(string value) Parameters Type Name Description System.String value The GUID to be converted. Returns Type Description System.Guid A System.Guid that is equivalent to value . Exceptions Type Condition System.ArgumentNullException value is null. System.FormatException The specified value was not recognized to be a GUID. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DelegateUtility.html": {
    "href": "api/core/Cuemon.DelegateUtility.html",
    "title": "Class DelegateUtility | Cuemon .NET Standard",
    "keywords": "Class DelegateUtility This utility class is designed to make common delegate operations easier to work with. Inheritance System.Object DelegateUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DelegateUtility Methods | Improve this Doc ConfigureAction<TOptions>(Action<TOptions>, Action<TOptions>) Provides a generic way to support the options pattern which enables using custom options classes to represent a group of related settings. Declaration public static TOptions ConfigureAction<TOptions>(Action<TOptions> setup, Action<TOptions> initializer = null) Parameters Type Name Description System.Action <TOptions> setup The delegate that will configure the public read-write properties of TOptions . System.Action <TOptions> initializer The function delegate that will initialize the default, parameterless constructed instance of TOptions . Returns Type Description TOptions A default constructed instance of TOptions initialized with the options of setup . Type Parameters Name Description TOptions The type of the custom options class. | Improve this Doc DynamicWrap<TResult>(TResult) Provides a way to dynamically wrap a return value (typically from a property or field) inside an anonymous method. Declaration public static Func<TResult> DynamicWrap<TResult>(TResult output) Parameters Type Name Description TResult output The value to dynamically wrap as a return value (typically from a property of field) inside an anonymous method. Returns Type Description System.Func <TResult> An anonymous method that returns the value of output . Type Parameters Name Description TResult The type of the return value of output . | Improve this Doc InvokeIfNotNull(Action) If the specified body meets the condition of not being null, it will be invoked. Declaration public static void InvokeIfNotNull(Action body) Parameters Type Name Description System.Action body The delegate to invoke when assigned a method. | Improve this Doc InvokeIfNotNull<T>(Action<T>, T) If the specified body meets the condition of not being null, it will be invoked with a single generic parameter. Declaration public static void InvokeIfNotNull<T>(Action<T> body, T arg) Parameters Type Name Description System.Action <T> body The delegate to invoke when assigned a method. T arg The parameter of the delegate body . Type Parameters Name Description T The type of the parameter of the delegate body . | Improve this Doc InvokeIfNotNull<T1, T2>(Action<T1, T2>, T1, T2) If the specified body meets the condition of not being null, it will be invoked with two generic parameters. Declaration public static void InvokeIfNotNull<T1, T2>(Action<T1, T2> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Action <T1, T2> body The delegate to invoke when assigned a method. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . | Improve this Doc InvokeIfNotNull<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3) If the specified body meets the condition of not being null, it will be invoked with three generic parameters. Declaration public static void InvokeIfNotNull<T1, T2, T3>(Action<T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Action <T1, T2, T3> body The delegate to invoke when assigned a method. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . | Improve this Doc InvokeIfNotNull<T1, T2, T3, T4>(Action<T1, T2, T3, T4>, T1, T2, T3, T4) If the specified body meets the condition of not being null, it will be invoked with four generic parameters. Declaration public static void InvokeIfNotNull<T1, T2, T3, T4>(Action<T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Action <T1, T2, T3, T4> body The delegate to invoke when assigned a method. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . | Improve this Doc InvokeIfNotNull<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) If the specified body meets the condition of not being null, it will be invoked with five generic parameters. Declaration public static void InvokeIfNotNull<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5> body The delegate to invoke when assigned a method. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . | Improve this Doc SafeInvokeDisposable<TResult>(Func<TResult>) Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope). Declaration public static TResult SafeInvokeDisposable<TResult>(Func<TResult> initializer) where TResult : class, IDisposable Parameters Type Name Description System.Func <TResult> initializer The function delegate to invoke following the rule description of CA2000 (Dispose objects before losing scope). Returns Type Description TResult The return value of the function delegate initializer . Type Parameters Name Description TResult The type of the return value of the function delegate initializer . | Improve this Doc SafeInvokeDisposable<T, TResult>(Func<T, TResult>, T) Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope). Declaration public static TResult SafeInvokeDisposable<T, TResult>(Func<T, TResult> initializer, T arg) where TResult : class, IDisposable Parameters Type Name Description System.Func <T, TResult> initializer The function delegate to invoke following the rule description of CA2000 (Dispose objects before losing scope). T arg The parameter of the function delegate initializer . Returns Type Description TResult The return value of the function delegate initializer . Type Parameters Name Description T The type of the parameter of the function delegate initializer . TResult The type of the return value of the function delegate initializer . | Improve this Doc SafeInvokeDisposable<T1, T2, TResult>(Func<T1, T2, TResult>, T1, T2) Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope). Declaration public static TResult SafeInvokeDisposable<T1, T2, TResult>(Func<T1, T2, TResult> initializer, T1 arg1, T2 arg2) where TResult : class, IDisposable Parameters Type Name Description System.Func <T1, T2, TResult> initializer The function delegate to invoke following the rule description of CA2000 (Dispose objects before losing scope). T1 arg1 The first parameter of the function delegate initializer . T2 arg2 The second parameter of the function delegate initializer . Returns Type Description TResult The return value of the function delegate initializer . Type Parameters Name Description T1 The type of the first parameter of the function delegate initializer . T2 The type of the second parameter of the function delegate initializer . TResult The type of the return value of the function delegate initializer . | Improve this Doc SafeInvokeDisposable<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope). Declaration public static TResult SafeInvokeDisposable<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> initializer, T1 arg1, T2 arg2, T3 arg3) where TResult : class, IDisposable Parameters Type Name Description System.Func <T1, T2, T3, TResult> initializer The function delegate to invoke following the rule description of CA2000 (Dispose objects before losing scope). T1 arg1 The first parameter of the function delegate initializer . T2 arg2 The second parameter of the function delegate initializer . T3 arg3 The third parameter of the function delegate initializer . Returns Type Description TResult The return value of the function delegate initializer . Type Parameters Name Description T1 The type of the first parameter of the function delegate initializer . T2 The type of the second parameter of the function delegate initializer . T3 The type of the third parameter of the function delegate initializer . TResult The type of the return value of the function delegate initializer . | Improve this Doc SafeInvokeDisposable<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope). Declaration public static TResult SafeInvokeDisposable<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> initializer, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TResult : class, IDisposable Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> initializer The function delegate to invoke following the rule description of CA2000 (Dispose objects before losing scope). T1 arg1 The first parameter of the function delegate initializer . T2 arg2 The second parameter of the function delegate initializer . T3 arg3 The third parameter of the function delegate initializer . T4 arg4 The fourth parameter of the function delegate initializer . Returns Type Description TResult The return value of the function delegate initializer . Type Parameters Name Description T1 The type of the first parameter of the function delegate initializer . T2 The type of the second parameter of the function delegate initializer . T3 The type of the third parameter of the function delegate initializer . T4 The type of the fourth parameter of the function delegate initializer . TResult The type of the return value of the function delegate initializer . | Improve this Doc SafeInvokeDisposable<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope). Declaration public static TResult SafeInvokeDisposable<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> initializer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TResult : class, IDisposable Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> initializer The function delegate to invoke following the rule description of CA2000 (Dispose objects before losing scope). T1 arg1 The first parameter of the function delegate initializer . T2 arg2 The second parameter of the function delegate initializer . T3 arg3 The third parameter of the function delegate initializer . T4 arg4 The fourth parameter of the function delegate initializer . T5 arg5 The fifth parameter of the function delegate initializer . Returns Type Description TResult The return value of the function delegate initializer . Type Parameters Name Description T1 The type of the first parameter of the function delegate initializer . T2 The type of the second parameter of the function delegate initializer . T3 The type of the third parameter of the function delegate initializer . T4 The type of the fourth parameter of the function delegate initializer . T5 The type of the fifth parameter of the function delegate initializer . TResult The type of the return value of the function delegate initializer . | Improve this Doc Wrap<TResult>(TResult) Provides an easy and reflection less way to get a value from a property or field that is delegate compatible (such as System.Func<TResult> and the likes thereof). Declaration public static TResult Wrap<TResult>(TResult output) Parameters Type Name Description TResult output The value of the member to be routed as output through this Wrap{TResult} method. Returns Type Description TResult The value from output . Type Parameters Name Description TResult The type of the return value of output . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DayParts.html": {
    "href": "api/core/Cuemon.DayParts.html",
    "title": "Class DayParts | Cuemon .NET Standard",
    "keywords": "Class DayParts Provides a roughly way to determine if a given part of day is either; Night, Morning, Forenoon, Afternoon og Evening. Inheritance System.Object DayParts Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DayParts Properties | Improve this Doc Afternoon Gets the day part of a 24-hour period that approximates to Afternoon. Declaration public static DayPart Afternoon { get; } Property Value Type Description DayPart The range of a 24-hour period that approximates to Afternoon. | Improve this Doc All Gets the day parts of a 24-hour range of period. Declaration public static IEnumerable<DayPart> All { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DayPart > The day parts of a 24-hour range of period. | Improve this Doc Evening Gets the day part of a 24-hour period that approximates to Evening. Declaration public static DayPart Evening { get; } Property Value Type Description DayPart The range of a 24-hour period that approximates to Evening. | Improve this Doc Forenoon Gets the day part of a 24-hour period that approximates to Forenoon. Declaration public static DayPart Forenoon { get; } Property Value Type Description DayPart The range of a 24-hour period that approximates to Forenoon. | Improve this Doc Morning Gets the day part of a 24-hour period that approximates to Morning. Declaration public static DayPart Morning { get; } Property Value Type Description DayPart The range of a 24-hour period that approximates to Morning. | Improve this Doc Night Gets the day part of a 24-hour period that approximates to Night. Declaration public static DayPart Night { get; } Property Value Type Description DayPart The range of a 24-hour period that approximates to Night. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TupleUtility.html": {
    "href": "api/core/Cuemon.TupleUtility.html",
    "title": "Class TupleUtility | Cuemon .NET Standard",
    "keywords": "Class TupleUtility Provides static methods for creating tuple objects. Inheritance System.Object TupleUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TupleUtility Methods | Improve this Doc CreateEight<T1, T2, T3, T4, T5, T6, T7, T8>(T1, T2, T3, T4, T5, T6, T7, T8) Creates a new 8-tuple, or octuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8> CreateEight<T1, T2, T3, T4, T5, T6, T7, T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8> An 8-tuple (octuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. | Improve this Doc CreateEighteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) Creates a new 18-tuple, or octodecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> CreateEighteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. T13 arg13 The value of the thirteenth parameter of the tuple. T14 arg14 The value of the fourteenth parameter of the tuple. T15 arg15 The value of the fifteenth parameter of the tuple. T16 arg16 The value of the sixteenth parameter of the tuple. T17 arg17 The value of the seventeenth parameter of the tuple. T18 arg18 The value of the eighteenth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> An 18-tuple (octodecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. T13 The type of the thirteenth parameter of the tuple. T14 The type of the fourteenth parameter of the tuple. T15 The type of the fifteenth parameter of the tuple. T16 The type of the sixteenth parameter of the tuple. T17 The type of the seventeenth parameter of the tuple. T18 The type of the eighteenth parameter of the tuple. | Improve this Doc CreateEleven<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Creates a new 11-tuple, or undecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> CreateEleven<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> A 11-tuple (undecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. | Improve this Doc CreateFifteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Creates a new 15-tuple, or quindecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> CreateFifteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. T13 arg13 The value of the thirteenth parameter of the tuple. T14 arg14 The value of the fourteenth parameter of the tuple. T15 arg15 The value of the fifteenth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> A 15-tuple (quindecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. T13 The type of the thirteenth parameter of the tuple. T14 The type of the fourteenth parameter of the tuple. T15 The type of the fifteenth parameter of the tuple. | Improve this Doc CreateFive<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5) Creates a new 5-tuple, or quintuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5> CreateFive<T1, T2, T3, T4, T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5> A 5-tuple (quintuple) whose value is (arg1, arg2, arg3, arg4, arg5). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. | Improve this Doc CreateFour<T1, T2, T3, T4>(T1, T2, T3, T4) Creates a new 4-tuple, or quadruple, representation of a Template . Declaration public static Template<T1, T2, T3, T4> CreateFour<T1, T2, T3, T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4> A 4-tuple (quadruple) whose value is (arg1, arg2, arg3, arg4). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. | Improve this Doc CreateFourteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Creates a new 14-tuple, or quattuordecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> CreateFourteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. T13 arg13 The value of the thirteenth parameter of the tuple. T14 arg14 The value of the fourteenth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> A 14-tuple (quattuordecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. T13 The type of the thirteenth parameter of the tuple. T14 The type of the fourteenth parameter of the tuple. | Improve this Doc CreateNine<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1, T2, T3, T4, T5, T6, T7, T8, T9) Creates a new 9-tuple, or nonuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> CreateNine<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> A 9-tuple (nonuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. | Improve this Doc CreateNineteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) Creates a new 19-tuple, or novemdecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> CreateNineteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. T13 arg13 The value of the thirteenth parameter of the tuple. T14 arg14 The value of the fourteenth parameter of the tuple. T15 arg15 The value of the fifteenth parameter of the tuple. T16 arg16 The value of the sixteenth parameter of the tuple. T17 arg17 The value of the seventeenth parameter of the tuple. T18 arg18 The value of the eighteenth parameter of the tuple. T19 arg19 The value of the nineteenth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> A 19-tuple (novemdecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. T13 The type of the thirteenth parameter of the tuple. T14 The type of the fourteenth parameter of the tuple. T15 The type of the fifteenth parameter of the tuple. T16 The type of the sixteenth parameter of the tuple. T17 The type of the seventeenth parameter of the tuple. T18 The type of the eighteenth parameter of the tuple. T19 The type of the nineteenth parameter of the tuple. | Improve this Doc CreateOne<T>(T) Creates a new 1-tuple, or single, representation of a Template . Declaration public static Template<T> CreateOne<T>(T arg) Parameters Type Name Description T arg The value of the only parameter of the tuple. Returns Type Description Template <T> A 1-tuple (single) whose value is (arg1). Type Parameters Name Description T The type of the only parameter of the tuple. | Improve this Doc CreateSeven<T1, T2, T3, T4, T5, T6, T7>(T1, T2, T3, T4, T5, T6, T7) Creates a new 7-tuple, or septuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7> CreateSeven<T1, T2, T3, T4, T5, T6, T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7> An 7-tuple (septuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. | Improve this Doc CreateSeventeen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) Creates a new 17-tuple, or septendecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> CreateSeventeen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. T13 arg13 The value of the thirteenth parameter of the tuple. T14 arg14 The value of the fourteenth parameter of the tuple. T15 arg15 The value of the fifteenth parameter of the tuple. T16 arg16 The value of the sixteenth parameter of the tuple. T17 arg17 The value of the seventeenth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> A 17-tuple (septendecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. T13 The type of the thirteenth parameter of the tuple. T14 The type of the fourteenth parameter of the tuple. T15 The type of the fifteenth parameter of the tuple. T16 The type of the sixteenth parameter of the tuple. T17 The type of the seventeenth parameter of the tuple. | Improve this Doc CreateSix<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6) Creates a new 6-tuple, or septuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6> CreateSix<T1, T2, T3, T4, T5, T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6> A 6-tuple (septuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. | Improve this Doc CreateSixteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) Creates a new 16-tuple, or sexdecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> CreateSixteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. T13 arg13 The value of the thirteenth parameter of the tuple. T14 arg14 The value of the fourteenth parameter of the tuple. T15 arg15 The value of the fifteenth parameter of the tuple. T16 arg16 The value of the sixteenth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> A 16-tuple (sexdecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. T13 The type of the thirteenth parameter of the tuple. T14 The type of the fourteenth parameter of the tuple. T15 The type of the fifteenth parameter of the tuple. T16 The type of the sixteenth parameter of the tuple. | Improve this Doc CreateTen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Creates a new 10-tuple, or decuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> CreateTen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> A 10-tuple (decuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. | Improve this Doc CreateThirteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Creates a new 13-tuple, or tredecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> CreateThirteen<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. T13 arg13 The value of the thirteenth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> A 13-tuple (tredecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. T13 The type of the thirteenth parameter of the tuple. | Improve this Doc CreateThree<T1, T2, T3>(T1, T2, T3) Creates a new 3-tuple, or triple, representation of a Template . Declaration public static Template<T1, T2, T3> CreateThree<T1, T2, T3>(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. Returns Type Description Template <T1, T2, T3> A 3-tuple (triple) whose value is (arg1, arg2, arg3). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. | Improve this Doc CreateTwelve<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Creates a new 12-tuple, or duodecuple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> CreateTwelve<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> A 12-tuple (duodecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. | Improve this Doc CreateTwenty<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) Creates a new 20-tuple, or viguple, representation of a Template . Declaration public static Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> CreateTwenty<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. T3 arg3 The value of the third parameter of the tuple. T4 arg4 The value of the fourth parameter of the tuple. T5 arg5 The value of the fifth parameter of the tuple. T6 arg6 The value of the sixth parameter of the tuple. T7 arg7 The value of the seventh parameter of the tuple. T8 arg8 The value of the eighth parameter of the tuple. T9 arg9 The value of the ninth parameter of the tuple. T10 arg10 The value of the tenth parameter of the tuple. T11 arg11 The value of the eleventh parameter of the tuple. T12 arg12 The value of the twelfth parameter of the tuple. T13 arg13 The value of the thirteenth parameter of the tuple. T14 arg14 The value of the fourteenth parameter of the tuple. T15 arg15 The value of the fifteenth parameter of the tuple. T16 arg16 The value of the sixteenth parameter of the tuple. T17 arg17 The value of the seventeenth parameter of the tuple. T18 arg18 The value of the eighteenth parameter of the tuple. T19 arg19 The value of the nineteenth parameter of the tuple. T20 arg20 The value of the twentieth parameter of the tuple. Returns Type Description Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> A 20-tuple (viguple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. T3 The type of the third parameter of the tuple. T4 The type of the fourth parameter of the tuple. T5 The type of the fifth parameter of the tuple. T6 The type of the sixth parameter of the tuple. T7 The type of the seventh parameter of the tuple. T8 The type of the eighth parameter of the tuple. T9 The type of the ninth parameter of the tuple. T10 The type of the tenth parameter of the tuple. T11 The type of the eleventh parameter of the tuple. T12 The type of the twelfth parameter of the tuple. T13 The type of the thirteenth parameter of the tuple. T14 The type of the fourteenth parameter of the tuple. T15 The type of the fifteenth parameter of the tuple. T16 The type of the sixteenth parameter of the tuple. T17 The type of the seventeenth parameter of the tuple. T18 The type of the eighteenth parameter of the tuple. T19 The type of the nineteenth parameter of the tuple. T20 The type of the twentieth parameter of the tuple. | Improve this Doc CreateTwo<T1, T2>(T1, T2) Creates a new 2-tuple, or double, representation of a Template . Declaration public static Template<T1, T2> CreateTwo<T1, T2>(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 The value of the first parameter of the tuple. T2 arg2 The value of the second parameter of the tuple. Returns Type Description Template <T1, T2> A 2-tuple (double) whose value is (arg1, arg2). Type Parameters Name Description T1 The type of the first parameter of the tuple. T2 The type of the second parameter of the tuple. | Improve this Doc CreateZero() Creates a new 0-tuple, or empty tuple, representation of a Template . Declaration public static Template CreateZero() Returns Type Description Template A 0-tuple (empty) with no value. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TransientOperationOptions.html": {
    "href": "api/core/Cuemon.TransientOperationOptions.html",
    "title": "Class TransientOperationOptions | Cuemon .NET Standard",
    "keywords": "Class TransientOperationOptions Specifies options that is related to TransientOperation handling. Inheritance System.Object TransientOperationOptions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class TransientOperationOptions Constructors | Improve this Doc TransientOperationOptions() Initializes a new instance of the TransientOperationOptions class. Declaration public TransientOperationOptions() Remarks The following table shows the initial property values for an instance of TransientOperationOptions . Property Initial Value RetryAttempts DefaultRetryAttempts EnableRecovery RetryAttempts > 0 RetryStrategy retry + 2^ to a maximum of 5; eg. 1, 2, 4, 8, 16 to a total of 31 seconds DetectionStrategy exception => false MaximumAllowedLatency 5 minutes Properties | Improve this Doc DefaultRetryAttempts Gets or sets the default amount of retry attempts for transient faults. Default is 5 attempts. Declaration public static byte DefaultRetryAttempts { get; set; } Property Value Type Description System.Byte The default amount of retry attempts for transient faults. | Improve this Doc DetectionStrategy Gets or sets the callback function delegate that determines if an System.Exception contains clues that would suggest a transient fault. Declaration public Func<Exception, bool> DetectionStrategy { get; set; } Property Value Type Description System.Func < System.Exception , System.Boolean > A System.Func<TResult> that determines if an System.Exception contains clues that would suggest a transient fault. Remarks Default implementation is fixed to none-transient failure. | Improve this Doc EnableRecovery Gets or sets a value indicating whether a transient operation should be attempted gracefully recovered in case of a transient fault or simply be invoked like a normal operation. Declaration public bool EnableRecovery { get; set; } Property Value Type Description System.Boolean true if a transient operation should be attempted gracefully recovered in case of a transient fault; otherwise, false . Remarks For testing or diagnostic purposes, it can sometimes come in handy to turn off transient fault recovery. | Improve this Doc MaximumAllowedLatency Gets or sets the maximum allowed latency before a LatencyException is raised. Declaration public TimeSpan MaximumAllowedLatency { get; set; } Property Value Type Description System.TimeSpan A System.TimeSpan defining the maximum allowed latency. | Improve this Doc RetryAttempts Gets or sets the amount of retry attempts for transient faults. Default value is DefaultRetryAttempts . Declaration public int RetryAttempts { get; set; } Property Value Type Description System.Int32 The retry attempts for transient faults. | Improve this Doc RetryStrategy Gets or sets the callback function delegate that determines the amount of time to wait for a transient fault to recover gracefully before trying a new attempt. Declaration public Func<int, TimeSpan> RetryStrategy { get; set; } Property Value Type Description System.Func < System.Int32 , System.TimeSpan > A System.Func<TResult> that determines the amount of time to wait for a transient fault to recover gracefully. Remarks Default implementation is System.Int32 + 2^ to a maximum of 5; eg. 1, 2, 4, 8, 16 to a total of 32 seconds. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also TransientOperation (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterDoer.html": {
    "href": "api/core/Cuemon.TesterDoer.html",
    "title": "Class TesterDoer | Cuemon .NET Standard",
    "keywords": "Class TesterDoer Provides a set of methods that can assist with the tester-doer pattern. Inheritance System.Object TesterDoer Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TesterDoer Methods | Improve this Doc IgnoreResult<TResult, TSuccess>(TesterFunc<TResult, TSuccess>) Returns a value that indicates whether the specified testerDoerBody was invoked as TSuccess . Declaration public static TSuccess IgnoreResult<TResult, TSuccess>(TesterFunc<TResult, TSuccess> testerDoerBody) Parameters Type Name Description TesterFunc <TResult, TSuccess> testerDoerBody The tester function delegate to invoke. Returns Type Description TSuccess true if an instance of TResult has been created; otherwise false . Type Parameters Name Description TResult The type of the return value of the method that you explicitly have chosen to ignore. TSuccess The type of the return value that indicates success of the method. | Improve this Doc IgnoreResult<T, TResult, TSuccess>(TesterFunc<T, TResult, TSuccess>, T) Returns a value that indicates whether the specified testerDoerBody was invoked as TSuccess . Declaration public static TSuccess IgnoreResult<T, TResult, TSuccess>(TesterFunc<T, TResult, TSuccess> testerDoerBody, T arg) Parameters Type Name Description TesterFunc <T, TResult, TSuccess> testerDoerBody The tester function delegate to invoke. T arg The first parameter of the testerDoerBody . Returns Type Description TSuccess true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T The type of the first parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. TSuccess The type of the return value that indicates success of the method. | Improve this Doc IgnoreResult<T1, T2, TResult, TSuccess>(TesterFunc<T1, T2, TResult, TSuccess>, T1, T2) Returns a value that indicates whether the specified testerDoerBody was invoked as TSuccess . Declaration public static TSuccess IgnoreResult<T1, T2, TResult, TSuccess>(TesterFunc<T1, T2, TResult, TSuccess> testerDoerBody, T1 arg1, T2 arg2) Parameters Type Name Description TesterFunc <T1, T2, TResult, TSuccess> testerDoerBody The tester function delegate to invoke. T1 arg1 The first parameter of the testerDoerBody . T2 arg2 The second parameter of the testerDoerBody . Returns Type Description TSuccess true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. TSuccess The type of the return value that indicates success of the method. | Improve this Doc IgnoreResult<T1, T2, T3, TResult, TSuccess>(TesterFunc<T1, T2, T3, TResult, TSuccess>, T1, T2, T3) Returns a value that indicates whether the specified testerDoerBody was invoked as TSuccess . Declaration public static TSuccess IgnoreResult<T1, T2, T3, TResult, TSuccess>(TesterFunc<T1, T2, T3, TResult, TSuccess> testerDoerBody, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TesterFunc <T1, T2, T3, TResult, TSuccess> testerDoerBody The tester function delegate to invoke. T1 arg1 The first parameter of the testerDoerBody . T2 arg2 The second parameter of the testerDoerBody . T3 arg3 The third parameter of the testerDoerBody . Returns Type Description TSuccess true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. TSuccess The type of the return value that indicates success of the method. | Improve this Doc IgnoreResult<T1, T2, T3, T4, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, TResult, TSuccess>, T1, T2, T3, T4) Returns a value that indicates whether the specified testerDoerBody was invoked as TSuccess . Declaration public static TSuccess IgnoreResult<T1, T2, T3, T4, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, TResult, TSuccess> testerDoerBody, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, TResult, TSuccess> testerDoerBody The tester function delegate to invoke. T1 arg1 The first parameter of the testerDoerBody . T2 arg2 The second parameter of the testerDoerBody . T3 arg3 The third parameter of the testerDoerBody . T4 arg4 The fourth parameter of the testerDoerBody . Returns Type Description TSuccess true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. T4 The type of the fourth parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. TSuccess The type of the return value that indicates success of the method. | Improve this Doc IgnoreResult<T1, T2, T3, T4, T5, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess>, T1, T2, T3, T4, T5) Returns a value that indicates whether the specified testerDoerBody was invoked as TSuccess . Declaration public static TSuccess IgnoreResult<T1, T2, T3, T4, T5, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess> testerDoerBody, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, TResult, TSuccess> testerDoerBody The tester function delegate to invoke. T1 arg1 The first parameter of the testerDoerBody . T2 arg2 The second parameter of the testerDoerBody . T3 arg3 The third parameter of the testerDoerBody . T4 arg4 The fourth parameter of the testerDoerBody . T5 arg5 The fifth parameter of the testerDoerBody . Returns Type Description TSuccess true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. T4 The type of the fourth parameter of the method. T5 The type of the fifth parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. TSuccess The type of the return value that indicates success of the method. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TemplateFactory-1.html": {
    "href": "api/core/Cuemon.TemplateFactory-1.html",
    "title": "Class TemplateFactory<TTuple> | Cuemon .NET Standard",
    "keywords": "Class TemplateFactory<TTuple> Provides a base-class for delegate based factories. Inheritance System.Object TemplateFactory<TTuple> ActionFactory<TTuple> FuncFactory<TTuple, TResult> TaskActionFactory<TTuple> TaskFuncFactory<TTuple, TResult> TesterFuncFactory<TTuple, TResult, TSuccess> Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public abstract class TemplateFactory<TTuple> where TTuple : Template Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . Constructors | Improve this Doc TemplateFactory(TTuple, Boolean) Initializes a new instance of the TemplateFactory<TTuple> class. Declaration protected TemplateFactory(TTuple tuple, bool hasDelegate) Parameters Type Name Description TTuple tuple Then-tuple representation of a Template . System.Boolean hasDelegate true if this instance has a valid delegate; otherwise, false . Properties | Improve this Doc DelegateInfo Gets the method represented by the delegate. Declaration public virtual MethodInfo DelegateInfo { get; protected set; } Property Value Type Description System.Reflection.MethodInfo A System.Reflection.MethodInfo describing the method represented by the delegate. | Improve this Doc GenericArguments Gets a n-tuple representation of a Template that represents the generic arguments passed to this instance. Declaration public TTuple GenericArguments { get; } Property Value Type Description TTuple The n-tuple representation of a Template that represents the generic arguments passed to this instance. | Improve this Doc HasDelegate Gets a value indicating whether this instance has an assigned delegate. Declaration public virtual bool HasDelegate { get; } Property Value Type Description System.Boolean true if this instance an assigned delegate; otherwise, false . Methods | Improve this Doc ThrowIfNoValidDelegate(Boolean) Validates and throws an System.InvalidOperationException if this instance has no valid delegate. Declaration protected void ThrowIfNoValidDelegate(bool delegateIsNull) Parameters Type Name Description System.Boolean delegateIsNull The value of a condition that can be either true or false . | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TimeRange.html": {
    "href": "api/core/Cuemon.TimeRange.html",
    "title": "Struct TimeRange | Cuemon .NET Standard",
    "keywords": "Struct TimeRange Represents a period of time between two System.DateTime values. Implements System.IEquatable < TimeRange > Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public struct TimeRange : IEquatable<TimeRange> Constructors | Improve this Doc TimeRange(DateTime, DateTime) Initializes a new instance of the TimeRange struct. Declaration public TimeRange(DateTime start, DateTime end) Parameters Type Name Description System.DateTime start The start date of a time range. System.DateTime end The end date of a time range. Properties | Improve this Doc Duration Gets the duration between Start and End . Declaration public TimeSpan Duration { get; } Property Value Type Description System.TimeSpan A System.TimeSpan representing the duration between Start and End . | Improve this Doc End Gets the point of time where this time range end. Declaration public DateTime End { get; } Property Value Type Description System.DateTime A System.DateTime representing the point of time where this time range end. | Improve this Doc Start Gets the point of time where this time range begin. Declaration public DateTime Start { get; } Property Value Type Description System.DateTime A System.DateTime representing the point of time where this time range begin. Methods | Improve this Doc Equals(TimeRange) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TimeRange other) Parameters Type Name Description TimeRange other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.ValueType.ToString() | Improve this Doc ToString(String, IFormatProvider) Returns a System.String that represents this instance. Declaration public string ToString(string format, IFormatProvider provider) Parameters Type Name Description System.String format A composite format string for the System.DateTime properties. System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description System.String A System.String that represents this instance. Operators | Improve this Doc Equality(TimeRange, TimeRange) Indicates whether two DateSpan instances are equal. Declaration public static bool operator ==(TimeRange range1, TimeRange range2) Parameters Type Name Description TimeRange range1 The first time period to compare. TimeRange range2 The second time period to compare. Returns Type Description System.Boolean true if the values of range1 and range2 are equal; otherwise, false. | Improve this Doc Inequality(TimeRange, TimeRange) Indicates whether two DateSpan instances are not equal. Declaration public static bool operator !=(TimeRange range1, TimeRange range2) Parameters Type Name Description TimeRange range1 The first time period to compare. TimeRange range2 The second time period to compare. Returns Type Description System.Boolean true if the values of range1 and range2 are not equal; otherwise, false. Implements System.IEquatable<T> Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-13.html": {
    "href": "api/core/Cuemon.TesterFunc-13.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. T9 arg9 The ninth parameter of the method that this function delegate encapsulates. T10 arg10 The tenth parameter of the method that this function delegate encapsulates. T11 arg11 The eleventh parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. T9 The type of the ninth parameter of the method that this function delegate encapsulates. T10 The type of the tenth parameter of the method that this function delegate encapsulates. T11 The type of the eleventh parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-12.html": {
    "href": "api/core/Cuemon.TesterFunc-12.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. T9 arg9 The ninth parameter of the method that this function delegate encapsulates. T10 arg10 The tenth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. T9 The type of the ninth parameter of the method that this function delegate encapsulates. T10 The type of the tenth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-10.html": {
    "href": "api/core/Cuemon.TesterFunc-10.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.XmlSerializerSettingsExtensions.html": {
    "href": "api/core/Cuemon.Serialization.Xml.XmlSerializerSettingsExtensions.html",
    "title": "Class XmlSerializerSettingsExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlSerializerSettingsExtensions Extension methods for the XmlSerializerSettings . Inheritance System.Object XmlSerializerSettingsExtensions Namespace : Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Syntax public static class XmlSerializerSettingsExtensions Methods | Improve this Doc ApplyToDefaultSettings(XmlSerializerSettings) Applies the specified settings to the function delegate DefaultSettings . Declaration public static void ApplyToDefaultSettings(this XmlSerializerSettings settings) Parameters Type Name Description XmlSerializerSettings settings The XML serializer settings. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.XmlSerializerSettings.html": {
    "href": "api/core/Cuemon.Serialization.Xml.XmlSerializerSettings.html",
    "title": "Class XmlSerializerSettings | Cuemon .NET Standard",
    "keywords": "Class XmlSerializerSettings Specifies options that is related to XmlSerializer operations. Inheritance System.Object XmlSerializerSettings Namespace : Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Syntax public class XmlSerializerSettings Constructors | Improve this Doc XmlSerializerSettings() Initializes a new instance of the XmlSerializerSettings class. Declaration public XmlSerializerSettings() Remarks The following table shows the initial property values for an instance of DefaultXmlConverter . Property Initial Value Reader CreateSettings(Action<XmlReaderSettings>) Writer CreateSettings(Action<XmlWriterSettings>) Converters System.Collections.Generic.List<T> RootName null Properties | Improve this Doc Converters Gets or sets a XmlConverter collection that will be used during serialization. Declaration public IList<XmlConverter> Converters { get; } Property Value Type Description System.Collections.Generic.IList < XmlConverter > The converters that will be used during serialization. | Improve this Doc Reader Gets or sets the System.Xml.XmlReaderSettings to support the XmlSerializer . Declaration public XmlReaderSettings Reader { get; set; } Property Value Type Description System.Xml.XmlReaderSettings A System.Xml.XmlReaderSettings instance that specifies a set of features to support the XmlSerializer object. | Improve this Doc RootName Gets or sets the name of the XML root element. Declaration public XmlQualifiedEntity RootName { get; set; } Property Value Type Description XmlQualifiedEntity The name of the XML root element. | Improve this Doc Writer Gets or sets the System.Xml.XmlWriterSettings to support the XmlSerializer . Declaration public XmlWriterSettings Writer { get; set; } Property Value Type Description System.Xml.XmlWriterSettings A System.Xml.XmlWriterSettings instance that specifies a set of features to support the XmlSerializer object. Extension Methods XmlSerializerSettingsExtensions.ApplyToDefaultSettings(XmlSerializerSettings) ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.SecurityToken.html": {
    "href": "api/core/Cuemon.Security.SecurityToken.html",
    "title": "Class SecurityToken | Cuemon .NET Standard",
    "keywords": "Class SecurityToken Represents a simple security token schematic. Inheritance System.Object SecurityToken Namespace : Cuemon.Security Assembly : Cuemon.Security.dll Syntax public sealed class SecurityToken Properties | Improve this Doc HasExpired Gets a value indicating whether this SecurityToken has expired. Declaration public bool HasExpired { get; } Property Value Type Description System.Boolean true if this SecurityToken has expired; otherwise, false . | Improve this Doc Settings Gets the settings applied to this SecurityToken . Declaration public SecurityTokenSettings Settings { get; } Property Value Type Description SecurityTokenSettings The settings applied to this SecurityToken . | Improve this Doc Token Gets the token of this SecurityToken . Declaration public string Token { get; } Property Value Type Description System.String | Improve this Doc UtcCreated Gets the UTC date time value from when this instance was created. Declaration public DateTime UtcCreated { get; } Property Value Type Description System.DateTime Methods | Improve this Doc Create(SecurityTokenSettings) Creates and returns a new SecurityToken from the specified settings . Declaration public static SecurityToken Create(SecurityTokenSettings settings) Parameters Type Name Description SecurityTokenSettings settings The settings to apply to the SecurityToken instance. Returns Type Description SecurityToken A new SecurityToken instance. | Improve this Doc CreateSettings() Specifies a set of features to apply on the SecurityToken object. Declaration public static SecurityTokenSettings CreateSettings() Returns Type Description SecurityTokenSettings A SecurityTokenSettings instance that specifies a set of features to apply the SecurityToken object. Remarks The following table shows the initial property values for an instance of SecurityTokenSettings . Property Initial Value LengthOfToken 24 Reference Empty ( \"\" ). TimeToLive 15 seconds | Improve this Doc CreateSettings(TimeSpan) Specifies a set of features to apply on the SecurityToken object. Declaration public static SecurityTokenSettings CreateSettings(TimeSpan timeToLive) Parameters Type Name Description System.TimeSpan timeToLive The amount of time this token remains usable. Returns Type Description SecurityTokenSettings A SecurityTokenSettings instance that specifies a set of features to apply on the SecurityToken object. | Improve this Doc CreateSettings(TimeSpan, Int32) Specifies a set of features to apply on the SecurityToken object. Declaration public static SecurityTokenSettings CreateSettings(TimeSpan timeToLive, int lengthOfToken) Parameters Type Name Description System.TimeSpan timeToLive The amount of time this token remains usable. System.Int32 lengthOfToken The length of the random generated token. Returns Type Description SecurityTokenSettings A SecurityTokenSettings instance that specifies a set of features to apply on the SecurityToken object. | Improve this Doc CreateSettings(TimeSpan, Int32, String) Specifies a set of features to apply on the SecurityToken object. Declaration public static SecurityTokenSettings CreateSettings(TimeSpan timeToLive, int lengthOfToken, string reference) Parameters Type Name Description System.TimeSpan timeToLive The amount of time this token remains usable. System.Int32 lengthOfToken The length of the random generated token. System.String reference The reference of this token. Returns Type Description SecurityTokenSettings A SecurityTokenSettings instance that specifies a set of features to apply on the SecurityToken object. | Improve this Doc CreateSettings(TimeSpan, String) Specifies a set of features to apply on the SecurityToken object. Declaration public static SecurityTokenSettings CreateSettings(TimeSpan timeToLive, string reference) Parameters Type Name Description System.TimeSpan timeToLive The amount of time this token remains usable. System.String reference The reference of this token. Returns Type Description SecurityTokenSettings A SecurityTokenSettings instance that specifies a set of features to apply on the SecurityToken object. | Improve this Doc Equals(SecurityToken) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(SecurityToken other) Parameters Type Name Description SecurityToken other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() | Improve this Doc Parse(String) Converts the System.String representation to its SecurityToken equivalent. Declaration public static SecurityToken Parse(string securityToken) Parameters Type Name Description System.String securityToken The SecurityToken equivalent created by ToString() . Returns Type Description SecurityToken A SecurityToken instance. | Improve this Doc ToString() Returns a System.String that represents this instance in the following format: ttl;created;token;. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance in the following format: ttl;created;token;. Overrides System.Object.ToString() Operators | Improve this Doc Equality(SecurityToken, SecurityToken) Indicates whether two SecurityToken instances are equal. Declaration public static bool operator ==(SecurityToken token1, SecurityToken token2) Parameters Type Name Description SecurityToken token1 The first token to compare. SecurityToken token2 The second token to compare. Returns Type Description System.Boolean true if the values of token1 and token2 are equal; otherwise, false. | Improve this Doc Inequality(SecurityToken, SecurityToken) Indicates whether two SecurityToken instances are not equal. Declaration public static bool operator !=(SecurityToken token1, SecurityToken token2) Parameters Type Name Description SecurityToken token1 The first token to compare. SecurityToken token2 The second token to compare. Returns Type Description System.Boolean true if the values of token1 and token2 are not equal; otherwise, false. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Caching.CachingManager.html": {
    "href": "api/core/Cuemon.Runtime.Caching.CachingManager.html",
    "title": "Class CachingManager | Cuemon .NET Standard",
    "keywords": "Class CachingManager Provides access to caching in an application. Inheritance System.Object CachingManager Namespace : Cuemon.Runtime.Caching Assembly : Cuemon.Runtime.Caching.dll Syntax public static class CachingManager Properties | Improve this Doc Cache Gets a collection of cached objects for the current application domain. Declaration public static CacheCollection Cache { get; } Property Value Type Description CacheCollection A collection of cached objects for the current application domain. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Caching.CacheEventArgs.html": {
    "href": "api/core/Cuemon.Runtime.Caching.CacheEventArgs.html",
    "title": "Class CacheEventArgs | Cuemon .NET Standard",
    "keywords": "Class CacheEventArgs Provides data for cache related operations. This class cannot be inherited. Inheritance System.Object System.EventArgs CacheEventArgs Inherited Members System.EventArgs.Empty Namespace : Cuemon.Runtime.Caching Assembly : Cuemon.Runtime.Caching.dll Syntax public sealed class CacheEventArgs : EventArgs Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Cuemon .NET Standard at Github.IO | Cuemon .NET Standard",
    "keywords": ""
  },
  "api/core/index.html": {
    "href": "api/core/index.html",
    "title": "Cuemon.Core | Cuemon .NET Standard",
    "keywords": "Cuemon.Core The Cuemon.Core family consist of 23 assemblies, where 16 of them are built for .NET Standard 1.4 and live side by side in the Cuemon.Core.Package . Current assembly version is 5.0.2018.250 . Say hello to the Cuemon.Core family Cuemon.Core.Package on NuGet (incl. release notes) This is all the assemblies of the Cuemon .NET Standard family. Cuemon.Collections.Specialized on NuGet (incl. release notes) The Cuemon.Collections.Specialized assembly is a member of the Cuemon .NET Standard family and provides enhancements to the System.Collections.Specialized assembly. Cuemon.Core on NuGet (incl. release notes) The Cuemon.Core assembly is the patriarch of the Cuemon .NET Standard family and provides fundamental-, utility- and base-classes that define commonly-used value and reference data types, events and event handlers, interfaces, attribute, and feature rich delegates to greatly support functional programming. Cuemon.Data on NuGet (incl. release notes) The Cuemon.Data assembly is a member of the Cuemon .NET Core family and provides enhancements to the System.Data namespace. Cuemon.Data.XmlClient on NuGet (incl. release notes) The Cuemon.Data.XmlClient assembly is a member of the Cuemon .NET Standard family and provides enhancements to the Cuemon.Data namespace. Cuemon.Integrity on NuGet (incl. release notes) The Cuemon.Integrity assembly is a member of the Cuemon .NET Standard family and provides a way to represent cacheable data-centric content that can be validated by cache-aware applications. Cuemon.IO on NuGet (incl. release notes) The Cuemon.IO assembly is a member of the Cuemon .NET Standard family and provides enhancements to the System.IO namespace. Cuemon.Net on NuGet (incl. release notes) The Cuemon.Net assembly is a member of the Cuemon .NET Standard family and provides enhancements to the System.Net namespace and among those a versatile HttpManager that transparently promotes the HttpClient. Cuemon.Reflection on NuGet (incl. release notes) The Cuemon.Reflection assembly is a member of the Cuemon .NET Standard family and provides enhancements to the System.Reflection namespace. Cuemon.Runtime on NuGet (incl. release notes) The Cuemon.Runtime assembly is a member of the Cuemon .NET Core family and provides enhancements to the System.Runtime namespace. Cuemon.Runtime.Caching on NuGet (incl. release notes) The Cuemon.Runtime.Caching assembly is a member of the Cuemon .NET Standard family and provides a versatile way to gain access to caching in an application. Cuemon.Security on NuGet (incl. release notes) The Cuemon.Security assembly is a member of the Cuemon .NET Standard family and provides enhancements to the System.Security namespace. Cuemon.Serialization on NuGet (incl. release notes) The Cuemon.Serialization assembly is a member of the Cuemon .NET Standard family and provides generic base classes for serialization. Cuemon.Serialization.Xml on NuGet (incl. release notes) The Cuemon.Serialization.Xml assembly is a member of the Cuemon .NET Standard family and provides XML serialization. Cuemon.Threading on NuGet (incl. release notes) The Cuemon.Threading assembly is a member of the Cuemon .NET Standard family and provides enhancements to the System.Threading namespace. Cuemon.Web on NuGet (incl. release notes) The Cuemon.Web assembly is a member of the Cuemon .NET Standard family and provides enhancements to the now deprecated System.Web namespace. Cuemon.Xml on NuGet (incl. release notes) The Cuemon.Xml assembly is a member of the Cuemon .NET Standard family and provides enhancements to the System.Xml namespace. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/index.html": {
    "href": "api/aspnetcore/index.html",
    "title": "Cuemon.AspNetCore | Cuemon .NET Standard",
    "keywords": "Cuemon.AspNetCore The Cuemon.AspNetCore family derives from the Cuemon.Core family and consist of 5 assemblies - all built for .NET Standard 2.0 living side by side in the Cuemon.AspNetCore.Package . Current assembly version is 5.0.2018.250 . Say hello to the Cuemon.AspNetCore family Cuemon.AspNetCore.Package on NuGet (incl. release notes) This is all the assemblies of the Cuemon ASP.NET Core family - and it is the recommended way of installing. Cuemon.AspNetCore on NuGet (incl. release notes) The Cuemon.AspNetCore assembly provides enhacements to the Microsoft ASP.NET Core. Cuemon.AspNetCore.Authentication on NuGet (incl. release notes) The Cuemon.AspNetCore.Authentication assembly is a supplement to the Microsoft ASP.NET Core Authentication. Cuemon.AspNetCore.Mvc on NuGet (incl. release notes) The Cuemon.AspNetCore.Mvc assembly is a supplement to the Microsoft ASP.NET Core MVC. Cuemon.AspNetCore.Mvc.Formatters.Json on NuGet (incl. release notes) The Cuemon.AspNetCore.Mvc.Formatters.Json assembly is a supplement to the Microsoft ASP.NET Core MVC. Cuemon.AspNetCore.Mvc.Formatters.Xml on NuGet (incl. release notes) The Cuemon.AspNetCore.Mvc.Formatters.Xml assembly is a supplement to the Microsoft ASP.NET Core MVC. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/mailcore/index.html": {
    "href": "api/mailcore/index.html",
    "title": "Cuemon.Net.Mail | Cuemon .NET Standard",
    "keywords": "Cuemon.Net.Mail The Cuemon.Net.Mail assembly derives from the Cuemon.Core family but as a stand-alone assembly built for .NET Standard 2.0 . Current assembly version is 5.0.2018.250 . Say hello to Cuemon.Net.Mail Cuemon.Net.Mail on NuGet (incl. release notes) The Cuemon.Net.Mail assembly is a stand-alone member of the Cuemon .NET Standard family and provides ways to ship e-mails in batches. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/index.html": {
    "href": "api/jsoncore/index.html",
    "title": "Cuemon.Serialization.Json | Cuemon .NET Standard",
    "keywords": "Cuemon.Serialization.Json The Cuemon.Serialization.Json assembly derives from the Cuemon.Core family but as a stand-alone assembly built for .NET Standard 1.4 and is depending on the highly acclaimed Newtonsoft.Json package. Current assembly version is 5.0.2018.250 . Say hello to Cuemon.Serialization.Json Cuemon.Serialization.Jsone on NuGet (incl. release notes) The Cuemon.Serialization.Json assembly is a member of the Cuemon .NET Standard family and provides JSON serialization using the highly acclaimed Newtonsoft.Json package. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Infrastructure.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Infrastructure.html",
    "title": "Namespace Cuemon.AspNetCore.Infrastructure | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Infrastructure Assembly : Cuemon.AspNetCore.dll Classes ConfigurableMiddlewareCore<TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern. This API supports the product infrastructure and is not intended to be used directly from your code. MiddlewareCore Provides a base-class for middleware implementation in ASP.NET Core. This API supports the product infrastructure and is not intended to be used directly from your code. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Globalization.IMessageLocalizer.html": {
    "href": "api/core/Cuemon.Globalization.IMessageLocalizer.html",
    "title": "Interface IMessageLocalizer | Cuemon .NET Standard",
    "keywords": "Interface IMessageLocalizer Provides a generic way to support localized messages on attribute decorated methods. Namespace : Cuemon.Globalization Assembly : Cuemon.Core.dll Syntax public interface IMessageLocalizer Properties | Improve this Doc Message Gets or sets and explicit message string. Declaration string Message { get; set; } Property Value Type Description System.String This property is intended to be used for non-localizable messages. Use MessageResourceType and MessageResourceName for localizable messages. | Improve this Doc MessageResourceName Gets or sets the resource name (property name) to use as the key for lookups on the resource type. Declaration string MessageResourceName { get; set; } Property Value Type Description System.String Use this property to set the name of the property within MessageResourceType that will provide a localized message. | Improve this Doc MessageResourceType Gets or sets the resource type to use for message lookups. Declaration Type MessageResourceType { get; set; } Property Value Type Description System.Type Use this property only in conjunction with MessageResourceName . They are used together to retrieve localized messages at runtime. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.EventLogEntryType.html": {
    "href": "api/core/Cuemon.Diagnostics.EventLogEntryType.html",
    "title": "Enum EventLogEntryType | Cuemon .NET Standard",
    "keywords": "Enum EventLogEntryType Specifies the event type of an event log entry. Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public enum EventLogEntryType Fields Name Description Error An error event. This indicates a significant problem the user should know about; usually a loss of functionality or data. FailureAudit A failure audit event. This indicates a security event that occurs when an audited access attempt fails; for example, a failed attempt to open a file. Information An information event. This indicates a significant, successful operation. SuccessAudit A success audit event. This indicates a security event that occurs when an audited access attempt is successful; for example, logging on successfully. Warning A warning event. This indicates a problem that is not immediately significant, but that may signify conditions that could cause future problems. Extension Methods ByteConverterExtensions.ToByteArray<EventLogEntryType>() ConverterExtensions.ParseWith<EventLogEntryType, TResult>(Func<EventLogEntryType, TResult>) ConverterExtensions.ParseWith<EventLogEntryType, T, TResult>(Func<EventLogEntryType, T, TResult>, T) ConverterExtensions.ParseWith<EventLogEntryType, T1, T2, TResult>(Func<EventLogEntryType, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<EventLogEntryType, T1, T2, T3, TResult>(Func<EventLogEntryType, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<EventLogEntryType, T1, T2, T3, T4, TResult>(Func<EventLogEntryType, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<EventLogEntryType, T1, T2, T3, T4, T5, TResult>(Func<EventLogEntryType, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<EventLogEntryType, T1, T2, T3, T4, T5, T6, TResult>(Func<EventLogEntryType, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<EventLogEntryType, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<EventLogEntryType, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<EventLogEntryType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<EventLogEntryType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<EventLogEntryType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<EventLogEntryType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<EventLogEntryType>() DelegateUtilityExtensions.DynamicWrap<EventLogEntryType>() TweakerExtensions.Adjust<EventLogEntryType>(Func<EventLogEntryType, EventLogEntryType>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<EventLogEntryType>() WrapperExtensions.UseWrapper<EventLogEntryType>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<EventLogEntryType>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<EventLogEntryType>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DelegateUtilityExtensions.html": {
    "href": "api/core/Cuemon.DelegateUtilityExtensions.html",
    "title": "Class DelegateUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class DelegateUtilityExtensions This is an extension implementation of the most common methods on the DelegateUtility class. Inheritance System.Object DelegateUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DelegateUtilityExtensions Methods | Improve this Doc ConfigureOptions<TOptions>(Action<TOptions>) Provides a generic way to support the options pattern which enables using custom options classes to represent a group of related settings. Declaration public static TOptions ConfigureOptions<TOptions>(this Action<TOptions> setup) Parameters Type Name Description System.Action <TOptions> setup The delegate that will configure the public read-write properties of TOptions . Returns Type Description TOptions A default constructed instance of TOptions initialized with the options of setup . Type Parameters Name Description TOptions The type of the custom options class. | Improve this Doc DynamicWrap<TResult>(TResult) Provides a way to dynamically wrap a return value (typically from a property or field) inside an anonymous method. Declaration public static Func<TResult> DynamicWrap<TResult>(this TResult output) Parameters Type Name Description TResult output The value to dynamically wrap as a return value (typically from a property of field) inside an anonymous method. Returns Type Description System.Func <TResult> An anonymous method that returns the value of output . Type Parameters Name Description TResult The type of the return value of output . | Improve this Doc Wrap<TResult>(TResult) Provides an easy and reflection less way to get a value from a property that is delegate compatible (such as System.Func<TResult> and the likes thereof). Declaration public static TResult Wrap<TResult>(this TResult output) Parameters Type Name Description TResult output The return value of a member to be routed as output through this Wrap{TResult} method. Returns Type Description TResult The value from output . Type Parameters Name Description TResult The type of the return value of output . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.Converters.XmlConverterListExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.Converters.XmlConverterListExtensions.html",
    "title": "Class XmlConverterListExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlConverterListExtensions Extension methods for the System.Collections.Generic.IList<T> . Inheritance System.Object XmlConverterListExtensions Namespace : Cuemon.AspNetCore.Mvc.Formatters.Xml.Converters Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public static class XmlConverterListExtensions Methods | Improve this Doc AddCookieCollectionConverter(IList<XmlConverter>) Adds an Microsoft.AspNetCore.Http.IRequestCookieCollection XML converter to the list. Declaration public static void AddCookieCollectionConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddFormCollectionConverter(IList<XmlConverter>) Adds an Microsoft.AspNetCore.Http.IFormCollection XML converter to the list. Declaration public static void AddFormCollectionConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddHeaderDictionaryConverter(IList<XmlConverter>) Adds an Microsoft.AspNetCore.Http.IHeaderDictionary XML converter to the list. Declaration public static void AddHeaderDictionaryConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddQueryCollectionConverter(IList<XmlConverter>) Adds an Microsoft.AspNetCore.Http.IQueryCollection XML converter to the list. Declaration public static void AddQueryCollectionConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddStringValuesConverter(IList<XmlConverter>) Adds an Microsoft.Extensions.Primitives.StringValues XML converter to the list. Declaration public static void AddStringValuesConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.ListUtilityExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.ListUtilityExtensions.html",
    "title": "Class ListUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class ListUtilityExtensions This is an extension implementation of the most common methods on the ListUtility class. Inheritance System.Object ListUtilityExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class ListUtilityExtensions Methods | Improve this Doc HasIndex<TSource>(IList<TSource>, Int32) Determines whether the elements of the System.Collections.Generic.IList<T> is within the range of the index . Declaration public static bool HasIndex<TSource>(this IList<TSource> elements, int index) Parameters Type Name Description System.Collections.Generic.IList <TSource> elements The elements of the System.Collections.Generic.IList<T> . System.Int32 index The index to find. Returns Type Description System.Boolean true if the specified index is within the range of the elements ; otherwise, false . Type Parameters Name Description TSource The type of elements in the System.Collections.Generic.IList<T> . Exceptions Type Condition System.ArgumentNullException elements is null. | Improve this Doc Next<TSource>(IList<TSource>, Int32) Returns the next element of elements relative to index , or the last element of elements if index is equal or greater than System.Collections.Generic.ICollection<T>.Count . Declaration public static TSource Next<TSource>(this IList<TSource> elements, int index) Parameters Type Name Description System.Collections.Generic.IList <TSource> elements The elements, relative to index , to return the next element of. System.Int32 index The index of which to advance to the next element from. Returns Type Description TSource default(TSource) if index is equal or greater than System.Collections.Generic.ICollection<T>.Count ; otherwise the next element of elements relative to index . Type Parameters Name Description TSource The type of elements in the System.Collections.Generic.IList<T> . Exceptions Type Condition System.ArgumentOutOfRangeException index is less than 0. | Improve this Doc Previous<TSource>(IList<TSource>, Int32) Returns the previous element of elements relative to index , or the first or last element of elements if index is equal, greater or lower than System.Collections.Generic.ICollection<T>.Count . Declaration public static TSource Previous<TSource>(this IList<TSource> elements, int index) Parameters Type Name Description System.Collections.Generic.IList <TSource> elements The elements, relative to index , to return the previous element of. System.Int32 index The index of which to advance to the previous element from. Returns Type Description TSource default(TSource) if index is equal, greater or lower than System.Collections.Generic.ICollection<T>.Count ; otherwise the previous element of elements relative to index . Type Parameters Name Description TSource The type of elements in the System.Collections.Generic.IList<T> . Exceptions Type Condition System.ArgumentOutOfRangeException index is less than 0. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.DataPairDictionary.html": {
    "href": "api/core/Cuemon.Collections.DataPairDictionary.html",
    "title": "Class DataPairDictionary | Cuemon .NET Standard",
    "keywords": "Class DataPairDictionary Provides a collection of DataPair . Inheritance System.Object System.Collections.Generic.Dictionary < System.String , DataPair > DataPairDictionary Implements System.Collections.Generic.IDictionary < System.String , DataPair > System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , DataPair >> System.Collections.Generic.IReadOnlyDictionary < System.String , DataPair > System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair < System.String , DataPair >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , DataPair >> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.Add(System.String, Cuemon.DataPair) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.Clear() System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.ContainsKey(System.String) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.ContainsValue(Cuemon.DataPair) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.Remove(System.String) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>>.Add(System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>>.Contains(System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>[], System.Int32) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>>.Remove(System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.Contains(System.Object) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.GetEnumerator() System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.Remove(System.Object) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.TryGetValue(System.String, Cuemon.DataPair) System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.Comparer System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.Count System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.Item[System.String] System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.Keys System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Cuemon.DataPair>>.IsReadOnly System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.IDictionary<System.String, Cuemon.DataPair>.Keys System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.IDictionary<System.String, Cuemon.DataPair>.Values System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.IReadOnlyDictionary<System.String, Cuemon.DataPair>.Keys System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.Generic.IReadOnlyDictionary<System.String, Cuemon.DataPair>.Values System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.ICollection.SyncRoot System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.IsFixedSize System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.IsReadOnly System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.Item[System.Object] System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.Keys System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.System.Collections.IDictionary.Values System.Collections.Generic.Dictionary<System.String, Cuemon.DataPair>.Values Namespace : Cuemon.Collections Assembly : Cuemon.Core.dll Syntax public class DataPairDictionary : Dictionary<string, DataPair>, IDictionary<string, DataPair>, ICollection<KeyValuePair<string, DataPair>>, IReadOnlyDictionary<string, DataPair>, IReadOnlyCollection<KeyValuePair<string, DataPair>>, IEnumerable<KeyValuePair<string, DataPair>>, IDictionary, ICollection, IEnumerable Constructors | Improve this Doc DataPairDictionary() Initializes a new instance of the DataPairDictionary class. Declaration public DataPairDictionary() Methods | Improve this Doc Add<T>(String, T) Adds a new DataPair<T> to the end of this DataPairDictionary . Declaration public void Add<T>(string name, T value) Parameters Type Name Description System.String name The name of the data pair. T value The value of the data pair. Type Parameters Name Description T The type of the data being added to this instance. | Improve this Doc Add<T>(String, T, Type) Adds a new DataPair<T> to the end of this DataPairDictionary . Declaration public void Add<T>(string name, T value, Type typeOf) Parameters Type Name Description System.String name The name of the data pair. T value The value of the data pair. System.Type typeOf The type of the data pair. Type Parameters Name Description T The type of the data being added to this instance. Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) DictionaryConverterExtensions.ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) DictionaryConverterExtensions.ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<IEnumerable<TKey>, TKey>, out TValue) DictionaryUtilityExtensions.FirstMatchOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey[]) DictionaryUtilityExtensions.AddIfNotContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) DictionaryUtilityExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) EnumerableConverterExtensions.ToEnumerable<TKey, TValue>(IDictionary<TKey, TValue>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.DataPairCollection.html": {
    "href": "api/core/Cuemon.Collections.DataPairCollection.html",
    "title": "Class DataPairCollection | Cuemon .NET Standard",
    "keywords": "Class DataPairCollection Provides a collection of DataPair . Inheritance System.Object System.Collections.ObjectModel.Collection < DataPair > DataPairCollection Implements System.Collections.Generic.IList < DataPair > System.Collections.Generic.ICollection < DataPair > System.Collections.Generic.IReadOnlyList < DataPair > System.Collections.Generic.IReadOnlyCollection < DataPair > System.Collections.Generic.IEnumerable < DataPair > System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.Add(Cuemon.DataPair) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.Clear() System.Collections.ObjectModel.Collection<Cuemon.DataPair>.ClearItems() System.Collections.ObjectModel.Collection<Cuemon.DataPair>.Contains(Cuemon.DataPair) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.CopyTo(Cuemon.DataPair[], System.Int32) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.GetEnumerator() System.Collections.ObjectModel.Collection<Cuemon.DataPair>.IndexOf(Cuemon.DataPair) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.Insert(System.Int32, Cuemon.DataPair) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.InsertItem(System.Int32, Cuemon.DataPair) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.Remove(Cuemon.DataPair) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.RemoveAt(System.Int32) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.RemoveItem(System.Int32) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.SetItem(System.Int32, Cuemon.DataPair) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.Collection<Cuemon.DataPair>.Count System.Collections.ObjectModel.Collection<Cuemon.DataPair>.Item[System.Int32] System.Collections.ObjectModel.Collection<Cuemon.DataPair>.Items System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.Generic.ICollection<Cuemon.DataPair>.IsReadOnly System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.IsFixedSize System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.Collection<Cuemon.DataPair>.System.Collections.IList.Item[System.Int32] Namespace : Cuemon.Collections Assembly : Cuemon.Core.dll Syntax public class DataPairCollection : Collection<DataPair>, IList<DataPair>, ICollection<DataPair>, IReadOnlyList<DataPair>, IReadOnlyCollection<DataPair>, IEnumerable<DataPair>, IList, ICollection, IEnumerable Constructors | Improve this Doc DataPairCollection() Initializes a new instance of the DataPairCollection class. Declaration public DataPairCollection() Methods | Improve this Doc Add<T>(String, T) Adds a new DataPair<T> to the end of this DataPairCollection . Declaration public void Add<T>(string name, T value) Parameters Type Name Description System.String name The name of the data pair. T value The value of the data pair. Type Parameters Name Description T The type of the data being added to this instance. | Improve this Doc Add<T>(String, T, Type) Adds a new DataPair<T> to the end of this DataPairCollection . Declaration public void Add<T>(string name, T value, Type typeOf) Parameters Type Name Description System.String name The name of the data pair. T value The value of the data pair. System.Type typeOf The type of the data pair. Type Parameters Name Description T The type of the data being added to this instance. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) ListUtilityExtensions.HasIndex<TSource>(IList<TSource>, Int32) ListUtilityExtensions.Next<TSource>(IList<TSource>, Int32) ListUtilityExtensions.Previous<TSource>(IList<TSource>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc Assembly : Cuemon.AspNetCore.Mvc.dll Classes ApplicationBuilderExtensions Extension methods for the Microsoft.AspNetCore.Builder.IApplicationBuilder interface. Breadcrumb Represents a breadcrumb that can be used for navigation purposes on a website. ExceptionDescriptorResult An Microsoft.AspNetCore.Mvc.ObjectResult that when executed will produce a response that varies depending on the encapsulated System.Exception . SeeOtherResult An Microsoft.AspNetCore.Mvc.ActionResult that returns a SeeOther (303) response with a Location header to the supplied URL. ViewDataDictionaryExtensions Extension methods for the Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary class. Experimental. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.CacheableObjectResultExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.CacheableObjectResultExtensions.html",
    "title": "Class CacheableObjectResultExtensions | Cuemon .NET Standard",
    "keywords": "Class CacheableObjectResultExtensions Extension methods for operations related to the ICacheableObjectResult interface. Inheritance System.Object CacheableObjectResultExtensions Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public static class CacheableObjectResultExtensions Methods | Improve this Doc ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) Encapsulates the specified instance within a ContentBasedObjectResult<T> . Declaration public static ICacheableObjectResult ToCacheableObjectResult<T>(this T instance, byte[] checksum, Action<ContentBasedOptions> setup = null) Parameters Type Name Description T instance The instance to make cacheable. System.Byte [] checksum The checksum that defines the data integrity of instance . System.Action < ContentBasedOptions > setup The ContentBasedOptions which need to be configured. Returns Type Description ICacheableObjectResult An ICacheableObjectResult implementation. Type Parameters Name Description T The type of the object to make cacheable. | Improve this Doc ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) Encapsulates the specified instance within a TimeBasedObjectResult<T> . Declaration public static ICacheableObjectResult ToCacheableObjectResult<T>(this T instance, DateTime created, Action<TimeBasedOptions> setup = null) Parameters Type Name Description T instance The instance to make cacheable. System.DateTime created The value from when data the instance represents was first created, expressed as the Coordinated Universal Time (UTC). System.Action < TimeBasedOptions > setup The TimeBasedOptions which need to be configured. Returns Type Description ICacheableObjectResult An ICacheableObjectResult implementation. Type Parameters Name Description T The type of the object to make cacheable. | Improve this Doc ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) Encapsulates the specified instance within a ContentTimeBasedObjectResult<T> . Declaration public static ICacheableObjectResult ToCacheableObjectResult<T>(this T instance, DateTime created, byte[] checksum, Action<ContentTimeBasedOptions> setup = null) Parameters Type Name Description T instance The instance to make cacheable. System.DateTime created The value from when data the instance represents was first created, expressed as the Coordinated Universal Time (UTC). System.Byte [] checksum The checksum that defines the data integrity of instance . System.Action < ContentTimeBasedOptions > setup The ContentTimeBasedOptions which need to be configured. Returns Type Description ICacheableObjectResult An ICacheableObjectResult implementation. Type Parameters Name Description T The type of the object to make cacheable. | Improve this Doc ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) Encapsulates the specified instance within a ContentTimeBasedObjectResult<T> . Declaration public static ICacheableObjectResult ToCacheableObjectResult<T>(this T instance, DateTime created, Func<T, byte[]> checksumProvider, Action<ContentTimeBasedOptions> setup = null) Parameters Type Name Description T instance The instance to make cacheable. System.DateTime created The value from when data the instance represents was first created, expressed as the Coordinated Universal Time (UTC). System.Func <T, System.Byte []> checksumProvider The function delegate that resolves a checksum that defines the data integrity of instance . System.Action < ContentTimeBasedOptions > setup The ContentTimeBasedOptions which need to be configured. Returns Type Description ICacheableObjectResult An ICacheableObjectResult implementation. Type Parameters Name Description T The type of the object to make cacheable. | Improve this Doc ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) Encapsulates the specified instance within a ContentBasedObjectResult<T> . Declaration public static ICacheableObjectResult ToCacheableObjectResult<T>(this T instance, Func<T, byte[]> checksumProvider, Action<ContentBasedOptions> setup = null) Parameters Type Name Description T instance The instance to make cacheable. System.Func <T, System.Byte []> checksumProvider The function delegate that resolves a checksum that defines the data integrity of instance . System.Action < ContentBasedOptions > setup The ContentBasedOptions which need to be configured. Returns Type Description ICacheableObjectResult An ICacheableObjectResult implementation. Type Parameters Name Description T The type of the object to make cacheable. | Improve this Doc ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) Encapsulates the specified instance within a TimeBasedObjectResult<T> . Declaration public static ICacheableObjectResult ToCacheableObjectResult<T>(this T instance, Func<T, DateTime> createdProvider, Action<TimeBasedOptions> setup = null) Parameters Type Name Description T instance The instance to make cacheable. System.Func <T, System.DateTime > createdProvider The function delegate that resolves a value from when data the instance represents was first created, expressed as the Coordinated Universal Time (UTC). System.Action < TimeBasedOptions > setup The TimeBasedOptions which need to be configured. Returns Type Description ICacheableObjectResult An ICacheableObjectResult implementation. Type Parameters Name Description T The type of the object to make cacheable. | Improve this Doc ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) Encapsulates the specified instance within a ContentTimeBasedObjectResult<T> . Declaration public static ICacheableObjectResult ToCacheableObjectResult<T>(this T instance, Func<T, DateTime> createdProvider, byte[] checksum, Action<ContentTimeBasedOptions> setup = null) Parameters Type Name Description T instance The instance to make cacheable. System.Func <T, System.DateTime > createdProvider The function delegate that resolves a value from when data the instance represents was first created, expressed as the Coordinated Universal Time (UTC). System.Byte [] checksum The checksum that defines the data integrity of instance . System.Action < ContentTimeBasedOptions > setup The ContentTimeBasedOptions which need to be configured. Returns Type Description ICacheableObjectResult An ICacheableObjectResult implementation. Type Parameters Name Description T The type of the object to make cacheable. | Improve this Doc ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) Encapsulates the specified instance within a ContentTimeBasedObjectResult<T> . Declaration public static ICacheableObjectResult ToCacheableObjectResult<T>(this T instance, Func<T, DateTime> createdProvider, Func<T, byte[]> checksumProvider, Action<ContentTimeBasedOptions> setup = null) Parameters Type Name Description T instance The instance to make cacheable. System.Func <T, System.DateTime > createdProvider The function delegate that resolves a value from when data the instance represents was first created, expressed as the Coordinated Universal Time (UTC). System.Func <T, System.Byte []> checksumProvider The function delegate that resolves a checksum that defines the data integrity of instance . System.Action < ContentTimeBasedOptions > setup The ContentTimeBasedOptions which need to be configured. Returns Type Description ICacheableObjectResult An ICacheableObjectResult implementation. Type Parameters Name Description T The type of the object to make cacheable. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.CacheBustingOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.CacheBustingOptions.html",
    "title": "Class CacheBustingOptions | Cuemon .NET Standard",
    "keywords": "Class CacheBustingOptions Specifies options that is related to CacheBusting operations. Inheritance System.Object CacheBustingOptions AssemblyCacheBustingOptions DynamicCacheBustingOptions Namespace : Cuemon.AspNetCore.Mvc.Configuration Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class CacheBustingOptions Constructors | Improve this Doc CacheBustingOptions() Initializes a new instance of the CacheBustingOptions class. Declaration public CacheBustingOptions() Remarks The following table shows the initial property values for an instance of CacheBustingOptions . Property Initial Value PreferredCasing LowerCase Properties | Improve this Doc PreferredCasing Gets or sets the preferred casing to use on Version . Declaration public CasingMethod PreferredCasing { get; set; } Property Value Type Description CasingMethod The preferred casing to use on Version . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-9.html": {
    "href": "api/core/Cuemon.TesterFunc-9.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ConverterExtensions.html": {
    "href": "api/core/Cuemon.ConverterExtensions.html",
    "title": "Class ConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class ConverterExtensions This is an extension implementation of the Converter class. Inheritance System.Object ConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ConverterExtensions Methods | Improve this Doc As<TResult>(Object) Attempts to converts the specified value to a given type. If the conversion is not possible the result is set to default(TResult) . Declaration public static TResult As<TResult>(this object value) Parameters Type Name Description System.Object value The object to convert the underlying type. Returns Type Description TResult The value converted to the specified TResult . Type Parameters Name Description TResult The type of the result. | Improve this Doc As<TResult>(Object, TResult) Attempts to converts the specified value to a given type. If the conversion is not possible the result is set to resultOnConversionNotPossible . Declaration public static TResult As<TResult>(this object value, TResult resultOnConversionNotPossible) Parameters Type Name Description System.Object value The object to convert the underlying type. TResult resultOnConversionNotPossible The value to return if the conversion is not possible. Returns Type Description TResult The value converted to the specified TResult . Type Parameters Name Description TResult The type of the result. | Improve this Doc As<TResult>(Object, TResult, IFormatProvider) Attempts to converts the specified value to a given type. If the conversion is not possible the result is set to resultOnConversionNotPossible . Declaration public static TResult As<TResult>(this object value, TResult resultOnConversionNotPossible, IFormatProvider provider) Parameters Type Name Description System.Object value The object to convert the underlying type. TResult resultOnConversionNotPossible The value to return if the conversion is not possible. System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description TResult The value converted to the specified TResult . Type Parameters Name Description TResult The type of the result. | Improve this Doc ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this TSource source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . T8 arg8 The eighth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . T8 The type of the eighth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this TSource source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . T8 arg8 The eighth parameter of the function delegate converter . T9 arg9 The ninth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . T8 The type of the eighth parameter of the function delegate converter . T9 The type of the ninth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, TResult>(this TSource source, Func<TSource, TResult> converter) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, TResult> converter The function delegate that converts TSource to a TResult representation. Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T, TResult>(this TSource source, Func<TSource, T, TResult> converter, T arg) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T, TResult> converter The function delegate that converts TSource to a TResult representation. T arg The parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T The type of the parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T1, T2, TResult>(this TSource source, Func<TSource, T1, T2, TResult> converter, T1 arg1, T2 arg2) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T1, T2, T3, TResult>(this TSource source, Func<TSource, T1, T2, T3, TResult> converter, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T1, T2, T3, T4, TResult>(this TSource source, Func<TSource, T1, T2, T3, T4, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(this TSource source, Func<TSource, T1, T2, T3, T4, T5, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(this TSource source, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(this TSource source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.DictionaryExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | Cuemon .NET Standard",
    "keywords": "Class DictionaryExtensions Extension methods for the System.Collections.Generic.Dictionary<TKey, TValue> . Inheritance System.Object DictionaryExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class DictionaryExtensions Methods | Improve this Doc GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Gets the value associated with the specified key or default( TValue ) when the key does not exists in the dictionary . Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary to extend. TKey key The key of the value to get. Returns Type Description TValue Either the value associated with the specified key or default( TValue ) when the key does not exists. Type Parameters Name Description TKey The type of the keys in the dictionary . TValue The type of the values in the dictionary . | Improve this Doc GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) Gets the value associated with the specified key or a default value through defaultProvider when the key does not exists in the dictionary . Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TValue> defaultProvider) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary to extend. TKey key The key of the value to get. System.Func <TValue> defaultProvider The function delegate that will provide a default value when the key does not exists in the dictionary . Returns Type Description TValue Either the value associated with the specified key or a default value through defaultProvider when the key does not exists. Type Parameters Name Description TKey The type of the keys in the dictionary . TValue The type of the values in the dictionary . | Improve this Doc TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<IEnumerable<TKey>, TKey>, out TValue) Gets the value associated with the specified key . Declaration public static bool TryGetValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<IEnumerable<TKey>, TKey> keySelector, out TValue value) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary to extend. TKey key The key of the value to get. System.Func < System.Collections.Generic.IEnumerable <TKey>, TKey> keySelector The function delegate that will resolve an alternate key from the specified key . TValue value When this method returns, contains the value associated with the specified key or the alternate key resolved from keySelector , if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the dictionary contains an element with the specified key or the alternate key resolved from keySelector , false otherwise. Type Parameters Name Description TKey The type of the keys in the dictionary . TValue The type of the values in the dictionary . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Builder.ApplicationBuilderFactory.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Builder.ApplicationBuilderFactory.html",
    "title": "Class ApplicationBuilderFactory | Cuemon .NET Standard",
    "keywords": "Class ApplicationBuilderFactory Provides support for creating, using and configuring Middleware or ConfigurableMiddleware<TOptions> implementations. Inheritance System.Object ApplicationBuilderFactory Namespace : Cuemon.AspNetCore.Builder Assembly : Cuemon.AspNetCore.dll Syntax public static class ApplicationBuilderFactory Methods | Improve this Doc UseMiddleware<TMiddleware>(IApplicationBuilder) Adds a middleware type to the application request pipeline. Declaration public static IApplicationBuilder UseMiddleware<TMiddleware>(IApplicationBuilder builder) where TMiddleware : MiddlewareCore Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder builder The Microsoft.AspNetCore.Builder.IApplicationBuilder instance. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder The Microsoft.AspNetCore.Builder.IApplicationBuilder instance. Type Parameters Name Description TMiddleware The type of the middleware. | Improve this Doc UseMiddlewareConfigurable<TMiddleware, TOptions>(IApplicationBuilder, Action<TOptions>) Adds a configurable middleware type to the application request pipeline. Declaration public static IApplicationBuilder UseMiddlewareConfigurable<TMiddleware, TOptions>(IApplicationBuilder builder, Action<TOptions> setup = null) where TMiddleware : ConfigurableMiddlewareCore<TOptions> where TOptions : class, new() Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder builder The Microsoft.AspNetCore.Builder.IApplicationBuilder instance. System.Action <TOptions> setup The System.Action<T> which need to be configured. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder The Microsoft.AspNetCore.Builder.IApplicationBuilder instance. Type Parameters Name Description TMiddleware The type of the configurable middleware. TOptions The type of the delegate setup. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Configuration.IConfigurable-1.html": {
    "href": "api/core/Cuemon.Configuration.IConfigurable-1.html",
    "title": "Interface IConfigurable<TOptions> | Cuemon .NET Standard",
    "keywords": "Interface IConfigurable<TOptions> Provides a generic way to support the options pattern on a class level. Namespace : Cuemon.Configuration Assembly : Cuemon.Core.dll Syntax public interface IConfigurable<out TOptions> where TOptions : class, new() Type Parameters Name Description TOptions The type of the configured options. Properties | Improve this Doc Options Gets the configured options of this instance. Declaration TOptions Options { get; } Property Value Type Description TOptions The configured options of this instance. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-18.html": {
    "href": "api/core/Cuemon.Template-18.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Represents a Template with eighteen generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Arg17 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Arg16 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Arg15 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Arg14 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Arg13 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Arg12 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . T13 The type of the thirteenth parameter of this Template . T14 The type of the fourteenth parameter of this Template . T15 The type of the fifteenth parameter of this Template . T16 The type of the sixteenth parameter of this Template . T17 The type of the seventeenth parameter of this Template . T18 The type of the eighteenth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . T13 arg13 The value of the thirteenth parameter of this Template . T14 arg14 The value of the fourteenth parameter of this Template . T15 arg15 The value of the fifteenth parameter of this Template . T16 arg16 The value of the sixteenth parameter of this Template . T17 arg17 The value of the seventeenth parameter of this Template . T18 arg18 The value of the eighteenth parameter of this Template . Properties | Improve this Doc Arg18 Gets or sets the eighteenth parameter of this instance. Declaration public T18 Arg18 { get; set; } Property Value Type Description T18 The eighteenth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.CsvClient.CsvDataReader.html": {
    "href": "api/core/Cuemon.Data.CsvClient.CsvDataReader.html",
    "title": "Class CsvDataReader | Cuemon .NET Standard",
    "keywords": "Class CsvDataReader Provides a way of reading a forward-only stream of rows from a CSV based data source. This class cannot be inherited. Inheritance System.Object System.Data.Common.DbDataReader StringDataReader CsvDataReader Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable Inherited Members StringDataReader.Contains(String) StringDataReader.Item[String] StringDataReader.Item[Int32] StringDataReader.RecordsAffected StringDataReader.IsClosed StringDataReader.IsDisposed StringDataReader.StringParser StringDataReader.RowCount StringDataReader.FieldCount StringDataReader.ToString() StringDataReader.Read() StringDataReader.SetFields(IOrderedDictionary) StringDataReader.GetBoolean(Int32) StringDataReader.GetByte(Int32) StringDataReader.GetBytes(Int32, Int64, Byte[], Int32, Int32) StringDataReader.GetChar(Int32) StringDataReader.GetDateTime(Int32) StringDataReader.GetDecimal(Int32) StringDataReader.GetDouble(Int32) StringDataReader.GetFieldType(Int32) StringDataReader.GetFloat(Int32) StringDataReader.GetGuid(Int32) StringDataReader.GetInt16(Int32) StringDataReader.GetInt32(Int32) StringDataReader.GetInt64(Int32) StringDataReader.GetName(Int32) StringDataReader.GetOrdinal(String) StringDataReader.GetString(Int32) StringDataReader.GetValue(Int32) StringDataReader.IsDBNull(Int32) StringDataReader.Depth StringDataReader.GetValues(Object[]) StringDataReader.NextResult() StringDataReader.GetChars(Int32, Int64, Char[], Int32, Int32) StringDataReader.GetDataTypeName(Int32) StringDataReader.GetEnumerator() System.Data.Common.DbDataReader.Dispose() System.Data.Common.DbDataReader.GetData(System.Int32) System.Data.Common.DbDataReader.GetDbDataReader(System.Int32) System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32) System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[]) System.Data.Common.DbDataReader.GetStream(System.Int32) System.Data.Common.DbDataReader.GetTextReader(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.NextResultAsync() System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.ReadAsync() System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32) System.Data.Common.DbDataReader.System.Data.IDataReader.Close() System.Data.Common.DbDataReader.System.Data.IDataReader.GetSchemaTable() System.Data.Common.DbDataReader.VisibleFieldCount Namespace : Cuemon.Data.CsvClient Assembly : Cuemon.Data.dll Syntax public sealed class CsvDataReader : StringDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable Constructors | Improve this Doc CsvDataReader(StreamReader, String) Initializes a new instance of the CsvDataReader class. Declaration public CsvDataReader(StreamReader reader, string header) Parameters Type Name Description System.IO.StreamReader reader The System.IO.StreamReader object that contains the CSV data. System.String header The header defining the columns of the CSV data. Exceptions Type Condition System.ArgumentException header does not contain comma (\",\") as delimiter. System.ArgumentNullException reader is null -or- header is null. ArgumentEmptyException header is empty. | Improve this Doc CsvDataReader(StreamReader, String, String) Initializes a new instance of the CsvDataReader class. Declaration public CsvDataReader(StreamReader reader, string header, string delimiter) Parameters Type Name Description System.IO.StreamReader reader The System.IO.StreamReader object that contains the CSV data. System.String header The header defining the columns of the CSV data. System.String delimiter The delimiter specification. Remarks The default implementation uses comma (\",\") as delimiter . Exceptions Type Condition System.ArgumentException header does not contain the specified delimiter . System.ArgumentNullException reader is null -or- header is null -or- delimiter is null. ArgumentEmptyException header is empty -or- delimiter is empty. | Improve this Doc CsvDataReader(StreamReader, String, String, Func<String, Object>) Initializes a new instance of the CsvDataReader class. Declaration public CsvDataReader(StreamReader reader, string header, string delimiter, Func<string, object> parser) Parameters Type Name Description System.IO.StreamReader reader The System.IO.StreamReader object that contains the CSV data. System.String header The header defining the columns of the CSV data. System.String delimiter The delimiter specification. System.Func < System.String , System.Object > parser The function delegate that returns a primitive object whose value is equivalent to the provided System.String value. Remarks The default implementation uses FromString(String) as parser . Exceptions Type Condition System.ArgumentException header does not contain the specified delimiter . System.ArgumentNullException reader is null -or- header is null -or- delimiter is null -or- parser is null. ArgumentEmptyException header is empty -or- delimiter is empty. Properties | Improve this Doc Delimiter Gets the delimiter used to separate fields of this instance. Declaration public string Delimiter { get; } Property Value Type Description System.String The delimiter used to separate fields of this instance. | Improve this Doc HasRows Gets a value that indicates whether this System.Data.Common.DbDataReader contains one or more rows. Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean true if this instance has rows; otherwise, false . Overrides System.Data.Common.DbDataReader.HasRows | Improve this Doc Header Gets the header that defines the field names of this instance. Declaration public string[] Header { get; } Property Value Type Description System.String [] The header that defines the field names of this instance. Methods | Improve this Doc Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StringDataReader.Dispose(Boolean) | Improve this Doc ReadNext() Advances this instance to the next line of the CSV data source. Declaration protected override bool ReadNext() Returns Type Description System.Boolean true if there are more lines; otherwise, false . Overrides StringDataReader.ReadNext() Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable Extension Methods DataTransferExtensions.ToRows(IDataReader) DataTransferExtensions.ToColumns(IDataReader) ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Specialized.NameValueCollectionConverterExtensions.html": {
    "href": "api/core/Cuemon.Collections.Specialized.NameValueCollectionConverterExtensions.html",
    "title": "Class NameValueCollectionConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class NameValueCollectionConverterExtensions This is an extension implementation of the NameValueCollectionConverter class. Inheritance System.Object NameValueCollectionConverterExtensions Namespace : Cuemon.Collections.Specialized Assembly : Cuemon.Collections.Specialized.dll Syntax public static class NameValueCollectionConverterExtensions Methods | Improve this Doc ToDictionary(NameValueCollection) Creates a System.Collections.Generic.IDictionary<TKey, TValue> from the specified source . Declaration public static IDictionary<string, string[]> ToDictionary(this NameValueCollection source) Parameters Type Name Description System.Collections.Specialized.NameValueCollection source A System.Collections.Specialized.NameValueCollection to convert into an System.Collections.Generic.IDictionary<TKey, TValue> equivalent. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String []> A System.Collections.Generic.IDictionary<TKey, TValue> that is equivalent to the specified source . | Improve this Doc ToNameValueCollection(IDictionary<String, String[]>) Creates a System.Collections.Specialized.NameValueCollection from the specified source . Declaration public static NameValueCollection ToNameValueCollection(this IDictionary<string, string[]> source) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String []> source An System.Collections.Generic.IDictionary<TKey, TValue> to convert into an System.Collections.Specialized.NameValueCollection equivalent. Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection that is equivalent to the specified source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Specialized.NameValueCollectionConverter.html": {
    "href": "api/core/Cuemon.Collections.Specialized.NameValueCollectionConverter.html",
    "title": "Class NameValueCollectionConverter | Cuemon .NET Standard",
    "keywords": "Class NameValueCollectionConverter This utility class is designed to make System.Collections.Specialized.NameValueCollection related conversions easier to work with. Inheritance System.Object NameValueCollectionConverter Namespace : Cuemon.Collections.Specialized Assembly : Cuemon.Collections.Specialized.dll Syntax public static class NameValueCollectionConverter Methods | Improve this Doc FromDictionary(IDictionary<String, String[]>) Creates a System.Collections.Specialized.NameValueCollection from the specified source . Declaration public static NameValueCollection FromDictionary(IDictionary<string, string[]> source) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String []> source An System.Collections.Generic.IDictionary<TKey, TValue> to convert into an System.Collections.Specialized.NameValueCollection equivalent. Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection that is equivalent to the specified source . | Improve this Doc ToDictionary(NameValueCollection) Creates a System.Collections.Generic.IDictionary<TKey, TValue> from the specified source . Declaration public static IDictionary<string, string[]> ToDictionary(NameValueCollection source) Parameters Type Name Description System.Collections.Specialized.NameValueCollection source A System.Collections.Specialized.NameValueCollection to convert into an System.Collections.Generic.IDictionary<TKey, TValue> equivalent. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String []> A System.Collections.Generic.IDictionary<TKey, TValue> that is equivalent to the specified source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.HmacAlgorithmType.html": {
    "href": "api/core/Cuemon.Security.Cryptography.HmacAlgorithmType.html",
    "title": "Enum HmacAlgorithmType | Cuemon .NET Standard",
    "keywords": "Enum HmacAlgorithmType Specifies the algorithm used for generating hash-based message authentication code values. Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public enum HmacAlgorithmType Fields Name Description SHA1 The Hash-based Message Authentication Code using (SHA1) algorithm (160 bits). SHA256 The Hash-based Message Authentication Code using (SHA256) algorithm (256 bits). SHA384 The Hash-based Message Authentication Code using (SHA384) algorithm (384 bits). SHA512 The Hash-based Message Authentication Code using (SHA512) algorithm (512 bits). Extension Methods ByteConverterExtensions.ToByteArray<HmacAlgorithmType>() ConverterExtensions.ParseWith<HmacAlgorithmType, TResult>(Func<HmacAlgorithmType, TResult>) ConverterExtensions.ParseWith<HmacAlgorithmType, T, TResult>(Func<HmacAlgorithmType, T, TResult>, T) ConverterExtensions.ParseWith<HmacAlgorithmType, T1, T2, TResult>(Func<HmacAlgorithmType, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<HmacAlgorithmType, T1, T2, T3, TResult>(Func<HmacAlgorithmType, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<HmacAlgorithmType, T1, T2, T3, T4, TResult>(Func<HmacAlgorithmType, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<HmacAlgorithmType, T1, T2, T3, T4, T5, TResult>(Func<HmacAlgorithmType, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<HmacAlgorithmType, T1, T2, T3, T4, T5, T6, TResult>(Func<HmacAlgorithmType, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<HmacAlgorithmType, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<HmacAlgorithmType, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<HmacAlgorithmType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<HmacAlgorithmType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<HmacAlgorithmType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<HmacAlgorithmType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<HmacAlgorithmType>() DelegateUtilityExtensions.DynamicWrap<HmacAlgorithmType>() TweakerExtensions.Adjust<HmacAlgorithmType>(Func<HmacAlgorithmType, HmacAlgorithmType>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<HmacAlgorithmType>() WrapperExtensions.UseWrapper<HmacAlgorithmType>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<HmacAlgorithmType>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<HmacAlgorithmType>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ExceptionUtility.html": {
    "href": "api/core/Cuemon.ExceptionUtility.html",
    "title": "Class ExceptionUtility | Cuemon .NET Standard",
    "keywords": "Class ExceptionUtility This utility class is designed to make exception operations more flexible and easier to work with. Inheritance System.Object ExceptionUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ExceptionUtility Methods | Improve this Doc CreateArgumentEmptyException(String, String) Creates and returns a new ArgumentEmptyException initialized to the provided parameters. Declaration public static ArgumentEmptyException CreateArgumentEmptyException(string paramName, string message) Parameters Type Name Description System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Returns Type Description ArgumentEmptyException A new instance of ArgumentEmptyException initialized to the provided parameters. | Improve this Doc CreateArgumentException(String, String) Creates and returns a new System.ArgumentException initialized to the provided parameters. Declaration public static ArgumentException CreateArgumentException(string paramName, string message) Parameters Type Name Description System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Returns Type Description System.ArgumentException A new instance of System.ArgumentException initialized to the provided parameters. | Improve this Doc CreateArgumentException(String, String, Exception) Creates and returns a new System.ArgumentException initialized to the provided parameters. Declaration public static ArgumentException CreateArgumentException(string paramName, string message, Exception innerException) Parameters Type Name Description System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Returns Type Description System.ArgumentException A new instance of System.ArgumentException initialized to the provided parameters. | Improve this Doc CreateArgumentNullException(String, String) Creates and returns a new System.ArgumentNullException initialized to the provided parameters. Declaration public static ArgumentNullException CreateArgumentNullException(string paramName, string message) Parameters Type Name Description System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Returns Type Description System.ArgumentNullException A new instance of System.ArgumentNullException initialized to the provided parameters. | Improve this Doc CreateArgumentOutOfRangeException(String, String) Creates and returns a new System.ArgumentOutOfRangeException initialized to the provided parameters. Declaration public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, string message) Parameters Type Name Description System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Returns Type Description System.ArgumentOutOfRangeException A new instance of System.ArgumentOutOfRangeException initialized to the provided parameters. | Improve this Doc CreateTypeArgumentException(String, String) Creates and returns a new TypeArgumentException initialized to the provided parameters. Declaration public static TypeArgumentException CreateTypeArgumentException(string typeParamName, string message) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.String message A message that describes the error. Returns Type Description TypeArgumentException A new instance of TypeArgumentException initialized to the provided parameters. | Improve this Doc CreateTypeArgumentOutOfRangeException(String, String) Creates and returns a new TypeArgumentOutOfRangeException initialized to the provided parameters. Declaration public static TypeArgumentOutOfRangeException CreateTypeArgumentOutOfRangeException(string typeParamName, string message) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.String message A message that describes the error. Returns Type Description TypeArgumentOutOfRangeException A new instance of TypeArgumentOutOfRangeException initialized to the provided parameters. | Improve this Doc Flatten(Exception) Flattens any inner exceptions descendant-or-self from the specified exception into an System.Collections.Generic.IEnumerable<T> sequence of exceptions. Declaration public static IEnumerable<Exception> Flatten(Exception exception) Parameters Type Name Description System.Exception exception The exception to flatten. Returns Type Description System.Collections.Generic.IEnumerable < System.Exception > An empty System.Collections.Generic.IEnumerable<T> sequence if no inner exceptions was specified; otherwise any inner exceptions rooted to the specified exception as well as it's descendants. Remarks If any inner exceptions are referenced this method will iterative flatten all of them descendant-or-self from the specified exception . Should the exception be of the new AggregateException type introduced with .NET 4.0, the return sequence of this method will be equal to the result of the InnerExceptions property. Exceptions Type Condition System.ArgumentNullException exception is null. | Improve this Doc Flatten(Exception, Type) Flattens any inner exceptions descendant-or-self from the specified exception into an System.Collections.Generic.IEnumerable<T> sequence of exceptions. Declaration public static IEnumerable<Exception> Flatten(Exception exception, Type exceptionType) Parameters Type Name Description System.Exception exception The exception to flatten. System.Type exceptionType The type of the specified exception . Returns Type Description System.Collections.Generic.IEnumerable < System.Exception > An empty System.Collections.Generic.IEnumerable<T> sequence if no inner exceptions was referenced; otherwise any inner exceptions descendant-or-self from the specified exception . Remarks If any inner exceptions are referenced this method will iterative flatten all of them descendant-or-self from the specified exception . Should the exception be of the new AggregateException type introduced with .NET 4.0, the return sequence of this method will be equal to the result of the InnerExceptions property. Exceptions Type Condition System.ArgumentNullException exception -or exceptionType is null. | Improve this Doc Parse<TResult>(IEnumerable<Exception>) Parses the specified exceptions for a match on TResult . Declaration public static TResult Parse<TResult>(IEnumerable<Exception> exceptions) where TResult : Exception Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Exception > exceptions A sequence of exceptions to parse for a match on TResult . Returns Type Description TResult The first matched System.Exception of TResult from the sequence of exceptions or null if no match could be resolved. Type Parameters Name Description TResult The type of the System.Exception to find a match within exceptions . Exceptions Type Condition System.ArgumentNullException exceptions is null. | Improve this Doc Parse<TResult>(Exception) Parses the specified exception for a match on TResult . Declaration public static TResult Parse<TResult>(Exception exception) where TResult : Exception Parameters Type Name Description System.Exception exception The exception to parse for a match on TResult . Returns Type Description TResult The matched exception cast as TResult or null if no match could be resolved. Type Parameters Name Description TResult The type of the exception to find a match on. Exceptions Type Condition System.ArgumentNullException exception is null. | Improve this Doc Refine(Exception, MethodDescriptor, Object[]) Refines the specified exception with valuable meta information extracted from the associated method and parameters . Declaration public static MethodWrappedException Refine(Exception exception, MethodDescriptor method, params object[] parameters) Parameters Type Name Description System.Exception exception The exception that needs to be thrown. MethodDescriptor method The method signature containing valuable meta information. System.Object [] parameters The optional parameters to accompany method . Returns Type Description MethodWrappedException The specified exception refined with valuable meta information within a MethodWrappedException . Exceptions Type Condition System.ArgumentNullException exception is null - or - method is null. | Improve this Doc Refine(Exception, MethodBase, Object[]) Refines the specified exception with valuable meta information extracted from the associated method and parameters . Declaration public static MethodWrappedException Refine(Exception exception, MethodBase method, params object[] parameters) Parameters Type Name Description System.Exception exception The exception that needs to be thrown. System.Reflection.MethodBase method The method to extract valuable meta information from. System.Object [] parameters The optional parameters to accompany method . Returns Type Description MethodWrappedException The specified exception refined with valuable meta information within a MethodWrappedException . Exceptions Type Condition System.ArgumentNullException exception is null - or - method is null. | Improve this Doc Unwrap(MethodWrappedException) Unwraps the specified wrappedException and returns the originating exception. Declaration public static Exception Unwrap(MethodWrappedException wrappedException) Parameters Type Name Description MethodWrappedException wrappedException The wrapped exception to unwrap. Returns Type Description System.Exception The originating exception from within MethodWrappedException . Exceptions Type Condition System.ArgumentNullException wrappedException is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.AssemblyCacheBusting.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.AssemblyCacheBusting.html",
    "title": "Class AssemblyCacheBusting | Cuemon .NET Standard",
    "keywords": "Class AssemblyCacheBusting Provides cache-busting capabilities from an Assembly. This class cannot be inherited. Inheritance System.Object CacheBusting AssemblyCacheBusting Implements ICacheBusting Namespace : Cuemon.AspNetCore.Mvc.Configuration Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public sealed class AssemblyCacheBusting : CacheBusting, ICacheBusting Constructors | Improve this Doc AssemblyCacheBusting(IOptions<AssemblyCacheBustingOptions>) Initializes a new instance of the AssemblyCacheBusting class. Declaration public AssemblyCacheBusting(IOptions<AssemblyCacheBustingOptions> setup) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < AssemblyCacheBustingOptions > setup The AssemblyCacheBustingOptions which need to be configured. Properties | Improve this Doc Version Gets the version to be a part of the link you need cache-busting compatible. Declaration public override string Version { get; } Property Value Type Description System.String The version to be a part of the link you need cache-busting compatible. Overrides CacheBusting.Version Implements ICacheBusting Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also CacheBusting (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.CorrelationIdentifierOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.CorrelationIdentifierOptions.html",
    "title": "Class CorrelationIdentifierOptions | Cuemon .NET Standard",
    "keywords": "Class CorrelationIdentifierOptions Configuration options for CorrelationIdentifierMiddleware . Inheritance System.Object CorrelationIdentifierOptions Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public class CorrelationIdentifierOptions Constructors | Improve this Doc CorrelationIdentifierOptions() Initializes a new instance of the CorrelationIdentifierOptions class. Declaration public CorrelationIdentifierOptions() Remarks The following table shows the initial property values for an instance of CorrelationIdentifierOptions . Property Initial Value HeaderName X-Correlation-ID CorrelationProvider DynamicCorrelation.Create(Guid.NewGuid().ToString(\"N\") Properties | Improve this Doc CorrelationProvider Gets or sets the function delegate that provides the correlation implementation. Declaration public Func<ICorrelation> CorrelationProvider { get; set; } Property Value Type Description System.Func < ICorrelation > The function delegate that provides the correlation implementation. | Improve this Doc HeaderName Gets or sets the name of the correlation identifier HTTP header. Declaration public string HeaderName { get; set; } Property Value Type Description System.String The name of the correlation identifier HTTP header. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Builder.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Builder.html",
    "title": "Namespace Cuemon.AspNetCore.Builder | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Builder Assembly : Cuemon.AspNetCore.dll Classes ApplicationBuilderFactory Provides support for creating, using and configuring Middleware or ConfigurableMiddleware<TOptions> implementations. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Web.JsonWebTokenHashAlgorithm.html": {
    "href": "api/core/Cuemon.Security.Web.JsonWebTokenHashAlgorithm.html",
    "title": "Enum JsonWebTokenHashAlgorithm | Cuemon .NET Standard",
    "keywords": "Enum JsonWebTokenHashAlgorithm Specifies the algorithm used for generating JWT hash values. Namespace : Cuemon.Security.Web Assembly : Cuemon.Security.dll Syntax public enum JsonWebTokenHashAlgorithm Fields Name Description None Defines no hashing algorithm. SHA256 Defines the Secure Hashing Algorithm (SHA256) algorithm (256 bits). Extension Methods ByteConverterExtensions.ToByteArray<JsonWebTokenHashAlgorithm>() ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, TResult>(Func<JsonWebTokenHashAlgorithm, TResult>) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T, TResult>(Func<JsonWebTokenHashAlgorithm, T, TResult>, T) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T1, T2, TResult>(Func<JsonWebTokenHashAlgorithm, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T1, T2, T3, TResult>(Func<JsonWebTokenHashAlgorithm, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, TResult>(Func<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, TResult>(Func<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, T6, TResult>(Func<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<JsonWebTokenHashAlgorithm, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<JsonWebTokenHashAlgorithm>() DelegateUtilityExtensions.DynamicWrap<JsonWebTokenHashAlgorithm>() TweakerExtensions.Adjust<JsonWebTokenHashAlgorithm>(Func<JsonWebTokenHashAlgorithm, JsonWebTokenHashAlgorithm>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<JsonWebTokenHashAlgorithm>() WrapperExtensions.UseWrapper<JsonWebTokenHashAlgorithm>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<JsonWebTokenHashAlgorithm>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<JsonWebTokenHashAlgorithm>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.AssignmentOperator.html": {
    "href": "api/core/Cuemon.AssignmentOperator.html",
    "title": "Enum AssignmentOperator | Cuemon .NET Standard",
    "keywords": "Enum AssignmentOperator Defines the most common assignment operators for numeric operands. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum AssignmentOperator Remarks For more information please refer to this Wikibooks article: http://en.wikibooks.org/wiki/C_Sharp_Programming/Operators . Fields Name Description Addition An addition compound assignment operation, such as (x += y). And A bitwise or logical AND compound assignment operation, such as (x &= y). Assign An assignment operation, such as (x = y). Division An division compound assignment operation, such as (x /= y). ExclusiveOr A bitwise or logical XOR compound assignment operation, such as (x ^= y). LeftShift A bitwise left-shift compound assignment, such as (x <<= y). Multiplication A multiplication compound assignment operation, such as (x *= y). Or A bitwise or logical OR compound assignment, such as (x |= y). Remainder An arithmetic remainder compound assignment operation, such as (x %= y). RightShift A bitwise left-shift compound assignment, such as (x glt;glt;= y). Subtraction A subtraction compound assignment operation, such as (x -= y). Extension Methods ByteConverterExtensions.ToByteArray<AssignmentOperator>() ConverterExtensions.ParseWith<AssignmentOperator, TResult>(Func<AssignmentOperator, TResult>) ConverterExtensions.ParseWith<AssignmentOperator, T, TResult>(Func<AssignmentOperator, T, TResult>, T) ConverterExtensions.ParseWith<AssignmentOperator, T1, T2, TResult>(Func<AssignmentOperator, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<AssignmentOperator, T1, T2, T3, TResult>(Func<AssignmentOperator, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<AssignmentOperator, T1, T2, T3, T4, TResult>(Func<AssignmentOperator, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<AssignmentOperator, T1, T2, T3, T4, T5, TResult>(Func<AssignmentOperator, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<AssignmentOperator, T1, T2, T3, T4, T5, T6, TResult>(Func<AssignmentOperator, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<AssignmentOperator, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<AssignmentOperator, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<AssignmentOperator, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<AssignmentOperator, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<AssignmentOperator, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<AssignmentOperator, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<AssignmentOperator>() DelegateUtilityExtensions.DynamicWrap<AssignmentOperator>() TweakerExtensions.Adjust<AssignmentOperator>(Func<AssignmentOperator, AssignmentOperator>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<AssignmentOperator>() WrapperExtensions.UseWrapper<AssignmentOperator>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<AssignmentOperator>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<AssignmentOperator>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.html",
    "title": "Namespace Cuemon.AspNetCore | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Classes ConfigurableMiddleware<TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern. ConfigurableMiddleware<T, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with a dependency injected parameter. ConfigurableMiddleware<T1, T2, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with two dependency injected parameters. ConfigurableMiddleware<T1, T2, T3, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with three dependency injected parameters. ConfigurableMiddleware<T1, T2, T3, T4, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with four dependency injected parameters. ConfigurableMiddleware<T1, T2, T3, T4, T5, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with five dependency injected parameters. CorrelationBuilderExtension This is a factory implementation of the CorrelationIdentifierMiddleware class. CorrelationIdentifierMiddleware Provides a Correlation ID middleware implementation for ASP.NET Core. CorrelationIdentifierOptions Configuration options for CorrelationIdentifierMiddleware . HostingEnvironmentBuilderExtension This is a factory implementation of the HostingEnvironmentMiddleware class. HostingEnvironmentMiddleware Provides a hosting environment middleware implementation for ASP.NET Core. HostingEnvironmentOptions Configuration options for HostingEnvironmentMiddleware . Middleware Provides a base-class for middleware implementation in ASP.NET Core. Middleware<T> Provides a base-class for middleware implementation in ASP.NET Core with five dependency injected parameters. Middleware<T1, T2> Provides a base-class for middleware implementation in ASP.NET Core with two dependency injected parameters. Middleware<T1, T2, T3> Provides a base-class for middleware implementation in ASP.NET Core with three dependency injected parameters. Middleware<T1, T2, T3, T4> Provides a base-class for middleware implementation in ASP.NET Core with four dependency injected parameters. Middleware<T1, T2, T3, T4, T5> Provides a base-class for middleware implementation in ASP.NET Core with five dependency injected parameters. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.RandomSeverity.html": {
    "href": "api/core/Cuemon.RandomSeverity.html",
    "title": "Enum RandomSeverity | Cuemon .NET Standard",
    "keywords": "Enum RandomSeverity Specifies the severity of the generation of a random number. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum RandomSeverity Fields Name Description Simple A fast but less accurate method of generating a random number. Strong A slower but also more accurate way of generating a random number. Extension Methods ByteConverterExtensions.ToByteArray<RandomSeverity>() ConverterExtensions.ParseWith<RandomSeverity, TResult>(Func<RandomSeverity, TResult>) ConverterExtensions.ParseWith<RandomSeverity, T, TResult>(Func<RandomSeverity, T, TResult>, T) ConverterExtensions.ParseWith<RandomSeverity, T1, T2, TResult>(Func<RandomSeverity, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<RandomSeverity, T1, T2, T3, TResult>(Func<RandomSeverity, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<RandomSeverity, T1, T2, T3, T4, TResult>(Func<RandomSeverity, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<RandomSeverity, T1, T2, T3, T4, T5, TResult>(Func<RandomSeverity, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<RandomSeverity, T1, T2, T3, T4, T5, T6, TResult>(Func<RandomSeverity, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<RandomSeverity, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<RandomSeverity, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<RandomSeverity, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<RandomSeverity, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<RandomSeverity, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<RandomSeverity, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<RandomSeverity>() DelegateUtilityExtensions.DynamicWrap<RandomSeverity>() TweakerExtensions.Adjust<RandomSeverity>(Func<RandomSeverity, RandomSeverity>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<RandomSeverity>() WrapperExtensions.UseWrapper<RandomSeverity>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<RandomSeverity>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<RandomSeverity>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ExceptionUtilityExtensions.html": {
    "href": "api/core/Cuemon.ExceptionUtilityExtensions.html",
    "title": "Class ExceptionUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class ExceptionUtilityExtensions This is an extension implementation of the most common methods on the ExceptionUtility class. Inheritance System.Object ExceptionUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ExceptionUtilityExtensions Methods | Improve this Doc Flatten(Exception) Flattens any inner exceptions descendant-or-self from the specified exception into an System.Collections.Generic.IEnumerable<T> sequence of exceptions. Declaration public static IEnumerable<Exception> Flatten(this Exception exception) Parameters Type Name Description System.Exception exception The exception to flatten. Returns Type Description System.Collections.Generic.IEnumerable < System.Exception > An empty System.Collections.Generic.IEnumerable<T> sequence if no inner exceptions was specified; otherwise any inner exceptions rooted to the specified exception as well as it's descendants. Remarks If any inner exceptions are referenced this method will iterative flatten all of them descendant-or-self from the specified exception . Should the exception be of the new AggregateException type introduced with .NET 4.0, the return sequence of this method will be equal to the result of the InnerExceptions property. Exceptions Type Condition System.ArgumentNullException exception is null. | Improve this Doc Flatten(Exception, Type) Flattens any inner exceptions descendant-or-self from the specified exception into an System.Collections.Generic.IEnumerable<T> sequence of exceptions. Declaration public static IEnumerable<Exception> Flatten(this Exception exception, Type exceptionType) Parameters Type Name Description System.Exception exception The exception to flatten. System.Type exceptionType The type of the specified exception . Returns Type Description System.Collections.Generic.IEnumerable < System.Exception > An empty System.Collections.Generic.IEnumerable<T> sequence if no inner exceptions was referenced; otherwise any inner exceptions descendant-or-self from the specified exception . Remarks If any inner exceptions are referenced this method will iterative flatten all of them descendant-or-self from the specified exception . Should the exception be of the new AggregateException type introduced with .NET 4.0, the return sequence of this method will be equal to the result of the InnerExceptions property. Exceptions Type Condition System.ArgumentNullException exception -or exceptionType is null. | Improve this Doc ParseException<TResult>(Exception) Parses the specified exception for a match on TResult . Declaration public static TResult ParseException<TResult>(this Exception exception) where TResult : Exception Parameters Type Name Description System.Exception exception The exception to parse for a match on TResult . Returns Type Description TResult The matched exception cast as TResult or null if no match could be resolved. Type Parameters Name Description TResult The type of the exception to find a match on. Exceptions Type Condition System.ArgumentNullException exception is null. | Improve this Doc Refine(Exception, MethodDescriptor, Object[]) Refines the specified exception with valuable meta information extracted from the associated method and parameters . Declaration public static MethodWrappedException Refine(this Exception exception, MethodDescriptor method, params object[] parameters) Parameters Type Name Description System.Exception exception The exception that needs to be thrown. MethodDescriptor method The method signature containing valuable meta information. System.Object [] parameters The optional parameters to accompany method . Returns Type Description MethodWrappedException The specified exception refined with valuable meta information within a MethodWrappedException . Exceptions Type Condition System.ArgumentNullException exception is null - or - method is null. | Improve this Doc Refine(Exception, MethodBase, Object[]) Refines the specified exception with valuable meta information extracted from the associated method and parameters . Declaration public static MethodWrappedException Refine(this Exception exception, MethodBase method, params object[] parameters) Parameters Type Name Description System.Exception exception The exception that needs to be thrown. System.Reflection.MethodBase method The method to extract valuable meta information from. System.Object [] parameters The optional parameters to accompany method . Returns Type Description MethodWrappedException The specified exception refined with valuable meta information within a MethodWrappedException . Exceptions Type Condition System.ArgumentNullException exception is null - or - method is null. | Improve this Doc Unwrap(MethodWrappedException) Unwraps the specified wrappedException . Declaration public static Exception Unwrap(this MethodWrappedException wrappedException) Parameters Type Name Description MethodWrappedException wrappedException The wrapped exception to unwrap. Returns Type Description System.Exception The originating exception from within MethodWrappedException . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.TimeBasedOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.TimeBasedOptions.html",
    "title": "Class TimeBasedOptions | Cuemon .NET Standard",
    "keywords": "Class TimeBasedOptions Specifies options that is related to the TimeBasedObjectResult<T> . Inheritance System.Object TimeBasedOptions Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class TimeBasedOptions Constructors | Improve this Doc TimeBasedOptions() Initializes a new instance of the TimeBasedOptions class. Declaration public TimeBasedOptions() Remarks The following table shows the initial property values for an instance of TimeBasedOptions . Property Initial Value Modified null Properties | Improve this Doc Modified Gets or sets the modified date-time value of an object. Declaration public DateTime? Modified { get; set; } Property Value Type Description System.Nullable < System.DateTime > The modified date-time value of an object. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.ExceptionDescriptor.html": {
    "href": "api/core/Cuemon.Diagnostics.ExceptionDescriptor.html",
    "title": "Class ExceptionDescriptor | Cuemon .NET Standard",
    "keywords": "Class ExceptionDescriptor Provides information about an System.Exception , in a developer friendly way, optimized for open- and otherwise public application programming interfaces (API). Inheritance System.Object ExceptionDescriptor Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public class ExceptionDescriptor Constructors | Improve this Doc ExceptionDescriptor() Initializes a new instance of the ExceptionDescriptor class. Declaration protected ExceptionDescriptor() | Improve this Doc ExceptionDescriptor(Exception, String, String, Action<ExceptionDescriptorOptions>) Initializes a new instance of the ExceptionDescriptor class. Declaration public ExceptionDescriptor(Exception failure, string code, string message, Action<ExceptionDescriptorOptions> setup = null) Parameters Type Name Description System.Exception failure The System.Exception that caused the current failure. System.String code The error code that uniquely identifies the type of failure. System.String message The message that explains the reason for the failure. System.Action < ExceptionDescriptorOptions > setup The ExceptionDescriptorOptions which need to be configured. Properties | Improve this Doc Code Gets an error code that uniquely identifies the type of failure. Declaration public string Code { get; } Property Value Type Description System.String The number that identifies the type of failure. | Improve this Doc Evidence Gets a collection of key/value pairs that can provide additional information about the failure. Declaration public IReadOnlyDictionary<string, object> Evidence { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.Object > An optional collection of key/value pairs that can provide additional information about the failure. | Improve this Doc Failure Gets the System.Exception that caused the current failure. Declaration public Exception Failure { get; } Property Value Type Description System.Exception The deeper cause of the failure. | Improve this Doc HelpLink Gets a link to the help page associated with this failure. Declaration public Uri HelpLink { get; } Property Value Type Description System.Uri The location of an optional help page associated with this failure. | Improve this Doc Message Gets a message that describes the current failure. Declaration public string Message { get; } Property Value Type Description System.String The message that explains the reason for the failure. | Improve this Doc RequestId Gets or sets the request identifier that uniquely identifies the service request the caller made. Declaration public string RequestId { get; set; } Property Value Type Description System.String An identifier that uniquely identifies the service request the caller made. Methods | Improve this Doc AddEvidence<T>(String, T, Func<T, Object>) Adds an element of evidence to associate with the faulted operation. Declaration public void AddEvidence<T>(string context, T evidence, Func<T, object> evidenceProvider) Parameters Type Name Description System.String context The context of the evidence. T evidence The evidence itself. System.Func <T, System.Object > evidenceProvider The function delegate that provides the evidence. Type Parameters Name Description T The type of the evidence . | Improve this Doc PostInitializeWith(ExceptionDescriptorAttribute) Post initialize this instance with the specified attribute . Declaration public void PostInitializeWith(ExceptionDescriptorAttribute attribute) Parameters Type Name Description ExceptionDescriptorAttribute attribute | Improve this Doc PostInitializeWith(IEnumerable<ExceptionDescriptorAttribute>) Post initialize this instance with a matching ExceptionDescriptorAttribute from the specified attributes . Declaration public void PostInitializeWith(IEnumerable<ExceptionDescriptorAttribute> attributes) Parameters Type Name Description System.Collections.Generic.IEnumerable < ExceptionDescriptorAttribute > attributes The attributes to find a match within. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.XmlClient.XmlDataReader.html": {
    "href": "api/core/Cuemon.Data.XmlClient.XmlDataReader.html",
    "title": "Class XmlDataReader | Cuemon .NET Standard",
    "keywords": "Class XmlDataReader Provides a way of reading a forward-only stream of rows from an XML based data source. This class cannot be inherited. Inheritance System.Object System.Data.Common.DbDataReader StringDataReader XmlDataReader Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable Inherited Members StringDataReader.Contains(String) StringDataReader.Item[String] StringDataReader.Item[Int32] StringDataReader.RecordsAffected StringDataReader.IsClosed StringDataReader.IsDisposed StringDataReader.StringParser StringDataReader.RowCount StringDataReader.FieldCount StringDataReader.ToString() StringDataReader.Read() StringDataReader.SetFields(IOrderedDictionary) StringDataReader.GetBoolean(Int32) StringDataReader.GetByte(Int32) StringDataReader.GetBytes(Int32, Int64, Byte[], Int32, Int32) StringDataReader.GetChar(Int32) StringDataReader.GetDateTime(Int32) StringDataReader.GetDecimal(Int32) StringDataReader.GetDouble(Int32) StringDataReader.GetFieldType(Int32) StringDataReader.GetFloat(Int32) StringDataReader.GetGuid(Int32) StringDataReader.GetInt16(Int32) StringDataReader.GetInt32(Int32) StringDataReader.GetInt64(Int32) StringDataReader.GetName(Int32) StringDataReader.GetOrdinal(String) StringDataReader.GetString(Int32) StringDataReader.GetValue(Int32) StringDataReader.IsDBNull(Int32) StringDataReader.GetValues(Object[]) StringDataReader.NextResult() StringDataReader.GetChars(Int32, Int64, Char[], Int32, Int32) StringDataReader.GetDataTypeName(Int32) StringDataReader.GetEnumerator() System.Data.Common.DbDataReader.Dispose() System.Data.Common.DbDataReader.GetData(System.Int32) System.Data.Common.DbDataReader.GetDbDataReader(System.Int32) System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32) System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[]) System.Data.Common.DbDataReader.GetStream(System.Int32) System.Data.Common.DbDataReader.GetTextReader(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.NextResultAsync() System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.ReadAsync() System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32) System.Data.Common.DbDataReader.System.Data.IDataReader.Close() System.Data.Common.DbDataReader.System.Data.IDataReader.GetSchemaTable() System.Data.Common.DbDataReader.VisibleFieldCount Namespace : Cuemon.Data.XmlClient Assembly : Cuemon.Data.XmlClient.dll Syntax public sealed class XmlDataReader : StringDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable Constructors | Improve this Doc XmlDataReader(XmlReader) Initializes a new instance of the XmlDataReader class. Declaration public XmlDataReader(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. Exceptions Type Condition System.ArgumentNullException reader is null. | Improve this Doc XmlDataReader(XmlReader, Func<String, Object>) Initializes a new instance of the XmlDataReader class. Declaration public XmlDataReader(XmlReader reader, Func<string, object> parser) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Func < System.String , System.Object > parser The function delegate that returns a primitive object whose value is equivalent to the provided System.String value. Remarks The default implementation uses FromString(String) as parser . Exceptions Type Condition System.ArgumentNullException reader is null -or- parser is null. Properties | Improve this Doc Depth Gets a value indicating the depth of nesting for the current element. Declaration public override int Depth { get; } Property Value Type Description System.Int32 The level of nesting. Overrides StringDataReader.Depth | Improve this Doc HasRows Gets a value that indicates whether this System.Data.Common.DbDataReader contains one or more rows. Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean true if this instance has rows; otherwise, false . Overrides System.Data.Common.DbDataReader.HasRows Methods | Improve this Doc Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StringDataReader.Dispose(Boolean) | Improve this Doc ReadNext() Advances this instance to the next element of the XML data source. Declaration protected override bool ReadNext() Returns Type Description System.Boolean true if there are more elements; otherwise, false . Overrides StringDataReader.ReadNext() Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable Extension Methods DataTransferExtensions.ToRows(IDataReader) DataTransferExtensions.ToColumns(IDataReader) ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.UniqueIndexViolationException.html": {
    "href": "api/core/Cuemon.Data.UniqueIndexViolationException.html",
    "title": "Class UniqueIndexViolationException | Cuemon .NET Standard",
    "keywords": "Class UniqueIndexViolationException The exception that is thrown when a unique index violation occurs from a data source. Inheritance System.Object System.Exception UniqueIndexViolationException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public class UniqueIndexViolationException : Exception Constructors | Improve this Doc UniqueIndexViolationException() Initializes a new instance of the UniqueIndexViolationException class. Declaration public UniqueIndexViolationException() | Improve this Doc UniqueIndexViolationException(String) Initializes a new instance of the UniqueIndexViolationException class. Declaration public UniqueIndexViolationException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc UniqueIndexViolationException(String, Exception) Initializes a new instance of the UniqueIndexViolationException class. Declaration public UniqueIndexViolationException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) ExceptionUtilityExtensions.Refine(Exception, MethodBase, Object[]) ExceptionUtilityExtensions.Refine(Exception, MethodDescriptor, Object[]) ExceptionUtilityExtensions.ParseException<TResult>(Exception) ExceptionUtilityExtensions.Flatten(Exception) ExceptionUtilityExtensions.Flatten(Exception, Type) StringConverterExtensions.ToEncodedString(Exception, Boolean) StringConverterExtensions.ToEncodedString(Exception, Boolean, Encoding) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.StringDataReader.html": {
    "href": "api/core/Cuemon.Data.StringDataReader.html",
    "title": "Class StringDataReader | Cuemon .NET Standard",
    "keywords": "Class StringDataReader Provides a generic way of reading a forward-only stream of rows from a System.String based data source. This is an abstract class. Inheritance System.Object System.Data.Common.DbDataReader StringDataReader CsvDataReader XmlDataReader Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable Inherited Members System.Data.Common.DbDataReader.Dispose() System.Data.Common.DbDataReader.GetData(System.Int32) System.Data.Common.DbDataReader.GetDbDataReader(System.Int32) System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32) System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[]) System.Data.Common.DbDataReader.GetStream(System.Int32) System.Data.Common.DbDataReader.GetTextReader(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.NextResultAsync() System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.ReadAsync() System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32) System.Data.Common.DbDataReader.System.Data.IDataReader.Close() System.Data.Common.DbDataReader.System.Data.IDataReader.GetSchemaTable() System.Data.Common.DbDataReader.HasRows System.Data.Common.DbDataReader.VisibleFieldCount Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public abstract class StringDataReader : DbDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable Constructors | Improve this Doc StringDataReader() Initializes a new instance of the StringDataReader class. Declaration protected StringDataReader() | Improve this Doc StringDataReader(Func<String, Object>) Initializes a new instance of the StringDataReader class. Declaration protected StringDataReader(Func<string, object> parser) Parameters Type Name Description System.Func < System.String , System.Object > parser The function delegate that returns a primitive object whose value is equivalent to the provided System.String value. Remarks The default implementation uses FromString(String) as parser . Properties | Improve this Doc Depth Gets a value indicating the depth of nesting for the current row. Declaration public override int Depth { get; } Property Value Type Description System.Int32 The level of nesting. Overrides System.Data.Common.DbDataReader.Depth | Improve this Doc FieldCount Gets the number of columns in the current row. Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. Overrides System.Data.Common.DbDataReader.FieldCount | Improve this Doc IsClosed Gets a value indicating whether the data reader is closed. Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean true if this instance is closed; otherwise, false . Overrides System.Data.Common.DbDataReader.IsClosed | Improve this Doc IsDisposed Gets a value indicating whether this instance is disposed. Declaration protected bool IsDisposed { get; } Property Value Type Description System.Boolean true if this instance is disposed; otherwise, false . | Improve this Doc Item[Int32] Gets the column located at the specified index. Declaration public override object this[int i] { get; } Parameters Type Name Description System.Int32 i The zero-based index of the column to get. Property Value Type Description System.Object The column located at the specified index as an System.Object . Overrides System.Data.Common.DbDataReader.Item[System.Int32] | Improve this Doc Item[String] Gets the column with the specified name. Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name The name of the column to find. Property Value Type Description System.Object The column with the specified name as an System.Object . Overrides System.Data.Common.DbDataReader.Item[System.String] | Improve this Doc RecordsAffected Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 The records affected. Overrides System.Data.Common.DbDataReader.RecordsAffected | Improve this Doc RowCount Gets the currently processed row count of this instance. Declaration public int RowCount { get; } Property Value Type Description System.Int32 The currently processed row count of this instance. Remarks This property is incremented when the invoked Read() method returns true . | Improve this Doc StringParser Gets a reference to the function delegate that returns a primitive object whose value is equivalent to the provided System.String value. Declaration protected Func<string, object> StringParser { get; } Property Value Type Description System.Func < System.String , System.Object > A reference to the function delegate that this instance was constructed with. Methods | Improve this Doc Contains(String) Determines whether this instance contains a column with the specified name. Declaration public bool Contains(string name) Parameters Type Name Description System.String name The name of the column to find. Returns Type Description System.Boolean true if this instance contains a column with the specified name; otherwise, false . | Improve this Doc Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides System.Data.Common.DbDataReader.Dispose(System.Boolean) | Improve this Doc GetBoolean(Int32) Gets the value of the specified column as a Boolean. Declaration public override bool GetBoolean(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.Boolean The value of the column. Overrides System.Data.Common.DbDataReader.GetBoolean(System.Int32) | Improve this Doc GetByte(Int32) Gets the 8-bit unsigned integer value of the specified column. Declaration public override byte GetByte(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.Byte The 8-bit unsigned integer value of the specified column. Overrides System.Data.Common.DbDataReader.GetByte(System.Int32) | Improve this Doc GetBytes(Int32, Int64, Byte[], Int32, Int32) Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i The zero-based column ordinal. System.Int64 fieldOffset The index within the row from which to begin the read operation. System.Byte [] buffer The buffer into which to copy the data. System.Int32 bufferoffset The index with the buffer to which the data will be copied. System.Int32 length The maximum number of characters to read. Returns Type Description System.Int64 The actual number of bytes read. Overrides System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) | Improve this Doc GetChar(Int32) Gets the character value of the specified column. Declaration public override char GetChar(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.Char The character value of the specified column. Overrides System.Data.Common.DbDataReader.GetChar(System.Int32) | Improve this Doc GetChars(Int32, Int64, Char[], Int32, Int32) Reads a stream of characters from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i The zero-based column ordinal. System.Int64 fieldoffset The index within the row from which to begin the read operation. System.Char [] buffer The buffer into which to copy the data. System.Int32 bufferoffset The index with the buffer to which the data will be copied. System.Int32 length The maximum number of characters to read. Returns Type Description System.Int64 The actual number of characters read. Overrides System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) | Improve this Doc GetDataTypeName(Int32) Gets the name of the data type. Declaration public override string GetDataTypeName(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.String System.String. Overrides System.Data.Common.DbDataReader.GetDataTypeName(System.Int32) | Improve this Doc GetDateTime(Int32) Gets the date and time data value of the specified field. Declaration public override DateTime GetDateTime(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.DateTime The date and time data value of the specified field. Overrides System.Data.Common.DbDataReader.GetDateTime(System.Int32) | Improve this Doc GetDecimal(Int32) Gets the fixed-position numeric value of the specified field. Declaration public override decimal GetDecimal(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Decimal The fixed-position numeric value of the specified field. Overrides System.Data.Common.DbDataReader.GetDecimal(System.Int32) | Improve this Doc GetDouble(Int32) Gets the double-precision floating point number of the specified field. Declaration public override double GetDouble(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Double The double-precision floating point number of the specified field. Overrides System.Data.Common.DbDataReader.GetDouble(System.Int32) | Improve this Doc GetEnumerator() Returns an System.Collections.IEnumerator that can be used to iterate through the rows in the data reader. Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator that can be used to iterate through the rows in the data reader. Overrides System.Data.Common.DbDataReader.GetEnumerator() Exceptions Type Condition System.NotImplementedException | Improve this Doc GetFieldType(Int32) Gets the System.Type information corresponding to the type of System.Object that would be returned from System.Data.IDataRecord.GetValue(Int32) . Declaration public override Type GetFieldType(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Type The System.Type information corresponding to the type of System.Object that would be returned from System.Data.IDataRecord.GetValue(Int32) . Overrides System.Data.Common.DbDataReader.GetFieldType(System.Int32) | Improve this Doc GetFloat(Int32) Gets the single-precision floating point number of the specified field. Declaration public override float GetFloat(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Single The single-precision floating point number of the specified field. Overrides System.Data.Common.DbDataReader.GetFloat(System.Int32) | Improve this Doc GetGuid(Int32) Returns the GUID value of the specified field. Declaration public override Guid GetGuid(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Guid The GUID value of the specified field. Overrides System.Data.Common.DbDataReader.GetGuid(System.Int32) | Improve this Doc GetInt16(Int32) Gets the 16-bit signed integer value of the specified field. Declaration public override short GetInt16(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Int16 The 16-bit signed integer value of the specified field. Overrides System.Data.Common.DbDataReader.GetInt16(System.Int32) | Improve this Doc GetInt32(Int32) Gets the 32-bit signed integer value of the specified field. Declaration public override int GetInt32(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Int32 The 32-bit signed integer value of the specified field. Overrides System.Data.Common.DbDataReader.GetInt32(System.Int32) | Improve this Doc GetInt64(Int32) Gets the 64-bit signed integer value of the specified field. Declaration public override long GetInt64(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Int64 The 64-bit signed integer value of the specified field. Overrides System.Data.Common.DbDataReader.GetInt64(System.Int32) | Improve this Doc GetName(Int32) Gets the name for the field to find. Declaration public override string GetName(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.String The name of the field or the empty string (\"\"), if there is no value to return. Overrides System.Data.Common.DbDataReader.GetName(System.Int32) | Improve this Doc GetOrdinal(String) Return the index of the named field. Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name The name of the field to find. Returns Type Description System.Int32 The index of the named field. Overrides System.Data.Common.DbDataReader.GetOrdinal(System.String) Exceptions Type Condition System.ArgumentNullException name is null. System.ArgumentOutOfRangeException name is not a valid column name. | Improve this Doc GetString(Int32) Gets the string value of the specified field. Declaration public override string GetString(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.String The string value of the specified field. Overrides System.Data.Common.DbDataReader.GetString(System.Int32) | Improve this Doc GetValue(Int32) Return the value of the specified field. Declaration public override object GetValue(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Object The System.Object which will contain the field value upon return. Overrides System.Data.Common.DbDataReader.GetValue(System.Int32) | Improve this Doc GetValues(Object[]) Populates an array of objects with the column values of the current record. Declaration public override int GetValues(object[] values) Parameters Type Name Description System.Object [] values An array of System.Object to copy the attribute fields into. Returns Type Description System.Int32 The number of instances of System.Object in the array. Overrides System.Data.Common.DbDataReader.GetValues(System.Object[]) | Improve this Doc IsDBNull(Int32) Return whether the specified field is set to null. Declaration public override bool IsDBNull(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Boolean true if the specified field is set to null; otherwise, false. Overrides System.Data.Common.DbDataReader.IsDBNull(System.Int32) | Improve this Doc NextResult() Advances the reader to the next result when reading the results of a batch of statements. Declaration public override bool NextResult() Returns Type Description System.Boolean true if there are more result sets; otherwise false. Overrides System.Data.Common.DbDataReader.NextResult() | Improve this Doc Read() Advances the System.Data.DbDataReader to the next record. Declaration public override bool Read() Returns Type Description System.Boolean true if there are more rows; otherwise, false . Overrides System.Data.Common.DbDataReader.Read() | Improve this Doc ReadNext() Advances the System.Data.DbDataReader to the next record. Declaration protected abstract bool ReadNext() Returns Type Description System.Boolean true if there are more rows; otherwise, false . | Improve this Doc SetFields(IOrderedDictionary) Sets the fields of the current record invoked by ReadNext() . Declaration protected void SetFields(IOrderedDictionary fields) Parameters Type Name Description System.Collections.Specialized.IOrderedDictionary fields The fields of the current record invoked by ReadNext() . | Improve this Doc ToString() Returns a System.String that represents the current row of this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current row of this instance. Overrides System.Object.ToString() Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable Extension Methods DataTransferExtensions.ToRows(IDataReader) DataTransferExtensions.ToColumns(IDataReader) ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.SqlClient.html": {
    "href": "api/core/Cuemon.Data.SqlClient.html",
    "title": "Namespace Cuemon.Data.SqlClient | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Data.SqlClient Assembly : Cuemon.Data.dll Classes SqlDataManager The SqlDataManager is the primary class of the Cuemon.Data.SqlClient namespace that can be used to execute commands targeted Microsoft SQL Server. SqlInOperator<T> Provides a safe way to include a Transact-SQL WHERE clause with an IN operator to execute against a SQL Server database. SqlQueryBuilder A Microsoft SQL implementation of the QueryBuilder class. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataTransferColumn.html": {
    "href": "api/core/Cuemon.Data.DataTransferColumn.html",
    "title": "Class DataTransferColumn | Cuemon .NET Standard",
    "keywords": "Class DataTransferColumn Represents the column meta information of a table-row in a database. This class cannot be inherited. Inheritance System.Object DataTransferColumn Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class DataTransferColumn Properties | Improve this Doc DataType Gets the type of data stored in the column. Declaration public Type DataType { get; } Property Value Type Description System.Type A System.Type object that represents the column data type. | Improve this Doc Name Gets the name of the column. Declaration public string Name { get; } Property Value Type Description System.String The name of the column. | Improve this Doc Ordinal Gets the (zero-based) position of the column. Declaration public int Ordinal { get; } Property Value Type Description System.Int32 The position of the column. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataTransfer.html": {
    "href": "api/core/Cuemon.Data.DataTransfer.html",
    "title": "Class DataTransfer | Cuemon .NET Standard",
    "keywords": "Class DataTransfer Provides a way to convert an System.Data.IDataReader implementation to a table-like data transfer object. Inheritance System.Object DataTransfer Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public static class DataTransfer Methods | Improve this Doc GetColumns(IDataReader) Converts the specified and read-initialized reader implementation to a column-like data transfer object collection. Declaration public static DataTransferColumnCollection GetColumns(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The read-initialized reader to be converted. Returns Type Description DataTransferColumnCollection A DataTransferColumnCollection that is the result of the specified and read-initialized reader . Exceptions Type Condition System.ArgumentNullException reader is null. System.ArgumentException reader is closed. System.InvalidOperationException Invalid attempt to read from reader when no data is present. | Improve this Doc GetPagedRows(PagedSettings, Func<PagedSettings, IEnumerable<DataTransferRow>>, Func<PagedSettings, Int32>) Retrieves a paged, table-like data transfer object collection from the specified selector . Declaration public static PagedCollection<DataTransferRow> GetPagedRows(PagedSettings settings, Func<PagedSettings, IEnumerable<DataTransferRow>> selector, Func<PagedSettings, int> counter) Parameters Type Name Description PagedSettings settings The PagedSettings that will be applied to the PagedCollection<T> result of this method. System.Func < PagedSettings , System.Collections.Generic.IEnumerable < DataTransferRow >> selector The function delegate that will determine the PagedCollection<T> result of this method. System.Func < PagedSettings , System.Int32 > counter The function delegate that will determine the total number of rows in a data-source from the specified settings . Returns Type Description PagedCollection < DataTransferRow > A PagedCollection<T> that is the result of the specified selector with associated settings . | Improve this Doc GetRows(IDataReader) Converts the specified reader implementation to a table-like data transfer object collection. Declaration public static DataTransferRowCollection GetRows(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The reader to be converted. Returns Type Description DataTransferRowCollection A DataTransferRowCollection that is the result of the specified reader . Exceptions Type Condition System.ArgumentNullException reader is null. System.ArgumentException reader is closed. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Converter.html": {
    "href": "api/core/Cuemon.Converter.html",
    "title": "Class Converter | Cuemon .NET Standard",
    "keywords": "Class Converter This utility class is designed to make generic conversions easier to work with. Inheritance System.Object Converter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class Converter Methods | Improve this Doc FromObject<TResult>(Object) Attempts to convert the specified value to a given type. If the conversion is not possible the result is set to default(TResult) . Declaration public static TResult FromObject<TResult>(object value) Parameters Type Name Description System.Object value The object to convert the underlying type. Returns Type Description TResult The value converted to the specified TResult . Type Parameters Name Description TResult The type of the result. Remarks This method first checks if value is compatible with TResult ; if not compatible the method continues with ChangeType(Object, Type, IFormatProvider) for the operation. | Improve this Doc FromObject<TResult>(Object, TResult) Attempts to convert the specified value to a given type. If the conversion is not possible the result is set to resultOnConversionNotPossible . Declaration public static TResult FromObject<TResult>(object value, TResult resultOnConversionNotPossible) Parameters Type Name Description System.Object value The object to convert the underlying type. TResult resultOnConversionNotPossible The value to return if the conversion is not possible. Returns Type Description TResult The value converted to the specified TResult . Type Parameters Name Description TResult The type of the result. Remarks This method first checks if value is compatible with TResult ; if not compatible the method continues with ChangeType(Object, Type, IFormatProvider) for the operation. | Improve this Doc FromObject<TResult>(Object, TResult, IFormatProvider) Attempts to convert the specified value to a given type. If the conversion is not possible the result is set to resultOnConversionNotPossible . Declaration public static TResult FromObject<TResult>(object value, TResult resultOnConversionNotPossible, IFormatProvider provider) Parameters Type Name Description System.Object value The object to convert the underlying type. TResult resultOnConversionNotPossible The value to return if the conversion is not possible. System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description TResult The value converted to the specified TResult . Type Parameters Name Description TResult The type of the result. Remarks This method first checks if value is compatible with TResult ; if not compatible the method continues with ChangeType(Object, Type, IFormatProvider) for the operation. | Improve this Doc FromString<T>(String) Converts the specified string to its T equivalent. Declaration public static T FromString<T>(string value) Parameters Type Name Description System.String value The string value to convert. Returns Type Description T An object that is equivalent to T contained in value . Type Parameters Name Description T The type of the expected return value after conversion. Exceptions Type Condition System.ArgumentException Invalid value for T specified. System.NotSupportedException The conversion cannot be performed. | Improve this Doc FromString<T>(String, CultureInfo) Converts the specified string to its T equivalent using the specified culture information. Declaration public static T FromString<T>(string value, CultureInfo culture) Parameters Type Name Description System.String value The string value to convert. System.Globalization.CultureInfo culture The culture-specific formatting information about value . Returns Type Description T An object that is equivalent to T contained in value , as specified by culture . Type Parameters Name Description T The type of the expected return value after conversion. Exceptions Type Condition System.ArgumentException Invalid value for T specified. System.NotSupportedException The conversion cannot be performed. | Improve this Doc FromString<T>(String, CultureInfo, ITypeDescriptorContext) Converts the specified string to its T equivalent using the specified context and culture information. Declaration public static T FromString<T>(string value, CultureInfo culture, ITypeDescriptorContext context) Parameters Type Name Description System.String value The string value to convert. System.Globalization.CultureInfo culture The culture-specific formatting information about value . System.ComponentModel.ITypeDescriptorContext context The type-specific formatting information about value . Returns Type Description T An object that is equivalent to T contained in value , as specified by culture and context . Type Parameters Name Description T The type of the expected return value after conversion. Exceptions Type Condition System.ArgumentException Invalid value for T specified. System.NotSupportedException The conversion cannot be performed. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . T8 arg8 The eighth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . T8 The type of the eighth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . T8 arg8 The eighth parameter of the function delegate converter . T9 arg9 The ninth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . T8 The type of the eighth parameter of the function delegate converter . T9 The type of the ninth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, TResult>(TSource, Func<TSource, TResult>) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, TResult>(TSource source, Func<TSource, TResult> converter) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, TResult> converter The function delegate that converts TSource to a TResult representation. Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T, TResult>(TSource source, Func<TSource, T, TResult> converter, T arg) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T, TResult> converter The function delegate that converts TSource to a TResult representation. T arg The parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T The type of the parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T1, T2, TResult>(TSource source, Func<TSource, T1, T2, TResult> converter, T1 arg1, T2 arg2) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T1, T2, T3, TResult>(TSource source, Func<TSource, T1, T2, T3, TResult> converter, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T1, T2, T3, T4, TResult>(TSource source, Func<TSource, T1, T2, T3, T4, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T1, T2, T3, T4, T5, TResult>(TSource source, Func<TSource, T1, T2, T3, T4, T5, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource source, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Converts the specified source to a TResult representation using the specified converter . Declaration public static TResult Parse<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description TSource source The source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> converter The function delegate that converts TSource to a TResult representation. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . Returns Type Description TResult A TResult that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException converter is null. | Improve this Doc TryFromString<T>(String, out T) Converts the specified string to its T equivalent. Declaration public static bool TryFromString<T>(string value, out T result) Parameters Type Name Description System.String value The string value to convert. T result When this method returns, contains the equivalent to T of value , or default ( T ) if an exception is thrown. Returns Type Description System.Boolean true if the value parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected return value after conversion. | Improve this Doc TryFromString<T>(String, CultureInfo, out T) Converts the specified string to its T equivalent using the specified culture information. Declaration public static bool TryFromString<T>(string value, CultureInfo culture, out T result) Parameters Type Name Description System.String value The string value to convert. System.Globalization.CultureInfo culture The culture-specific formatting information about value . T result When this method returns, contains the equivalent to T of value , as specified by culture , or default ( T ) if an exception is thrown. Returns Type Description System.Boolean true if the value parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected return value after conversion. | Improve this Doc TryFromString<T>(String, CultureInfo, ITypeDescriptorContext, out T) Converts the specified string to its T equivalent using the specified context and culture information. Declaration public static bool TryFromString<T>(string value, CultureInfo culture, ITypeDescriptorContext context, out T result) Parameters Type Name Description System.String value The string value to convert. System.Globalization.CultureInfo culture The culture-specific formatting information about value . System.ComponentModel.ITypeDescriptorContext context The type-specific formatting information about value . T result When this method returns, contains the equivalent to T of value , as specified by culture and context , or default ( T ) if an exception is thrown. Returns Type Description System.Boolean true if the value parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected return value after conversion. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Configuration.html": {
    "href": "api/core/Cuemon.Configuration.html",
    "title": "Namespace Cuemon.Configuration | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Configuration Assembly : Cuemon.Core.dll Classes Configurable<TOptions> Provides a generic way to support the options pattern on a class level. Interfaces IConfigurable<TOptions> Provides a generic way to support the options pattern on a class level. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.PagedCollectionExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.PagedCollectionExtensions.html",
    "title": "Class PagedCollectionExtensions | Cuemon .NET Standard",
    "keywords": "Class PagedCollectionExtensions This is an extension implementation that provides ways to enable paging on System.Collections.Generic.IEnumerable<T> sequences. Inheritance System.Object PagedCollectionExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class PagedCollectionExtensions Methods | Improve this Doc ToPagedCollection<T>(IEnumerable<T>) Converts the specified source to a paged data sequence. Declaration public static PagedCollection<T> ToPagedCollection<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence to make pageable. Returns Type Description PagedCollection <T> An instance of PagedCollection<T> . Type Parameters Name Description T The type of the elements of source . Remarks The starting page is set to 1 and the page size is determined by DefaultPageSize . | Improve this Doc ToPagedCollection<T>(IEnumerable<T>, PagedSettings) Converts the specified source to a paged data sequence initialized with settings . Declaration public static PagedCollection<T> ToPagedCollection<T>(this IEnumerable<T> source, PagedSettings settings) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence to make pageable. PagedSettings settings The settings that specifies the conditions of the converted source . Returns Type Description PagedCollection <T> An instance of PagedCollection<T> initialized with settings . Type Parameters Name Description T The type of the elements of source . | Improve this Doc ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) Converts the specified source to a paged data sequence initialized with settings . Declaration public static PagedCollection<T> ToPagedCollection<T>(this IEnumerable<T> source, PagedSettings settings, int totalElementCount) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence to make pageable. PagedSettings settings The settings that specifies the conditions of the converted source . System.Int32 totalElementCount The total number of elements in the source sequence. Returns Type Description PagedCollection <T> An instance of PagedCollection<T> initialized with settings . Type Parameters Name Description T The type of the elements of source . | Improve this Doc ToPagedCollection<T>(IEnumerable<T>, Int32) Converts the specified source to a paged data sequence initialized with starting pageNumber . Declaration public static PagedCollection<T> ToPagedCollection<T>(this IEnumerable<T> source, int pageNumber) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence to make pageable. System.Int32 pageNumber The page number to start with. Returns Type Description PagedCollection <T> An instance of PagedCollection<T> . Type Parameters Name Description T The type of the elements of source . Remarks The page size is determined by DefaultPageSize . | Improve this Doc ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) Converts the specified source to a paged data sequence initialized with starting pageNumber and pageSize . Declaration public static PagedCollection<T> ToPagedCollection<T>(this IEnumerable<T> source, int pageNumber, int pageSize) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence to make pageable. System.Int32 pageNumber The page number to start with. System.Int32 pageSize The number of elements a page can contain. Returns Type Description PagedCollection <T> An instance of PagedCollection<T> . Type Parameters Name Description T The type of the elements of source . | Improve this Doc ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) Converts the specified source to a paged data sequence initialized with starting pageNumber and pageSize . Declaration public static PagedCollection<T> ToPagedCollection<T>(this IEnumerable<T> source, int pageNumber, int pageSize, int totalElementCount) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence to make pageable. System.Int32 pageNumber The page number to start with. System.Int32 pageSize The number of elements a page can contain. System.Int32 totalElementCount The total number of elements in the source sequence. Returns Type Description PagedCollection <T> An instance of PagedCollection<T> . Type Parameters Name Description T The type of the elements of source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-5.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-5.html",
    "title": "Class ConfigurableMiddleware<T1, T2, T3, T4, TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableMiddleware<T1, T2, T3, T4, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with four dependency injected parameters. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore <TOptions> ConfigurableMiddleware<T1, T2, T3, T4, TOptions> Implements IConfigurable <TOptions> Inherited Members ConfigurableMiddlewareCore<TOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class ConfigurableMiddleware<T1, T2, T3, T4, TOptions> : ConfigurableMiddlewareCore<TOptions>, IConfigurable<TOptions> where TOptions : class, new() Type Parameters Name Description T1 The type of the first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T2 The type of the second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T3 The type of the third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T4 The type of the fourth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . TOptions The type of the options to setup. Constructors | Improve this Doc ConfigurableMiddleware(RequestDelegate, IOptions<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, IOptions<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableMiddleware(RequestDelegate, Action<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, Action<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc InvokeAsync(HttpContext, T1, T2, T3, T4) Executes the ConfigurableMiddleware<T1, T2, T3, T4, TOptions> . Declaration public abstract Task InvokeAsync(HttpContext context, T1 di1, T2 di2, T3 di3, T4 di4) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T1 di1 The first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T2 di2 The second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T3 di3 The third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T4 di4 The fourth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Middleware <T1, T2, T3, T4> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticator.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticator.html",
    "title": "Delegate HmacAuthenticator | Cuemon .NET Standard",
    "keywords": "Delegate HmacAuthenticator Represents the method that defines an Authenticator typically assigned on HmacAuthenticationOptions . Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public delegate ClaimsPrincipal HmacAuthenticator(string publicKey, out byte[] privateKey); Parameters Type Name Description System.String publicKey The public key to match and lookup the paired shared secret- privateKey . System.Byte [] privateKey The shared secret-private key paired with publicKey . Returns Type Description System.Security.Claims.ClaimsPrincipal A System.Security.Claims.ClaimsPrincipal that is associated with the result of privateKey . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.BasicAuthenticationBuilderExtension.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.BasicAuthenticationBuilderExtension.html",
    "title": "Class BasicAuthenticationBuilderExtension | Cuemon .NET Standard",
    "keywords": "Class BasicAuthenticationBuilderExtension This is a factory implementation of the BasicAuthenticationMiddleware class. Inheritance System.Object BasicAuthenticationBuilderExtension Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public static class BasicAuthenticationBuilderExtension Methods | Improve this Doc UseBasicAuthentication(IApplicationBuilder, Action<BasicAuthenticationOptions>) Adds a HTTP Basic Authentication scheme to the Microsoft.AspNetCore.Builder.IApplicationBuilder request execution pipeline. Declaration public static IApplicationBuilder UseBasicAuthentication(this IApplicationBuilder builder, Action<BasicAuthenticationOptions> setup = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder builder The type that provides the mechanisms to configure an application’s request pipeline. System.Action < BasicAuthenticationOptions > setup The HTTP BasicAuthenticationOptions middleware which need to be configured. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder A reference to this instance after the operation has completed. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.html": {
    "href": "api/core/Cuemon.Xml.html",
    "title": "Namespace Cuemon.Xml | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Xml Assembly : Cuemon.Xml.dll Classes XmlConvertExtensions Extension methods for the System.Xml.XmlConvert class. XmlCopyOptions Specifies options that is related to XmlWriterUtility operations. XmlDocumentConverter This utility class is designed to make System.Xml.XmlDocument related conversions easier to work with. XmlElementConverter This utility class is designed to make System.Xml.XmlElement related conversions easier to work with. XmlEncodingUtility This utility class is designed to make XML System.Text.Encoding operations easier to work with. XmlReaderConverter This utility class is designed to make System.Xml.XmlReader related conversions easier to work with. XmlReaderUtility This utility class is designed to make System.Xml.XmlReader related operations easier to work with. XmlReaderUtilityExtensions Extension methods for the XmlReaderUtility class. XmlUtility This utility class is designed to make XML operations easier to work with. XmlUtilityExtensions Extension methods for the XmlUtility class. XmlWriterUtility This utility class is designed to make System.Xml.XmlWriter related operations easier to work with. XmlWriterUtilityExtensions Extension methods for the XmlWriterUtility class. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XPath.html": {
    "href": "api/core/Cuemon.Xml.XPath.html",
    "title": "Namespace Cuemon.Xml.XPath | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Xml.XPath Assembly : Cuemon.Xml.dll Classes XPathNavigableConverter This utility class is designed to make System.Xml.XPath.IXPathNavigable related conversions easier to work with. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XPath.XPathNavigableConverter.html": {
    "href": "api/core/Cuemon.Xml.XPath.XPathNavigableConverter.html",
    "title": "Class XPathNavigableConverter | Cuemon .NET Standard",
    "keywords": "Class XPathNavigableConverter This utility class is designed to make System.Xml.XPath.IXPathNavigable related conversions easier to work with. Inheritance System.Object XPathNavigableConverter Namespace : Cuemon.Xml.XPath Assembly : Cuemon.Xml.dll Syntax public static class XPathNavigableConverter Methods | Improve this Doc FromStream(Stream) Converts the given stream to an System.Xml.XPath.IXPathNavigable object. The stream is closed and disposed of afterwards. Declaration public static IXPathNavigable FromStream(Stream value) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to be converted. Returns Type Description System.Xml.XPath.IXPathNavigable An System.Xml.XPath.IXPathNavigable object. | Improve this Doc FromStream(Stream, Boolean) Converts the given stream to an System.Xml.XPath.IXPathNavigable object. Declaration public static IXPathNavigable FromStream(Stream value, bool leaveStreamOpen) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to be converted. System.Boolean leaveStreamOpen if true , the source System.IO.Stream is being left open; otherwise it is being closed and disposed. Returns Type Description System.Xml.XPath.IXPathNavigable An System.Xml.XPath.IXPathNavigable object. | Improve this Doc FromString(String) Converts the given XML string to an IXPathNavigable object using UTF-8 for the encoding. Declaration public static IXPathNavigable FromString(string value) Parameters Type Name Description System.String value The XML string to be converted. Returns Type Description System.Xml.XPath.IXPathNavigable An System.Xml.XPath.IXPathNavigable object. | Improve this Doc FromString(String, Encoding) Converts the given XML string to an IXPathNavigable object. Declaration public static IXPathNavigable FromString(string value, Encoding encoding) Parameters Type Name Description System.String value The XML string to be converted. System.Text.Encoding encoding The preferred encoding to use. Returns Type Description System.Xml.XPath.IXPathNavigable An System.Xml.XPath.IXPathNavigable object. | Improve this Doc FromUri(Uri) Converts the given System.Uri to an System.Xml.XPath.IXPathNavigable object. Declaration public static IXPathNavigable FromUri(Uri value) Parameters Type Name Description System.Uri value The System.Uri to be converted. Returns Type Description System.Xml.XPath.IXPathNavigable An System.Xml.XPath.IXPathNavigable object. | Improve this Doc FromXmlReader(XmlReader) Converts the given XmlReader to an IXPathNavigable object. Declaration public static IXPathNavigable FromXmlReader(XmlReader value) Parameters Type Name Description System.Xml.XmlReader value The XmlReader to be converted. Returns Type Description System.Xml.XPath.IXPathNavigable An System.Xml.XPath.IXPathNavigable object. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlWriterUtilityExtensions.html": {
    "href": "api/core/Cuemon.Xml.XmlWriterUtilityExtensions.html",
    "title": "Class XmlWriterUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlWriterUtilityExtensions Extension methods for the XmlWriterUtility class. Inheritance System.Object XmlWriterUtilityExtensions Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlWriterUtilityExtensions Methods | Improve this Doc Copy(XmlReader, Action<XmlCopyOptions>) Copies everything from the specified reader and returns the result as an XML stream. Declaration public static Stream Copy(this XmlReader reader, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding an exact copy of the source reader . Exceptions Type Condition System.ArgumentNullException reader is null. | Improve this Doc Copy(XmlReader, Action<XmlWriter, XmlReader>, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy(this XmlReader reader, Action<XmlWriter, XmlReader> copier, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader > copier The delegate that will create an in-memory copy of reader as a XML stream. System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T>(XmlReader, Action<XmlWriter, XmlReader, T>, T, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T>(this XmlReader reader, Action<XmlWriter, XmlReader, T> copier, T arg, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T> copier The delegate that will create an in-memory copy of reader as a XML stream. T arg The parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T The type of the parameter of the delegate copier . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T1, T2>(XmlReader, Action<XmlWriter, XmlReader, T1, T2>, T1, T2, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T1, T2>(this XmlReader reader, Action<XmlWriter, XmlReader, T1, T2> copier, T1 arg1, T2 arg2, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T1, T2> copier The delegate that will create an in-memory copy of reader as a XML stream. T1 arg1 The first parameter of the delegate copier . T2 arg2 The second parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T1 The type of the first parameter of the delegate copier . T2 The type of the second parameter of the delegate copier . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T1, T2, T3>(XmlReader, Action<XmlWriter, XmlReader, T1, T2, T3>, T1, T2, T3, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T1, T2, T3>(this XmlReader reader, Action<XmlWriter, XmlReader, T1, T2, T3> copier, T1 arg1, T2 arg2, T3 arg3, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T1, T2, T3> copier The delegate that will create an in-memory copy of reader as a XML stream. T1 arg1 The first parameter of the delegate copier . T2 arg2 The second parameter of the delegate copier . T3 arg3 The third parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T1 The type of the first parameter of the delegate copier . T2 The type of the second parameter of the delegate copier . T3 The type of the third parameter of the delegate copier . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T1, T2, T3, T4>(XmlReader, Action<XmlWriter, XmlReader, T1, T2, T3, T4>, T1, T2, T3, T4, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T1, T2, T3, T4>(this XmlReader reader, Action<XmlWriter, XmlReader, T1, T2, T3, T4> copier, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T1, T2, T3, T4> copier The delegate that will create an in-memory copy of reader as a XML stream. T1 arg1 The first parameter of the delegate copier . T2 arg2 The second parameter of the delegate copier . T3 arg3 The third parameter of the delegate copier . T4 arg4 The fourth parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T1 The type of the first parameter of the delegate copier . T2 The type of the second parameter of the delegate copier . T3 The type of the third parameter of the delegate copier . T4 The type of the fourth parameter of the delegate copier . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T1, T2, T3, T4, T5>(XmlReader, Action<XmlWriter, XmlReader, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T1, T2, T3, T4, T5>(this XmlReader reader, Action<XmlWriter, XmlReader, T1, T2, T3, T4, T5> copier, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T1, T2, T3, T4, T5> copier The delegate that will create an in-memory copy of reader as a XML stream. T1 arg1 The first parameter of the delegate copier . T2 arg2 The second parameter of the delegate copier . T3 arg3 The third parameter of the delegate copier . T4 arg4 The fourth parameter of the delegate copier . T5 arg5 The fifth parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T1 The type of the first parameter of the delegate copier . T2 The type of the second parameter of the delegate copier . T3 The type of the third parameter of the delegate copier . T4 The type of the fourth parameter of the delegate copier . T5 The type of the fifth parameter of the delegate copier . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.UriConverter.html": {
    "href": "api/core/Cuemon.UriConverter.html",
    "title": "Class UriConverter | Cuemon .NET Standard",
    "keywords": "Class UriConverter This utility class is designed to make System.Uri related conversions easier to work with. Inheritance System.Object UriConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class UriConverter Methods | Improve this Doc FromProtocolRelativeUri(String, UriScheme) Converts the specified value of a protocol-relative System.String to its equivalent System.Uri . Declaration public static Uri FromProtocolRelativeUri(string value, UriScheme protocol) Parameters Type Name Description System.String value The System.String to be converted. UriScheme protocol The desired protocol of the value to be converted. Returns Type Description System.Uri An System.Uri that is equivalent to value with the specified protocol as System.Uri.Scheme . | Improve this Doc FromProtocolRelativeUri(String, UriScheme, String) Converts the specified value of a protocol-relative System.String to its equivalent System.Uri . Declaration public static Uri FromProtocolRelativeUri(string value, UriScheme protocol, string relativeReference) Parameters Type Name Description System.String value The System.String to be converted. UriScheme protocol The desired protocol of the value to be converted. System.String relativeReference The relative reference that value must begin with. Default is NetworkPathReference . Returns Type Description System.Uri An System.Uri that is equivalent to value with the specified protocol as System.Uri.Scheme . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Formatters.Json | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Formatters.Json Assembly : Cuemon.AspNetCore.Mvc.Formatters.Json.dll Classes JsonMvcCoreBuilderExtensions Extension methods for adding JSON formatters to MVC. JsonSerializationInputFormatter This class handles deserialization of JSON to objects using JsonFormatter . JsonSerializationMvcOptionsSetup A Microsoft.Extensions.Options.ConfigureOptions<TOptions> implementation which will add the JSON serializer formatters to Microsoft.AspNetCore.Mvc.MvcOptions . JsonSerializationOutputFormatter This class handles serialization of objects to JSON using JsonFormatter . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ConfigurableActionFilter-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ConfigurableActionFilter-1.html",
    "title": "Class ConfigurableActionFilter<TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableActionFilter<TOptions> A base class implementation of a filter that surrounds execution of the action. Inheritance System.Object Configurable <TOptions> ConfigurableActionFilter<TOptions> TimeMeasuringFilter Implements IConfigurable <TOptions> Microsoft.AspNetCore.Mvc.Filters.IActionFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members Configurable<TOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public abstract class ConfigurableActionFilter<TOptions> : Configurable<TOptions>, IConfigurable<TOptions>, IActionFilter, IFilterMetadata where TOptions : class, new() Type Parameters Name Description TOptions The type of the configured options. Constructors | Improve this Doc ConfigurableActionFilter(IOptions<TOptions>) Initializes a new instance of the ConfigurableAsyncResultFilter<TOptions> class. Declaration protected ConfigurableActionFilter(IOptions<TOptions> setup) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableActionFilter(Action<TOptions>) Initializes a new instance of the ConfigurableAsyncResultFilter<TOptions> class. Declaration protected ConfigurableActionFilter(Action<TOptions> setup) Parameters Type Name Description System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc OnActionExecuted(ActionExecutedContext) Called after the action executes, before the action result. Declaration public abstract void OnActionExecuted(ActionExecutedContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext context The Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext . | Improve this Doc OnActionExecuting(ActionExecutingContext) Called before the action executes, after model binding is complete. Declaration public abstract void OnActionExecuting(ActionExecutingContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext . Implements IConfigurable<TOptions> Microsoft.AspNetCore.Mvc.Filters.IActionFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Configurable <TOptions> Microsoft.AspNetCore.Mvc.Filters.IActionFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Filters.Cacheable | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Classes CacheableAsyncResultFilterListExtensions Extension methods for the System.Collections.Generic.IList<T> interface. CacheableObjectResult<T, TOptions> Provides a base class for ICacheableObjectResult related operations. CacheableObjectResultExtensions Extension methods for operations related to the ICacheableObjectResult interface. ContentBasedObjectResult<T> Provides a content based object result that is processed by an HTTP ETag filter implementation. ContentBasedOptions Specifies options that is related to the ContentBasedObjectResult<T> . ContentTimeBasedObjectResult<T> Provides a content and time based object result that is processed by both an HTTP ETag filter- and a Last-Modified filter implementation. ContentTimeBasedOptions Specifies options that is related to the ContentTimeBasedObjectResult<T> . HttpCacheableFilter A filter that will invoke filters implementing the ICacheableObjectResult interface. HttpCacheableOptions Specifies options that is related to the HttpCacheableFilter . HttpEntityTagHeader A filter that computes the response body and applies an appropriate HTTP Etag header. HttpEntityTagHeaderOptions Specifies options that is related to the HttpEntityTagHeader . HttpLastModifiedHeader A filter that applies a HTTP Last-Modified header. HttpLastModifiedHeaderOptions Specifies options that is related to the HttpLastModifiedHeader . TimeBasedObjectResult<T> Provides a time based object result that is processed by a Last-Modified filter implementation. TimeBasedOptions Specifies options that is related to the TimeBasedObjectResult<T> . Interfaces ICacheableAsyncResultFilter A filter that asynchronously surrounds execution of action results successfully returned from an action. ICacheableObjectResult An interface for providing hints to an implementor that an object is cacheable. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ContentTimeBasedObjectResult-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ContentTimeBasedObjectResult-1.html",
    "title": "Class ContentTimeBasedObjectResult<T> | Cuemon .NET Standard",
    "keywords": "Class ContentTimeBasedObjectResult<T> Provides a content and time based object result that is processed by both an HTTP ETag filter- and a Last-Modified filter implementation. Inheritance System.Object Configurable < ContentTimeBasedOptions > CacheableObjectResult <T, ContentTimeBasedOptions > ContentTimeBasedObjectResult<T> Implements IConfigurable < ContentTimeBasedOptions > ICacheableObjectResult ICacheableEntity ICacheableTimestamp ICacheableIntegrity Inherited Members CacheableObjectResult<T, ContentTimeBasedOptions>.Value Configurable<ContentTimeBasedOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class ContentTimeBasedObjectResult<T> : CacheableObjectResult<T, ContentTimeBasedOptions>, IConfigurable<ContentTimeBasedOptions>, ICacheableObjectResult, ICacheableEntity, ICacheableTimestamp, ICacheableIntegrity Type Parameters Name Description T The type of the object to make cacheable. Properties | Improve this Doc Checksum Gets a ChecksumResult that represents the integrity of this instance. Declaration public ChecksumResult Checksum { get; set; } Property Value Type Description ChecksumResult The checksum that represents the integrity of this instance. | Improve this Doc Created Gets a System.DateTime value from when data this instance represents was first created, expressed as the Coordinated Universal Time (UTC). Declaration public DateTime Created { get; set; } Property Value Type Description System.DateTime The timestamp from when data this instance represents was first created. | Improve this Doc HasChecksum Gets a value indicating whether this instance has a Checksum representation. Declaration public bool HasChecksum { get; } Property Value Type Description System.Boolean true if this instance has a Checksum representation; otherwise, false . | Improve this Doc Modified Gets a System.DateTime value from when data this instance represents was last modified, expressed as the Coordinated Universal Time (UTC). Declaration public DateTime? Modified { get; set; } Property Value Type Description System.Nullable < System.DateTime > The timestamp from when data this instance represents was last modified. | Improve this Doc Validation Gets the validation strength of the integrity of this instance. Declaration public ChecksumStrength Validation { get; set; } Property Value Type Description ChecksumStrength The validation strength of the integrity of this instance. Implements IConfigurable<TOptions> ICacheableObjectResult ICacheableEntity ICacheableTimestamp ICacheableIntegrity Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also CacheableObjectResult <T, TOptions> ICacheableIntegrity HttpLastModifiedHeader HttpEntityTagHeader HttpCacheableFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.DynamicCacheBustingOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.DynamicCacheBustingOptions.html",
    "title": "Class DynamicCacheBustingOptions | Cuemon .NET Standard",
    "keywords": "Class DynamicCacheBustingOptions Specifies options that is related to DynamicCacheBustingOptions operations. Inheritance System.Object CacheBustingOptions DynamicCacheBustingOptions Inherited Members CacheBustingOptions.PreferredCasing Namespace : Cuemon.AspNetCore.Mvc.Configuration Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class DynamicCacheBustingOptions : CacheBustingOptions Constructors | Improve this Doc DynamicCacheBustingOptions() Initializes a new instance of the DynamicCacheBustingOptions class. Declaration public DynamicCacheBustingOptions() Remarks The following table shows the initial property values for an instance of DynamicCacheBustingOptions . Property Initial Value PreferredLength 8 PreferredCharacters AlphanumericCharactersCaseSensitive TimeToLive 20 minutes Properties | Improve this Doc PreferredCharacters Gets or sets the preferred characters of Version . Declaration public string PreferredCharacters { get; set; } Property Value Type Description System.String The preferred characters of Version . | Improve this Doc PreferredLength Gets or sets the preferred length of Version . Declaration public int PreferredLength { get; set; } Property Value Type Description System.Int32 The preferred length of Version . | Improve this Doc TimeToLive Gets or sets the TTL of Version . Declaration public TimeSpan TimeToLive { get; set; } Property Value Type Description System.TimeSpan The TTL of Version . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also CacheBustingOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Middleware-5.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Middleware-5.html",
    "title": "Class Middleware<T1, T2, T3, T4, T5> | Cuemon .NET Standard",
    "keywords": "Class Middleware<T1, T2, T3, T4, T5> Provides a base-class for middleware implementation in ASP.NET Core with five dependency injected parameters. Inheritance System.Object MiddlewareCore Middleware<T1, T2, T3, T4, T5> Inherited Members MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class Middleware<T1, T2, T3, T4, T5> : MiddlewareCore Type Parameters Name Description T1 The type of the first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T2 The type of the second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T3 The type of the third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T4 The type of the fourth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T5 The type of the fifth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . Constructors | Improve this Doc Middleware(RequestDelegate) Initializes a new instance of the Middleware class. Declaration protected Middleware(RequestDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Methods | Improve this Doc InvokeAsync(HttpContext, T1, T2, T3, T4, T5) Executes the Middleware<T1, T2, T3, T4, T5> . Declaration public abstract Task InvokeAsync(HttpContext context, T1 di1, T2 di2, T3 di3, T4 di4, T5 di5) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T1 di1 The first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T2 di2 The second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T3 di3 The third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T4 di4 The fourth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T5 di5 The fifth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also ConfigurableMiddleware <T1, T2, T3, T4, T5, TOptions> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Infrastructure.MiddlewareCore.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Infrastructure.MiddlewareCore.html",
    "title": "Class MiddlewareCore | Cuemon .NET Standard",
    "keywords": "Class MiddlewareCore Provides a base-class for middleware implementation in ASP.NET Core. This API supports the product infrastructure and is not intended to be used directly from your code. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore<TOptions> Middleware Middleware<T> Middleware<T1, T2> Middleware<T1, T2, T3> Middleware<T1, T2, T3, T4> Middleware<T1, T2, T3, T4, T5> Namespace : Cuemon.AspNetCore.Infrastructure Assembly : Cuemon.AspNetCore.dll Syntax public abstract class MiddlewareCore Properties | Improve this Doc Next Gets the delegate of the request pipeline to invoke. Declaration protected RequestDelegate Next { get; } Property Value Type Description Microsoft.AspNetCore.Http.RequestDelegate The delegate of the request pipeline to invoke. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.HostingEnvironmentBuilderExtension.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.HostingEnvironmentBuilderExtension.html",
    "title": "Class HostingEnvironmentBuilderExtension | Cuemon .NET Standard",
    "keywords": "Class HostingEnvironmentBuilderExtension This is a factory implementation of the HostingEnvironmentMiddleware class. Inheritance System.Object HostingEnvironmentBuilderExtension Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public static class HostingEnvironmentBuilderExtension Methods | Improve this Doc UseHostingEnvironmentHeader(IApplicationBuilder, Action<HostingEnvironmentOptions>) Adds a hosting environment HTTP header to the Microsoft.AspNetCore.Builder.IApplicationBuilder request execution pipeline. Declaration public static IApplicationBuilder UseHostingEnvironmentHeader(this IApplicationBuilder builder, Action<HostingEnvironmentOptions> setup = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder builder The type that provides the mechanisms to configure an application’s request pipeline. System.Action < HostingEnvironmentOptions > setup The CorrelationIdentifierOptions middleware which need to be configured. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder A reference to this instance after the operation has completed. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.BasicAuthenticator.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.BasicAuthenticator.html",
    "title": "Delegate BasicAuthenticator | Cuemon .NET Standard",
    "keywords": "Delegate BasicAuthenticator Represents the method that defines an Authenticator typically assigned on BasicAuthenticationOptions . Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public delegate ClaimsPrincipal BasicAuthenticator(string username, string password); Parameters Type Name Description System.String username The username that must be paired with password . System.String password The password that must be paired with username . Returns Type Description System.Security.Claims.ClaimsPrincipal A System.Security.Claims.ClaimsPrincipal that is associated with the result of username and password . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlDocumentConverter.html": {
    "href": "api/core/Cuemon.Xml.XmlDocumentConverter.html",
    "title": "Class XmlDocumentConverter | Cuemon .NET Standard",
    "keywords": "Class XmlDocumentConverter This utility class is designed to make System.Xml.XmlDocument related conversions easier to work with. Inheritance System.Object XmlDocumentConverter Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlDocumentConverter Methods | Improve this Doc FromReader(XmlReader) Converts the given System.Xml.XmlReader to an System.Xml.XmlDocument . Declaration public static XmlDocument FromReader(XmlReader value) Parameters Type Name Description System.Xml.XmlReader value The System.Xml.XmlReader to be converted. Returns Type Description System.Xml.XmlDocument An System.Xml.XmlDocument object. | Improve this Doc FromReader(XmlReader, Boolean) Converts the given System.Xml.XmlReader to an System.Xml.XmlDocument . Declaration public static XmlDocument FromReader(XmlReader value, bool leaveStreamOpen) Parameters Type Name Description System.Xml.XmlReader value The System.Xml.XmlReader to be converted. System.Boolean leaveStreamOpen if true , the System.Xml.XmlReader object is being left open; otherwise it is being closed and disposed. Returns Type Description System.Xml.XmlDocument An System.Xml.XmlDocument object. | Improve this Doc FromStream(Stream) Converts the given System.IO.Stream to an System.Xml.XmlDocument . The stream is closed and disposed of afterwards. Declaration public static XmlDocument FromStream(Stream value) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to be converted. Returns Type Description System.Xml.XmlDocument An System.Xml.XmlDocument object. | Improve this Doc FromStream(Stream, Boolean) Converts the given System.IO.Stream to an System.Xml.XmlDocument . Declaration public static XmlDocument FromStream(Stream value, bool leaveStreamOpen) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to be converted. System.Boolean leaveStreamOpen if true , the System.IO.Stream object is being left open; otherwise it is being closed and disposed. Returns Type Description System.Xml.XmlDocument An System.Xml.XmlDocument object. | Improve this Doc FromString(String) Converts the given string to an System.Xml.XmlDocument . Declaration public static XmlDocument FromString(string value) Parameters Type Name Description System.String value The string to be converted. Returns Type Description System.Xml.XmlDocument An XmlDocument object. | Improve this Doc FromUri(Uri) Converts the given URI to an System.Xml.XmlDocument . Declaration public static XmlDocument FromUri(Uri value) Parameters Type Name Description System.Uri value The URI to be converted. Returns Type Description System.Xml.XmlDocument An XmlDocument object. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlCopyOptions.html": {
    "href": "api/core/Cuemon.Xml.XmlCopyOptions.html",
    "title": "Class XmlCopyOptions | Cuemon .NET Standard",
    "keywords": "Class XmlCopyOptions Specifies options that is related to XmlWriterUtility operations. Inheritance System.Object XmlCopyOptions Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public class XmlCopyOptions Constructors | Improve this Doc XmlCopyOptions() Initializes a new instance of the XmlCopyOptions class. Declaration public XmlCopyOptions() Properties | Improve this Doc LeaveStreamOpen Gets or sets a value indicating whether [leave stream open]. Declaration public bool LeaveStreamOpen { get; set; } Property Value Type Description System.Boolean true if the System.Xml.XmlReader is being left open; otherwise, false and the System.Xml.XmlReader is disposed of. | Improve this Doc WriterSettings Gets or sets the System.Xml.XmlWriterSettings which will be applied doing the copying process and need to be configured. Declaration public Action<XmlWriterSettings> WriterSettings { get; set; } Property Value Type Description System.Action < System.Xml.XmlWriterSettings > The writer settings. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlConvertExtensions.html": {
    "href": "api/core/Cuemon.Xml.XmlConvertExtensions.html",
    "title": "Class XmlConvertExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlConvertExtensions Extension methods for the System.Xml.XmlConvert class. Inheritance System.Object XmlConvertExtensions Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlConvertExtensions Methods | Improve this Doc ToString(DateTime, XmlDateTimeSerializationMode) Converts the specified value to a System.String using the serializationMode specified. Declaration public static string ToString(this DateTime value, XmlDateTimeSerializationMode serializationMode) Parameters Type Name Description System.DateTime value The System.DateTime value to convert. System.Xml.XmlDateTimeSerializationMode serializationMode One of the System.Xml.XmlDateTimeSerializationMode values that specify how to treat the System.DateTime value . Returns Type Description System.String A System.String equivalent of the System.DateTime value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.Serialization.html": {
    "href": "api/core/Cuemon.Xml.Serialization.html",
    "title": "Namespace Cuemon.Xml.Serialization | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Xml.Serialization Assembly : Cuemon.Xml.dll Classes XmlQualifiedEntity A class designed to help assure qualified names in XML serializations. XmlWrapper Provide ways to override the default XML serialization. Enums SerializableOrder Specifies the order of additional serialization information. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Text.EncodingUtility.html": {
    "href": "api/core/Cuemon.Text.EncodingUtility.html",
    "title": "Class EncodingUtility | Cuemon .NET Standard",
    "keywords": "Class EncodingUtility This utility class is designed to make System.Text.Encoding operations easier to work with. Inheritance System.Object EncodingUtility Namespace : Cuemon.Text Assembly : Cuemon.Core.dll Syntax public static class EncodingUtility Properties | Improve this Doc AsciiEncoding Gets an encoding for the ASCII (7-bit) character set. Declaration public static Encoding AsciiEncoding { get; } Property Value Type Description System.Text.Encoding An encoding for the ASCII (7-bit) character set. Methods | Improve this Doc TryParse(Byte[], out Encoding) Tries to resolve the Unicode System.Text.Encoding object from the specified System.Byte array. Declaration public static bool TryParse(byte[] value, out Encoding result) Parameters Type Name Description System.Byte [] value The System.Byte array to resolve the Unicode System.Text.Encoding object from. System.Text.Encoding result When this method returns, it contains the Unicode System.Text.Encoding value equivalent to the encoding contained in value , if the conversion succeeded, or a null reference (Nothing in Visual Basic) if the conversion failed. The conversion fails if the value parameter is null, or does not contain a Unicode representation of an System.Text.Encoding . Returns Type Description System.Boolean true if the value parameter was converted successfully; otherwise, false . | Improve this Doc TryParse(Stream, out Encoding) Tries to resolve the Unicode System.Text.Encoding object from the specified System.IO.Stream object. Declaration public static bool TryParse(Stream value, out Encoding result) Parameters Type Name Description System.IO.Stream value The System.IO.Stream object to resolve the Unicode System.Text.Encoding object from. System.Text.Encoding result When this method returns, it contains the Unicode System.Text.Encoding value equivalent to the encoding contained in value , if the conversion succeeded, or a null reference (Nothing in Visual Basic) if the conversion failed. The conversion fails if the value parameter is null, or does not contain a Unicode representation of an System.Text.Encoding . Returns Type Description System.Boolean true if the value parameter was converted successfully; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataManager.html": {
    "href": "api/core/Cuemon.Data.DataManager.html",
    "title": "Class DataManager | Cuemon .NET Standard",
    "keywords": "Class DataManager The DataManager is an abstract class in the Cuemon.Data namespace that can be used to implement execute commands of different database providers. Inheritance System.Object DataManager SqlDataManager Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public abstract class DataManager Properties | Improve this Doc ConnectionString Gets the string used to open the connection. Declaration public abstract string ConnectionString { get; } Property Value Type Description System.String The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. | Improve this Doc DefaultConnectionString Gets or sets the default connection string. Declaration public static string DefaultConnectionString { get; set; } Property Value Type Description System.String The default connection string. | Improve this Doc TransientFaultHandlingOptionsCallback Gets or sets the callback delegate that will provide options for transient fault handling. Declaration public abstract Action<TransientOperationOptions> TransientFaultHandlingOptionsCallback { get; set; } Property Value Type Description System.Action < TransientOperationOptions > An System.Action<T> with the options for transient fault handling. Methods | Improve this Doc Clone() Creates a new object that is a copy of the current instance. Declaration public abstract DataManager Clone() Returns Type Description DataManager A new object that is a copy of this instance. | Improve this Doc Execute(IDataCommand, DbParameter[]) Executes the command statement and returns the number of rows affected. Declaration public int Execute(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Int32 A System.Int32 value. | Improve this Doc ExecuteCommandCore(IDataCommand, DbParameter[]) Core method for executing all commands. Declaration protected virtual DbCommand ExecuteCommandCore(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Data.Common.DbCommand System.Data.Common.DbCommand Remarks If TransientFaultHandlingOptionsCallback has the EnableRecovery set to true , this method will with it's default implementation try to gracefully recover from transient faults when the following condition is met: RetryAttempts is less than the current attempt starting from 1 with a maximum of System.Byte.MaxValue retries DetectionStrategy must evaluate to true In case of a transient failure the default implementation will use RetryStrategy . In any other case the originating exception is thrown. | Improve this Doc ExecuteCore<T>(IDataCommand, DbParameter[], Func<DbCommand, T>) Core method for executing methods on the System.Data.Common.DbCommand object resolved from the virtual ExecuteCommandCore(IDataCommand, DbParameter[]) method. Declaration protected virtual T ExecuteCore<T>(IDataCommand dataCommand, DbParameter[] parameters, Func<DbCommand, T> commandInvoker) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. System.Func < System.Data.Common.DbCommand , T> commandInvoker The function delegate that will invoke a method on the resolved System.Data.Common.DbCommand from the virtual ExecuteCommandCore(IDataCommand, DbParameter[]) method. Returns Type Description T A value of T that is equal to the invoked method of the System.Data.Common.DbCommand object. Type Parameters Name Description T The type to return. | Improve this Doc ExecuteExists(IDataCommand, DbParameter[]) Executes the command statement and returns true if one or more records exists; otherwise false . Declaration public bool ExecuteExists(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Boolean A System.Boolean value. | Improve this Doc ExecuteIdentityDecimal(IDataCommand, DbParameter[]) Executes the command statement and returns an identity value as decimal. Declaration public abstract decimal ExecuteIdentityDecimal(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Decimal System.Decimal | Improve this Doc ExecuteIdentityInt32(IDataCommand, DbParameter[]) Executes the command statement and returns an identity value as int. Declaration public abstract int ExecuteIdentityInt32(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Int32 System.Int32 | Improve this Doc ExecuteIdentityInt64(IDataCommand, DbParameter[]) Executes the command statement and returns an identity value as long. Declaration public abstract long ExecuteIdentityInt64(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Int64 System.Int64 | Improve this Doc ExecuteReader(IDataCommand, DbParameter[]) Executes the command statement and returns an object supporting the DbDataReader interface. Declaration public DbDataReader ExecuteReader(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Data.Common.DbDataReader An object supporting the System.Data.Common.DbDataReader interface. | Improve this Doc ExecuteScalar(IDataCommand, DbParameter[]) Executes the command statement, and returns the value from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public object ExecuteScalar(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Object The first column of the first row in the result from dataCommand . | Improve this Doc ExecuteScalarAs<TResult>(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as TResult from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public TResult ExecuteScalarAs<TResult>(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description TResult The first column of the first row in the result from dataCommand as TResult . Type Parameters Name Description TResult The type of the return value. Remarks This method uses System.Globalization.CultureInfo.InvariantCulture when casting the first column of the first row in the result from dataCommand . | Improve this Doc ExecuteScalarAs<TResult>(IDataCommand, IFormatProvider, DbParameter[]) Executes the command statement, and returns the value as TResult from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public TResult ExecuteScalarAs<TResult>(IDataCommand dataCommand, IFormatProvider provider, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.IFormatProvider provider An object that supplies culture-specific formatting information. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description TResult The first column of the first row in the result from dataCommand as TResult . Type Parameters Name Description TResult The type of the return value. | Improve this Doc ExecuteScalarAsBoolean(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.Boolean from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public bool ExecuteScalarAsBoolean(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Boolean The first column of the first row in the result from dataCommand as System.Boolean . | Improve this Doc ExecuteScalarAsByte(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.Byte from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public byte ExecuteScalarAsByte(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Byte The first column of the first row in the result from dataCommand as System.Byte . | Improve this Doc ExecuteScalarAsDateTime(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.DateTime from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public DateTime ExecuteScalarAsDateTime(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.DateTime The first column of the first row in the result from dataCommand as System.DateTime . | Improve this Doc ExecuteScalarAsDecimal(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.Decimal from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public decimal ExecuteScalarAsDecimal(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Decimal The first column of the first row in the result from dataCommand as System.Decimal . | Improve this Doc ExecuteScalarAsDouble(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.Double from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public double ExecuteScalarAsDouble(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Double The first column of the first row in the result from dataCommand as System.Double . | Improve this Doc ExecuteScalarAsGuid(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.Guid from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public Guid ExecuteScalarAsGuid(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Guid The first column of the first row in the result from dataCommand as System.Guid . | Improve this Doc ExecuteScalarAsInt16(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.Int16 from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public short ExecuteScalarAsInt16(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Int16 The first column of the first row in the result from dataCommand as System.Int16 . | Improve this Doc ExecuteScalarAsInt32(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.Int32 from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public int ExecuteScalarAsInt32(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Int32 The first column of the first row in the result from dataCommand as System.Int32 . | Improve this Doc ExecuteScalarAsInt64(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.Int64 from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public long ExecuteScalarAsInt64(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Int64 The first column of the first row in the result from dataCommand as System.Int64 . | Improve this Doc ExecuteScalarAsSByte(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.SByte from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public sbyte ExecuteScalarAsSByte(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.SByte The first column of the first row in the result from dataCommand as System.SByte . | Improve this Doc ExecuteScalarAsString(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.String from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public string ExecuteScalarAsString(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.String The first column of the first row in the result from dataCommand as System.String . | Improve this Doc ExecuteScalarAsType(IDataCommand, Type, DbParameter[]) Executes the command statement, and returns the value as the specified returnType from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public object ExecuteScalarAsType(IDataCommand dataCommand, Type returnType, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Type returnType The type to return the first column value as. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Object The first column of the first row in the result from dataCommand as the specified returnType . Remarks This method uses System.Globalization.CultureInfo.InvariantCulture when casting the first column of the first row in the result from dataCommand . | Improve this Doc ExecuteScalarAsType(IDataCommand, Type, IFormatProvider, DbParameter[]) Executes the command statement, and returns the value as the specified returnType from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public object ExecuteScalarAsType(IDataCommand dataCommand, Type returnType, IFormatProvider provider, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Type returnType The type to return the first column value as. System.IFormatProvider provider An object that supplies culture-specific formatting information. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Object The first column of the first row in the result from dataCommand as the specified returnType . | Improve this Doc ExecuteScalarAsUInt16(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.UInt16 from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public ushort ExecuteScalarAsUInt16(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.UInt16 The first column of the first row in the result from dataCommand as System.UInt16 . | Improve this Doc ExecuteScalarAsUInt32(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.UInt32 from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public uint ExecuteScalarAsUInt32(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.UInt32 The first column of the first row in the result from dataCommand as System.UInt32 . | Improve this Doc ExecuteScalarAsUInt64(IDataCommand, DbParameter[]) Executes the command statement, and returns the value as System.UInt64 from the first column of the first row in the result set. Additional columns or rows are ignored. Declaration public ulong ExecuteScalarAsUInt64(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.UInt64 The first column of the first row in the result from dataCommand as System.UInt64 . | Improve this Doc ExecuteXmlString(IDataCommand, DbParameter[]) Executes the command statement and returns a string object with the retrieved XML. Declaration public virtual string ExecuteXmlString(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.String An System.String object. | Improve this Doc GetCommandCore(IDataCommand, DbParameter[]) Gets the command object to be used by all execute related methods. Declaration protected abstract DbCommand GetCommandCore(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Data.Common.DbCommand | Improve this Doc GetReaderColumnNames(DbDataReader) Creates and returns a sequence of column names resolved from the specified reader . Declaration public static IEnumerable<string> GetReaderColumnNames(DbDataReader reader) Parameters Type Name Description System.Data.Common.DbDataReader reader The reader to resolve column names from. Returns Type Description System.Collections.Generic.IEnumerable < System.String > A sequence of column names resolved from the specified reader . | Improve this Doc GetReaderColumns(DbDataReader) Creates and returns a System.Collections.Generic.KeyValuePair<TKey,TValue> sequence of column names and values resolved from the specified reader . Declaration public static IEnumerable<KeyValuePair<string, object>> GetReaderColumns(DbDataReader reader) Parameters Type Name Description System.Data.Common.DbDataReader reader The reader to resolve column names and values from. Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.Object >> A System.Collections.Generic.KeyValuePair<TKey,TValue> sequence of column names and values resolved from the specified reader . | Improve this Doc GetReaderColumnValues(DbDataReader) Creates and returns a sequence of column values resolved from the specified reader . Declaration public static IEnumerable<object> GetReaderColumnValues(DbDataReader reader) Parameters Type Name Description System.Data.Common.DbDataReader reader The reader to resolve column values from. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > A sequence of column values resolved from the specified reader . | Improve this Doc ParseDbType(DbType) Parses and returns a System.Type equivalent of dbType . Declaration public static Type ParseDbType(DbType dbType) Parameters Type Name Description System.Data.DbType dbType The System.Data.DbType to parse. Returns Type Description System.Type A System.Type equivalent of dbType . | Improve this Doc ReaderToStream(DbDataReader) Converts the given System.Data.Common.DbDataReader compatible object to a stream. Note: DbDataReader must return only one field (for instance, a XML field), otherwise an exception is thrown! Declaration public static Stream ReaderToStream(DbDataReader value) Parameters Type Name Description System.Data.Common.DbDataReader value The System.Data.Common.DbDataReader to build a stream from. Returns Type Description System.IO.Stream A System.IO.Stream object. | Improve this Doc ReaderToString(DbDataReader) Converts the given System.Data.Common.DbDataReader compatible object to a string. Note: DbDataReader must return only one field, otherwise an exception is thrown! Declaration public static string ReaderToString(DbDataReader value) Parameters Type Name Description System.Data.Common.DbDataReader value The System.Data.Common.DbDataReader to build a string from. Returns Type Description System.String A System.String object. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ConditionExtensions.html": {
    "href": "api/core/Cuemon.ConditionExtensions.html",
    "title": "Class ConditionExtensions | Cuemon .NET Standard",
    "keywords": "Class ConditionExtensions This is an extension implementation of the most common methods on the Condition class. Inheritance System.Object ConditionExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ConditionExtensions Methods | Improve this Doc IsEmailAddress(String) Determines whether the specified value has a valid format of an email address. Declaration public static bool IsEmailAddress(this string value) Parameters Type Name Description System.String value The string to verify has a valid format of an email address. Returns Type Description System.Boolean true if the specified value has a valid format of an email address; otherwise, false . | Improve this Doc IsGuid(String) Determines whether the specified value has a valid format of a System.Guid . Declaration public static bool IsGuid(this string value) Parameters Type Name Description System.String value The string to verify has a valid format of a System.Guid . Returns Type Description System.Boolean true if the specified value has a format of a System.Guid ; otherwise, false . Remarks This implementation only evaluates for GUID formats of: DigitFormat | BraceFormat | ParenthesisFormat , eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses. The reason not to include NumberFormat , eg. 32 digits is the possible unintended GUID result of a MD5 string representation. | Improve this Doc IsGuid(String, GuidFormats) Determines whether the specified value has a valid format of a System.Guid . Declaration public static bool IsGuid(this string value, GuidFormats format) Parameters Type Name Description System.String value The string to verify has a valid format of a System.Guid . GuidFormats format A bitmask comprised of one or more GuidFormats that specify how the GUID parsing is conducted. Returns Type Description System.Boolean true if the specified value has a format of a System.Guid ; otherwise, false . | Improve this Doc IsHex(String) Determines whether the specified value is hexadecimal. Declaration public static bool IsHex(this string value) Parameters Type Name Description System.String value The string to verify is hexadecimal. Returns Type Description System.Boolean true if the specified value is hexadecimal; otherwise, false . | Improve this Doc IsNumeric(String) Determines whether the specified value can be evaluated as a number. Declaration public static bool IsNumeric(this string value) Parameters Type Name Description System.String value The value to be evaluated. Returns Type Description System.Boolean true if the specified value can be evaluated as a number; otherwise, false . Remarks This method implements a default permitted format of value as System.Globalization.NumberStyles.Number . This method implements a default culture-specific formatting information about value specified to System.Globalization.CultureInfo.InvariantCulture . | Improve this Doc IsNumeric(String, NumberStyles) Determines whether the specified value can be evaluated as a number. Declaration public static bool IsNumeric(this string value, NumberStyles style) Parameters Type Name Description System.String value The value to be evaluated. System.Globalization.NumberStyles style A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . Returns Type Description System.Boolean true if the specified value can be evaluated as a number; otherwise, false . Remarks This method implements a default culture-specific formatting information about value specified to System.Globalization.CultureInfo.InvariantCulture . | Improve this Doc IsNumeric(String, NumberStyles, IFormatProvider) Determines whether the specified value can be evaluated as a number. Declaration public static bool IsNumeric(this string value, NumberStyles style, IFormatProvider provider) Parameters Type Name Description System.String value The value to be evaluated. System.Globalization.NumberStyles style A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . System.IFormatProvider provider An System.IFormatProvider that supplies culture-specific formatting information about value . Returns Type Description System.Boolean true if the specified value can be evaluated as a number; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.Security.WebSecurityUtilityExtensions.html": {
    "href": "api/core/Cuemon.Web.Security.WebSecurityUtilityExtensions.html",
    "title": "Class WebSecurityUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class WebSecurityUtilityExtensions This is an extension implementation of the most common methods on the WebSecurityUtility class. Inheritance System.Object WebSecurityUtilityExtensions Namespace : Cuemon.Web.Security Assembly : Cuemon.Web.dll Syntax public static class WebSecurityUtilityExtensions Methods | Improve this Doc ToProtectedUri(String, Byte[]) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this string uriLocation, byte[] securityKey) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(String, Byte[], SecurityTokenSettings) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this string uriLocation, byte[] securityKey, SecurityTokenSettings settings) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(String, Byte[], SecurityTokenSettings, HashAlgorithmType) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this string uriLocation, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(String, Byte[], SecurityTokenSettings, HashAlgorithmType, String) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this string uriLocation, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType, string secureUriFormat) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . System.String secureUriFormat The naming format of the required query string parameters of the tamper protected URI. Default is ?token={0}&iv={1}&salt={2} , where you can change the naming of the query string parameters. Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(String, Byte[], SecurityTokenSettings, HashAlgorithmType, String, String) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this string uriLocation, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType, string secureUriFormat, string querystringParameterHashName) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . System.String secureUriFormat The naming format of the required query string parameters of the tamper protected URI. Default is ?token={0}&iv={1}&salt={2} , where you can change the naming of the query string parameters. System.String querystringParameterHashName The name of the checksum parameter to append to the tampering protected URI. Default is hash . Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(Uri, Byte[]) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this Uri location, byte[] securityKey) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(Uri, Byte[], SecurityTokenSettings) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this Uri location, byte[] securityKey, SecurityTokenSettings settings) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(Uri, Byte[], SecurityTokenSettings, HashAlgorithmType) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this Uri location, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(Uri, Byte[], SecurityTokenSettings, HashAlgorithmType, String) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this Uri location, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType, string secureUriFormat) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . System.String secureUriFormat The naming format of the required query string parameters of the tamper protected URI. Default is ?token={0}&iv={1}&salt={2} , where you can change the naming of the query string parameters. Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ToProtectedUri(Uri, Byte[], SecurityTokenSettings, HashAlgorithmType, String, String) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri ToProtectedUri(this Uri location, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType, string secureUriFormat, string querystringParameterHashName) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . System.String secureUriFormat The naming format of the required query string parameters of the tamper protected URI. Default is ?token={0}&iv={1}&salt={2} , where you can change the naming of the query string parameters. System.String querystringParameterHashName The name of the checksum parameter to append to the tampering protected URI. Default is hash . Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc VerifyProtectedUri(Uri, Byte[]) Parses and verifies the tampering protected URI. Declaration public static void VerifyProtectedUri(this Uri protectedUri, byte[] securityKey) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of a SecurityToken . Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc VerifyProtectedUri(Uri, Byte[], String) Parses and verifies the tampering protected URI. Declaration public static void VerifyProtectedUri(this Uri protectedUri, byte[] securityKey, string token) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc VerifyProtectedUri(Uri, Byte[], String, String) Parses and verifies the tampering protected URI. Declaration public static void VerifyProtectedUri(this Uri protectedUri, byte[] securityKey, string token, string iv) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc VerifyProtectedUri(Uri, Byte[], String, String, String) Parses and verifies the tampering protected URI. Declaration public static void VerifyProtectedUri(this Uri protectedUri, byte[] securityKey, string token, string iv, string salt) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . System.String salt The salt used in the computation of the integrity verification of protectedUri . Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc VerifyProtectedUri(Uri, Byte[], String, String, String, String) Parses and verifies the tampering protected URI. Declaration public static void VerifyProtectedUri(this Uri protectedUri, byte[] securityKey, string token, string iv, string salt, string hash) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . System.String salt The salt used in the computation of the integrity verification of protectedUri . System.String hash The checksum to verify the integrity of protectedUri . Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc VerifyProtectedUri(Uri, Byte[], String, String, String, String, HashAlgorithmType) Parses and verifies the tampering protected URI. Declaration public static void VerifyProtectedUri(this Uri protectedUri, byte[] securityKey, string token, string iv, string salt, string hash, HashAlgorithmType algorithmType) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . System.String salt The salt used in the computation of the integrity verification of protectedUri . System.String hash The checksum to verify the integrity of protectedUri . HashAlgorithmType algorithmType The hash algorithm to use for the protectedUri checksum computation. Default is SHA1 . Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc VerifyProtectedUri(Uri, Byte[], String, String, String, String, HashAlgorithmType, String) Parses and verifies the tampering protected URI. Declaration public static void VerifyProtectedUri(this Uri protectedUri, byte[] securityKey, string token, string iv, string salt, string hash, HashAlgorithmType algorithmType, string querystringParameterHashName) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . System.String salt The salt used in the computation of the integrity verification of protectedUri . System.String hash The checksum to verify the integrity of protectedUri . HashAlgorithmType algorithmType The hash algorithm to use for the protectedUri checksum computation. Default is SHA1 . System.String querystringParameterHashName The name of the checksum parameter to remove from the protectedUri before integrity verification. Default is hash . Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.Security.WebSecurityUtility.html": {
    "href": "api/core/Cuemon.Web.Security.WebSecurityUtility.html",
    "title": "Class WebSecurityUtility | Cuemon .NET Standard",
    "keywords": "Class WebSecurityUtility This utility class is designed to make web related security operations easier to work with. Inheritance System.Object WebSecurityUtility Namespace : Cuemon.Web.Security Assembly : Cuemon.Web.dll Syntax public static class WebSecurityUtility Methods | Improve this Doc CreateTamperingProtectedUri(String, Byte[]) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(string uriLocation, byte[] securityKey) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(String, Byte[], SecurityTokenSettings) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(string uriLocation, byte[] securityKey, SecurityTokenSettings settings) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(String, Byte[], SecurityTokenSettings, HashAlgorithmType) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(string uriLocation, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(String, Byte[], SecurityTokenSettings, HashAlgorithmType, String) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(string uriLocation, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType, string secureUriFormat) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . System.String secureUriFormat The naming format of the required query string parameters of the tamper protected URI. Default is ?token={0}&iv={1}&salt={2} , where you can change the naming of the query string parameters. Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(String, Byte[], SecurityTokenSettings, HashAlgorithmType, String, String) Converts the specified uriLocation to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(string uriLocation, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType, string secureUriFormat, string querystringParameterHashName) Parameters Type Name Description System.String uriLocation The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . System.String secureUriFormat The naming format of the required query string parameters of the tamper protected URI. Default is ?token={0}&iv={1}&salt={2} , where you can change the naming of the query string parameters. System.String querystringParameterHashName The name of the checksum parameter to append to the tampering protected URI. Default is hash . Returns Type Description System.Uri An URI equivalent to the uriLocation but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(Uri, Byte[]) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(Uri location, byte[] securityKey) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(Uri, Byte[], SecurityTokenSettings) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(Uri location, byte[] securityKey, SecurityTokenSettings settings) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(Uri, Byte[], SecurityTokenSettings, HashAlgorithmType) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(Uri location, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(Uri, Byte[], SecurityTokenSettings, HashAlgorithmType, String) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(Uri location, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType, string secureUriFormat) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . System.String secureUriFormat The naming format of the required query string parameters of the tamper protected URI. Default is ?token={0}&iv={1}&salt={2} , where you can change the naming of the query string parameters. Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc CreateTamperingProtectedUri(Uri, Byte[], SecurityTokenSettings, HashAlgorithmType, String, String) Converts the specified location to a tampering protected System.Uri . Declaration public static Uri CreateTamperingProtectedUri(Uri location, byte[] securityKey, SecurityTokenSettings settings, HashAlgorithmType algorithmType, string secureUriFormat, string querystringParameterHashName) Parameters Type Name Description System.Uri location The URI to protect from tampering. System.Byte [] securityKey The security key to use for the SecurityToken encryption. SecurityTokenSettings settings The settings to apply to the SecurityToken . HashAlgorithmType algorithmType The hash algorithm to use for the URI checksum computation. Default is SHA1 . System.String secureUriFormat The naming format of the required query string parameters of the tamper protected URI. Default is ?token={0}&iv={1}&salt={2} , where you can change the naming of the query string parameters. System.String querystringParameterHashName The name of the checksum parameter to append to the tampering protected URI. Default is hash . Returns Type Description System.Uri An URI equivalent to the location but protected from tampering - including but not limited to - MITM attacks. | Improve this Doc ParseTamperingProtectedUri(Uri, Byte[]) Parses and verifies the tampering protected URI. Declaration public static SecurityToken ParseTamperingProtectedUri(Uri protectedUri, byte[] securityKey) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of a SecurityToken . Returns Type Description SecurityToken An instance of the SecurityToken object if the protectedUri is valid. Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc ParseTamperingProtectedUri(Uri, Byte[], String) Parses and verifies the tampering protected URI. Declaration public static SecurityToken ParseTamperingProtectedUri(Uri protectedUri, byte[] securityKey, string token) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . Returns Type Description SecurityToken An instance of the SecurityToken object if the protectedUri is valid. Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc ParseTamperingProtectedUri(Uri, Byte[], String, String) Parses and verifies the tampering protected URI. Declaration public static SecurityToken ParseTamperingProtectedUri(Uri protectedUri, byte[] securityKey, string token, string iv) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . Returns Type Description SecurityToken An instance of the SecurityToken object if the protectedUri is valid. Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc ParseTamperingProtectedUri(Uri, Byte[], String, String, String) Parses and verifies the tampering protected URI. Declaration public static SecurityToken ParseTamperingProtectedUri(Uri protectedUri, byte[] securityKey, string token, string iv, string salt) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . System.String salt The salt used in the computation of the integrity verification of protectedUri . Returns Type Description SecurityToken An instance of the SecurityToken object if the protectedUri is valid. Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc ParseTamperingProtectedUri(Uri, Byte[], String, String, String, String) Parses and verifies the tampering protected URI. Declaration public static SecurityToken ParseTamperingProtectedUri(Uri protectedUri, byte[] securityKey, string token, string iv, string salt, string hash) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . System.String salt The salt used in the computation of the integrity verification of protectedUri . System.String hash The checksum to verify the integrity of protectedUri . Returns Type Description SecurityToken An instance of the SecurityToken object if the protectedUri is valid. Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc ParseTamperingProtectedUri(Uri, Byte[], String, String, String, String, HashAlgorithmType) Parses and verifies the tampering protected URI. Declaration public static SecurityToken ParseTamperingProtectedUri(Uri protectedUri, byte[] securityKey, string token, string iv, string salt, string hash, HashAlgorithmType algorithmType) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . System.String salt The salt used in the computation of the integrity verification of protectedUri . System.String hash The checksum to verify the integrity of protectedUri . HashAlgorithmType algorithmType The hash algorithm to use for the protectedUri checksum computation. Default is SHA1 . Returns Type Description SecurityToken An instance of the SecurityToken object if the protectedUri is valid. Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. | Improve this Doc ParseTamperingProtectedUri(Uri, Byte[], String, String, String, String, HashAlgorithmType, String) Parses and verifies the tampering protected URI. Declaration public static SecurityToken ParseTamperingProtectedUri(Uri protectedUri, byte[] securityKey, string token, string iv, string salt, string hash, HashAlgorithmType algorithmType, string querystringParameterHashName) Parameters Type Name Description System.Uri protectedUri The tampering protected URI. System.Byte [] securityKey The security key to use in the decryption of the token . System.String token The security token to decrypt and parse for a SecurityToken . System.String iv The initialization vector (IV) to use in the decryption of the token . System.String salt The salt used in the computation of the integrity verification of protectedUri . System.String hash The checksum to verify the integrity of protectedUri . HashAlgorithmType algorithmType The hash algorithm to use for the protectedUri checksum computation. Default is SHA1 . System.String querystringParameterHashName The name of the checksum parameter to remove from the protectedUri before integrity verification. Default is hash . Returns Type Description SecurityToken An instance of the SecurityToken object if the protectedUri is valid. Exceptions Type Condition System.Security.SecurityException This exception is thrown when an unsucessfull parse is meet, hence values has been tampered with, protectedUri is invalid, token has expired or one or more of the necessary parameters is missing. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Web.JsonWebTokenHashAlgorithmConverter.html": {
    "href": "api/core/Cuemon.Security.Web.JsonWebTokenHashAlgorithmConverter.html",
    "title": "Class JsonWebTokenHashAlgorithmConverter | Cuemon .NET Standard",
    "keywords": "Class JsonWebTokenHashAlgorithmConverter This utility class is designed to make JsonWebTokenHashAlgorithm related conversions easier to work with. Inheritance System.Object JsonWebTokenHashAlgorithmConverter Namespace : Cuemon.Security.Web Assembly : Cuemon.Security.dll Syntax public static class JsonWebTokenHashAlgorithmConverter Methods | Improve this Doc ToHmacAlgorithm(JsonWebTokenHashAlgorithm) Converts the specified value to its HmacAlgorithmType equivalent. Declaration public static HmacAlgorithmType ToHmacAlgorithm(JsonWebTokenHashAlgorithm value) Parameters Type Name Description JsonWebTokenHashAlgorithm value The JSON Web Token hash algorithm to be converted. Returns Type Description HmacAlgorithmType A HmacAlgorithmType that is equivalent to value . | Improve this Doc ToString(JsonWebTokenHashAlgorithm) Converts the specified value to its JWT System.String equivalent. Declaration public static string ToString(JsonWebTokenHashAlgorithm value) Parameters Type Name Description JsonWebTokenHashAlgorithm value The JSON Web Token hash algorithm to be converted. Returns Type Description System.String A JWT System.String that is equivalent to value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template.html": {
    "href": "api/core/Cuemon.Template.html",
    "title": "Class Template | Cuemon .NET Standard",
    "keywords": "Class Template Represents a Template with an empty value. Inheritance System.Object Template Template<T1> Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template() Initializes a new instance of the Template class. Declaration public Template() Properties | Improve this Doc IsEmpty Gets a value indicating whether this Template is empty. Declaration public virtual bool IsEmpty { get; } Property Value Type Description System.Boolean true if this Template is empty; otherwise, false . Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public virtual Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public virtual object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-9.html": {
    "href": "api/core/Cuemon.Template-9.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> Represents a Template with nine generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> : Template<T1, T2, T3, T4, T5, T6, T7, T8> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . Properties | Improve this Doc Arg9 Gets or sets the ninth parameter of this instance. Declaration public T9 Arg9 { get; set; } Property Value Type Description T9 The ninth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Obfuscator.html": {
    "href": "api/core/Cuemon.Security.Obfuscator.html",
    "title": "Class Obfuscator | Cuemon .NET Standard",
    "keywords": "Class Obfuscator Provides methods for obfuscation of documents for reduced readability and size. Inheritance System.Object Obfuscator XmlObfuscator Namespace : Cuemon.Security Assembly : Cuemon.Security.dll Syntax public abstract class Obfuscator Constructors | Improve this Doc Obfuscator() Initializes a new instance of the Obfuscator class using System.Text.Encoding.Unicode for the character encoding. Declaration protected Obfuscator() | Improve this Doc Obfuscator(IEnumerable<String>) Initializes a new instance of the Obfuscator class using System.Text.Encoding.Unicode for the character encoding. Declaration protected Obfuscator(IEnumerable<string> exclusions) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > exclusions A sequence of System.String values used for excluding matching original values in the obfuscation process. | Improve this Doc Obfuscator(Encoding) Initializes a new instance of the Obfuscator class. Declaration protected Obfuscator(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding The character encoding to use. | Improve this Doc Obfuscator(Encoding, IEnumerable<String>) Initializes a new instance of the Obfuscator class. Declaration protected Obfuscator(Encoding encoding, IEnumerable<string> exclusions) Parameters Type Name Description System.Text.Encoding encoding The character encoding to use. System.Collections.Generic.IEnumerable < System.String > exclusions A sequence of System.String values used for excluding matching original values in the obfuscation process. Properties | Improve this Doc CurrentCombinationLength Gets the length of the current combination used in conjuction with CurrentPermutationSize . Declaration protected byte CurrentCombinationLength { get; } Property Value Type Description System.Byte The length of the current combination used in conjuction with CurrentPermutationSize . | Improve this Doc CurrentPermutationSize Gets the calculated size of the current permutation used in conjuction with CurrentCombinationLength . Declaration protected int CurrentPermutationSize { get; } Property Value Type Description System.Int32 The calculated size of the current permutation used in conjuction with CurrentCombinationLength . | Improve this Doc Encoding Gets or sets the character encoding to use. Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding The character encoding to use. The default is System.Text.Encoding.Unicode . | Improve this Doc Exclusions Gets a list of exclusions for the obfuscation process. Declaration protected ICollection<string> Exclusions { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > A list of exclusions for the obfuscation process. | Improve this Doc Mappings Gets the generated mapping values associated with the obfuscated content. Declaration protected Dictionary<string, ObfuscatorMapping> Mappings { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , ObfuscatorMapping > The original values gathered in a mappable structure. | Improve this Doc PermutationCharacters Gets an System.Collections.Generic.IList<T> compatible object holding the characters initialized by InitializePermutationCharacters() . Declaration protected IList<char> PermutationCharacters { get; } Property Value Type Description System.Collections.Generic.IList < System.Char > An System.Collections.Generic.IList<T> compatible object holding the characters initialized by InitializePermutationCharacters() . Methods | Improve this Doc ComputeHash(String) Computes a SHA-1 hash value of the specified System.String value. Declaration protected virtual string ComputeHash(string value) Parameters Type Name Description System.String value The System.String value to compute a hash code for. Returns Type Description System.String A System.String containing the computed SHA-1 hash value of value . Remarks Do override this method if you prefer another hashing than SHA-1. | Improve this Doc CreateMapping() Creates and returns a mappaple format of the original values and the obfuscated values. Declaration public abstract Stream CreateMapping() Returns Type Description System.IO.Stream A mappaple format of the original values and the obfuscated values. | Improve this Doc GenerateObfuscatedValue() Creates and returns a random generated System.String with a factorial size of (x - CurrentCombinationLength ) ideal for obfuscated usage. Declaration protected string GenerateObfuscatedValue() Returns Type Description System.String A random generated System.String with a factorial size of (x - CurrentCombinationLength ) ideal for obfuscated usage, where x in the default implementation equals 62. Remarks This implementation uses the values from PermutationCharacters to compute the permutation. Using the standard implementation gives a close to limitless permutation in regards to obfuscation, as the value automatically grows when needed. | Improve this Doc InitializePermutationCharacters() Initializes the permutation characters used in the obfuscation process. Declaration protected virtual IList<char> InitializePermutationCharacters() Returns Type Description System.Collections.Generic.IList < System.Char > An System.Collections.Generic.IList<T> compatible object holding the permuation characters used in the obfuscation process. Remarks Override this method to implement your own initialization of permuation characters. Default implementation is initialized as a read-only System.Collections.Generic.IList<T> compatible object with the values found in AlphanumericCharactersCaseSensitive . | Improve this Doc Obfuscate(Stream) Obfuscates the values of the specified System.IO.Stream object. Declaration public abstract Stream Obfuscate(Stream value) Parameters Type Name Description System.IO.Stream value The System.IO.Stream object to obfuscate. Returns Type Description System.IO.Stream A System.IO.Stream object where the values has been obfuscated. | Improve this Doc Revert(Stream, Stream) Revert the obfuscated value of value to its original state by applying the mappaple values of mapping . Declaration public abstract Stream Revert(Stream value, Stream mapping) Parameters Type Name Description System.IO.Stream value The obfuscated System.IO.Stream to revert. System.IO.Stream mapping A System.IO.Stream containing mappaple values necessary to revert value to its original state. Returns Type Description System.IO.Stream A System.IO.Stream object where the obfuscated value has been reverted to its original value. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-3.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-3.html",
    "title": "Class ConfigurableMiddleware<T1, T2, TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableMiddleware<T1, T2, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with two dependency injected parameters. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore <TOptions> ConfigurableMiddleware<T1, T2, TOptions> Implements IConfigurable <TOptions> Inherited Members ConfigurableMiddlewareCore<TOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class ConfigurableMiddleware<T1, T2, TOptions> : ConfigurableMiddlewareCore<TOptions>, IConfigurable<TOptions> where TOptions : class, new() Type Parameters Name Description T1 The type of the first dependency injected parameter of InvokeAsync(HttpContext, T1, T2) . T2 The type of the second dependency injected parameter of InvokeAsync(HttpContext, T1, T2) . TOptions The type of the options to setup. Constructors | Improve this Doc ConfigurableMiddleware(RequestDelegate, IOptions<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, IOptions<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableMiddleware(RequestDelegate, Action<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, Action<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc InvokeAsync(HttpContext, T1, T2) Executes the ConfigurableMiddleware<T1, T2, TOptions> . Declaration public abstract Task InvokeAsync(HttpContext context, T1 di1, T2 di2) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T1 di1 The first dependency injected parameter of InvokeAsync(HttpContext, T1, T2) . T2 di2 The second dependency injected parameter of InvokeAsync(HttpContext, T1, T2) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Middleware <T1, T2> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticationBuilderExtension.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticationBuilderExtension.html",
    "title": "Class HmacAuthenticationBuilderExtension | Cuemon .NET Standard",
    "keywords": "Class HmacAuthenticationBuilderExtension This is a factory implementation of the HmacAuthenticationMiddleware class. Inheritance System.Object HmacAuthenticationBuilderExtension Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public static class HmacAuthenticationBuilderExtension Methods | Improve this Doc UseHmacAuthentication(IApplicationBuilder, Action<HmacAuthenticationOptions>) Adds a HTTP HMAC Authentication scheme to the Microsoft.AspNetCore.Builder.IApplicationBuilder request execution pipeline. Declaration public static IApplicationBuilder UseHmacAuthentication(this IApplicationBuilder builder, Action<HmacAuthenticationOptions> setup = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder builder The type that provides the mechanisms to configure an application’s request pipeline. System.Action < HmacAuthenticationOptions > setup The HTTP HmacAuthenticationOptions middleware which need to be configured. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder A reference to this instance after the operation has completed. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationParameters.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationParameters.html",
    "title": "Class DigestAccessAuthenticationParameters | Cuemon .NET Standard",
    "keywords": "Class DigestAccessAuthenticationParameters Represents a set of parameters that is needed for creating an application of cryptographic hashing with usage of nonce values to prevent replay attacks. Inheritance System.Object DigestAccessAuthenticationParameters Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public class DigestAccessAuthenticationParameters Properties | Improve this Doc Algorithm Gets the algorithm to use when computing the HA1-, HA2-, and response hash values. Declaration public HashAlgorithmType Algorithm { get; } Property Value Type Description HashAlgorithmType The algorithm to use when computing the HA1-, HA2-, and response hash values. | Improve this Doc Credentials Gets the credentials used in the computation of HA1-, HA2-, and response hash values. Declaration public ImmutableDictionary<string, string> Credentials { get; } Property Value Type Description System.Collections.Immutable.ImmutableDictionary < System.String , System.String > The credentials used in the computation of HA1-, HA2-, and response hash values. | Improve this Doc HttpMethod Gets the HTTP method to include in the HA2 computed value. Declaration public string HttpMethod { get; } Property Value Type Description System.String The HTTP method to include in the HA2 computed value. | Improve this Doc Password Gets the password to include in the HA1 computed value. Declaration public string Password { get; } Property Value Type Description System.String The password to include in the HA1 computed value. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.JsonReaderExtensions.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.JsonReaderExtensions.html",
    "title": "Class JsonReaderExtensions | Cuemon .NET Standard",
    "keywords": "Class JsonReaderExtensions Extension methods for the . Inheritance System.Object JsonReaderExtensions Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public static class JsonReaderExtensions : object Methods | Improve this Doc ToHierarchy(JsonReader) Converts the XML hierarchy of an into an IHierarchy<T> . Declaration public static IHierarchy<DataPair> ToHierarchy(this JsonReader reader) Parameters Type Name Description JsonReader reader The reader to convert. Returns Type Description IHierarchy < DataPair > An IHierarchy<T> implementation that uses DataPair . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.Formatters.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.Formatters.html",
    "title": "Namespace Cuemon.Serialization.Json.Formatters | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Serialization.Json.Formatters Assembly : Cuemon.Serialization.Json.dll Classes JsonFormatter Serializes and deserializes an object, in JSON format. JsonFormatterOptions Specifies options that is related to JsonFormatter operations. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.Formatters.JsonFormatterOptions.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.Formatters.JsonFormatterOptions.html",
    "title": "Class JsonFormatterOptions | Cuemon .NET Standard",
    "keywords": "Class JsonFormatterOptions Specifies options that is related to JsonFormatter operations. Inheritance System.Object JsonFormatterOptions Namespace : Cuemon.Serialization.Json.Formatters Assembly : Cuemon.Serialization.Json.dll Syntax public class JsonFormatterOptions : object Constructors | Improve this Doc JsonFormatterOptions() Initializes a new instance of the JsonFormatterOptions class. Declaration public JsonFormatterOptions() Remarks The following table shows the initial property values for an instance of JsonFormatterOptions . Property Initial Value Settings SynchronizeWithJsonConvert true IncludeExceptionStackTrace false Properties | Improve this Doc IncludeExceptionStackTrace Gets or sets a value indicating whether the stack of an exception is included in the converter that handles exceptions. Declaration public bool IncludeExceptionStackTrace { get; set; } Property Value Type Description System.Boolean true if the stack of an exception is included in the converter that handles exceptions; otherwise, false . | Improve this Doc Settings Gets or sets the settings to support the JsonFormatter . Declaration public JsonSerializerSettings Settings { get; set; } Property Value Type Description JsonSerializerSettings A instance that specifies a set of features to support the JsonFormatter object. | Improve this Doc SynchronizeWithJsonConvert Gets or sets a value indicating whether Settings should be synchronized on . Declaration public bool SynchronizeWithJsonConvert { get; set; } Property Value Type Description System.Boolean true if Settings should be synchronized on ; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.Formatters.JsonFormatter.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.Formatters.JsonFormatter.html",
    "title": "Class JsonFormatter | Cuemon .NET Standard",
    "keywords": "Class JsonFormatter Serializes and deserializes an object, in JSON format. Inheritance System.Object Formatter < Stream > JsonFormatter Inherited Members Formatter<Stream>.Serialize(Object) Formatter<Stream>.Deserialize<T>(Stream) Namespace : Cuemon.Serialization.Json.Formatters Assembly : Cuemon.Serialization.Json.dll Syntax public class JsonFormatter : Formatter<Stream> Constructors | Improve this Doc JsonFormatter() Initializes a new instance of the JsonFormatter class. Declaration public JsonFormatter() | Improve this Doc JsonFormatter(Action<JsonFormatterOptions>) Initializes a new instance of the JsonFormatter class. Declaration public JsonFormatter(Action<JsonFormatterOptions> setup) Parameters Type Name Description Action < JsonFormatterOptions > setup The JsonFormatterOptions which need to be configured. | Improve this Doc JsonFormatter(JsonFormatterOptions) Initializes a new instance of the JsonFormatter class. Declaration public JsonFormatter(JsonFormatterOptions options) Parameters Type Name Description JsonFormatterOptions options The configured JsonFormatterOptions . Properties | Improve this Doc Options Gets the configured options of this JsonFormatter . Declaration protected JsonFormatterOptions Options { get; } Property Value Type Description JsonFormatterOptions The configured options of this JsonFormatter . Methods | Improve this Doc Deserialize(Stream, Type) Deserializes the specified value into an object of objectType . Declaration public override object Deserialize(Stream value, Type objectType) Parameters Type Name Description Stream value The string from which to deserialize the object graph. Type objectType The type of the deserialized object. Returns Type Description System.Object An object of objectType . | Improve this Doc Serialize(Object, Type) Serializes the specified source to an object of . Declaration public override Stream Serialize(object source, Type objectType) Parameters Type Name Description System.Object source The object to serialize to JSON format. Type objectType The type of the object to serialize. Returns Type Description Stream A string of the serialized source . See Also Formatter <TFormat> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.HeadersUtility.html": {
    "href": "api/core/Cuemon.Web.HeadersUtility.html",
    "title": "Class HeadersUtility | Cuemon .NET Standard",
    "keywords": "Class HeadersUtility This utility class is designed to make HTTP request headers operations easier to work with. Inheritance System.Object HeadersUtility Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public static class HeadersUtility Methods | Improve this Doc Combine(NameValueCollection[]) Combines the specified request-header values into one System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection Combine(params NameValueCollection[] values) Parameters Type Name Description System.Collections.Specialized.NameValueCollection [] values A variable number of request-header values . Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the combined request-header values . | Improve this Doc Combine(String[]) Combines the specified request-header values into one System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection Combine(params string[] values) Parameters Type Name Description System.String [] values A variable number of request-header values . Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the combined request-header values . | Improve this Doc Remove(NameValueCollection, String[]) Sanitizes the headers so that all keys (with matching values) is removed. Declaration public static NameValueCollection Remove(NameValueCollection headers, params string[] keys) Parameters Type Name Description System.Collections.Specialized.NameValueCollection headers The request-header values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection request-header equivalent of headers . | Improve this Doc Remove(String, String[]) Sanitizes the headers so that all keys (with matching values) is removed. Declaration public static NameValueCollection Remove(string headers, params string[] keys) Parameters Type Name Description System.String headers The request-header values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection request-header equivalent of headers . | Improve this Doc RemoveDublets(NameValueCollection, String[]) Sanitizes the headers so that all keys is assured only the latest value applied. Declaration public static NameValueCollection RemoveDublets(NameValueCollection headers, params string[] keys) Parameters Type Name Description System.Collections.Specialized.NameValueCollection headers The request-header values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection request-header equivalent of headers . | Improve this Doc RemoveDublets(String, String[]) Sanitizes the headers so that all keys is assured only the latest value applied. Declaration public static NameValueCollection RemoveDublets(string headers, params string[] keys) Parameters Type Name Description System.String headers The request-header values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection request-header equivalent of headers . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ChecksumResult.html": {
    "href": "api/core/Cuemon.Integrity.ChecksumResult.html",
    "title": "Class ChecksumResult | Cuemon .NET Standard",
    "keywords": "Class ChecksumResult Represents the result of a computed checksum operation. Inheritance System.Object ChecksumResult HashResult Namespace : Cuemon.Integrity Assembly : Cuemon.Core.dll Syntax public class ChecksumResult Constructors | Improve this Doc ChecksumResult(Byte[]) Initializes a new instance of the ChecksumResult class. Declaration public ChecksumResult(byte[] value) Parameters Type Name Description System.Byte [] value The checksum represented as a byte-array. Properties | Improve this Doc Value Gets the original value that reflects a computed operation. Declaration public byte[] Value { get; } Property Value Type Description System.Byte [] The value original value that reflects a computed operation. Methods | Improve this Doc GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() | Improve this Doc ToBase64() Converts the Value to its equivalent string representation that is encoded with base-64 digits. Declaration public virtual string ToBase64() Returns Type Description System.String A System.String representation, in base 64, of the contents of Value . | Improve this Doc ToBinary() Converts the Value to its equivalent binary representation. Declaration public virtual string ToBinary() Returns Type Description System.String A System.String representation, in binary, of the contents of Value . | Improve this Doc ToHexadecimal() Converts the Value to its equivalent hexadecimal representation. Declaration public virtual string ToHexadecimal() Returns Type Description System.String A System.String representation, in hexadecimal, of the contents of Value . | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() | Improve this Doc ToUrlEncodedBase64() Converts the Value to its equivalent string representation that is encoded with base-64 digits, which is usable for transmission on the URL. Declaration public virtual string ToUrlEncodedBase64() Returns Type Description System.String A System.String representation, in base 64 which is usable for transmission on the URL, of the contents of Value . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.CacheValidator.html": {
    "href": "api/core/Cuemon.Integrity.CacheValidator.html",
    "title": "Class CacheValidator | Cuemon .NET Standard",
    "keywords": "Class CacheValidator Provides a way to represent cacheable data-centric content that can be validated by cache-aware applications. Inheritance System.Object ChecksumBuilder CacheValidator Implements ICacheableTimestamp Inherited Members ChecksumBuilder.AlgorithmType ChecksumBuilder.Checksum ChecksumBuilder.GetHashCode() ChecksumBuilder.Equals(Object) ChecksumBuilder.Equals(ChecksumBuilder) ChecksumBuilder.ToString() Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public class CacheValidator : ChecksumBuilder, ICacheableTimestamp Constructors | Improve this Doc CacheValidator(DateTime, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, Byte[], Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, byte[] checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.Byte [] checksum An array of bytes containing a checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, Double, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, double checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.Double checksum A System.Double value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, Int16, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, short checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.Int16 checksum A System.Int16 value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, Int32, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, int checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.Int32 checksum A System.Int32 value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, Int64, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, long checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.Int64 checksum A System.Int64 value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, Single, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, float checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.Single checksum A System.Single value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, String, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, string checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.String checksum A System.String value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, UInt16, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, ushort checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.UInt16 checksum A System.UInt16 value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, UInt32, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, uint checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.UInt32 checksum A System.UInt32 value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. | Improve this Doc CacheValidator(DateTime, Nullable<DateTime>, UInt64, Action<CacheValidatorOptions>) Initializes a new instance of the CacheValidator class. Declaration public CacheValidator(DateTime created, DateTime? modified, ulong checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this instance represents was first created. System.Nullable < System.DateTime > modified A System.DateTime value for when data this instance represents was last modified. System.UInt64 checksum A System.UInt64 value containing a byte-for-byte checksum of the data this instance represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Properties | Improve this Doc Assembly Gets or sets the System.Reflection.Assembly that will serve as the ideal candidate for a CacheValidator reference point. Default is Cuemon . Declaration public static Assembly Assembly { get; set; } Property Value Type Description System.Reflection.Assembly The assembly to use as a CacheValidator reference point. Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc Created Gets a System.DateTime value from when data this instance represents was first created, expressed as the Coordinated Universal Time (UTC). Declaration public DateTime Created { get; } Property Value Type Description System.DateTime A System.DateTime value from when data this instance represents was first created, expressed as the Coordinated Universal Time (UTC). | Improve this Doc Default Gets a CacheValidator object that is initialized to a default representation that should be considered invalid for usage beyond this check. Declaration public static CacheValidator Default { get; } Property Value Type Description CacheValidator A CacheValidator object that is initialized to a default representation. | Improve this Doc Method Gets an enumeration value of ChecksumMethod indicating the usage method of this instance. Declaration public ChecksumMethod Method { get; } Property Value Type Description ChecksumMethod One of the enumeration values of ChecksumMethod that indicates the usage method of this instance. | Improve this Doc Modified Gets a System.DateTime value from when data this instance represents was last modified, expressed as the Coordinated Universal Time (UTC). Declaration public DateTime? Modified { get; } Property Value Type Description System.Nullable < System.DateTime > A System.DateTime value from when data this instance represents was last modified, expressed as the Coordinated Universal Time (UTC). | Improve this Doc ReferencePoint Gets a CacheValidator object that represents an System.Reflection.Assembly reference point. Declaration public static CacheValidator ReferencePoint { get; } Property Value Type Description CacheValidator A CacheValidator object that represents an System.Reflection.Assembly reference point. | Improve this Doc Strength Gets an enumeration value of ChecksumStrength indicating the strength of this instance. Declaration public ChecksumStrength Strength { get; } Property Value Type Description ChecksumStrength One of the enumeration values of ChecksumStrength that specifies the strength of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current CacheValidator object. Declaration public virtual CacheValidator Clone() Returns Type Description CacheValidator A new CacheValidator that is a copy of this instance. | Improve this Doc GetMostSignificant() Gets the most significant (largest) value of either Created or Modified . Declaration public DateTime GetMostSignificant() Returns Type Description System.DateTime The most significant (largest) value of either Created or Modified . | Improve this Doc GetMostSignificant(CacheValidator[]) Gets the most significant CacheValidator object from the most significant (largest) value of either Created or Modified in the specified sequence . Declaration public static CacheValidator GetMostSignificant(params CacheValidator[] sequence) Parameters Type Name Description CacheValidator [] sequence A sequence of CacheValidator objects to parse for the most significant (largest) value of either Created or Modified . Returns Type Description CacheValidator The most significant CacheValidator object from the specified sequence . Implements ICacheableTimestamp Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) ChecksumBuilderExtensions.CombineWith<T>(T, Double[]) ChecksumBuilderExtensions.CombineWith<T>(T, Int16[]) ChecksumBuilderExtensions.CombineWith<T>(T, String[]) ChecksumBuilderExtensions.CombineWith<T>(T, Int32[]) ChecksumBuilderExtensions.CombineWith<T>(T, Int64[]) ChecksumBuilderExtensions.CombineWith<T>(T, Single[]) ChecksumBuilderExtensions.CombineWith<T>(T, UInt16[]) ChecksumBuilderExtensions.CombineWith<T>(T, UInt32[]) ChecksumBuilderExtensions.CombineWith<T>(T, UInt64[]) ChecksumBuilderExtensions.CombineWith<T>(T, Byte[]) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Web.JsonWebTokenPayload.html": {
    "href": "api/core/Cuemon.Security.Web.JsonWebTokenPayload.html",
    "title": "Class JsonWebTokenPayload | Cuemon .NET Standard",
    "keywords": "Class JsonWebTokenPayload Represents the payload information of JSON Web Token that is based on the standard RFC 7519. This class cannot be inherited. Inheritance System.Object JsonWebTokenPayload Namespace : Cuemon.Security.Web Assembly : Cuemon.Security.dll Syntax public sealed class JsonWebTokenPayload Constructors | Improve this Doc JsonWebTokenPayload() Initializes a new instance of the JsonWebTokenPayload class. Declaration public JsonWebTokenPayload() | Improve this Doc JsonWebTokenPayload(DataPair[]) Initializes a new instance of the JsonWebTokenPayload class. Declaration public JsonWebTokenPayload(params DataPair[] claims) Parameters Type Name Description DataPair [] claims The public and/or private claims of the token. Properties | Improve this Doc Audience Gets or sets the audience (aud) of the token. Declaration public string Audience { get; set; } Property Value Type Description System.String The audience (aud) of the token. | Improve this Doc Claims Gets the public and/or private claims of the token. Declaration public DataPairCollection Claims { get; } Property Value Type Description DataPairCollection The public and/or private claims of the token. | Improve this Doc ExpirationTime Gets or sets the expiration time (exp) of the token. Declaration public DateTime? ExpirationTime { get; set; } Property Value Type Description System.Nullable < System.DateTime > The expiration time (exp) of the token. | Improve this Doc IssuedAt Gets or sets the issued at (iat) of the token. Declaration public DateTime? IssuedAt { get; set; } Property Value Type Description System.Nullable < System.DateTime > The issued at (iat) of the token. | Improve this Doc Issuer Gets or sets the issuer (iss) of the token. Declaration public string Issuer { get; set; } Property Value Type Description System.String The issuer (iss) of the token. | Improve this Doc JwtId Gets or sets the JWT unique identifier (jti) of the token. Declaration public string JwtId { get; set; } Property Value Type Description System.String The JWT unique identifier (jti) of the token. | Improve this Doc NotBefore Gets or sets the not before (nbf) of the token. Declaration public DateTime? NotBefore { get; set; } Property Value Type Description System.Nullable < System.DateTime > The not before (nbf) of the token. | Improve this Doc Subject Gets or sets the subject (sub) of the token. Declaration public string Subject { get; set; } Property Value Type Description System.String The subject (sub) of the token. Methods | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Remarks Calling this method provides the raw payload information of the JSON Web Token. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Web.JsonWebTokenHeader.html": {
    "href": "api/core/Cuemon.Security.Web.JsonWebTokenHeader.html",
    "title": "Class JsonWebTokenHeader | Cuemon .NET Standard",
    "keywords": "Class JsonWebTokenHeader Represents the header information of JSON Web Token that is based on the standard RFC 7519. This class cannot be inherited. Inheritance System.Object JsonWebTokenHeader Namespace : Cuemon.Security.Web Assembly : Cuemon.Security.dll Syntax public sealed class JsonWebTokenHeader Constructors | Improve this Doc JsonWebTokenHeader() Initializes a new instance of the JsonWebTokenHeader class. Declaration public JsonWebTokenHeader() | Improve this Doc JsonWebTokenHeader(String) Initializes a new instance of the JsonWebTokenHeader class. Declaration public JsonWebTokenHeader(string type) Parameters Type Name Description System.String type The type of the token. Default is JWT. Properties | Improve this Doc Algorithm Gets or sets the algorithm of the token. Declaration public JsonWebTokenHashAlgorithm Algorithm { get; set; } Property Value Type Description JsonWebTokenHashAlgorithm The algorithm of the token. | Improve this Doc Type Gets the type of the token. Declaration public string Type { get; } Property Value Type Description System.String The type of the token. Methods | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Remarks Calling this method provides the raw header information of the JSON Web Token. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.SqlClient.SqlInOperator-1.html": {
    "href": "api/core/Cuemon.Data.SqlClient.SqlInOperator-1.html",
    "title": "Class SqlInOperator<T> | Cuemon .NET Standard",
    "keywords": "Class SqlInOperator<T> Provides a safe way to include a Transact-SQL WHERE clause with an IN operator to execute against a SQL Server database. Inheritance System.Object InOperator <T> SqlInOperator<T> Inherited Members InOperator<T>.Arguments InOperator<T>.Parameters InOperator<T>.ParameterName InOperator<T>.ArgumentsSelector(T, Int32) Namespace : Cuemon.Data.SqlClient Assembly : Cuemon.Data.dll Syntax public sealed class SqlInOperator<T> : InOperator<T> Type Parameters Name Description T The type of the data in the IN operation of the WHERE clause to execute against a SQL Server database. Constructors | Improve this Doc SqlInOperator(T[]) Initializes a new instance of the InOperator<T> class. Declaration public SqlInOperator(params T[] expressions) Parameters Type Name Description T[] expressions The expressions to test for a match in the IN operator of the WHERE clause. | Improve this Doc SqlInOperator(IEnumerable<T>) Initializes a new instance of the InOperator<T> class. Declaration public SqlInOperator(IEnumerable<T> expressions) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> expressions The expressions to test for a match in the IN operator of the WHERE clause. Methods | Improve this Doc ParametersSelector(T, Int32) A callback method that is responsible for the values passed to the Parameters property. Declaration protected override DbParameter ParametersSelector(T expression, int index) Parameters Type Name Description T expression An expression to test for a match in the IN operator. System.Int32 index The index of the expression . Returns Type Description System.Data.Common.DbParameter An System.Data.Common.DbParameter representing the value of the expression . Overrides Cuemon.Data.InOperator<T>.ParametersSelector(T, System.Int32) Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.SqlClient.SqlDataManager.html": {
    "href": "api/core/Cuemon.Data.SqlClient.SqlDataManager.html",
    "title": "Class SqlDataManager | Cuemon .NET Standard",
    "keywords": "Class SqlDataManager The SqlDataManager is the primary class of the Cuemon.Data.SqlClient namespace that can be used to execute commands targeted Microsoft SQL Server. Inheritance System.Object DataManager SqlDataManager Inherited Members DataManager.DefaultConnectionString DataManager.ParseDbType(DbType) DataManager.GetReaderColumnNames(DbDataReader) DataManager.GetReaderColumnValues(DbDataReader) DataManager.GetReaderColumns(DbDataReader) DataManager.ReaderToStream(DbDataReader) DataManager.ReaderToString(DbDataReader) DataManager.Execute(IDataCommand, DbParameter[]) DataManager.ExecuteExists(IDataCommand, DbParameter[]) DataManager.ExecuteReader(IDataCommand, DbParameter[]) DataManager.ExecuteXmlString(IDataCommand, DbParameter[]) DataManager.ExecuteScalar(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsType(IDataCommand, Type, DbParameter[]) DataManager.ExecuteScalarAsType(IDataCommand, Type, IFormatProvider, DbParameter[]) DataManager.ExecuteScalarAs<TResult>(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAs<TResult>(IDataCommand, IFormatProvider, DbParameter[]) DataManager.ExecuteScalarAsBoolean(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsDateTime(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsInt16(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsInt32(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsInt64(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsByte(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsSByte(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsDecimal(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsDouble(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsUInt16(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsUInt32(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsUInt64(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsString(IDataCommand, DbParameter[]) DataManager.ExecuteScalarAsGuid(IDataCommand, DbParameter[]) DataManager.ExecuteCore<T>(IDataCommand, DbParameter[], Func<DbCommand, T>) DataManager.ExecuteCommandCore(IDataCommand, DbParameter[]) Namespace : Cuemon.Data.SqlClient Assembly : Cuemon.Data.dll Syntax public class SqlDataManager : DataManager Constructors | Improve this Doc SqlDataManager() Initializes a new instance of the SqlDataManager class. Will resolve the default data connection element from the calling application, using the ConfigurationManager to get a CuemonDataSection. Declaration protected SqlDataManager() | Improve this Doc SqlDataManager(String) Initializes a new instance of the SqlDataManager class. Declaration public SqlDataManager(string connectionString) Parameters Type Name Description System.String connectionString The connection string used to establish the connection. Properties | Improve this Doc ConnectionString Gets the string used to open a SQL Server database. Declaration public override string ConnectionString { get; } Property Value Type Description System.String The connection string that includes the source database name, and other parameters needed to establish the initial connection. Overrides DataManager.ConnectionString | Improve this Doc TransientFaultHandlingOptionsCallback Gets or sets the callback delegate that will provide options for transient fault handling. Declaration public override Action<TransientOperationOptions> TransientFaultHandlingOptionsCallback { get; set; } Property Value Type Description System.Action < TransientOperationOptions > An System.Action<T> with the options for transient fault handling. Overrides DataManager.TransientFaultHandlingOptionsCallback Remarks This implementation is compatible with transient related faults on Microsoft SQL Azure including the latest addition of error code 10928 and 10929. Microsoft SQL Server is supported as well. Methods | Improve this Doc Clone() Creates a new object that is a copy of the current instance. Declaration public override DataManager Clone() Returns Type Description DataManager A new object that is a copy of this instance. Overrides DataManager.Clone() | Improve this Doc ExecuteIdentityDecimal(IDataCommand, DbParameter[]) Executes the command statement and returns an identity value as decimal. Declaration public override decimal ExecuteIdentityDecimal(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Decimal System.Decimal Overrides DataManager.ExecuteIdentityDecimal(IDataCommand, DbParameter[]) | Improve this Doc ExecuteIdentityInt32(IDataCommand, DbParameter[]) Executes the command statement and returns an identity value as int. Declaration public override int ExecuteIdentityInt32(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Int32 System.Int32 Overrides DataManager.ExecuteIdentityInt32(IDataCommand, DbParameter[]) | Improve this Doc ExecuteIdentityInt64(IDataCommand, DbParameter[]) Executes the command statement and returns an identity value as long. Declaration public override long ExecuteIdentityInt64(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Int64 System.Int64 Overrides DataManager.ExecuteIdentityInt64(IDataCommand, DbParameter[]) | Improve this Doc GetCommandCore(IDataCommand, DbParameter[]) Gets the command object used by all execute related methods. Declaration protected override DbCommand GetCommandCore(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Data.Common.DbCommand Overrides DataManager.GetCommandCore(IDataCommand, DbParameter[]) Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ConvertibleConverter.html": {
    "href": "api/core/Cuemon.ConvertibleConverter.html",
    "title": "Class ConvertibleConverter | Cuemon .NET Standard",
    "keywords": "Class ConvertibleConverter This utility class is designed to make System.IConvertible related conversions easier to work with. Inheritance System.Object ConvertibleConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ConvertibleConverter Methods | Improve this Doc FromBytes<T>(Byte[]) Returns an System.IConvertible primitive converted from the specified array value of bytes. Declaration public static T FromBytes<T>(byte[] value) where T : struct, IConvertible Parameters Type Name Description System.Byte [] value The value to convert into an System.IConvertible . Returns Type Description T An System.IConvertible primitive formed by n-bytes beginning at 0. Type Parameters Name Description T The type of the expected return value after conversion. Exceptions Type Condition System.ArgumentNullException value is null. TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Boolean , System.Char , System.Double , System.Int16 , System.Int32 , System.UInt16 , System.UInt32 and System.UInt64 . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ByteConverter.html": {
    "href": "api/core/Cuemon.ByteConverter.html",
    "title": "Class ByteConverter | Cuemon .NET Standard",
    "keywords": "Class ByteConverter This utility class is designed to make System.Byte related conversions easier to work with. Inheritance System.Object ByteConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ByteConverter Methods | Improve this Doc FromConvertibles<T>(T) Converts the specified value to an array of bytes. Declaration public static byte[] FromConvertibles<T>(T value) where T : struct, IConvertible Parameters Type Name Description T value The System.IConvertible value to convert. Returns Type Description System.Byte [] An array of bytes equivalent to the data of the value . Type Parameters Name Description T Exceptions Type Condition System.ArgumentOutOfRangeException value is outside the range of allowed types. Allowed types are: System.Boolean , System.Char , System.Double , System.Int16 , System.Int32 , System.UInt16 , System.UInt32 and System.UInt64 . | Improve this Doc FromConvertibles<T>(IEnumerable<T>) Converts the specified sequence of values to an array of bytes. Declaration public static byte[] FromConvertibles<T>(IEnumerable<T> values) where T : struct, IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable <T> values A sequence of System.IConvertible values to convert. Returns Type Description System.Byte [] An array of bytes equivalent to the sequence of the values . Type Parameters Name Description T Exceptions Type Condition System.ArgumentOutOfRangeException values is outside the range of allowed types. Allowed types are: System.Boolean , System.Char , System.Double , System.Int16 , System.Int32 , System.UInt16 , System.UInt32 and System.UInt64 . System.ArgumentNullException values is null. | Improve this Doc FromStream(Stream) Converts the specified value to a byte array always starting from position 0 (when supported). Declaration public static byte[] FromStream(Stream value) Parameters Type Name Description System.IO.Stream value The System.IO.Stream value to be converted. Returns Type Description System.Byte [] A byte array containing the data from the stream. | Improve this Doc FromStream(Stream, Boolean) Converts the specified value to a byte array. Declaration public static byte[] FromStream(Stream value, bool leaveStreamOpen) Parameters Type Name Description System.IO.Stream value The System.IO.Stream value to be converted. System.Boolean leaveStreamOpen if true , the System.IO.Stream object is being left open; otherwise it is being closed and disposed. Returns Type Description System.Byte [] A byte array containing the data from the stream. | Improve this Doc FromString(String, Action<EncodingOptions>) Converts the specified value to a byte array using the provided preferred encoding. Declaration public static byte[] FromString(string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The string to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.Byte [] A byte array which is the result of the specified delegate setup . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc FromUrlEncodedBase64(String) Decodes a URL string token to its equivalent byte array using base 64 digits. Declaration public static byte[] FromUrlEncodedBase64(string value) Parameters Type Name Description System.String value The URL string token to decode. Returns Type Description System.Byte [] The byte array containing the decoded URL string token. Remarks Source: http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-08#appendix-C | Improve this Doc TryFromBase64String(String, out Byte[]) Converts the string representation of a Base64 to its equivalent byte[] array. Declaration public static bool TryFromBase64String(string value, out byte[] result) Parameters Type Name Description System.String value The Base64 to convert. System.Byte [] result The array that will contain the parsed value. Returns Type Description System.Boolean true if the parse operation was successful; otherwise, false . Remarks This method returns false if value is null , empty or not in a recognized format, and does not throw an exception. result will have a default value of null . | Improve this Doc TryFromBase64String(String, Func<String, Boolean>, out Byte[]) Converts the string representation of a Base64 to its equivalent byte[] array. Declaration public static bool TryFromBase64String(string value, Func<string, bool> predicate, out byte[] result) Parameters Type Name Description System.String value The Base64 to convert. System.Func < System.String , System.Boolean > predicate A function delegate that provides custom rules for bypassing the Base64 structure check. System.Byte [] result The array that will contain the parsed value. Returns Type Description System.Boolean true if the parse operation was successful; otherwise, false . Remarks This method returns false if value is null , empty or not in a recognized format, and does not throw an exception. result will have a default value of null . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Http.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Http.html",
    "title": "Namespace Cuemon.AspNetCore.Http | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Http Assembly : Cuemon.AspNetCore.dll Classes HeaderDictionaryExtensions Extension methods for the Microsoft.AspNetCore.Http.IHeaderDictionary interface. HttpRequestExtensions Extension methods for the Microsoft.AspNetCore.Http.HttpRequest class. HttpResponseExtensions Extension methods for the Microsoft.AspNetCore.Http.HttpResponse class. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Caching.CacheCollection.html": {
    "href": "api/core/Cuemon.Runtime.Caching.CacheCollection.html",
    "title": "Class CacheCollection | Cuemon .NET Standard",
    "keywords": "Class CacheCollection Implements a cache for an application. This class cannot be inherited. Inheritance System.Object CacheCollection Implements System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Int64 , System.Object >> System.Collections.IEnumerable Namespace : Cuemon.Runtime.Caching Assembly : Cuemon.Runtime.Caching.dll Syntax public sealed class CacheCollection : IEnumerable<KeyValuePair<long, object>>, IEnumerable Properties | Improve this Doc EnableExpirationTimer Gets or sets a value indicating whether a timer regularly should clean up expired cache items. Declaration public bool EnableExpirationTimer { get; set; } Property Value Type Description System.Boolean true if a timer regularly should clean up expired cache items; otherwise, false . | Improve this Doc Item[String] Gets the cached item with the specified key . Declaration public object this[string key] { get; } Parameters Type Name Description System.String key Property Value Type Description System.Object The cached item matching the specified key . | Improve this Doc Item[String, String] Gets the cached item with the specified key and group . Declaration public object this[string key, string group] { get; } Parameters Type Name Description System.String key System.String group Property Value Type Description System.Object The cached item matching the specified key and group . Methods | Improve this Doc Add(String, Object) Adds the specified key and value to the cache. Declaration public void Add(string key, object value) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, IDependency[]) Adds the specified key and value to the cache. Declaration public void Add(string key, object value, params IDependency[] dependencies) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. IDependency [] dependencies The dependencies for the value . When any dependency changes, the value becomes invalid and is removed from the cache. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, IEnumerable<IDependency>) Adds the specified key and value to the cache. Declaration public void Add(string key, object value, IEnumerable<IDependency> dependencies) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. System.Collections.Generic.IEnumerable < IDependency > dependencies The dependencies for the value . When any dependency changes, the value becomes invalid and is removed from the cache. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, DateTime) Adds the specified key and value to the cache. Declaration public void Add(string key, object value, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. System.DateTime absoluteExpiration The time at which the added object expires and is removed from the cache. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, String) Adds the specified key and value to the cache.up. Declaration public void Add(string key, object value, string group) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. System.String group The group to associate the key with. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, String, IDependency[]) Adds the specified key and value to the cache. Declaration public void Add(string key, object value, string group, params IDependency[] dependencies) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. System.String group The group to associate the key with. IDependency [] dependencies The dependencies for the value . When any dependency changes, the value becomes invalid and is removed from the cache. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, String, IEnumerable<IDependency>) Adds the specified key and value to the cache. Declaration public void Add(string key, object value, string group, IEnumerable<IDependency> dependencies) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. System.String group The group to associate the key with. System.Collections.Generic.IEnumerable < IDependency > dependencies The dependencies for the value . When any dependency changes, the value becomes invalid and is removed from the cache. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, String, DateTime) Adds the specified key and value to the cache. Declaration public void Add(string key, object value, string group, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. System.String group The group to associate the key with. System.DateTime absoluteExpiration The time at which the added object expires and is removed from the cache. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, String, TimeSpan) Adds the specified key and value to the cache. Declaration public void Add(string key, object value, string group, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. System.String group The group to associate the key with. System.TimeSpan slidingExpiration The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Add(String, Object, TimeSpan) Adds the specified key and value to the cache. Declaration public void Add(string key, object value, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Object value The object to be inserted in the cache. System.TimeSpan slidingExpiration The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed. Remarks This method will not throw an System.ArgumentException in case of an existing cache item whose key matches the key parameter. Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Clear() Removes all keys and values from the System.Collections.Generic.Dictionary<TKey, TValue> . Declaration public void Clear() | Improve this Doc Clear(String) Removes all keys and values matching the specified group from the System.Collections.Generic.Dictionary<TKey, TValue> . Declaration public void Clear(string group) Parameters Type Name Description System.String group | Improve this Doc ContainsKey(String) Determines whether the System.Collections.Generic.Dictionary<TKey, TValue> contains the specified key. Declaration public bool ContainsKey(string key) Parameters Type Name Description System.String key The key to locate in the System.Collections.Generic.Dictionary<TKey, TValue> . Returns Type Description System.Boolean true if the System.Collections.Generic.Dictionary<TKey, TValue> contains an element with the specified key; otherwise, false . Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc ContainsKey(String, String) Determines whether the System.Collections.Generic.Dictionary<TKey, TValue> contains the specified key. Declaration public bool ContainsKey(string key, string group) Parameters Type Name Description System.String key The key to locate in the System.Collections.Generic.Dictionary<TKey, TValue> . System.String group The associated group of the key to locate. Returns Type Description System.Boolean true if the System.Collections.Generic.Dictionary<TKey, TValue> contains an element with the specified key; otherwise, false . Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Count() Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count() Returns Type Description System.Int32 | Improve this Doc Count(String) Gets the number of elements contained in the specified group of the System.Collections.Generic.ICollection<T> . Declaration public int Count(string group) Parameters Type Name Description System.String group The associated group to filter the count by. Returns Type Description System.Int32 The number of elements contained in the System.Collections.Generic.ICollection<T> . | Improve this Doc Get<T>(String) Retrieves the specified item from the CacheCollection . Declaration public T Get<T>(string key) Parameters Type Name Description System.String key The identifier of the cache item to retrieve. Returns Type Description T The retrieved cache item, or the default value of the type parameter T if the key is not found. Type Parameters Name Description T The type of the item in the CacheCollection . | Improve this Doc Get<T>(String, String) Retrieves the specified item from the associated group of the CacheCollection . Declaration public T Get<T>(string key, string group) Parameters Type Name Description System.String key The identifier of the cache item to retrieve. System.String group The associated group of the cache item to retrieve. Returns Type Description T The retrieved cache item, or the default value of the type parameter T if the key is not found. Type Parameters Name Description T The type of the item in the CacheCollection . | Improve this Doc GetEnumerator() Retrieves an enumerator that iterates through the key settings and their values contained in the cache. Declaration public IEnumerator<KeyValuePair<long, object>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.Int64 , System.Object >> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Remarks All keys are hashed internally and will not provide useful information. | Improve this Doc GetOrAdd<TResult>(String, Func<TResult>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<TResult>(string key, Func<TResult> resolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <TResult> resolver The function delegate that is used to resolve a value for the key . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAdd<TResult>(String, Func<TResult>, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<TResult>(string key, Func<TResult> resolver, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <TResult> resolver The function delegate that is used to resolve a value for the key . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAdd<TResult>(String, Func<TResult>, Func<IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<TResult>(string key, Func<TResult> resolver, Func<IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <TResult> resolver The function delegate that is used to resolve a value for the key . System.Func < System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAdd<TResult>(String, Func<TResult>, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<TResult>(string key, Func<TResult> resolver, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <TResult> resolver The function delegate that is used to resolve a value for the key . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAdd<TResult>(String, String, Func<TResult>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<TResult>(string key, string group, Func<TResult> resolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <TResult> resolver The function delegate that is used to resolve a value for the key . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAdd<TResult>(String, String, Func<TResult>, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<TResult>(string key, string group, Func<TResult> resolver, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <TResult> resolver The function delegate that is used to resolve a value for the key . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAdd<TResult>(String, String, Func<TResult>, Func<IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<TResult>(string key, string group, Func<TResult> resolver, Func<IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <TResult> resolver The function delegate that is used to resolve a value for the key . System.Func < System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAdd<TResult>(String, String, Func<TResult>, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<TResult>(string key, string group, Func<TResult> resolver, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <TResult> resolver The function delegate that is used to resolve a value for the key . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 arg9 The ninth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 The type of the ninth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 arg9 The ninth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 The type of the ninth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 arg9 The ninth parameter of the function delegate resolver and the function delegate dependencyResolver . T10 arg10 The tenth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 The type of the ninth parameter of the function delegate resolver and the function delegate dependencyResolver . T10 The type of the tenth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T, TResult>(String, Func<T, TResult>, T) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T, TResult>(string key, Func<T, TResult> resolver, T arg) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T, TResult> resolver The function delegate that is used to resolve a value for the key . T arg The parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T, TResult>(String, Func<T, TResult>, T, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T, TResult>(string key, Func<T, TResult> resolver, T arg, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T, TResult> resolver The function delegate that is used to resolve a value for the key . T arg The parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T, TResult>(String, Func<T, TResult>, T, Func<T, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T, TResult>(string key, Func<T, TResult> resolver, T arg, Func<T, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T, TResult> resolver The function delegate that is used to resolve a value for the key . T arg The parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T, TResult>(String, Func<T, TResult>, T, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T, TResult>(string key, Func<T, TResult> resolver, T arg, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T, TResult> resolver The function delegate that is used to resolve a value for the key . T arg The parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T, TResult>(String, String, Func<T, TResult>, T) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T, TResult>(string key, string group, Func<T, TResult> resolver, T arg) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T, TResult> resolver The function delegate that is used to resolve a value for the key . T arg The parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T, TResult>(String, String, Func<T, TResult>, T, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T, TResult>(string key, string group, Func<T, TResult> resolver, T arg, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T, TResult> resolver The function delegate that is used to resolve a value for the key . T arg The parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T, TResult>(String, String, Func<T, TResult>, T, Func<T, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T, TResult>(string key, string group, Func<T, TResult> resolver, T arg, Func<T, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T, TResult> resolver The function delegate that is used to resolve a value for the key . T arg The parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T, TResult>(String, String, Func<T, TResult>, T, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T, TResult>(string key, string group, Func<T, TResult> resolver, T arg, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T, TResult> resolver The function delegate that is used to resolve a value for the key . T arg The parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, TResult>(String, Func<T1, T2, TResult>, T1, T2) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, TResult>(string key, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, TResult>(String, Func<T1, T2, TResult>, T1, T2, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, TResult>(string key, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, TResult>(String, Func<T1, T2, TResult>, T1, T2, Func<T1, T2, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, TResult>(string key, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, Func<T1, T2, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, TResult>(String, Func<T1, T2, TResult>, T1, T2, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, TResult>(string key, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, TResult>(String, String, Func<T1, T2, TResult>, T1, T2) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, TResult>(string key, string group, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, TResult>(String, String, Func<T1, T2, TResult>, T1, T2, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, TResult>(string key, string group, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, TResult>(String, String, Func<T1, T2, TResult>, T1, T2, Func<T1, T2, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, TResult>(string key, string group, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, Func<T1, T2, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, TResult>(String, String, Func<T1, T2, TResult>, T1, T2, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, TResult>(string key, string group, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>, T1, T2, T3) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, TResult>(string key, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>, T1, T2, T3, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, TResult>(string key, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>, T1, T2, T3, Func<T1, T2, T3, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, TResult>(string key, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, Func<T1, T2, T3, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>, T1, T2, T3, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, TResult>(string key, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, TResult>(String, String, Func<T1, T2, T3, TResult>, T1, T2, T3) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, TResult>(string key, string group, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, TResult>(String, String, Func<T1, T2, T3, TResult>, T1, T2, T3, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, TResult>(string key, string group, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, TResult>(String, String, Func<T1, T2, T3, TResult>, T1, T2, T3, Func<T1, T2, T3, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, TResult>(string key, string group, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, Func<T1, T2, T3, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, TResult>(String, String, Func<T1, T2, T3, TResult>, T1, T2, T3, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, TResult>(string key, string group, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, TResult>(string key, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, TResult>(string key, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, Func<T1, T2, T3, T4, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, TResult>(string key, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<T1, T2, T3, T4, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, TResult>(string key, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, TResult>(String, String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, TResult>(string key, string group, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, TResult>(String, String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, TResult>(string key, string group, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, TResult>(String, String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, Func<T1, T2, T3, T4, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, TResult>(string key, string group, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<T1, T2, T3, T4, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, TResult>(String, String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, TResult>(string key, string group, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, TResult>(String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, TResult>(string key, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, TResult>(String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, TResult>(string key, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, TResult>(String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, TResult>(string key, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, TResult>(String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, TResult>(string key, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, TResult>(String, String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, TResult>(String, String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, TResult>(String, String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, TResult>(String, String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the new value for the key as returned by resolver if the key was not in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, DateTime) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>>) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TimeSpan) Adds a value to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAdd<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the new value for the key as returned by resolver if the key was not in virtual group of the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<TResult>(String, Func<TResult>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<TResult>(string key, Func<TResult> resolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<TResult>(String, Func<TResult>, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<TResult>(string key, Func<TResult> resolver, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<TResult>(String, Func<TResult>, Func<IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<TResult>(string key, Func<TResult> resolver, Func<IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . System.Func < System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<TResult>(String, Func<TResult>, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<TResult>(string key, Func<TResult> resolver, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<TResult>(String, String, Func<TResult>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<TResult>(string key, string group, Func<TResult> resolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<TResult>(String, String, Func<TResult>, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<TResult>(string key, string group, Func<TResult> resolver, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<TResult>(String, String, Func<TResult>, Func<IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<TResult>(string key, string group, Func<TResult> resolver, Func<IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . System.Func < System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<TResult>(String, String, Func<TResult>, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<TResult>(string key, string group, Func<TResult> resolver, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 arg9 The ninth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 The type of the ninth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 arg9 The ninth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 The type of the ninth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 arg9 The ninth parameter of the function delegate resolver and the function delegate dependencyResolver . T10 arg10 The tenth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . T9 The type of the ninth parameter of the function delegate resolver and the function delegate dependencyResolver . T10 The type of the tenth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . T9 arg9 The ninth parameter of the function delegate resolver . T10 arg10 The tenth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . T9 The type of the ninth parameter of the function delegate resolver . T10 The type of the tenth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T, TResult>(String, Func<T, TResult>, T) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T, TResult>(string key, Func<T, TResult> resolver, T arg) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T arg The parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T, TResult>(String, Func<T, TResult>, T, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T, TResult>(string key, Func<T, TResult> resolver, T arg, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T arg The parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T, TResult>(String, Func<T, TResult>, T, Func<T, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T, TResult>(string key, Func<T, TResult> resolver, T arg, Func<T, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T arg The parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T, TResult>(String, Func<T, TResult>, T, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T, TResult>(string key, Func<T, TResult> resolver, T arg, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T arg The parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T, TResult>(String, String, Func<T, TResult>, T) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T, TResult>(string key, string group, Func<T, TResult> resolver, T arg) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T arg The parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T, TResult>(String, String, Func<T, TResult>, T, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T, TResult>(string key, string group, Func<T, TResult> resolver, T arg, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T arg The parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T, TResult>(String, String, Func<T, TResult>, T, Func<T, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T, TResult>(string key, string group, Func<T, TResult> resolver, T arg, Func<T, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T arg The parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T, TResult>(String, String, Func<T, TResult>, T, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T, TResult>(string key, string group, Func<T, TResult> resolver, T arg, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T arg The parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T The type of the parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>, T1, T2) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, TResult>(string key, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>, T1, T2, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, TResult>(string key, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>, T1, T2, Func<T1, T2, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, TResult>(string key, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, Func<T1, T2, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, TResult>(String, Func<T1, T2, TResult>, T1, T2, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, TResult>(string key, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, TResult>(String, String, Func<T1, T2, TResult>, T1, T2) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, TResult>(string key, string group, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, TResult>(String, String, Func<T1, T2, TResult>, T1, T2, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, TResult>(string key, string group, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, TResult>(String, String, Func<T1, T2, TResult>, T1, T2, Func<T1, T2, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, TResult>(string key, string group, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, Func<T1, T2, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, TResult>(String, String, Func<T1, T2, TResult>, T1, T2, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, TResult>(string key, string group, Func<T1, T2, TResult> resolver, T1 arg1, T2 arg2, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>, T1, T2, T3) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, TResult>(string key, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>, T1, T2, T3, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, TResult>(string key, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>, T1, T2, T3, Func<T1, T2, T3, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, TResult>(string key, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, Func<T1, T2, T3, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, TResult>(String, Func<T1, T2, T3, TResult>, T1, T2, T3, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, TResult>(string key, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, TResult>(String, String, Func<T1, T2, T3, TResult>, T1, T2, T3) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, TResult>(string key, string group, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, TResult>(String, String, Func<T1, T2, T3, TResult>, T1, T2, T3, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, TResult>(string key, string group, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, TResult>(String, String, Func<T1, T2, T3, TResult>, T1, T2, T3, Func<T1, T2, T3, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, TResult>(string key, string group, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, Func<T1, T2, T3, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, TResult>(String, String, Func<T1, T2, T3, TResult>, T1, T2, T3, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, TResult>(string key, string group, Func<T1, T2, T3, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, TResult>(string key, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, TResult>(string key, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, Func<T1, T2, T3, T4, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, TResult>(string key, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<T1, T2, T3, T4, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, TResult>(String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, TResult>(string key, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, TResult>(String, String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, TResult>(string key, string group, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, TResult>(String, String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, TResult>(string key, string group, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, TResult>(String, String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, Func<T1, T2, T3, T4, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, TResult>(string key, string group, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<T1, T2, T3, T4, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, TResult>(String, String, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, TResult>(string key, string group, Func<T1, T2, T3, T4, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(string key, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(string key, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(string key, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(string key, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(String, String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(String, String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(String, String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(String, String, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key . This will either be the existing value if the key is already in the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, DateTime) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, DateTime absoluteExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . System.DateTime absoluteExpiration The time at which the return value of resolver expires and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>>) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 arg2 The second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 arg3 The third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 arg4 The fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 arg5 The fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 arg6 The sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 arg7 The seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 arg8 The eighth parameter of the function delegate resolver and the function delegate dependencyResolver . System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the result of resolver to the cache. When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver and the function delegate dependencyResolver . T2 The type of the second parameter of the function delegate resolver and the function delegate dependencyResolver . T3 The type of the third parameter of the function delegate resolver and the function delegate dependencyResolver . T4 The type of the fourth parameter of the function delegate resolver and the function delegate dependencyResolver . T5 The type of the fifth parameter of the function delegate resolver and the function delegate dependencyResolver . T6 The type of the sixth parameter of the function delegate resolver and the function delegate dependencyResolver . T7 The type of the seventh parameter of the function delegate resolver and the function delegate dependencyResolver . T8 The type of the eighth parameter of the function delegate resolver and the function delegate dependencyResolver . TResult The type of the value in the cache. | Improve this Doc GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(String, String, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TimeSpan) Adds a value asynchronously to the cache by using the specified function delegate resolver , if the key does not already exist in the virtual group of the cache. Declaration public TResult GetOrAddAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(string key, string group, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, TimeSpan slidingExpiration) Parameters Type Name Description System.String key The cache key used to identify the item. System.String group The virtual group to associate the key with. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> resolver The function delegate that is used to resolve a value asynchronously for the key . T1 arg1 The first parameter of the function delegate resolver . T2 arg2 The second parameter of the function delegate resolver . T3 arg3 The third parameter of the function delegate resolver . T4 arg4 The fourth parameter of the function delegate resolver . T5 arg5 The fifth parameter of the function delegate resolver . T6 arg6 The sixth parameter of the function delegate resolver . T7 arg7 The seventh parameter of the function delegate resolver . T8 arg8 The eighth parameter of the function delegate resolver . System.TimeSpan slidingExpiration The interval between the time the return value of resolver was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description TResult The value for the specified key and group . This will either be the existing value if the key is already in the virtual group of the cache, or the default value of TResult ( default(TResult) ). The actual value returned by resolver is updated asynchronously in the cache. Type Parameters Name Description T1 The type of the first parameter of the function delegate resolver . T2 The type of the second parameter of the function delegate resolver . T3 The type of the third parameter of the function delegate resolver . T4 The type of the fourth parameter of the function delegate resolver . T5 The type of the fifth parameter of the function delegate resolver . T6 The type of the sixth parameter of the function delegate resolver . T7 The type of the seventh parameter of the function delegate resolver . T8 The type of the eighth parameter of the function delegate resolver . TResult The type of the value in the cache. | Improve this Doc Memoize<TResult>(Func<TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<TResult> Memoize<TResult>(Func<TResult> method) Parameters Type Name Description System.Func <TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<TResult>(Func<TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<TResult> Memoize<TResult>(Func<TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<TResult>(Func<TResult>, Func<IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<TResult> Memoize<TResult>(Func<TResult> method, Func<IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func < System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<TResult>(Func<TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<TResult> Memoize<TResult>(Func<TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver Establishes one or more Dependency relations to this memoized function delegate. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T, TResult>(Func<T, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T, TResult> Memoize<T, TResult>(Func<T, TResult> method) Parameters Type Name Description System.Func <T, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T The type of the parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T, TResult>(Func<T, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T, TResult> Memoize<T, TResult>(Func<T, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T The type of the parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T, TResult>(Func<T, TResult>, Func<T, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T, TResult> Memoize<T, TResult>(Func<T, TResult> method, Func<T, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T The type of the parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T, TResult>(Func<T, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T, TResult> Memoize<T, TResult>(Func<T, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T The type of the parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, TResult>(Func<T1, T2, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, TResult> Memoize<T1, T2, TResult>(Func<T1, T2, TResult> method) Parameters Type Name Description System.Func <T1, T2, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, TResult>(Func<T1, T2, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, TResult> Memoize<T1, T2, TResult>(Func<T1, T2, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, TResult>(Func<T1, T2, TResult>, Func<T1, T2, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, TResult> Memoize<T1, T2, TResult>(Func<T1, T2, TResult> method, Func<T1, T2, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T1, T2, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, TResult>(Func<T1, T2, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, TResult> Memoize<T1, T2, TResult>(Func<T1, T2, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, TResult> Memoize<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> method) Parameters Type Name Description System.Func <T1, T2, T3, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, T3, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, TResult> Memoize<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, T3, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, Func<T1, T2, T3, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, TResult> Memoize<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> method, Func<T1, T2, T3, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, T3, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, T3, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, TResult> Memoize<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, T3, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, T3, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, TResult> Memoize<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> method) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, T3, T4, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, TResult> Memoize<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, Func<T1, T2, T3, T4, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, TResult> Memoize<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> method, Func<T1, T2, T3, T4, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, T3, T4, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, TResult> Memoize<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, T3, T4, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, TResult> Memoize<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> method) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, T3, T4, T5, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, TResult> Memoize<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, TResult> Memoize<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> method, Func<T1, T2, T3, T4, T5, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, T3, T4, T5, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, TResult> Memoize<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, T3, T4, T5, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, TResult> Memoize<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult> method) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, TResult> Memoize<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, TResult> Memoize<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult> method, Func<T1, T2, T3, T4, T5, T6, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, T3, T4, T5, T6, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, TResult> Memoize<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult> method) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult> method, Func<T1, T2, T3, T4, T5, T6, T7, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, T3, T4, T5, T6, T7, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> method) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> method The function delegate that is invoked once and then stored in cache for fast access. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, DateTime) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> method, DateTime absoluteExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.DateTime absoluteExpiration The time at which the memoized function delegate expires and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>>) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> method, Func<T1, T2, T3, T4, T5, T6, T7, T8, IEnumerable<IDependency>> dependencyResolver) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Collections.Generic.IEnumerable < IDependency >> dependencyResolver The function delegate that is used to assign dependencies to the memoized method . When any dependency changes, the object becomes invalid and is removed from the cache. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Memoize<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, TimeSpan) Memoizes the specified method in the cache for fast access. Declaration public Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Memoize<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> method, TimeSpan slidingExpiration) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> method The function delegate that is invoked once and then stored in cache for fast access. System.TimeSpan slidingExpiration The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> A memoized function delegate that is otherwise equivalent to method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Remove(String) Removes the value with the specified key from the System.Collections.Generic.Dictionary<TKey, TValue> . Declaration public bool Remove(string key) Parameters Type Name Description System.String key The key of the element to remove. Returns Type Description System.Boolean true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the System.Collections.Generic.Dictionary<TKey, TValue> . Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc Remove(String, String) Removes the value with the specified key from the associated specified group of the System.Collections.Generic.Dictionary<TKey, TValue> . Declaration public bool Remove(string key, string group) Parameters Type Name Description System.String key The key of the element to remove. System.String group The associated group to the key of the element to remove. Returns Type Description System.Boolean true if the element is successfully found and removed; otherwise, false . This method returns false if key combined with group is not found in the System.Collections.Generic.Dictionary<TKey, TValue> . Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc TryGetAdded(String, out DateTime) Gets the UTC date time value from when this item was added to the CacheCollection . Declaration public bool TryGetAdded(string key, out DateTime value) Parameters Type Name Description System.String key The key of the value to get. System.DateTime value When this method returns, contains the UTC date time value from when this item, with the specified key, was added; otherwise, if no item could be resolved or the item has expired, System.DateTime.MinValue . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the value parameter contains an element with the specified key, and the element has not expired; otherwise, false . Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc TryGetAdded(String, String, out DateTime) Gets the UTC date time value from when this item was added to the CacheCollection . Declaration public bool TryGetAdded(string key, string group, out DateTime value) Parameters Type Name Description System.String key The key of the value to get. System.String group The group of the value to get. System.DateTime value When this method returns, contains the UTC date time value from when this item, with the specified key, was added; otherwise, if no item could be resolved or the item has expired, System.DateTime.MinValue . This parameter is passed uninitialized. Returns Type Description System.Boolean true if the value parameter contains an element with the specified key, and the element has not expired; otherwise, false . Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc TryGetValue<T>(String, out T) Gets the value associated with the specified key. Declaration public bool TryGetValue<T>(string key, out T value) Parameters Type Name Description System.String key The key of the value to get. T value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the System.Collections.Generic.Dictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Type Parameters Name Description T The type of the item in the CacheCollection . Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc TryGetValue<T>(String, String, out T) Gets the value associated with the specified key and group. Declaration public bool TryGetValue<T>(string key, string group, out T value) Parameters Type Name Description System.String key The key of the value to get. System.String group The group of the value to get. T value When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the System.Collections.Generic.Dictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Type Parameters Name Description T The type of the item in the CacheCollection . Exceptions Type Condition System.ArgumentNullException key is null. Explicit Interface Implementations | Improve this Doc IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) DictionaryConverterExtensions.ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) DictionaryConverterExtensions.ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.RoundOffAccuracy.html": {
    "href": "api/core/Cuemon.RoundOffAccuracy.html",
    "title": "Enum RoundOffAccuracy | Cuemon .NET Standard",
    "keywords": "Enum RoundOffAccuracy The accuracy of a rounding for a computed number. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum RoundOffAccuracy Fields Name Description NearestHundredth Specifies a rounding to the nearest hundredth of a number. NearestHundredThousandth Specifies a rounding to the nearest hundred thousandth of a number. NearestMillion Specifies a rounding to the nearest million of a number. NearestTenth Specifies a rounding to the nearest tenth of a number. NearestTenThousandth Specifies a rounding to the nearest ten thousandth of a number. NearestThousandth Specifies a rounding to the nearest thousandth of a number. Extension Methods ByteConverterExtensions.ToByteArray<RoundOffAccuracy>() ConverterExtensions.ParseWith<RoundOffAccuracy, TResult>(Func<RoundOffAccuracy, TResult>) ConverterExtensions.ParseWith<RoundOffAccuracy, T, TResult>(Func<RoundOffAccuracy, T, TResult>, T) ConverterExtensions.ParseWith<RoundOffAccuracy, T1, T2, TResult>(Func<RoundOffAccuracy, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<RoundOffAccuracy, T1, T2, T3, TResult>(Func<RoundOffAccuracy, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<RoundOffAccuracy, T1, T2, T3, T4, TResult>(Func<RoundOffAccuracy, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<RoundOffAccuracy, T1, T2, T3, T4, T5, TResult>(Func<RoundOffAccuracy, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<RoundOffAccuracy, T1, T2, T3, T4, T5, T6, TResult>(Func<RoundOffAccuracy, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<RoundOffAccuracy, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<RoundOffAccuracy, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<RoundOffAccuracy, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<RoundOffAccuracy, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<RoundOffAccuracy, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<RoundOffAccuracy, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<RoundOffAccuracy>() DelegateUtilityExtensions.DynamicWrap<RoundOffAccuracy>() TweakerExtensions.Adjust<RoundOffAccuracy>(Func<RoundOffAccuracy, RoundOffAccuracy>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<RoundOffAccuracy>() WrapperExtensions.UseWrapper<RoundOffAccuracy>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<RoundOffAccuracy>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<RoundOffAccuracy>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.StreamUtilityExtensions.html": {
    "href": "api/core/Cuemon.IO.StreamUtilityExtensions.html",
    "title": "Class StreamUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class StreamUtilityExtensions This is an extension implementation of the most common methods on the StreamUtility class. Inheritance System.Object StreamUtilityExtensions Namespace : Cuemon.IO Assembly : Cuemon.Core.dll Syntax public static class StreamUtilityExtensions Methods | Improve this Doc Copy(Stream) Creates and returns a seekable copy of the source System.IO.Stream . Declaration public static Stream Copy(this Stream source) Parameters Type Name Description System.IO.Stream source The source System.IO.Stream to create a copy from. Returns Type Description System.IO.Stream A seekable System.IO.Stream that will contain the contents of the source stream. | Improve this Doc Copy(Stream, Boolean) Creates and returns a seekable copy of the source System.IO.Stream . Declaration public static Stream Copy(this Stream source, bool leaveStreamOpen) Parameters Type Name Description System.IO.Stream source The source System.IO.Stream to create a copy from. System.Boolean leaveStreamOpen if true , the source System.IO.Stream is being left open; otherwise it is being closed and disposed. Returns Type Description System.IO.Stream A seekable System.IO.Stream that will contain the contents of the source stream. | Improve this Doc Copy(Stream, Boolean, Int32) Creates and returns a seekable copy of the source System.IO.Stream . Declaration public static Stream Copy(this Stream source, bool leaveStreamOpen, int bufferSize) Parameters Type Name Description System.IO.Stream source The source System.IO.Stream to create a copy from. System.Boolean leaveStreamOpen if true , the source System.IO.Stream is being left open; otherwise it is being closed and disposed. System.Int32 bufferSize The size of the buffer. This value must be greater than zero. The default size is 2048. Returns Type Description System.IO.Stream A seekable System.IO.Stream that will contain the contents of the source stream. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpCacheableOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpCacheableOptions.html",
    "title": "Class HttpCacheableOptions | Cuemon .NET Standard",
    "keywords": "Class HttpCacheableOptions Specifies options that is related to the HttpCacheableFilter . Inheritance System.Object HttpCacheableOptions Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class HttpCacheableOptions Constructors | Improve this Doc HttpCacheableOptions() Initializes a new instance of the HttpCacheableOptions class. Declaration public HttpCacheableOptions() Remarks The following table shows the initial property values for an instance of HttpCacheableOptions . Property Initial Value Filters new List{ICacheableAsyncResultFilter}() CacheControl new CacheControlHeaderValue() { MaxAge = TimeSpan.FromHours(24), MustRevalidate = true, Private = true }; Properties | Improve this Doc CacheControl Gets or sets the Cache-Control header that is applied to objects implementing the ICacheableObjectResult interface. Declaration public CacheControlHeaderValue CacheControl { get; set; } Property Value Type Description Microsoft.Net.Http.Headers.CacheControlHeaderValue The Cache-Control header that is applied to objects implementing the ICacheableObjectResult interface. | Improve this Doc Filters Gets the filters that will be invoked one by one in OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) . Declaration public IList<ICacheableAsyncResultFilter> Filters { get; } Property Value Type Description System.Collections.Generic.IList < ICacheableAsyncResultFilter > The filters that will be invoked by HttpCacheableFilter . | Improve this Doc UseCacheControl Gets a value indicating whether this instance has an CacheControl . Declaration public bool UseCacheControl { get; } Property Value Type Description System.Boolean true if this instance has an CacheControl ; otherwise, false . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.ICacheBusting.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.ICacheBusting.html",
    "title": "Interface ICacheBusting | Cuemon .NET Standard",
    "keywords": "Interface ICacheBusting An interface to provide cache-busting capabilities. Namespace : Cuemon.AspNetCore.Mvc.Configuration Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public interface ICacheBusting Properties | Improve this Doc Version Gets the version to be a part of the link you need cache-busting compatible. Declaration string Version { get; } Property Value Type Description System.String The version to be a part of the link you need cache-busting compatible. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Middleware.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Middleware.html",
    "title": "Class Middleware | Cuemon .NET Standard",
    "keywords": "Class Middleware Provides a base-class for middleware implementation in ASP.NET Core. Inheritance System.Object MiddlewareCore Middleware Inherited Members MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class Middleware : MiddlewareCore Constructors | Improve this Doc Middleware(RequestDelegate) Initializes a new instance of the Middleware class. Declaration protected Middleware(RequestDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Methods | Improve this Doc InvokeAsync(HttpContext) Executes the Middleware . Declaration public abstract Task InvokeAsync(HttpContext context) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.XmlObfuscator.html": {
    "href": "api/core/Cuemon.Security.XmlObfuscator.html",
    "title": "Class XmlObfuscator | Cuemon .NET Standard",
    "keywords": "Class XmlObfuscator Provides methods for obfuscation and size reduction of human readable XML documents. Inheritance System.Object Obfuscator XmlObfuscator SecureXmlObfuscator Inherited Members Obfuscator.CurrentCombinationLength Obfuscator.CurrentPermutationSize Obfuscator.Encoding Obfuscator.PermutationCharacters Obfuscator.Exclusions Obfuscator.Mappings Obfuscator.ComputeHash(String) Obfuscator.GenerateObfuscatedValue() Namespace : Cuemon.Security Assembly : Cuemon.Xml.dll Syntax public class XmlObfuscator : Obfuscator Constructors | Improve this Doc XmlObfuscator() Initializes a new instance of the XmlObfuscator class using System.Text.Encoding.UTF8 for the text encoding. Declaration public XmlObfuscator() | Improve this Doc XmlObfuscator(IEnumerable<String>) Initializes a new instance of the XmlObfuscator class. Declaration public XmlObfuscator(IEnumerable<string> exclusions) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > exclusions A sequence of System.String values used for excluding matching original values in the obfuscation process. | Improve this Doc XmlObfuscator(Encoding) Initializes a new instance of the XmlObfuscator class using System.Text.Encoding.UTF8 for the text encoding. Declaration public XmlObfuscator(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding The text encoding to use. | Improve this Doc XmlObfuscator(Encoding, IEnumerable<String>) Initializes a new instance of the XmlObfuscator class. Declaration public XmlObfuscator(Encoding encoding, IEnumerable<string> exclusions) Parameters Type Name Description System.Text.Encoding encoding The character encoding to use. System.Collections.Generic.IEnumerable < System.String > exclusions A sequence of System.String values used for excluding matching original values in the obfuscation process. Methods | Improve this Doc CreateMapping() Creates and returns a mappaple XML document of the original values and the obfuscated values. Declaration public override Stream CreateMapping() Returns Type Description System.IO.Stream A mappaple XML document of the original values and the obfuscated values. Overrides Obfuscator.CreateMapping() | Improve this Doc InitializePermutationCharacters() Initializes the permutation characters used in the obfuscation process using the default implmentation, but with the numeric characters removed. Declaration protected override IList<char> InitializePermutationCharacters() Returns Type Description System.Collections.Generic.IList < System.Char > An System.Collections.Generic.IList<T> compatible object holding the permuation characters used in the obfuscation process, but with the numeric characters removed. Overrides Obfuscator.InitializePermutationCharacters() | Improve this Doc Obfuscate(Stream) Obfuscates the XML document of the specified System.IO.Stream object. Declaration public override Stream Obfuscate(Stream value) Parameters Type Name Description System.IO.Stream value The System.IO.Stream object to obfuscate. Returns Type Description System.IO.Stream A System.IO.Stream object where the XML document has been obfuscated. Overrides Obfuscator.Obfuscate(Stream) | Improve this Doc Revert(Stream, Stream) Revert the obfuscated XML document of value to its original state by applying the mappaple XML document of mapping . Declaration public override Stream Revert(Stream value, Stream mapping) Parameters Type Name Description System.IO.Stream value The obfuscated System.IO.Stream to revert. System.IO.Stream mapping A System.IO.Stream containing mappaple values necessary to revert value to its original state. Returns Type Description System.IO.Stream A System.IO.Stream object where the obfuscated XML document has been reverted to its original XML document. Overrides Obfuscator.Revert(Stream, Stream) Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Web.html": {
    "href": "api/core/Cuemon.Security.Web.html",
    "title": "Namespace Cuemon.Security.Web | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Security.Web Assembly : Cuemon.Security.dll Classes JsonWebToken Represents a simple implementation of JSON Web Token that is based on the standard RFC 7519 method for communicating claims securely between two parties. This class cannot be inherited. JsonWebTokenHashAlgorithmConverter This utility class is designed to make JsonWebTokenHashAlgorithm related conversions easier to work with. JsonWebTokenHeader Represents the header information of JSON Web Token that is based on the standard RFC 7519. This class cannot be inherited. JsonWebTokenPayload Represents the payload information of JSON Web Token that is based on the standard RFC 7519. This class cannot be inherited. Enums JsonWebTokenHashAlgorithm Specifies the algorithm used for generating JWT hash values. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.HashResult.html": {
    "href": "api/core/Cuemon.Security.Cryptography.HashResult.html",
    "title": "Class HashResult | Cuemon .NET Standard",
    "keywords": "Class HashResult Represents the result of a computed System.Security.Cryptography.HashAlgorithm or System.Security.Cryptography.KeyedHashAlgorithm operation. This class cannot be inherited. Inheritance System.Object ChecksumResult HashResult Inherited Members ChecksumResult.Value ChecksumResult.GetHashCode() Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public sealed class HashResult : ChecksumResult Methods | Improve this Doc ToBase64() Converts the Value to its equivalent string representation that is encoded with base-64 digits. Declaration public override string ToBase64() Returns Type Description System.String A System.String representation, in base 64, of the contents of Value . Overrides ChecksumResult.ToBase64() | Improve this Doc ToBinary() Converts the Value to its equivalent binary representation. Declaration public override string ToBinary() Returns Type Description System.String A System.String representation, in binary, of the contents of Value . Overrides ChecksumResult.ToBinary() | Improve this Doc ToHexadecimal() Converts the Value to its equivalent hexadecimal representation. Declaration public override string ToHexadecimal() Returns Type Description System.String A System.String representation, in hexadecimal, of the contents of Value . Overrides ChecksumResult.ToHexadecimal() | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides ChecksumResult.ToString() | Improve this Doc ToUrlEncodedBase64() Converts the Value to its equivalent string representation that is encoded with base-64 digits, which is usable for transmission on the URL. Declaration public override string ToUrlEncodedBase64() Returns Type Description System.String A System.String representation, in base 64 which is usable for transmission on the URL, of the contents of Value . Overrides ChecksumResult.ToUrlEncodedBase64() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ConditionBuilder-1.html": {
    "href": "api/core/Cuemon.ConditionBuilder-1.html",
    "title": "Class ConditionBuilder<TTuple> | Cuemon .NET Standard",
    "keywords": "Class ConditionBuilder<TTuple> Supports the Condition in building custom scenarios using true/false propositions. Inheritance System.Object ConditionBuilder<TTuple> Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class ConditionBuilder<TTuple> where TTuple : Template Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . Properties | Improve this Doc ConditionResult Gets the current combined result of Initialize<TTuple, TValue>(TTuple, TValue, Func<TValue, Boolean>) , And(Boolean) and Or(Boolean) . Declaration public bool ConditionResult { get; } Property Value Type Description System.Boolean The current combined result of Initialize<TTuple, TValue>(TTuple, TValue, Func<TValue, Boolean>) , And(Boolean) and Or(Boolean) . Methods | Improve this Doc And(Boolean) Performs a a bitwise logical conjunction (AND) operation of ConditionResult and value . Declaration public ConditionBuilder<TTuple> And(bool value) Parameters Type Name Description System.Boolean value The value of a condition that can be either true or false . Returns Type Description ConditionBuilder <TTuple> This instance with the result of ConditionResult AND value . | Improve this Doc And<TValue>(TValue, Func<TValue, Boolean>) Performs a a bitwise logical conjunction (AND) operation of ConditionResult and the result of condition . Declaration public ConditionBuilder<TTuple> And<TValue>(TValue value, Func<TValue, bool> condition) Parameters Type Name Description TValue value The argument for condition . System.Func <TValue, System.Boolean > condition The delegate that will evaluate value . Returns Type Description ConditionBuilder <TTuple> This instance with the result of ConditionResult AND condition . Type Parameters Name Description TValue The type of the value for condition . | Improve this Doc Invoke(Action<TTuple>, Action<TTuple>) Invokes one of two expressions depending on the value of ConditionResult . Declaration public void Invoke(Action<TTuple> firstExpression, Action<TTuple> secondExpression) Parameters Type Name Description System.Action <TTuple> firstExpression The delegate that is invoked when ConditionResult is true . System.Action <TTuple> secondExpression The delegate that is invoked when ConditionResult is false . | Improve this Doc InvokeWhenFalse(Action<TTuple>) Invokes the expressions when ConditionResult is false . Declaration public void InvokeWhenFalse(Action<TTuple> expression) Parameters Type Name Description System.Action <TTuple> expression The delegate that is invoked when ConditionResult is false . | Improve this Doc InvokeWhenTrue(Action<TTuple>) Invokes the expressions when ConditionResult is true . Declaration public void InvokeWhenTrue(Action<TTuple> expression) Parameters Type Name Description System.Action <TTuple> expression The delegate that is invoked when ConditionResult is true . | Improve this Doc Or(Boolean) Performs a bitwise logical disjunction (OR) operation of ConditionResult and value . Declaration public ConditionBuilder<TTuple> Or(bool value) Parameters Type Name Description System.Boolean value The value of a condition that can be either true or false . Returns Type Description ConditionBuilder <TTuple> This instance with the result of ConditionResult OR value . | Improve this Doc Or<TValue>(TValue, Func<TValue, Boolean>) Performs a bitwise logical disjunction (OR) operation of ConditionResult and value . Declaration public ConditionBuilder<TTuple> Or<TValue>(TValue value, Func<TValue, bool> condition) Parameters Type Name Description TValue value The argument for condition . System.Func <TValue, System.Boolean > condition The delegate that will evaluate value . Returns Type Description ConditionBuilder <TTuple> This instance with the result of ConditionResult OR condition . Type Parameters Name Description TValue The type of the value for condition . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Rendering.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Rendering.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Rendering | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Rendering Assembly : Cuemon.AspNetCore.Mvc.dll Classes HtmlHelperExtensions Extension methods for the Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper interface. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Serialization.JsonInstance.html": {
    "href": "api/core/Cuemon.Runtime.Serialization.JsonInstance.html",
    "title": "Class JsonInstance | Cuemon .NET Standard",
    "keywords": "Class JsonInstance Represents a JSON instance from a structural data source. Inheritance System.Object JsonInstance XmlJsonInstance Namespace : Cuemon.Runtime.Serialization Assembly : Cuemon.Runtime.dll Syntax public abstract class JsonInstance Constructors | Improve this Doc JsonInstance(String, Object, Int32) Initializes a new instance of the JsonInstance class. Declaration protected JsonInstance(string name, object value, int nodeNumber) Parameters Type Name Description System.String name The name of the JSON object. System.Object value The value of the JSON object. System.Int32 nodeNumber The logical node number of the JSON object placement in the originating structural data source. Properties | Improve this Doc Instances Gets the children of the current JsonInstance object. Declaration public JsonInstanceCollection Instances { get; } Property Value Type Description JsonInstanceCollection | Improve this Doc Name Gets the name of the JSON object. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc NodeNumber Gets the logical node number of the JSON object placement in the originating structural data source. Declaration protected int NodeNumber { get; } Property Value Type Description System.Int32 | Improve this Doc Parent Gets or sets the parent of this JsonInstance object. Declaration public JsonInstance Parent { get; set; } Property Value Type Description JsonInstance The parent of this JsonInstance object. | Improve this Doc Value Gets the value of the JSON object. Declaration public object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc GetSignature() Computes and returns a MD5 signature of the following properties: Name , Value and NodeNumber . Declaration public virtual string GetSignature() Returns Type Description System.String A MD5 signature of the following properties: Name , Value and NodeNumber . | Improve this Doc IsPartOfArray() Determines whether this JsonInstance should be part of an array. Declaration public virtual bool IsPartOfArray() Returns Type Description System.Boolean true if this JsonInstance should be part of an array; otherwise, false . Remarks Because of the complexity when generating JSON, this property should be treated as a hint-only. Additional logic is assumed necessary. | Improve this Doc WriteEndArray() Determines whether this JsonInstance is in a state, where a EndArray should be written. Declaration public virtual bool WriteEndArray() Returns Type Description System.Boolean true if this JsonInstance is in a state, where a EndArray should be written; otherwise, false . Remarks Because of the complexity when generating JSON, this property should be treated as a hint-only. Additional logic is assumed necessary. | Improve this Doc WriteStartArray() Determines whether this JsonInstance is in a state, where a BeginArray should be written. Declaration public virtual bool WriteStartArray() Returns Type Description System.Boolean true if this JsonInstance is in a state, where a BeginArray should be written; otherwise, false . Remarks Because of the complexity when generating JSON, this property should be treated as a hint-only. Additional logic is assumed necessary. | Improve this Doc WriteValueSeperator() Determines whether this JsonInstance is in a state, where a ValueSeperator should be written. Declaration public virtual bool WriteValueSeperator() Returns Type Description System.Boolean true if this JsonInstance is in a state, where a ValueSeperator should be written; otherwise, false . Remarks Because of the complexity when generating JSON, this property should be treated as a hint-only. Additional logic is assumed necessary. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Serialization.JsonConverter.html": {
    "href": "api/core/Cuemon.Runtime.Serialization.JsonConverter.html",
    "title": "Class JsonConverter | Cuemon .NET Standard",
    "keywords": "Class JsonConverter This utility class is designed to make JSON related conversions easier to work with. Inheritance System.Object JsonConverter Namespace : Cuemon.Runtime.Serialization Assembly : Cuemon.Runtime.dll Syntax public static class JsonConverter Fields | Improve this Doc NullValue Represents the null literal as defined in RFC 4627. Declaration public static readonly string NullValue Field Value Type Description System.String Properties | Improve this Doc JsonAsciiConverter The function delegate that will handle JSON ASCII conversions. Declaration public static Func<int, string> JsonAsciiConverter { get; set; } Property Value Type Description System.Func < System.Int32 , System.String > | Improve this Doc JsonUnicodeConverter The function delegate that will handle JSON Unicode conversions. Declaration public static Func<int, string> JsonUnicodeConverter { get; set; } Property Value Type Description System.Func < System.Int32 , System.String > Methods | Improve this Doc Escape(String) JSON escapes the specified value using the two function delegates; JsonAsciiConverter and JsonUnicodeConverter . Declaration public static string Escape(string value) Parameters Type Name Description System.String value The System.String to escape. Returns Type Description System.String A JSON escaped System.String that is equivalent to value . | Improve this Doc ToString(Boolean) Returns the boolean value of a JSON object as defined in RFC 4627. Declaration public static string ToString(bool value) Parameters Type Name Description System.Boolean value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Byte) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(byte value) Parameters Type Name Description System.Byte value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Byte[]) Returns the string value of a JSON object as defined in RFC 4627. Declaration public static string ToString(byte[] value) Parameters Type Name Description System.Byte [] value The value of the JSON object. Returns Type Description System.String A System.String representation of value . Remarks value is converted to a Base64 encoded string. | Improve this Doc ToString(Char) Returns the string value of a JSON object as defined in RFC 4627. Declaration public static string ToString(char value) Parameters Type Name Description System.Char value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(DateTime) Returns the string value of a JSON object as defined in RFC 4627. Declaration public static string ToString(DateTime value) Parameters Type Name Description System.DateTime value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Decimal) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(decimal value) Parameters Type Name Description System.Decimal value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Double) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(double value) Parameters Type Name Description System.Double value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Guid) Returns the string value of a JSON object as defined in RFC 4627. Declaration public static string ToString(Guid value) Parameters Type Name Description System.Guid value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Int16) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(short value) Parameters Type Name Description System.Int16 value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Int32) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(int value) Parameters Type Name Description System.Int32 value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Int64) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(long value) Parameters Type Name Description System.Int64 value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Object) Returns the value of a JSON object. Declaration public static string ToString(object value) Parameters Type Name Description System.Object value The value of the JSON object. Returns Type Description System.String A System.String representation of value . Remarks value is checked and written accordingly by the System.IConvertible interface. | Improve this Doc ToString(Object, Type) Returns the value of a JSON object. Declaration public static string ToString(object value, Type valueType) Parameters Type Name Description System.Object value The value of the JSON object. System.Type valueType The type of the value . Returns Type Description System.String A System.String representation of value . Remarks value is checked and written accordingly by the System.IConvertible interface. | Improve this Doc ToString(SByte) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(sbyte value) Parameters Type Name Description System.SByte value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(Single) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(float value) Parameters Type Name Description System.Single value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(String) Returns the string value of a JSON object as defined in RFC 4627. Declaration public static string ToString(string value) Parameters Type Name Description System.String value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(UInt16) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(ushort value) Parameters Type Name Description System.UInt16 value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(UInt32) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(uint value) Parameters Type Name Description System.UInt32 value The value of the JSON object. Returns Type Description System.String A System.String representation of value . | Improve this Doc ToString(UInt64) Returns the numeric value of a JSON object as defined in RFC 4627. Declaration public static string ToString(ulong value) Parameters Type Name Description System.UInt64 value The value of the JSON object. Returns Type Description System.String A System.String representation of value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataTransferSorter.html": {
    "href": "api/core/Cuemon.Data.DataTransferSorter.html",
    "title": "Class DataTransferSorter | Cuemon .NET Standard",
    "keywords": "Class DataTransferSorter Provides a default implementation of a DataTransferRow sorter. This class cannot be inherited. Inheritance System.Object DataTransferSorter Implements ISortableTable < DataTransferRow > Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class DataTransferSorter : ISortableTable<DataTransferRow> Constructors | Improve this Doc DataTransferSorter(String) Initializes a new instance of the DataTransferSorter class. Declaration public DataTransferSorter(string orderByColumn) Parameters Type Name Description System.String orderByColumn The column on which to perform a sorting operation. Properties | Improve this Doc OrderByColumn Gets the column on which to perform a sorting operation. Declaration public string OrderByColumn { get; } Property Value Type Description System.String The column on which to perform a sorting operation. Methods | Improve this Doc OrderBy(IEnumerable<DataTransferRow>, SortOrder) Sorts the elements of source using the order of direction . Declaration public IEnumerable<DataTransferRow> OrderBy(IEnumerable<DataTransferRow> source, SortOrder direction) Parameters Type Name Description System.Collections.Generic.IEnumerable < DataTransferRow > source A sequence of values to order by direction . SortOrder direction The SortOrder to apply to the source sequence. Returns Type Description System.Collections.Generic.IEnumerable < DataTransferRow > An System.Collections.Generic.IEnumerable<T> whose elements are sorted according to OrderByColumn and direction . Implements ISortableTable<TSource> Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.CsvClient.html": {
    "href": "api/core/Cuemon.Data.CsvClient.html",
    "title": "Namespace Cuemon.Data.CsvClient | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Data.CsvClient Assembly : Cuemon.Data.dll Classes CsvDataReader Provides a way of reading a forward-only stream of rows from a CSV based data source. This class cannot be inherited. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.ComparisonUtility.html": {
    "href": "api/core/Cuemon.Collections.Generic.ComparisonUtility.html",
    "title": "Class ComparisonUtility | Cuemon .NET Standard",
    "keywords": "Class ComparisonUtility Provide a generic way to work with System.Comparison<T> related tasks. Inheritance System.Object ComparisonUtility Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class ComparisonUtility Methods | Improve this Doc Default<T>(T, T, Func<T, Type>, Func<T, Object>) Performs a default comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other. Declaration public static int Default<T>(T x, T y, Func<T, Type> typeSelector, Func<T, object> valueSelector) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.Func <T, System.Type > typeSelector The function delegate that is used to select the System.Type of the objects to compare. System.Func <T, System.Object > valueSelector The function delegate that is used to select the value of x and y . Returns Type Description System.Int32 A signed integer that indicates the relative values of x and y . Type Parameters Name Description T The type of the objects to compare. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.PreambleSequence.html": {
    "href": "api/core/Cuemon.PreambleSequence.html",
    "title": "Enum PreambleSequence | Cuemon .NET Standard",
    "keywords": "Enum PreambleSequence Specifies what action to take in regards to encoding preamble sequences. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum PreambleSequence Fields Name Description Keep Any encoding preamble sequences will be preserved. Remove Any encoding preamble sequences will be removed. Extension Methods ByteConverterExtensions.ToByteArray<PreambleSequence>() ConverterExtensions.ParseWith<PreambleSequence, TResult>(Func<PreambleSequence, TResult>) ConverterExtensions.ParseWith<PreambleSequence, T, TResult>(Func<PreambleSequence, T, TResult>, T) ConverterExtensions.ParseWith<PreambleSequence, T1, T2, TResult>(Func<PreambleSequence, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<PreambleSequence, T1, T2, T3, TResult>(Func<PreambleSequence, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<PreambleSequence, T1, T2, T3, T4, TResult>(Func<PreambleSequence, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<PreambleSequence, T1, T2, T3, T4, T5, TResult>(Func<PreambleSequence, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<PreambleSequence, T1, T2, T3, T4, T5, T6, TResult>(Func<PreambleSequence, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<PreambleSequence, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<PreambleSequence, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<PreambleSequence, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<PreambleSequence, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<PreambleSequence, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<PreambleSequence, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<PreambleSequence>() DelegateUtilityExtensions.DynamicWrap<PreambleSequence>() TweakerExtensions.Adjust<PreambleSequence>(Func<PreambleSequence, PreambleSequence>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<PreambleSequence>() WrapperExtensions.UseWrapper<PreambleSequence>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<PreambleSequence>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<PreambleSequence>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Threading.ParallelTasks.html": {
    "href": "api/core/Cuemon.Threading.ParallelTasks.html",
    "title": "Class ParallelTasks | Cuemon .NET Standard",
    "keywords": "Class ParallelTasks Provides ways to encapsulate and re-use existing code while adding support for parallel loops and regions. Inheritance System.Object ParallelTasks Namespace : Cuemon.Threading Assembly : Cuemon.Threading.dll Syntax public static class ParallelTasks Methods | Improve this Doc For<TSource>(TSource, TSource, Action<TSource>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource>(TSource initial, TSource repeats, Action<TSource> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the initial . Remarks The following table shows the initial overloaded arguments for For<TSource>(TSource, TSource, Action<TSource>) . Argument Initial Value partitionSize Cuemon.Threading.ParallelTasks.DefaultNumberOfConcurrentWorkerThreads timeout System.TimeSpan.FromMinutes(Double) set to 2 relational LessThan assignment Addition step 1 Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource>(Int32, TSource, TSource, Action<TSource>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource>(int partitionSize, TSource initial, TSource repeats, Action<TSource> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the initial . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource>(Int32, TimeSpan, TSource, TSource, Action<TSource>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the initial . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the initial . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the initial . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the initial . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(TSource, TSource, Action<TSource, T>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T>(TSource initial, TSource repeats, Action<TSource, T> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(Int32, TSource, TSource, Action<TSource, T>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(Int32, TimeSpan, TSource, TSource, Action<TSource, T>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(TSource, TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2>(TSource initial, TSource repeats, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(Int32, TSource, TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(TSource, TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3>(TSource initial, TSource repeats, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(Int32, TSource, TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(TSource, TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4>(TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(Int32, TSource, TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(TSource, TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(Int32, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6>(TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6>(TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6>(Int32, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7>(TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7>(TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7>(Int32, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, TimeSpan, TSource, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForEach<TSource>(IEnumerable<TSource>, Action<TSource>) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource>(IEnumerable<TSource> source, Action<TSource> body) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the source . Remarks The following table shows the initial overloaded arguments for ForEach<TSource>(IEnumerable<TSource>, Action<TSource>) . Argument Initial Value partitionSize Cuemon.Threading.ParallelTasks.DefaultNumberOfConcurrentWorkerThreads timeout System.TimeSpan.FromMinutes(Double) set to 2 Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource>(Int32, IEnumerable<TSource>, Action<TSource>) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource>(int partitionSize, IEnumerable<TSource> source, Action<TSource> body) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the source . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource>) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource> body) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the data in the source . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T>(IEnumerable<TSource>, Action<TSource, T>, T) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T>(IEnumerable<TSource> source, Action<TSource, T> body, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T>(Int32, IEnumerable<TSource>, Action<TSource, T>, T) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T> body, T arg) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T>, T) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T> body, T arg) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2>(IEnumerable<TSource>, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2>(IEnumerable<TSource> source, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3>(IEnumerable<TSource>, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, TimeSpan, IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Action <TSource, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . T9 arg9 The ninth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . T9 The type of the ninth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . T9 arg9 The ninth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . T9 The type of the ninth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . T9 arg9 The ninth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . T9 The type of the ninth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . T9 arg9 The ninth parameter of the function delegate body . T10 arg10 The tenth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . T9 The type of the ninth parameter of the function delegate body . T10 The type of the tenth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . T9 arg9 The ninth parameter of the function delegate body . T10 arg10 The tenth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . T9 The type of the ninth parameter of the function delegate body . T10 The type of the tenth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . T8 arg8 The eighth parameter of the function delegate body . T9 arg9 The ninth parameter of the function delegate body . T10 arg10 The tenth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . T8 The type of the eighth parameter of the function delegate body . T9 The type of the ninth parameter of the function delegate body . T10 The type of the tenth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, TResult> body) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . TResult The type of the return value of the body that this function delegate encapsulates. Remarks The following table shows the initial overloaded arguments for ForEachTask<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) . Argument Initial Value partitionSize Cuemon.Threading.ParallelTasks.DefaultNumberOfConcurrentWorkerThreads timeout System.TimeSpan.FromMinutes(Double) set to 2 Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, TResult>(Int32, IEnumerable<TSource>, Func<TSource, TResult>) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, TResult> body) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, TResult>) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, TResult> body) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T, TResult>(IEnumerable<TSource> source, Func<TSource, T, TResult> body, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T The type of the parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T, TResult> body, T arg) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T The type of the parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T, TResult> body, T arg) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T The type of the parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(Int32, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(int partitionSize, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(Int32, TimeSpan, IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForEachTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(int partitionSize, TimeSpan timeout, IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel foreach-loop operation to complete. System.Collections.Generic.IEnumerable <TSource> source The sequence to iterate over parallel. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the function delegate body . T2 arg2 The second parameter of the function delegate body . T3 arg3 The third parameter of the function delegate body . T4 arg4 The fourth parameter of the function delegate body . T5 arg5 The fifth parameter of the function delegate body . T6 arg6 The sixth parameter of the function delegate body . T7 arg7 The seventh parameter of the function delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as source . Type Parameters Name Description TSource The type of the data in the source . T1 The type of the first parameter of the function delegate body . T2 The type of the second parameter of the function delegate body . T3 The type of the third parameter of the function delegate body . T4 The type of the fourth parameter of the function delegate body . T5 The type of the fifth parameter of the function delegate body . T6 The type of the sixth parameter of the function delegate body . T7 The type of the seventh parameter of the function delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException source is null -or- body is null. | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, TResult>(TSource, TSource, Func<TSource, TResult>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, TResult>(TSource initial, TSource repeats, Func<TSource, TResult> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . TResult The type of the return value of the body that this function delegate encapsulates. Remarks The following table shows the initial overloaded arguments for For<TSource>(TSource, TSource, Action<TSource>) . Argument Initial Value partitionSize Cuemon.Threading.ParallelTasks.DefaultNumberOfConcurrentWorkerThreads timeout System.TimeSpan.FromMinutes(Double) set to 2 relational LessThan assignment Addition step 1 Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, TResult>(Int32, TSource, TSource, Func<TSource, TResult>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, TResult> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, TResult>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, TResult> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, TResult>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, TResult> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, TResult>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, TResult> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, TResult>) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, TResult> body) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, TResult> body The delegate that is invoked once per iteration. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T, TResult>(TSource, TSource, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T, TResult>(TSource initial, TSource repeats, Func<TSource, T, TResult> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T, TResult>(Int32, TSource, TSource, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T, TResult> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T, TResult> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T, TResult> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T, TResult> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T, TResult>, T) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T, TResult> body, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T, TResult> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T The type of the parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, TResult>(TSource, TSource, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, TResult>, T1, T2) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, TResult> body, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, TResult>(TSource, TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, T3, TResult> body, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, TResult>(TSource, TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, T3, T4, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, TResult>(TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(Int32, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(int partitionSize, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(Int32, TimeSpan, TSource, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(int partitionSize, TimeSpan timeout, TSource initial, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, AssignmentOperator, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the parallel for-loop. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(Int32, TimeSpan, TSource, RelationalOperator, TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code having a return value. Declaration public static IReadOnlyCollection<TResult> ForTask<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(int partitionSize, TimeSpan timeout, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel for-loop operation to complete. TSource initial The initial value of the counter in the parallel for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the parallel for-loop. TSource repeats The amount of repeats to do. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A System.Collections.Generic.IReadOnlyCollection<T> where the result of body has been stored in the same sequential order as repeats . Type Parameters Name Description TSource The type of the data in the initial . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . TResult The type of the return value of the body that this function delegate encapsulates. Exceptions Type Condition System.ArgumentNullException body is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . T8 arg8 The eighth parameter of the delegate body . T9 arg9 The ninth parameter of the delegate body . T10 arg10 The tenth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . T8 The type of the eighth parameter of the delegate body . T9 The type of the ninth parameter of the delegate body . T10 The type of the tenth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult>) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult> body) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . Remarks The following table shows the initial overloaded arguments for While<TSource, TResult>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult>) . Argument Initial Value partitionSize 2 + System.Environment.ProcessorCount timeout System.TimeSpan.FromMinutes(Double) set to 2 Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult>) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult> body) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult>) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult> body) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult> body The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T>, T) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T> body, T arg) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T>, T) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T> body, T arg) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T>, T) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T> body, T arg) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T> body The delegate that is invoked once per iteration. T arg The parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T The type of the parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2>, T1, T2) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2> body, T1 arg1, T2 arg2) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2>, T1, T2) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2>, T1, T2) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2> body, T1 arg1, T2 arg2) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3> body, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7>(TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7>(TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7>(Int32, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. | Improve this Doc While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7>(Int32, TimeSpan, TesterFunc<TSource, TResult, Boolean>, TSource, Action<TResult, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, TResult, T1, T2, T3, T4, T5, T6, T7>(int partitionSize, TimeSpan timeout, TesterFunc<TSource, TResult, bool> condition, TSource source, Action<TResult, T1, T2, T3, T4, T5, T6, T7> body, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Int32 partitionSize The maximum number of concurrent worker threads per partition. System.TimeSpan timeout A System.TimeSpan that represents the time to wait for the parallel while-loop operation to complete. TesterFunc <TSource, TResult, System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Action <TResult, T1, T2, T3, T4, T5, T6, T7> body The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate body . T2 arg2 The second parameter of the delegate body . T3 arg3 The third parameter of the delegate body . T4 arg4 The fourth parameter of the delegate body . T5 arg5 The fifth parameter of the delegate body . T6 arg6 The sixth parameter of the delegate body . T7 arg7 The seventh parameter of the delegate body . Type Parameters Name Description TSource The type of the parameter of the function delegate condition . TResult The type of the out result value of the function delegate condition . T1 The type of the first parameter of the delegate body . T2 The type of the second parameter of the delegate body . T3 The type of the third parameter of the delegate body . T4 The type of the fourth parameter of the delegate body . T5 The type of the fifth parameter of the delegate body . T6 The type of the sixth parameter of the delegate body . T7 The type of the seventh parameter of the delegate body . Exceptions Type Condition System.ArgumentNullException condition is null -or- body is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Threading.AsyncOptions.html": {
    "href": "api/core/Cuemon.Threading.AsyncOptions.html",
    "title": "Class AsyncOptions | Cuemon .NET Standard",
    "keywords": "Class AsyncOptions Specifies options that is related to asynchronous operations. Inheritance System.Object AsyncOptions HttpRequestOptions Namespace : Cuemon.Threading Assembly : Cuemon.Core.dll Syntax public class AsyncOptions Constructors | Improve this Doc AsyncOptions() Initializes a new instance of the AsyncOptions class. Declaration public AsyncOptions() Properties | Improve this Doc CancellationToken Gets or sets the cancellation token of an asynchronous operations. Declaration public CancellationToken CancellationToken { get; set; } Property Value Type Description System.Threading.CancellationToken The cancellation token of an asynchronous operations. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Messaging.html": {
    "href": "api/core/Cuemon.Messaging.html",
    "title": "Namespace Cuemon.Messaging | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Messaging Assembly : Cuemon.Core.dll Classes DynamicCorrelation Provides a factory based way to create and wrap an ICorrelation implementation. Interfaces ICorrelation Provides a Correlation ID (also known as a Request ID) that is a unique identifier which is attached to requests and messages that allow reference to a particular transaction or event chain. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Messaging.ICorrelation.html": {
    "href": "api/core/Cuemon.Messaging.ICorrelation.html",
    "title": "Interface ICorrelation | Cuemon .NET Standard",
    "keywords": "Interface ICorrelation Provides a Correlation ID (also known as a Request ID) that is a unique identifier which is attached to requests and messages that allow reference to a particular transaction or event chain. Namespace : Cuemon.Messaging Assembly : Cuemon.Core.dll Syntax public interface ICorrelation Properties | Improve this Doc CorrelationId Gets the unique correlation identifier. Declaration string CorrelationId { get; } Property Value Type Description System.String The unique correlation identifier. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.HmacUtilityExtensions.html": {
    "href": "api/core/Cuemon.Security.Cryptography.HmacUtilityExtensions.html",
    "title": "Class HmacUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class HmacUtilityExtensions This is an extension implementation of the most common methods on the HmacUtility class. Inheritance System.Object HmacUtilityExtensions Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public static class HmacUtilityExtensions Methods | Improve this Doc ComputeKeyedHash(Byte[], Byte[], Action<KeyedHashOptions>) Computes a keyed-hash value of the specified value . Declaration public static HashResult ComputeKeyedHash(this byte[] value, byte[] sharedKey, Action<KeyedHashOptions> setup = null) Parameters Type Name Description System.Byte [] value The System.Byte array to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < KeyedHashOptions > setup The KeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified value . | Improve this Doc ComputeKeyedHash(Stream, Byte[], Action<StreamKeyedHashOptions>) Computes a keyed-hash value of the specified value . Declaration public static HashResult ComputeKeyedHash(this Stream value, byte[] sharedKey, Action<StreamKeyedHashOptions> setup = null) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < StreamKeyedHashOptions > setup The StreamKeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified value . | Improve this Doc ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) Computes a keyed-hash value of the specified value . Declaration public static HashResult ComputeKeyedHash(this object value, byte[] sharedKey, Action<KeyedHashOptions> setup = null) Parameters Type Name Description System.Object value The object to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < KeyedHashOptions > setup The KeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified value . | Improve this Doc ComputeKeyedHash(Object[], Byte[], Action<KeyedHashOptions>) Combines a sequence of objects into one object, and computes a keyed-hash value of the specified values . Declaration public static HashResult ComputeKeyedHash(this object[] values, byte[] sharedKey, Action<KeyedHashOptions> setup = null) Parameters Type Name Description System.Object [] values The objects to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < KeyedHashOptions > setup The KeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified values . | Improve this Doc ComputeKeyedHash(String, Byte[], Action<StringKeyedHashOptions>) Computes a keyed-hash value of the specified value . Declaration public static HashResult ComputeKeyedHash(this string value, byte[] sharedKey, Action<StringKeyedHashOptions> setup = null) Parameters Type Name Description System.String value The System.String value to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < StringKeyedHashOptions > setup The StringKeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified value . | Improve this Doc ComputeKeyedHash(String[], Byte[], Action<StringKeyedHashOptions>) Computes a keyed-hash value of the specified values . Declaration public static HashResult ComputeKeyedHash(this string[] values, byte[] sharedKey, Action<StringKeyedHashOptions> setup = null) Parameters Type Name Description System.String [] values The System.String array to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < StringKeyedHashOptions > setup The StringKeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of values . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.ReflectionUtility.html": {
    "href": "api/core/Cuemon.Reflection.ReflectionUtility.html",
    "title": "Class ReflectionUtility | Cuemon .NET Standard",
    "keywords": "Class ReflectionUtility This utility class is designed to make Cuemon.Reflection operations easier to work with. Inheritance System.Object ReflectionUtility Namespace : Cuemon.Reflection Assembly : Cuemon.Core.dll Syntax public static class ReflectionUtility Fields | Improve this Doc BindingInstancePublic Specifies that public instance members are to be included in the search. Declaration public static readonly BindingFlags BindingInstancePublic Field Value Type Description System.Reflection.BindingFlags Remarks Returns the the following System.Reflection.BindingFlags combination: BindingFlags.Instance | BindingFlags.Public. | Improve this Doc BindingInstancePublicAndPrivate Specifies that public and none-public instance members are to be included in the search. Declaration public static readonly BindingFlags BindingInstancePublicAndPrivate Field Value Type Description System.Reflection.BindingFlags Remarks Returns the the following System.Reflection.BindingFlags combination: BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic. | Improve this Doc BindingInstancePublicAndPrivateNoneInherited Specifies that public and none-public instance members are to be included in the search. Inherited members are excluded from the search. Declaration public static readonly BindingFlags BindingInstancePublicAndPrivateNoneInherited Field Value Type Description System.Reflection.BindingFlags Remarks Returns the the following System.Reflection.BindingFlags combination: BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly. | Improve this Doc BindingInstancePublicAndPrivateNoneInheritedIncludeStatic Specifies that public and none-public instance and static members are to be included in the search. Inherited members are excluded from the search. Declaration public static readonly BindingFlags BindingInstancePublicAndPrivateNoneInheritedIncludeStatic Field Value Type Description System.Reflection.BindingFlags Remarks Returns the the following System.Reflection.BindingFlags combination: BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly | BindingFlags.Static. Methods | Improve this Doc DefaultSkipPropertiesCallback(Type) A default callback implementation that evaluates if public property iteration should be skipped in the specified source type. Declaration public static bool DefaultSkipPropertiesCallback(Type source) Parameters Type Name Description System.Type source The source type to evaluate. Returns Type Description System.Boolean true if public property iteration should be skipped; otherwise false . | Improve this Doc DefaultSkipPropertyCallback(PropertyInfo) A default callback implementation that evaluates if the specified property should be skipped for further processing. Declaration public static bool DefaultSkipPropertyCallback(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property The property to evaluate. Returns Type Description System.Boolean true if the specified property should be skipped; otherwise false . | Improve this Doc GetAssemblyTypes(Assembly) Gets the types contained within the specified assembly . Declaration public static IEnumerable<Type> GetAssemblyTypes(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The System.Reflection.Assembly to search the types from. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > A sequence of all System.Type elements from the specified assembly . | Improve this Doc GetAssemblyTypes(Assembly, String) Gets the types contained within the specified assembly . Declaration public static IEnumerable<Type> GetAssemblyTypes(Assembly assembly, string namespaceFilter) Parameters Type Name Description System.Reflection.Assembly assembly The System.Reflection.Assembly to search the types from. System.String namespaceFilter The namespace filter to apply on the types in the assembly . Returns Type Description System.Collections.Generic.IEnumerable < System.Type > A sequence of System.Type elements, matching the applied filter, from the specified assembly . | Improve this Doc GetAssemblyTypes(Assembly, String, Type) Gets the types contained within the specified assembly . Declaration public static IEnumerable<Type> GetAssemblyTypes(Assembly assembly, string namespaceFilter, Type typeFilter) Parameters Type Name Description System.Reflection.Assembly assembly The System.Reflection.Assembly to search the types from. System.String namespaceFilter The namespace filter to apply on the types in the assembly . System.Type typeFilter The type filter to apply on the types in the assembly . Returns Type Description System.Collections.Generic.IEnumerable < System.Type > A sequence of System.Type elements, matching the applied filters, from the specified assembly . | Improve this Doc GetConstructors(Type) Returns all the constructors of the specified source . Declaration public static IEnumerable<ConstructorInfo> GetConstructors(Type source) Parameters Type Name Description System.Type source The source to return constructors from. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.ConstructorInfo > A sequence of System.Reflection.ConstructorInfo objects representing a common search pattern of the specified source . Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInherited . | Improve this Doc GetConstructors(Type, BindingFlags) Returns all the properties of the specified source . Declaration public static IEnumerable<ConstructorInfo> GetConstructors(Type source, BindingFlags bindings) Parameters Type Name Description System.Type source The source to return constructors from. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.ConstructorInfo > A sequence of System.Reflection.ConstructorInfo objects representing the search pattern in bindings of the specified source . | Improve this Doc GetEmbeddedResource(Type, String) Loads the embedded resource from the associated System.Reflection.Assembly of the specified System.Type . Declaration public static Stream GetEmbeddedResource(Type source, string name) Parameters Type Name Description System.Type source The source type to load the resource from. System.String name The case-sensitive name of the resource being requested. Returns Type Description System.IO.Stream A System.IO.Stream representing the loaded resource; null if no resources were specified during compilation, or if the resource is not visible to the caller. | Improve this Doc GetEmbeddedResource(Type, String, ResourceMatch) Loads the embedded resource from the associated System.Reflection.Assembly of the specified System.Type . Declaration public static Stream GetEmbeddedResource(Type source, string name, ResourceMatch match) Parameters Type Name Description System.Type source The source type to load the resource from. System.String name The case-sensitive name of the resource being requested. ResourceMatch match The match ruleset to apply. Returns Type Description System.IO.Stream A System.IO.Stream representing the loaded resource; null if no resources were specified during compilation, or if the resource is not visible to the caller. | Improve this Doc GetEmbeddedResources(Type, String, ResourceMatch) Loads the embedded resources from the associated System.Reflection.Assembly of the specified System.Type following the ResourceMatch ruleset of match . Declaration public static IEnumerable<Stream> GetEmbeddedResources(Type source, string name, ResourceMatch match) Parameters Type Name Description System.Type source The source type to load the resource from. System.String name The name of the resource being requested. ResourceMatch match The match ruleset to apply. Returns Type Description System.Collections.Generic.IEnumerable < System.IO.Stream > A System.IO.Stream representing the loaded resources; null if no resources were specified during compilation, or if the resource is not visible to the caller. | Improve this Doc GetField(Type, String) Gets a specific field of the specified source . Declaration public static FieldInfo GetField(Type source, string fieldName) Parameters Type Name Description System.Type source The source to return a field from. System.String fieldName The name of the field to return. Returns Type Description System.Reflection.FieldInfo An object representing the field with the specified name, if found; otherwise, null. Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . Exceptions Type Condition System.ArgumentNullException source is null -or- fieldName is null. ArgumentEmptyException fieldName is empty. | Improve this Doc GetField(Type, String, BindingFlags) Gets a specific field of the specified source . Declaration public static FieldInfo GetField(Type source, string fieldName, BindingFlags bindings) Parameters Type Name Description System.Type source The source to return a field from. System.String fieldName The name of the field to return. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Reflection.FieldInfo An object representing the field with the specified name, if found; otherwise, null. Exceptions Type Condition System.ArgumentNullException source is null -or- fieldName is null. ArgumentEmptyException fieldName is empty. | Improve this Doc GetFields(Type) Returns all the fields of the specified source . Declaration public static IEnumerable<FieldInfo> GetFields(Type source) Parameters Type Name Description System.Type source The source to return fields from. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.FieldInfo > A sequence of System.Reflection.FieldInfo objects representing a common search pattern of the specified source . Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetFields(Type, BindingFlags) Returns all the fields of the specified source . Declaration public static IEnumerable<FieldInfo> GetFields(Type source, BindingFlags bindings) Parameters Type Name Description System.Type source The source to return fields from. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.FieldInfo > A sequence of System.Reflection.FieldInfo objects representing the search pattern in bindings of the specified source . | Improve this Doc GetMethod(Type, String) Gets a specific method of the specified source . Declaration public static MethodInfo GetMethod(Type source, string methodName) Parameters Type Name Description System.Type source The source to return a method from. System.String methodName The name of the method to return. Returns Type Description System.Reflection.MethodInfo An object representing the method with the specified name, if found; otherwise, null. Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetMethod(Type, String, BindingFlags) Gets a specific method of the specified source . Declaration public static MethodInfo GetMethod(Type source, string methodName, BindingFlags bindings) Parameters Type Name Description System.Type source The source to return a method from. System.String methodName The name of the method to return. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Reflection.MethodInfo An object representing the method with the specified name, if found; otherwise, null. Exceptions Type Condition System.ArgumentNullException source is null -or- methodName is null. ArgumentEmptyException methodName is empty. | Improve this Doc GetMethod(Type, String, Type[]) Gets a specific method of the specified source . Declaration public static MethodInfo GetMethod(Type source, string methodName, Type[] methodSignature) Parameters Type Name Description System.Type source The source to return a method from. System.String methodName The name of the method to return. System.Type [] methodSignature An array of System.Type objects representing the number, order, and type of the parameters for the method to get. Returns Type Description System.Reflection.MethodInfo An object representing the method with the specified name, if found; otherwise, null. | Improve this Doc GetMethods(Type) Returns all the methods of the specified source . Declaration public static IEnumerable<MethodInfo> GetMethods(Type source) Parameters Type Name Description System.Type source The source to return methods from. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.MethodInfo > A sequence of System.Reflection.MethodInfo objects representing a common search pattern of the specified source . Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetMethods(Type, BindingFlags) Returns all the methods of the specified source . Declaration public static IEnumerable<MethodInfo> GetMethods(Type source, BindingFlags bindings) Parameters Type Name Description System.Type source The source to return methods from. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.MethodInfo > A sequence of System.Reflection.MethodInfo objects representing the search pattern in bindings of the specified source . | Improve this Doc GetObjectHierarchy(Object, Action<ObjectHierarchyOptions>) Gets the tree structure of the specified source wrapped in an IHierarchy<T> node representing a hierarchical structure. Declaration public static IHierarchy<object> GetObjectHierarchy(object source, Action<ObjectHierarchyOptions> setup = null) Parameters Type Name Description System.Object source The source whose properties will be traversed while building the hierarchical structure. System.Action < ObjectHierarchyOptions > setup The ObjectHierarchyOptions which need to be configured. Returns Type Description IHierarchy < System.Object > An IHierarchy<T> node representing the entirety of a hierarchical structure from the specified source . Exceptions Type Condition System.ArgumentNullException source is null. | Improve this Doc GetProperties(Type) Returns all the properties of the specified source . Declaration public static IEnumerable<PropertyInfo> GetProperties(Type source) Parameters Type Name Description System.Type source The source to return properties from. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > A sequence of System.Reflection.PropertyInfo objects representing a common search pattern of the specified source . Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetProperties(Type, BindingFlags) Returns all the properties of the specified source . Declaration public static IEnumerable<PropertyInfo> GetProperties(Type source, BindingFlags bindings) Parameters Type Name Description System.Type source The source to return properties from. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > A sequence of System.Reflection.PropertyInfo objects representing the search pattern in bindings of the specified source . | Improve this Doc GetProperty(Type, String) Gets a specific property of the specified source . Declaration public static PropertyInfo GetProperty(Type source, string propertyName) Parameters Type Name Description System.Type source The source to return a property from. System.String propertyName The name of the property to return. Returns Type Description System.Reflection.PropertyInfo An object representing the property with the specified name, if found; otherwise, null. Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetProperty(Type, String, BindingFlags) Gets a specific property of the specified source . Declaration public static PropertyInfo GetProperty(Type source, string propertyName, BindingFlags bindings) Parameters Type Name Description System.Type source The source to return a property from. System.String propertyName The name of the property to return. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Reflection.PropertyInfo An object representing the property with the specified name, if found; otherwise, null. Exceptions Type Condition System.ArgumentNullException source is null -or- propertyName is null. ArgumentEmptyException propertyName is empty. | Improve this Doc GetProperty(Type, String, Type) Gets a specific property of the specified source . Declaration public static PropertyInfo GetProperty(Type source, string propertyName, Type propertyReturnSignature) Parameters Type Name Description System.Type source The source to return a property from. System.String propertyName The name of the property to return. System.Type propertyReturnSignature The return System.Type of the property. Returns Type Description System.Reflection.PropertyInfo An object representing the property that matches the specified requirements, if found; otherwise, null. Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetProperty(Type, String, Type, Type[]) Gets a specific property of the specified source . Declaration public static PropertyInfo GetProperty(Type source, string propertyName, Type propertyReturnSignature, Type[] propertySignature) Parameters Type Name Description System.Type source The source to return a property from. System.String propertyName The name of the property to return. System.Type propertyReturnSignature The return System.Type of the property. System.Type [] propertySignature An array of System.Type objects representing the number, order, and type of the parameters for the indexed property to get. Returns Type Description System.Reflection.PropertyInfo An object representing the property that matches the specified requirements, if found; otherwise, null. Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetPropertyAttributeDecorations<TDecoration>(Type) Gets a sequence of the specified TDecoration attribute, narrowed to property attribute decorations. Declaration public static IDictionary<PropertyInfo, TDecoration[]> GetPropertyAttributeDecorations<TDecoration>(Type source) where TDecoration : Attribute Parameters Type Name Description System.Type source The source type to locate TDecoration attributes in. Returns Type Description System.Collections.Generic.IDictionary < System.Reflection.PropertyInfo , TDecoration[]> An System.Collections.Generic.IEnumerable<T> of the specified TDecoration attributes. Type Parameters Name Description TDecoration The type of the attribute to locate in source . Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetPropertyAttributeDecorations<TDecoration>(Type, BindingFlags) Gets a sequence of the specified TDecoration attribute, narrowed to property attribute decorations. Declaration public static IDictionary<PropertyInfo, TDecoration[]> GetPropertyAttributeDecorations<TDecoration>(Type source, BindingFlags bindings) where TDecoration : Attribute Parameters Type Name Description System.Type source The source type to locate TDecoration attributes in. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Collections.Generic.IDictionary < System.Reflection.PropertyInfo , TDecoration[]> An System.Collections.Generic.IEnumerable<T> of the specified TDecoration attributes. Type Parameters Name Description TDecoration The type of the attribute to locate in source . | Improve this Doc GetPropertyValue(Object, PropertyInfo) Gets the property value of a specified source . Declaration public static object GetPropertyValue(object source, PropertyInfo property) Parameters Type Name Description System.Object source The source whose property value will be returned. System.Reflection.PropertyInfo property The System.Reflection.PropertyInfo to access it's value from. Returns Type Description System.Object The property value of the specified source . Exceptions Type Condition System.ArgumentNullException source is null - or - property is null. | Improve this Doc GetPropertyValue(Object, PropertyInfo, Func<ParameterInfo[], Object[]>) Gets the property value of a specified source with check for the need of property index values initialized by the specified propertyIndexParametersResolver . Declaration public static object GetPropertyValue(object source, PropertyInfo property, Func<ParameterInfo[], object[]> propertyIndexParametersResolver) Parameters Type Name Description System.Object source The source whose property value will be returned. System.Reflection.PropertyInfo property The System.Reflection.PropertyInfo to access it's value from. System.Func < System.Reflection.ParameterInfo [], System.Object []> propertyIndexParametersResolver The function delegate that is invoked if a property has one or more index parameters. Returns Type Description System.Object The property value of the specified source . Exceptions Type Condition System.ArgumentNullException source is null - or - property is null - or - propertyIndexParametersResolver is null. | Improve this Doc HasCircularReference<T>(T) Determines whether the specified source has a circular reference. Declaration public static bool HasCircularReference<T>(T source) where T : class Parameters Type Name Description T source The source to check for circular reference. Returns Type Description System.Boolean true if the specified source has a circular reference; otherwise, false . Type Parameters Name Description T The type of the source. | Improve this Doc HasCircularReference<T>(T, Int32) Determines whether the specified source has a circular reference. Declaration public static bool HasCircularReference<T>(T source, int maxDepth) where T : class Parameters Type Name Description T source The source to check for circular reference. System.Int32 maxDepth The maximum depth to traverse of source . Returns Type Description System.Boolean true if the specified source has a circular reference; otherwise, false . Type Parameters Name Description T The type of the source. | Improve this Doc HasCircularReference<T>(T, Int32, Func<ParameterInfo[], Object[]>) Determines whether the specified source has a circular reference. Declaration public static bool HasCircularReference<T>(T source, int maxDepth, Func<ParameterInfo[], object[]> propertyIndexParametersResolver) where T : class Parameters Type Name Description T source The source to check for circular reference. System.Int32 maxDepth The maximum depth to traverse of source . System.Func < System.Reflection.ParameterInfo [], System.Object []> propertyIndexParametersResolver The function delegate that is invoked if a property has one or more index parameters. Returns Type Description System.Boolean true if the specified source has a circular reference; otherwise, false . Type Parameters Name Description T The type of the source. | Improve this Doc IsAutoProperty(PropertyInfo) Determines whether the specified property is considered an automatic property implementation. Declaration public static bool IsAutoProperty(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property The property to check for automatic property implementation. Returns Type Description System.Boolean true if the specified property is considered an automatic property implementation; otherwise, false . Exceptions Type Condition System.ArgumentNullException property is null. | Improve this Doc IsOverride(MethodInfo) Determines whether the specified method has been overridden. Declaration public static bool IsOverride(MethodInfo method) Parameters Type Name Description System.Reflection.MethodInfo method The method to evaluate has been overridden. Returns Type Description System.Boolean true if the specified method has been overridden; otherwise, false . | Improve this Doc IsOverride(PropertyInfo) Determines whether the specified property has been overridden. Declaration public static bool IsOverride(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property The property to evaluate has been overridden. Returns Type Description System.Boolean true if the specified property has been overridden; otherwise, false . | Improve this Doc ParseMethodParameters(Type, String, Object[]) Parses and returns a collection of key/value pairs representing the specified methodName . Declaration public static IDictionary<string, object> ParseMethodParameters(Type source, string methodName, params object[] methodParameters) Parameters Type Name Description System.Type source The source to locate the specified methodName in. System.String methodName The name of the method to parse on source . System.Object [] methodParameters A variable number of values passed to the methodName on this instance. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > A collection of key/value pairs representing the specified methodName . Remarks This method will parse the specified methodName for parameter names and tie them with methodParameters . Exceptions Type Condition System.ArgumentNullException This exception is thrown if methodName is null, if source is null or if methodParameters is null and method has resolved parameters. ArgumentEmptyException This exception is thrown if methodName is empty. System.ArgumentException This exception is thrown if either of the following is true: the size of methodParameters does not match the resolved parameters size of methodName , the type of methodParameters does not match the resolved parameters type of methodName . | Improve this Doc ParseMethodParameters(Type, String, Type[], Object[]) Parses and returns a collection of key/value pairs representing the specified methodName . Declaration public static IDictionary<string, object> ParseMethodParameters(Type source, string methodName, Type[] methodSignature, params object[] methodParameters) Parameters Type Name Description System.Type source The source to locate the specified methodName in. System.String methodName The name of the method to parse on source . System.Type [] methodSignature An array of System.Type objects representing the number, order, and type of the parameters for the method to get. System.Object [] methodParameters A variable number of values passed to the methodName on this instance. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > A collection of key/value pairs representing the specified methodName . Remarks This method will parse the specified methodName for parameter names and tie them with methodParameters . Exceptions Type Condition System.ArgumentNullException This exception is thrown if methodName is null, if source is null or if methodParameters is null and method has resolved parameters. ArgumentEmptyException This exception is thrown if methodName is empty. System.ArgumentException This exception is thrown if either of the following is true: the size of methodParameters does not match the resolved parameters size of methodName , the type of methodParameters does not match the resolved parameters type of methodName . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.ParameterSignature.html": {
    "href": "api/core/Cuemon.Reflection.ParameterSignature.html",
    "title": "Class ParameterSignature | Cuemon .NET Standard",
    "keywords": "Class ParameterSignature Represent the signature of a parameter to a method, property or similar. Inheritance System.Object ParameterSignature Namespace : Cuemon.Reflection Assembly : Cuemon.Core.dll Syntax public sealed class ParameterSignature Constructors | Improve this Doc ParameterSignature(Type, String) Initializes a new instance of the ParameterSignature class. Declaration public ParameterSignature(Type parameterType, string parameterName) Parameters Type Name Description System.Type parameterType The type of the parameter. System.String parameterName The name of the parameter. Exceptions Type Condition System.ArgumentNullException parameterType is null or parameterName is null. ArgumentEmptyException parameterName is empty. Properties | Improve this Doc ParameterName Gets the name of the parameter. Declaration public string ParameterName { get; } Property Value Type Description System.String The name of the parameter. | Improve this Doc ParameterType Gets the System.Type of the parameter. Declaration public Type ParameterType { get; } Property Value Type Description System.Type The System.Type of the parameter. Methods | Improve this Doc Parse(IEnumerable<ParameterInfo>) Converts the specified System.Reflection.ParameterInfo sequence to its System.Collections.Generic.IEnumerable<T> equivalent. Declaration public static IEnumerable<ParameterSignature> Parse(IEnumerable<ParameterInfo> parameters) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.ParameterInfo > parameters A sequence of System.Reflection.ParameterInfo . Returns Type Description System.Collections.Generic.IEnumerable < ParameterSignature > An System.Collections.Generic.IEnumerable<T> that is equivalent to the System.Reflection.ParameterInfo sequence. Exceptions Type Condition System.ArgumentNullException parameters is null. | Improve this Doc Parse(MethodBase) Extracts and converts the System.Reflection.ParameterInfo sequence to its System.Collections.Generic.IEnumerable<T> equivalent from System.Reflection.MethodBase.GetParameters() . Declaration public static IEnumerable<ParameterSignature> Parse(MethodBase method) Parameters Type Name Description System.Reflection.MethodBase method The System.Reflection.MethodBase to extract parameter information from. Returns Type Description System.Collections.Generic.IEnumerable < ParameterSignature > An System.Collections.Generic.IEnumerable<T> that is equivalent to the System.Reflection.ParameterInfo sequence in System.Reflection.MethodBase.GetParameters() . Exceptions Type Condition System.ArgumentNullException method is null. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.ObjectHierarchyOptions.html": {
    "href": "api/core/Cuemon.Reflection.ObjectHierarchyOptions.html",
    "title": "Class ObjectHierarchyOptions | Cuemon .NET Standard",
    "keywords": "Class ObjectHierarchyOptions Specifies options that is related to GetObjectHierarchy(Object, Action<ObjectHierarchyOptions>) operations. Inheritance System.Object ObjectHierarchyOptions Namespace : Cuemon.Reflection Assembly : Cuemon.Core.dll Syntax public class ObjectHierarchyOptions Constructors | Improve this Doc ObjectHierarchyOptions() Initializes a new instance of the ObjectHierarchyOptions class. Declaration public ObjectHierarchyOptions() Properties | Improve this Doc HasCircularReference Gets or sets the function delegate that is invoked when a property has a value and whose return value suggest a circular reference. Declaration public Func<object, bool> HasCircularReference { get; set; } Property Value Type Description System.Func < System.Object , System.Boolean > A System.Func<TResult> that determines if an object is suggesting a circular reference. | Improve this Doc MaxCircularCalls Gets or sets the maximum amount of times an object is allowed to make circular calls. Default is 2. Declaration public int MaxCircularCalls { get; set; } Property Value Type Description System.Int32 The maximum amount of times an object is allowed to make circular calls. | Improve this Doc MaxDepth Gets or sets the maximum depth to safely traverse an object hierarchy. Default is 10. Declaration public int MaxDepth { get; set; } Property Value Type Description System.Int32 The maximum depth to safely traverse an object hierarchy. | Improve this Doc PropertyIndexParametersResolver Gets or sets the function delegate that is invoked if a property has one or more index parameters. Declaration public Func<ParameterInfo[], object[]> PropertyIndexParametersResolver { get; set; } Property Value Type Description System.Func < System.Reflection.ParameterInfo [], System.Object []> A System.Func<TResult> that will resolve the index parameters of a System.Reflection.PropertyInfo . | Improve this Doc SkipProperty Gets or sets the function delegate that is invoked every time a public property is iterated and whose System.Reflection.PropertyInfo determine if that property should be skipped or not. Declaration public Func<PropertyInfo, bool> SkipProperty { get; set; } Property Value Type Description System.Func < System.Reflection.PropertyInfo , System.Boolean > A System.Func<TResult> that determines if a given System.Reflection.PropertyInfo should be skipped or not. | Improve this Doc SkipPropertyType Gets or sets the function delegate that is invoked just before public properties is being iterated and whose return System.Type determine if the properties should be skipped or not. Declaration public Func<Type, bool> SkipPropertyType { get; set; } Property Value Type Description System.Func < System.Type , System.Boolean > A System.Func<TResult> that determines if a given property System.Type should be skipped or not. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.MethodDescriptor.html": {
    "href": "api/core/Cuemon.Reflection.MethodDescriptor.html",
    "title": "Class MethodDescriptor | Cuemon .NET Standard",
    "keywords": "Class MethodDescriptor Provides information about a method, such as its name, parameters and whether its a property or method. Inheritance System.Object MethodDescriptor Namespace : Cuemon.Reflection Assembly : Cuemon.Core.dll Syntax public sealed class MethodDescriptor Constructors | Improve this Doc MethodDescriptor(MethodBase) Initializes a new instance of the MethodDescriptor class. Declaration public MethodDescriptor(MethodBase method) Parameters Type Name Description System.Reflection.MethodBase method The method to extract a signature for. Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc MethodDescriptor(Type, MethodBase) Initializes a new instance of the MethodDescriptor class. Declaration public MethodDescriptor(Type caller, MethodBase method) Parameters Type Name Description System.Type caller The class on which the method resides. System.Reflection.MethodBase method The method to extract a signature for. Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc MethodDescriptor(Type, String) Initializes a new instance of the MethodDescriptor class. Declaration public MethodDescriptor(Type caller, string methodName) Parameters Type Name Description System.Type caller The class on which the methodName resides. System.String methodName The name of the method. Remarks This represents a method with no parameters. | Improve this Doc MethodDescriptor(Type, String, ParameterSignature[]) Initializes a new instance of the MethodDescriptor class. Declaration public MethodDescriptor(Type caller, string methodName, params ParameterSignature[] parameters) Parameters Type Name Description System.Type caller The class on which the methodName resides. System.String methodName The name of the method. ParameterSignature [] parameters A sequence of ParameterSignature that represent the parameter signature of the method. Remarks This represents a method with one or more parameters. | Improve this Doc MethodDescriptor(Type, String, Boolean) Initializes a new instance of the MethodDescriptor class. Declaration public MethodDescriptor(Type caller, string methodName, bool isProperty) Parameters Type Name Description System.Type caller The class on which the methodName resides. System.String methodName The name of the method. System.Boolean isProperty A value indicating whether the method is a property. Default is false . Remarks This represents a method with no parameters or a normal property. | Improve this Doc MethodDescriptor(Type, String, Boolean, ParameterSignature[]) Initializes a new instance of the MethodDescriptor class. Declaration public MethodDescriptor(Type caller, string methodName, bool isProperty, params ParameterSignature[] parameters) Parameters Type Name Description System.Type caller The class on which the methodName resides. System.String methodName The name of the method. System.Boolean isProperty A value indicating whether the method is a property. Default is false . ParameterSignature [] parameters A sequence of ParameterSignature that represent the parameter signature of the method. Remarks This represents a method with one or more parameters or a property indexer. Exceptions Type Condition System.ArgumentNullException caller is null or methodName is null. ArgumentEmptyException caller is empty or methodName is empty. Properties | Improve this Doc Caller Gets the name of the class where the method is located. Declaration public Type Caller { get; } Property Value Type Description System.Type The name of the class where the method is located. | Improve this Doc HasParameters Gets a value indicating whether the method has parameters. Declaration public bool HasParameters { get; } Property Value Type Description System.Boolean true if the method has parameters; otherwise, false . | Improve this Doc IsProperty Gets a value indicating whether the method is a property. Declaration public bool IsProperty { get; } Property Value Type Description System.Boolean true if the method is a property; otherwise, false . | Improve this Doc MethodName Gets the name of the method. Declaration public string MethodName { get; } Property Value Type Description System.String The name of the method. | Improve this Doc Parameters Gets the parameter of the method. Declaration public IEnumerable<ParameterSignature> Parameters { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ParameterSignature > A sequence of type ParameterSignature containing information that matches the signature of the method. Methods | Improve this Doc Create(MethodBase) Creates and returns a MethodDescriptor object and automatically determines the type of the signature (be that method or property). Declaration public static MethodDescriptor Create(MethodBase method) Parameters Type Name Description System.Reflection.MethodBase method The method to extract a signature for. Returns Type Description MethodDescriptor A MethodDescriptor object. Remarks Although confusing a property is to be thought of as a method with either one or two methods (Get, Set) contained inside the property declaration. | Improve this Doc CreateMethod(Type, String) Creates and returns a MethodDescriptor object. Declaration public static MethodDescriptor CreateMethod(Type caller, string methodName) Parameters Type Name Description System.Type caller The class on which the methodName resides. System.String methodName The name of the method. Returns Type Description MethodDescriptor A MethodDescriptor object. | Improve this Doc CreateMethod(Type, String, ParameterSignature[]) Creates and returns a MethodDescriptor object. Declaration public static MethodDescriptor CreateMethod(Type caller, string methodName, params ParameterSignature[] parameters) Parameters Type Name Description System.Type caller The class on which the methodName resides. System.String methodName The name of the method. ParameterSignature [] parameters A sequence of ParameterSignature that represent the parameter signature of the method. Returns Type Description MethodDescriptor A MethodDescriptor object. | Improve this Doc CreateProperty(Type, String) Creates and returns a MethodDescriptor object. Declaration public static MethodDescriptor CreateProperty(Type caller, string propertyName) Parameters Type Name Description System.Type caller The class on which the propertyName resides. System.String propertyName The name of the property. Returns Type Description MethodDescriptor A MethodDescriptor object with IsProperty initialized to true . Remarks Although confusing a property is to be thought of as a method with either one or two methods (Get, Set) contained inside the property declaration. | Improve this Doc CreateProperty(Type, String, ParameterSignature[]) Creates and returns a MethodDescriptor object. Declaration public static MethodDescriptor CreateProperty(Type caller, string propertyName, params ParameterSignature[] parameters) Parameters Type Name Description System.Type caller The class on which the propertyName resides. System.String propertyName The name of the property. ParameterSignature [] parameters A sequence of ParameterSignature that represent the parameter signature of the method. Returns Type Description MethodDescriptor A MethodDescriptor object with IsProperty initialized to true . Remarks Although confusing a property is to be thought of as a method with either one or two methods (Get, Set) contained inside the property declaration. | Improve this Doc MergeParameters(MethodDescriptor, Object[]) Merges the method parameter signature with the specified runtimeParameterValues . Declaration public static IDictionary<string, object> MergeParameters(MethodDescriptor method, params object[] runtimeParameterValues) Parameters Type Name Description MethodDescriptor method The method holding the parameter signature to merge with the runtime parameter values. System.Object [] runtimeParameterValues The runtime parameter values. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > An System.Collections.Generic.IDictionary<TKey, TValue> containing the merged result of the method parameter signature and runtimeParameterValues . | Improve this Doc MergeParameters(IEnumerable<ParameterSignature>, Object[]) Merges the parameters signature with the specified runtimeParameterValues . Declaration public static IDictionary<string, object> MergeParameters(IEnumerable<ParameterSignature> parameters, params object[] runtimeParameterValues) Parameters Type Name Description System.Collections.Generic.IEnumerable < ParameterSignature > parameters The parameter signature to merge with the runtime parameter values. System.Object [] runtimeParameterValues The runtime parameter values. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > An System.Collections.Generic.IDictionary<TKey, TValue> containing the merged result of the parameters signature and runtimeParameterValues . | Improve this Doc MergeParameters(Object[]) Merges the Parameters signature of this instance with the specified runtimeParameterValues . Declaration public IDictionary<string, object> MergeParameters(params object[] runtimeParameterValues) Parameters Type Name Description System.Object [] runtimeParameterValues The runtime parameter values. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > An System.Collections.Generic.IDictionary<TKey, TValue> containing the merged result of the Parameters signature of this instance and runtimeParameterValues . | Improve this Doc ToString() Returns a System.String that represents the method signature. Declaration public override string ToString() Returns Type Description System.String A System.String that represents the method signature. Overrides System.Object.ToString() | Improve this Doc ToString(Boolean) Returns a System.String that represents the method signature. Declaration public string ToString(bool fullName) Parameters Type Name Description System.Boolean fullName Specify true to use the fully qualified name of the Caller ; otherwise, false for the simple name. Returns Type Description System.String A System.String that represents the method signature. Remarks The returned string has the following format: Method without parameters: [ Caller ]. MethodName Method with at least one or more parameter: [ Caller ].[ MethodName ]([ ParameterType ] [ ParameterName ]) Property: [ Caller ].[ MethodName ] Property with at least one indexer: [ Caller ].[ MethodName ][[ ParameterType ] [ ParameterName ]] Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.Http.HttpManagerOptions.html": {
    "href": "api/core/Cuemon.Net.Http.HttpManagerOptions.html",
    "title": "Class HttpManagerOptions | Cuemon .NET Standard",
    "keywords": "Class HttpManagerOptions Specifies options that is related to the HttpManager class. Inheritance System.Object HttpManagerOptions Namespace : Cuemon.Net.Http Assembly : Cuemon.Net.dll Syntax public class HttpManagerOptions Constructors | Improve this Doc HttpManagerOptions() Initializes a new instance of the HttpManagerOptions class. Declaration public HttpManagerOptions() Remarks The following table shows the initial property values for an instance of HttpManagerOptions . Property Initial Value DisposeHandler true DefaultRequestHeaders Connection: Keep-Alive Handler System.Net.Http.HttpClientHandler initialized with System.Net.Http.HttpClientHandler.AutomaticDecompression for GZip|Deflate and System.Net.Http.HttpClientHandler.MaxAutomaticRedirections to 10. Properties | Improve this Doc DefaultRequestHeaders Gets the default headers which should be sent with each request. Declaration public Dictionary<string, string> DefaultRequestHeaders { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > The default headers which should be sent with each request. | Improve this Doc DisposeHandler Gets or sets a value indicating whether the inner handler should be disposed of by Dispose(). Declaration public bool DisposeHandler { get; set; } Property Value Type Description System.Boolean true if if the inner handler should be disposed of by Dispose(); otherwise, false if you intend to reuse the inner handler. | Improve this Doc Handler Gets or sets the HTTP handler stack to use for sending requests. Declaration public HttpMessageHandler Handler { get; set; } Property Value Type Description System.Net.Http.HttpMessageHandler The HTTP handler stack to use for sending requests. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.Http.HttpManagerExtensions.html": {
    "href": "api/core/Cuemon.Net.Http.HttpManagerExtensions.html",
    "title": "Class HttpManagerExtensions | Cuemon .NET Standard",
    "keywords": "Class HttpManagerExtensions This is an extension implementation of the most common methods on the HttpManager class. Inheritance System.Object HttpManagerExtensions Namespace : Cuemon.Net.Http Assembly : Cuemon.Net.dll Syntax public static class HttpManagerExtensions Methods | Improve this Doc HttpAsync(Uri, Action<HttpRequestOptions>) Send a request as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpAsync(this Uri location, Action<HttpRequestOptions> setup) Parameters Type Name Description System.Uri location The System.Uri to request. System.Action < HttpRequestOptions > setup The HttpRequestOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpAsync(Uri, HttpMethod, MediaTypeHeaderValue, Stream, CancellationToken) Send a request as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpAsync(this Uri location, HttpMethod method, MediaTypeHeaderValue contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Net.Http.HttpMethod method The HTTP method. System.Net.Http.Headers.MediaTypeHeaderValue contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpAsync(Uri, HttpMethod, String, Stream, CancellationToken) Send a request as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpAsync(this Uri location, HttpMethod method, string contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Net.Http.HttpMethod method The HTTP method. System.String contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpDeleteAsync(Uri, CancellationToken) Send a DELETE request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpDeleteAsync(this Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpGetAsync(Uri, CancellationToken) Send a GET request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpGetAsync(this Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpHeadAsync(Uri, CancellationToken) Send a HEAD request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpHeadAsync(this Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpOptionsAsync(Uri, CancellationToken) Send an OPTIONS request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpOptionsAsync(this Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPatchAsync(Uri, MediaTypeHeaderValue, Stream, CancellationToken) Send a PATCH request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpPatchAsync(this Uri location, MediaTypeHeaderValue contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Net.Http.Headers.MediaTypeHeaderValue contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPatchAsync(Uri, String, Stream, CancellationToken) Send a PATCH request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpPatchAsync(this Uri location, string contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.String contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPostAsync(Uri, MediaTypeHeaderValue, Stream, CancellationToken) Send a POST request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpPostAsync(this Uri location, MediaTypeHeaderValue contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Net.Http.Headers.MediaTypeHeaderValue contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPostAsync(Uri, String, Stream, CancellationToken) Send a POST request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpPostAsync(this Uri location, string contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.String contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPutAsync(Uri, MediaTypeHeaderValue, Stream, CancellationToken) Send a PUT request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpPutAsync(this Uri location, MediaTypeHeaderValue contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Net.Http.Headers.MediaTypeHeaderValue contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPutAsync(Uri, String, Stream, CancellationToken) Send a PUT request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpPutAsync(this Uri location, string contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.String contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpTraceAsync(Uri, CancellationToken) Send a TRACE request to the specified Uri as an asynchronous operation. Declaration public static Task<HttpResponseMessage> HttpTraceAsync(this Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IndexMapping.html": {
    "href": "api/core/Cuemon.IndexMapping.html",
    "title": "Class IndexMapping | Cuemon .NET Standard",
    "keywords": "Class IndexMapping Defines the mapping between a column/field/item in a data source and a column/field/item in the data destination. This class cannot be inherited. Inheritance System.Object Mapping IndexMapping Inherited Members Mapping.Source Mapping.Destination Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public sealed class IndexMapping : Mapping Constructors | Improve this Doc IndexMapping(Int32, Int32) Initializes a new instance of the IndexMapping class. Declaration public IndexMapping(int sourceIndex, int destinationIndex) Parameters Type Name Description System.Int32 sourceIndex The ordinal position of the source column/field/item within the data source. System.Int32 destinationIndex The ordinal position of the destination column/field/item within the data destination. | Improve this Doc IndexMapping(Int32, String) Initializes a new instance of the IndexMapping class. Declaration public IndexMapping(int sourceIndex, string destination) Parameters Type Name Description System.Int32 sourceIndex The ordinal position of the source column/field/item within the data source. System.String destination The name of the destination column/field/item within the data destination. | Improve this Doc IndexMapping(String, Int32) Initializes a new instance of the IndexMapping class. Declaration public IndexMapping(string source, int destinationIndex) Parameters Type Name Description System.String source The name of the source column/field/item within the data source. System.Int32 destinationIndex The ordinal position of the destination column/field/item within the data destination. | Improve this Doc IndexMapping(String, String) Initializes a new instance of the Mapping class. Declaration public IndexMapping(string source, string destination) Parameters Type Name Description System.String source The name of the source column/field/item within the data source. System.String destination The name of the destination column/field/item within the data destination. Properties | Improve this Doc DestinationIndex Gets the ordinal position of the column/field/item within the data destination. Declaration public int DestinationIndex { get; } Property Value Type Description System.Int32 The integer value of the column/field/item within the data destination. | Improve this Doc SourceIndex Gets the ordinal position of the column/field/item within the data source. Declaration public int SourceIndex { get; } Property Value Type Description System.Int32 The integer value of the column/field/item within the data source. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlReaderConverter.html": {
    "href": "api/core/Cuemon.Xml.XmlReaderConverter.html",
    "title": "Class XmlReaderConverter | Cuemon .NET Standard",
    "keywords": "Class XmlReaderConverter This utility class is designed to make System.Xml.XmlReader related conversions easier to work with. Inheritance System.Object XmlReaderConverter Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlReaderConverter Methods | Improve this Doc FromBytes(Byte[]) Converts the given byte array to an XmlReader object. Declaration public static XmlReader FromBytes(byte[] value) Parameters Type Name Description System.Byte [] value The byte array to be converted. Returns Type Description System.Xml.XmlReader An System.Xml.XmlReader object. | Improve this Doc FromStream(Stream) Converts the given stream to an XmlReader object. Declaration public static XmlReader FromStream(Stream value) Parameters Type Name Description System.IO.Stream value The stream to be converted. Returns Type Description System.Xml.XmlReader An System.Xml.XmlReader object. | Improve this Doc FromStream(Stream, Encoding, Action<XmlReaderSettings>) Converts the given stream to an XmlReader object. Declaration public static XmlReader FromStream(Stream value, Encoding encoding, Action<XmlReaderSettings> setup = null) Parameters Type Name Description System.IO.Stream value The stream to be converted. System.Text.Encoding encoding The text encoding to use. System.Action < System.Xml.XmlReaderSettings > setup The System.Xml.XmlReaderSettings which need to be configured. Returns Type Description System.Xml.XmlReader An System.Xml.XmlReader object. Remarks If encoding is null, an System.Text.Encoding object will be attempted resolved by ReadEncoding(Stream) . | Improve this Doc FromUri(Uri, Action<XmlReaderSettings>) Converts the given URI to an XmlReader object. Declaration public static XmlReader FromUri(Uri value, Action<XmlReaderSettings> setup = null) Parameters Type Name Description System.Uri value The URI to be converted. System.Action < System.Xml.XmlReaderSettings > setup The System.Xml.XmlReaderSettings which need to be configured. Returns Type Description System.Xml.XmlReader An System.Xml.XmlReader object. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlEncodingUtility.html": {
    "href": "api/core/Cuemon.Xml.XmlEncodingUtility.html",
    "title": "Class XmlEncodingUtility | Cuemon .NET Standard",
    "keywords": "Class XmlEncodingUtility This utility class is designed to make XML System.Text.Encoding operations easier to work with. Inheritance System.Object XmlEncodingUtility Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlEncodingUtility Methods | Improve this Doc ReadEncoding(Stream) Reads the System.Text.Encoding from the specified XML System.IO.Stream . If an encoding cannot be resolved, UTF-8 encoding is assumed for the System.Text.Encoding . Declaration public static Encoding ReadEncoding(Stream value) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to resolve an System.Text.Encoding object from. Returns Type Description System.Text.Encoding An System.Text.Encoding object equivalent to the encoding used in the value , or System.Text.Encoding.UTF8 if unable to resolve the encoding. | Improve this Doc ReadEncoding(Stream, Encoding) Reads the System.Text.Encoding from the specified XML System.IO.Stream . If an encoding cannot be resolved, defaultEncoding encoding is assumed for the System.Text.Encoding . Declaration public static Encoding ReadEncoding(Stream value, Encoding defaultEncoding) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to resolve an System.Text.Encoding object from. System.Text.Encoding defaultEncoding The preferred default System.Text.Encoding to use if an encoding cannot be resolved automatically. Returns Type Description System.Text.Encoding An System.Text.Encoding object equivalent to the encoding used in the value , or defaultEncoding if unable to resolve the encoding. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlElementConverter.html": {
    "href": "api/core/Cuemon.Xml.XmlElementConverter.html",
    "title": "Class XmlElementConverter | Cuemon .NET Standard",
    "keywords": "Class XmlElementConverter This utility class is designed to make System.Xml.XmlElement related conversions easier to work with. Inheritance System.Object XmlElementConverter Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public class XmlElementConverter Methods | Improve this Doc FromException(Exception) Converts the specified exception to an System.Xml.XmlElement . Declaration public static XmlElement FromException(Exception exception) Parameters Type Name Description System.Exception exception The System.Exception to convert into an System.Xml.XmlElement . Returns Type Description System.Xml.XmlElement An System.Xml.XmlElement variant of the specified exception . | Improve this Doc FromException(Exception, Encoding) Converts the specified exception to an System.Xml.XmlElement . Declaration public static XmlElement FromException(Exception exception, Encoding encoding) Parameters Type Name Description System.Exception exception The System.Exception to convert into an System.Xml.XmlElement . System.Text.Encoding encoding The preferred encoding to apply to the result. Returns Type Description System.Xml.XmlElement An System.Xml.XmlElement variant of the specified exception . | Improve this Doc FromException(Exception, Encoding, Boolean) Converts the specified exception to an System.Xml.XmlElement . Declaration public static XmlElement FromException(Exception exception, Encoding encoding, bool includeStackTrace) Parameters Type Name Description System.Exception exception The System.Exception to convert into an System.Xml.XmlElement . System.Text.Encoding encoding The preferred encoding to apply to the result. System.Boolean includeStackTrace if set to true the stack trace of the exception (and possible user data) is included in the converted result. Returns Type Description System.Xml.XmlElement An System.Xml.XmlElement variant of the specified exception . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TransientOperation.html": {
    "href": "api/core/Cuemon.TransientOperation.html",
    "title": "Class TransientOperation | Cuemon .NET Standard",
    "keywords": "Class TransientOperation Provides developers ways to make their applications more resilient by adding robust transient fault handling logic ideal for temporary condition such as network connectivity issues or service unavailability. Inheritance System.Object TransientOperation Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TransientOperation Properties | Improve this Doc FaultCallback Gets or sets the callback delegate that is invoked when a transient fault occurs. Declaration public static Action<TransientFaultEvidence> FaultCallback { get; set; } Property Value Type Description System.Action < TransientFaultEvidence > A callback delegate that is invoked when a transient fault occurs. Methods | Improve this Doc TryWithFunc<TResult, TSuccess>(TesterFunc<TResult, TSuccess>, out TResult, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TSuccess TryWithFunc<TResult, TSuccess>(TesterFunc<TResult, TSuccess> faultSensitiveMethod, out TResult result, Action<TransientOperationOptions> setup = null) Parameters Type Name Description TesterFunc <TResult, TSuccess> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. TResult result The result of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TSuccess The return value that indicates success of the function delegate faultSensitiveMethod . Type Parameters Name Description TResult The type of the out result value of the function delegate encapsulates faultSensitiveMethod . TSuccess The type of the return value that indicates success of the function delegate faultSensitiveMethod . | Improve this Doc TryWithFunc<T, TResult, TSuccess>(TesterFunc<T, TResult, TSuccess>, T, out TResult, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TSuccess TryWithFunc<T, TResult, TSuccess>(TesterFunc<T, TResult, TSuccess> faultSensitiveMethod, T arg, out TResult result, Action<TransientOperationOptions> setup = null) Parameters Type Name Description TesterFunc <T, TResult, TSuccess> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T arg The parameter of the function delegate faultSensitiveMethod . TResult result The result of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TSuccess The return value that indicates success of the function delegate faultSensitiveMethod . Type Parameters Name Description T The type of the parameter of the function delegate faultSensitiveMethod . TResult The type of the out result value of the function delegate encapsulates faultSensitiveMethod . TSuccess The type of the return value that indicates success of the function delegate faultSensitiveMethod . | Improve this Doc TryWithFunc<T1, T2, TResult, TSuccess>(TesterFunc<T1, T2, TResult, TSuccess>, T1, T2, out TResult, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TSuccess TryWithFunc<T1, T2, TResult, TSuccess>(TesterFunc<T1, T2, TResult, TSuccess> faultSensitiveMethod, T1 arg1, T2 arg2, out TResult result, Action<TransientOperationOptions> setup = null) Parameters Type Name Description TesterFunc <T1, T2, TResult, TSuccess> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . TResult result The result of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TSuccess The return value that indicates success of the function delegate faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . TResult The type of the out result value of the function delegate encapsulates faultSensitiveMethod . TSuccess The type of the return value that indicates success of the function delegate faultSensitiveMethod . | Improve this Doc TryWithFunc<T1, T2, T3, TResult, TSuccess>(TesterFunc<T1, T2, T3, TResult, TSuccess>, T1, T2, T3, out TResult, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TSuccess TryWithFunc<T1, T2, T3, TResult, TSuccess>(TesterFunc<T1, T2, T3, TResult, TSuccess> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, out TResult result, Action<TransientOperationOptions> setup = null) Parameters Type Name Description TesterFunc <T1, T2, T3, TResult, TSuccess> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . TResult result The result of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TSuccess The return value that indicates success of the function delegate faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . TResult The type of the out result value of the function delegate encapsulates faultSensitiveMethod . TSuccess The type of the return value that indicates success of the function delegate faultSensitiveMethod . | Improve this Doc TryWithFunc<T1, T2, T3, T4, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, TResult, TSuccess>, T1, T2, T3, T4, out TResult, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TSuccess TryWithFunc<T1, T2, T3, T4, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, TResult, TSuccess> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result, Action<TransientOperationOptions> setup = null) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, TResult, TSuccess> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the function delegate faultSensitiveMethod . TResult result The result of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TSuccess The return value that indicates success of the function delegate faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . T4 The type of the fourth parameter of the function delegate faultSensitiveMethod . TResult The type of the out result value of the function delegate encapsulates faultSensitiveMethod . TSuccess The type of the return value that indicates success of the function delegate faultSensitiveMethod . | Improve this Doc TryWithFunc<T1, T2, T3, T4, T5, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess>, T1, T2, T3, T4, T5, out TResult, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TSuccess TryWithFunc<T1, T2, T3, T4, T5, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result, Action<TransientOperationOptions> setup = null) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, TResult, TSuccess> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the function delegate faultSensitiveMethod . T5 arg5 The fifth parameter of the function delegate faultSensitiveMethod . TResult result The result of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TSuccess The return value that indicates success of the function delegate faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . T4 The type of the fourth parameter of the function delegate faultSensitiveMethod . T5 The type of the fifth parameter of the function delegate faultSensitiveMethod . TResult The type of the out result value of the function delegate encapsulates faultSensitiveMethod . TSuccess The type of the return value that indicates success of the function delegate faultSensitiveMethod . | Improve this Doc WithAction(Action, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static void WithAction(Action faultSensitiveMethod, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Action faultSensitiveMethod The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. | Improve this Doc WithAction<T>(Action<T>, T, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static void WithAction<T>(Action<T> faultSensitiveMethod, T arg, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Action <T> faultSensitiveMethod The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T arg The parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Type Parameters Name Description T The type of the parameter of the delegate faultSensitiveMethod . | Improve this Doc WithAction<T1, T2>(Action<T1, T2>, T1, T2, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static void WithAction<T1, T2>(Action<T1, T2> faultSensitiveMethod, T1 arg1, T2 arg2, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Action <T1, T2> faultSensitiveMethod The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the delegate faultSensitiveMethod . T2 arg2 The second parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Type Parameters Name Description T1 The type of the first parameter of the delegate faultSensitiveMethod . T2 The type of the second parameter of the delegate faultSensitiveMethod . | Improve this Doc WithAction<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static void WithAction<T1, T2, T3>(Action<T1, T2, T3> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3> faultSensitiveMethod The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the delegate faultSensitiveMethod . T2 arg2 The second parameter of the delegate faultSensitiveMethod . T3 arg3 The third parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Type Parameters Name Description T1 The type of the first parameter of the delegate faultSensitiveMethod . T2 The type of the second parameter of the delegate faultSensitiveMethod . T3 The type of the third parameter of the delegate faultSensitiveMethod . | Improve this Doc WithAction<T1, T2, T3, T4>(Action<T1, T2, T3, T4>, T1, T2, T3, T4, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static void WithAction<T1, T2, T3, T4>(Action<T1, T2, T3, T4> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4> faultSensitiveMethod The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the delegate faultSensitiveMethod . T2 arg2 The second parameter of the delegate faultSensitiveMethod . T3 arg3 The third parameter of the delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Type Parameters Name Description T1 The type of the first parameter of the delegate faultSensitiveMethod . T2 The type of the second parameter of the delegate faultSensitiveMethod . T3 The type of the third parameter of the delegate faultSensitiveMethod . T4 The type of the fourth parameter of the delegate faultSensitiveMethod . | Improve this Doc WithAction<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static void WithAction<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5> faultSensitiveMethod The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the delegate faultSensitiveMethod . T2 arg2 The second parameter of the delegate faultSensitiveMethod . T3 arg3 The third parameter of the delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the delegate faultSensitiveMethod . T5 arg5 The fifth parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Type Parameters Name Description T1 The type of the first parameter of the delegate faultSensitiveMethod . T2 The type of the second parameter of the delegate faultSensitiveMethod . T3 The type of the third parameter of the delegate faultSensitiveMethod . T4 The type of the fourth parameter of the delegate faultSensitiveMethod . T5 The type of the fifth parameter of the delegate faultSensitiveMethod . | Improve this Doc WithActionAsync(Func<Task>, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task WithActionAsync(Func<Task> faultSensitiveMethod, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > faultSensitiveMethod The fault sensitive System.Threading.Tasks.Task based function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task | Improve this Doc WithActionAsync<T>(Func<T, Task>, T, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task WithActionAsync<T>(Func<T, Task> faultSensitiveMethod, T arg, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T, System.Threading.Tasks.Task > faultSensitiveMethod The fault sensitive System.Threading.Tasks.Task based function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T arg The parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T The type of the parameter of the delegate faultSensitiveMethod . | Improve this Doc WithActionAsync<T1, T2>(Func<T1, T2, Task>, T1, T2, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task WithActionAsync<T1, T2>(Func<T1, T2, Task> faultSensitiveMethod, T1 arg1, T2 arg2, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, System.Threading.Tasks.Task > faultSensitiveMethod The fault sensitive System.Threading.Tasks.Task based function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the delegate faultSensitiveMethod . T2 arg2 The second parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T1 The type of the first parameter of the delegate faultSensitiveMethod . T2 The type of the second parameter of the delegate faultSensitiveMethod . | Improve this Doc WithActionAsync<T1, T2, T3>(Func<T1, T2, T3, Task>, T1, T2, T3, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task WithActionAsync<T1, T2, T3>(Func<T1, T2, T3, Task> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, System.Threading.Tasks.Task > faultSensitiveMethod The fault sensitive System.Threading.Tasks.Task based function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the delegate faultSensitiveMethod . T2 arg2 The second parameter of the delegate faultSensitiveMethod . T3 arg3 The third parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T1 The type of the first parameter of the delegate faultSensitiveMethod . T2 The type of the second parameter of the delegate faultSensitiveMethod . T3 The type of the third parameter of the delegate faultSensitiveMethod . | Improve this Doc WithActionAsync<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task>, T1, T2, T3, T4, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task WithActionAsync<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, System.Threading.Tasks.Task > faultSensitiveMethod The fault sensitive System.Threading.Tasks.Task based function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the delegate faultSensitiveMethod . T2 arg2 The second parameter of the delegate faultSensitiveMethod . T3 arg3 The third parameter of the delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T1 The type of the first parameter of the delegate faultSensitiveMethod . T2 The type of the second parameter of the delegate faultSensitiveMethod . T3 The type of the third parameter of the delegate faultSensitiveMethod . T4 The type of the fourth parameter of the delegate faultSensitiveMethod . | Improve this Doc WithActionAsync<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Task>, T1, T2, T3, T4, T5, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task WithActionAsync<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Task> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, System.Threading.Tasks.Task > faultSensitiveMethod The fault sensitive System.Threading.Tasks.Task based function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the delegate faultSensitiveMethod . T2 arg2 The second parameter of the delegate faultSensitiveMethod . T3 arg3 The third parameter of the delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the delegate faultSensitiveMethod . T5 arg5 The fifth parameter of the delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T1 The type of the first parameter of the delegate faultSensitiveMethod . T2 The type of the second parameter of the delegate faultSensitiveMethod . T3 The type of the third parameter of the delegate faultSensitiveMethod . T4 The type of the fourth parameter of the delegate faultSensitiveMethod . T5 The type of the fifth parameter of the delegate faultSensitiveMethod . | Improve this Doc WithFunc<TResult>(Func<TResult>, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TResult WithFunc<TResult>(Func<TResult> faultSensitiveMethod, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <TResult> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TResult The result from the faultSensitiveMethod . Type Parameters Name Description TResult The type of the return value of faultSensitiveMethod . | Improve this Doc WithFunc<T, TResult>(Func<T, TResult>, T, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TResult WithFunc<T, TResult>(Func<T, TResult> faultSensitiveMethod, T arg, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T, TResult> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T arg The parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TResult The result from the faultSensitiveMethod . Type Parameters Name Description T The type of the parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFunc<T1, T2, TResult>(Func<T1, T2, TResult>, T1, T2, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TResult WithFunc<T1, T2, TResult>(Func<T1, T2, TResult> faultSensitiveMethod, T1 arg1, T2 arg2, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, TResult> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TResult The result from the faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFunc<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, T1, T2, T3, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TResult WithFunc<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, TResult> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TResult The result from the faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFunc<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TResult WithFunc<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TResult The result from the faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . T4 The type of the fourth parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFunc<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static TResult WithFunc<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the function delegate faultSensitiveMethod . T5 arg5 The fifth parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description TResult The result from the faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . T4 The type of the fourth parameter of the function delegate faultSensitiveMethod . T5 The type of the fifth parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFuncAsync<TResult>(Func<Task<TResult>>, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task<TResult> WithFuncAsync<TResult>(Func<Task<TResult>> faultSensitiveMethod, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TResult>> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task <TResult> The result from the faultSensitiveMethod . Type Parameters Name Description TResult The type of the return value of faultSensitiveMethod . | Improve this Doc WithFuncAsync<T, TResult>(Func<T, Task<TResult>>, T, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task<TResult> WithFuncAsync<T, TResult>(Func<T, Task<TResult>> faultSensitiveMethod, T arg, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T, System.Threading.Tasks.Task <TResult>> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T arg The parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task <TResult> The result from the faultSensitiveMethod . Type Parameters Name Description T The type of the parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFuncAsync<T1, T2, TResult>(Func<T1, T2, Task<TResult>>, T1, T2, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task<TResult> WithFuncAsync<T1, T2, TResult>(Func<T1, T2, Task<TResult>> faultSensitiveMethod, T1 arg1, T2 arg2, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, System.Threading.Tasks.Task <TResult>> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task <TResult> The result from the faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFuncAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult>>, T1, T2, T3, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task<TResult> WithFuncAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult>> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, System.Threading.Tasks.Task <TResult>> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task <TResult> The result from the faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFuncAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>>, T1, T2, T3, T4, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task<TResult> WithFuncAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, System.Threading.Tasks.Task <TResult>> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task <TResult> The result from the faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . T4 The type of the fourth parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . | Improve this Doc WithFuncAsync<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, Task<TResult>>, T1, T2, T3, T4, T5, Action<TransientOperationOptions>) Repetitively executes the specified faultSensitiveMethod until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. Declaration public static Task<TResult> WithFuncAsync<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, Task<TResult>> faultSensitiveMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<TransientOperationOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, System.Threading.Tasks.Task <TResult>> faultSensitiveMethod The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition. T1 arg1 The first parameter of the function delegate faultSensitiveMethod . T2 arg2 The second parameter of the function delegate faultSensitiveMethod . T3 arg3 The third parameter of the function delegate faultSensitiveMethod . T4 arg4 The fourth parameter of the function delegate faultSensitiveMethod . T5 arg5 The fifth parameter of the function delegate faultSensitiveMethod . System.Action < TransientOperationOptions > setup The TransientOperationOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task <TResult> The result from the faultSensitiveMethod . Type Parameters Name Description T1 The type of the first parameter of the function delegate faultSensitiveMethod . T2 The type of the second parameter of the function delegate faultSensitiveMethod . T3 The type of the third parameter of the function delegate faultSensitiveMethod . T4 The type of the fourth parameter of the function delegate faultSensitiveMethod . T5 The type of the fifth parameter of the function delegate faultSensitiveMethod . TResult The type of the return value of the function delegate faultSensitiveMethod . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TransientFaultException.html": {
    "href": "api/core/Cuemon.TransientFaultException.html",
    "title": "Class TransientFaultException | Cuemon .NET Standard",
    "keywords": "Class TransientFaultException The exception that is thrown when a transient fault handling was unsuccessful. Inheritance System.Object System.Exception TransientFaultException Inherited Members System.Exception.GetBaseException() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class TransientFaultException : Exception Constructors | Improve this Doc TransientFaultException() Initializes a new instance of the TransientFaultException class. Declaration public TransientFaultException() | Improve this Doc TransientFaultException(String, TransientFaultEvidence) Initializes a new instance of the TransientFaultException class. Declaration public TransientFaultException(string message, TransientFaultEvidence evidence) Parameters Type Name Description System.String message The message that describes the error. TransientFaultEvidence evidence The evidence that provide details about the transient fault. | Improve this Doc TransientFaultException(String, Exception, TransientFaultEvidence) Initializes a new instance of the TransientFaultException class. Declaration public TransientFaultException(string message, Exception innerException, TransientFaultEvidence evidence) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. TransientFaultEvidence evidence The evidence that provide details about the transient fault. Properties | Improve this Doc Evidence Gets the evidence that provide details about the transient fault of this instance. Declaration public TransientFaultEvidence Evidence { get; } Property Value Type Description TransientFaultEvidence The evidence that provide details about the transient fault. Methods | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Exception.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) ExceptionUtilityExtensions.Refine(Exception, MethodBase, Object[]) ExceptionUtilityExtensions.Refine(Exception, MethodDescriptor, Object[]) ExceptionUtilityExtensions.ParseException<TResult>(Exception) ExceptionUtilityExtensions.Flatten(Exception) ExceptionUtilityExtensions.Flatten(Exception, Type) StringConverterExtensions.ToEncodedString(Exception, Boolean) StringConverterExtensions.ToEncodedString(Exception, Boolean, Encoding) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TransientFaultEvidence.html": {
    "href": "api/core/Cuemon.TransientFaultEvidence.html",
    "title": "Class TransientFaultEvidence | Cuemon .NET Standard",
    "keywords": "Class TransientFaultEvidence Provides evidence about a faulted TransientOperation . Inheritance System.Object TransientFaultEvidence Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class TransientFaultEvidence Constructors | Improve this Doc TransientFaultEvidence(Int32, TimeSpan, TimeSpan, TimeSpan, String) Initializes a new instance of the TransientFaultEvidence class. Declaration public TransientFaultEvidence(int attempts, TimeSpan recoveryWaitTime, TimeSpan totalRecoveryWaitTime, TimeSpan latency, string member) Parameters Type Name Description System.Int32 attempts The number of attempts the member was invoked. System.TimeSpan recoveryWaitTime The last wait time attempting recovery of member . System.TimeSpan totalRecoveryWaitTime The total wait time attempting recovery of member . System.TimeSpan latency The latency experienced with member . System.String member The member being protected from a transient fault. Properties | Improve this Doc Attempts Gets the number of attempts the Member was invoked. Declaration public int Attempts { get; } Property Value Type Description System.Int32 The number of attempts the Member was invoked. | Improve this Doc Latency Gets the latency experienced with Member . Declaration public TimeSpan Latency { get; } Property Value Type Description System.TimeSpan The latency experienced with Member . | Improve this Doc Member Gets the member being protected from a transient fault. Declaration public string Member { get; } Property Value Type Description System.String The member being protected from a transient fault. | Improve this Doc RecoveryWaitTime Gets the last wait time attempting recovery of Member . Declaration public TimeSpan RecoveryWaitTime { get; } Property Value Type Description System.TimeSpan The last wait time attempting recovery of Member . | Improve this Doc TotalRecoveryWaitTime Gets the total wait time attempting recovery of Member . Declaration public TimeSpan TotalRecoveryWaitTime { get; } Property Value Type Description System.TimeSpan The total wait time attempting recovery of Member . Methods | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TimeUnit.html": {
    "href": "api/core/Cuemon.TimeUnit.html",
    "title": "Enum TimeUnit | Cuemon .NET Standard",
    "keywords": "Enum TimeUnit Specifies the unit of time - typically used with a System.TimeSpan . Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum TimeUnit Fields Name Description Days Indicates a time unit of Days. Hours Indicates a time unit of Hours. Milliseconds Indicates a time unit of Milliseconds. Minutes Indicates a time unit of Minutes. Seconds Indicates a time unit of Seconds. Ticks Indicates a time unit of Ticks, where one Tick is equal to 100 nanoseconds. Extension Methods ByteConverterExtensions.ToByteArray<TimeUnit>() ConverterExtensions.ParseWith<TimeUnit, TResult>(Func<TimeUnit, TResult>) ConverterExtensions.ParseWith<TimeUnit, T, TResult>(Func<TimeUnit, T, TResult>, T) ConverterExtensions.ParseWith<TimeUnit, T1, T2, TResult>(Func<TimeUnit, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TimeUnit, T1, T2, T3, TResult>(Func<TimeUnit, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TimeUnit, T1, T2, T3, T4, TResult>(Func<TimeUnit, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TimeUnit, T1, T2, T3, T4, T5, TResult>(Func<TimeUnit, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TimeUnit, T1, T2, T3, T4, T5, T6, TResult>(Func<TimeUnit, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TimeUnit, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<TimeUnit, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TimeUnit, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<TimeUnit, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TimeUnit, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<TimeUnit, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TimeUnit>() DelegateUtilityExtensions.DynamicWrap<TimeUnit>() TweakerExtensions.Adjust<TimeUnit>(Func<TimeUnit, TimeUnit>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<TimeUnit>() WrapperExtensions.UseWrapper<TimeUnit>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<TimeUnit>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TimeUnit>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-17.html": {
    "href": "api/core/Cuemon.TesterFunc-17.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. T9 arg9 The ninth parameter of the method that this function delegate encapsulates. T10 arg10 The tenth parameter of the method that this function delegate encapsulates. T11 arg11 The eleventh parameter of the method that this function delegate encapsulates. T12 arg12 The twelfth parameter of the method that this function delegate encapsulates. T13 arg13 The thirteenth parameter of the method that this function delegate encapsulates. T14 arg14 The fourteenth parameter of the method that this function delegate encapsulates. T15 arg15 The fifteenth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. T9 The type of the ninth parameter of the method that this function delegate encapsulates. T10 The type of the tenth parameter of the method that this function delegate encapsulates. T11 The type of the eleventh parameter of the method that this function delegate encapsulates. T12 The type of the twelfth parameter of the method that this function delegate encapsulates. T13 The type of the thirteenth parameter of the method that this function delegate encapsulates. T14 The type of the fourteenth parameter of the method that this function delegate encapsulates. T15 The type of the fifteenth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.CharConverterExtensions.html": {
    "href": "api/core/Cuemon.CharConverterExtensions.html",
    "title": "Class CharConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class CharConverterExtensions This is an extensions implementation of the CharConverter class. Inheritance System.Object CharConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class CharConverterExtensions Methods | Improve this Doc ToCharArray(Stream, Action<EncodingOptions>) Converts the given System.IO.Stream to a char array starting from position 0 (when supported). Declaration public static char[] ToCharArray(this Stream value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.IO.Stream value The System.IO.Stream value to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.Char [] A sequence of characters equivalent to the System.IO.Stream value. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc ToCharArray(String, Action<EncodingOptions>) Converts the given System.String to an equivalent sequence of characters. Declaration public static char[] ToCharArray(this string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The System.String value to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.Char [] A sequence of characters equivalent to the System.String value. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ArgumentEmptyException.html": {
    "href": "api/core/Cuemon.ArgumentEmptyException.html",
    "title": "Class ArgumentEmptyException | Cuemon .NET Standard",
    "keywords": "Class ArgumentEmptyException The exception that is thrown when an empty System.String is passed to a method that does not accept it as a valid argument. Inheritance System.Object System.Exception System.ArgumentException ArgumentEmptyException Inherited Members System.ArgumentException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class ArgumentEmptyException : ArgumentException Constructors | Improve this Doc ArgumentEmptyException() Initializes a new instance of the ArgumentEmptyException class. Declaration public ArgumentEmptyException() | Improve this Doc ArgumentEmptyException(String) Initializes a new instance of the ArgumentEmptyException class. Declaration public ArgumentEmptyException(string paramName) Parameters Type Name Description System.String paramName The name of the parameter that caused the exception. | Improve this Doc ArgumentEmptyException(String, Exception) Initializes a new instance of the ArgumentEmptyException class. Declaration public ArgumentEmptyException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. | Improve this Doc ArgumentEmptyException(String, String) Initializes a new instance of the ArgumentEmptyException class. Declaration public ArgumentEmptyException(string paramName, string message) Parameters Type Name Description System.String paramName The name of the parameter that caused the exception. System.String message The message that describes the error. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) ExceptionUtilityExtensions.Refine(Exception, MethodBase, Object[]) ExceptionUtilityExtensions.Refine(Exception, MethodDescriptor, Object[]) ExceptionUtilityExtensions.ParseException<TResult>(Exception) ExceptionUtilityExtensions.Flatten(Exception) ExceptionUtilityExtensions.Flatten(Exception, Type) StringConverterExtensions.ToEncodedString(Exception, Boolean) StringConverterExtensions.ToEncodedString(Exception, Boolean, Encoding) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.SeeOtherResult.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.SeeOtherResult.html",
    "title": "Class SeeOtherResult | Cuemon .NET Standard",
    "keywords": "Class SeeOtherResult An Microsoft.AspNetCore.Mvc.ActionResult that returns a SeeOther (303) response with a Location header to the supplied URL. Inheritance System.Object Microsoft.AspNetCore.Mvc.ActionResult Microsoft.AspNetCore.Mvc.StatusCodeResult SeeOtherResult Implements Microsoft.AspNetCore.Mvc.IActionResult Inherited Members Microsoft.AspNetCore.Mvc.StatusCodeResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext) Microsoft.AspNetCore.Mvc.StatusCodeResult.StatusCode Namespace : Cuemon.AspNetCore.Mvc Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class SeeOtherResult : StatusCodeResult, IActionResult Constructors | Improve this Doc SeeOtherResult(Uri) Initializes a new instance of the SeeOtherResult class. Declaration public SeeOtherResult(Uri location) Parameters Type Name Description System.Uri location The location of the URL to redirect to. Properties | Improve this Doc Location Gets the location of the URL to redirect to. Declaration public Uri Location { get; } Property Value Type Description System.Uri The location of the URL to redirect to. Methods | Improve this Doc ExecuteResultAsync(ActionContext) Executes the result operation of the action method asynchronously. This method is called by MVC to process the result of an action method. Declaration public override Task ExecuteResultAsync(ActionContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ActionContext context The context in which the result is executed. The context information includes information about the action that was executed and request information. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous execute operation. Overrides Microsoft.AspNetCore.Mvc.ActionResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext) Implements Microsoft.AspNetCore.Mvc.IActionResult Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticationMiddleware.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticationMiddleware.html",
    "title": "Class HmacAuthenticationMiddleware | Cuemon .NET Standard",
    "keywords": "Class HmacAuthenticationMiddleware Provides a HTTP HMAC Authentication middleware implementation for ASP.NET Core. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore < HmacAuthenticationOptions > ConfigurableMiddleware < HmacAuthenticationOptions > HmacAuthenticationMiddleware Implements IConfigurable < HmacAuthenticationOptions > Inherited Members ConfigurableMiddlewareCore<HmacAuthenticationOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public class HmacAuthenticationMiddleware : ConfigurableMiddleware<HmacAuthenticationOptions>, IConfigurable<HmacAuthenticationOptions> Constructors | Improve this Doc HmacAuthenticationMiddleware(RequestDelegate, IOptions<HmacAuthenticationOptions>) Initializes a new instance of the HmacAuthenticationMiddleware class. Declaration public HmacAuthenticationMiddleware(RequestDelegate next, IOptions<HmacAuthenticationOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions < HmacAuthenticationOptions > setup The HmacAuthenticationOptions which need to be configured. | Improve this Doc HmacAuthenticationMiddleware(RequestDelegate, Action<HmacAuthenticationOptions>) Initializes a new instance of the HmacAuthenticationMiddleware class. Declaration public HmacAuthenticationMiddleware(RequestDelegate next, Action<HmacAuthenticationOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action < HmacAuthenticationOptions > setup The middleware HmacAuthenticationOptions which need to be configured. Methods | Improve this Doc InvokeAsync(HttpContext) Executes the HmacAuthenticationMiddleware . Declaration public override Task InvokeAsync(HttpContext context) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Overrides Cuemon.AspNetCore.ConfigurableMiddleware<Cuemon.AspNetCore.Authentication.HmacAuthenticationOptions>.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext) Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.IDependency.html": {
    "href": "api/core/Cuemon.Runtime.IDependency.html",
    "title": "Interface IDependency | Cuemon .NET Standard",
    "keywords": "Interface IDependency Defines a method to control dependency related operations. Namespace : Cuemon.Runtime Assembly : Cuemon.Runtime.dll Syntax public interface IDependency Properties | Improve this Doc HasChanged Gets a value indicating whether the IDependency object has changed. Declaration bool HasChanged { get; } Property Value Type Description System.Boolean true if the IDependency object has changed; otherwise, false . | Improve this Doc UtcLastModified Gets the time when the dependency was last changed. Declaration DateTime UtcLastModified { get; } Property Value Type Description System.DateTime The time when the dependency was last changed. Remarks This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time). Methods | Improve this Doc Start() Starts and performs the necessary dependency tasks of this instance. Declaration void Start() Events | Improve this Doc DependencyChanged Occurs when a IDependency object has changed. Declaration event EventHandler<DependencyEventArgs> DependencyChanged Event Type Type Description System.EventHandler < DependencyEventArgs > Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-15.html": {
    "href": "api/core/Cuemon.TesterFunc-15.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. T9 arg9 The ninth parameter of the method that this function delegate encapsulates. T10 arg10 The tenth parameter of the method that this function delegate encapsulates. T11 arg11 The eleventh parameter of the method that this function delegate encapsulates. T12 arg12 The twelfth parameter of the method that this function delegate encapsulates. T13 arg13 The thirteenth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. T9 The type of the ninth parameter of the method that this function delegate encapsulates. T10 The type of the tenth parameter of the method that this function delegate encapsulates. T11 The type of the eleventh parameter of the method that this function delegate encapsulates. T12 The type of the twelfth parameter of the method that this function delegate encapsulates. T13 The type of the thirteenth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.Http.HttpMethods.html": {
    "href": "api/core/Cuemon.Net.Http.HttpMethods.html",
    "title": "Enum HttpMethods | Cuemon .NET Standard",
    "keywords": "Enum HttpMethods Defines the official HTTP data transfer method (such as GET, POST, or HEAD) used by the client to query a web server. Namespace : Cuemon.Net.Http Assembly : Cuemon.Net.dll Syntax [Flags] public enum HttpMethods Remarks These are the official HTTP methods as specified in RFC 2616, section 9 (except for the CONNECT method). RFC 2616: http://www.w3.org/Protocols/rfc2616/rfc2616.html , RFC 2616 section 9: http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9 . Includes RFC 5789: https://tools.ietf.org/html/rfc5789 also; Patch, as some public APIs has started using this. This enumeration has a System.FlagsAttribute that allows a bitwise combination of its member values. Fields Name Description Delete Represents an HTTP DELETE protocol method. Get Represents an HTTP GET protocol method. Head Represents an HTTP HEAD protocol method. The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body. Options Represents an HTTP OPTIONS protocol method. Patch Represents an HTTP PATCH protocol method. Post Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI. Put Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI. Trace Represents an HTTP TRACE protocol method. Extension Methods ByteConverterExtensions.ToByteArray<HttpMethods>() ConverterExtensions.ParseWith<HttpMethods, TResult>(Func<HttpMethods, TResult>) ConverterExtensions.ParseWith<HttpMethods, T, TResult>(Func<HttpMethods, T, TResult>, T) ConverterExtensions.ParseWith<HttpMethods, T1, T2, TResult>(Func<HttpMethods, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<HttpMethods, T1, T2, T3, TResult>(Func<HttpMethods, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<HttpMethods, T1, T2, T3, T4, TResult>(Func<HttpMethods, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<HttpMethods, T1, T2, T3, T4, T5, TResult>(Func<HttpMethods, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<HttpMethods, T1, T2, T3, T4, T5, T6, TResult>(Func<HttpMethods, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<HttpMethods, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<HttpMethods, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<HttpMethods, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<HttpMethods, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<HttpMethods, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<HttpMethods, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<HttpMethods>() DelegateUtilityExtensions.DynamicWrap<HttpMethods>() TweakerExtensions.Adjust<HttpMethods>(Func<HttpMethods, HttpMethods>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<HttpMethods>() WrapperExtensions.UseWrapper<HttpMethods>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<HttpMethods>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<HttpMethods>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.Http.HttpMethodExtensions.html": {
    "href": "api/core/Cuemon.Net.Http.HttpMethodExtensions.html",
    "title": "Class HttpMethodExtensions | Cuemon .NET Standard",
    "keywords": "Class HttpMethodExtensions This is an extension implementation of the System.Net.Http.HttpMethod class. Inheritance System.Object HttpMethodExtensions Namespace : Cuemon.Net.Http Assembly : Cuemon.Net.dll Syntax public static class HttpMethodExtensions Methods | Improve this Doc ToHttpMethod(HttpMethod) Converts the specified method to its equivalent HttpMethods representation. Declaration public static HttpMethods ToHttpMethod(this HttpMethod method) Parameters Type Name Description System.Net.Http.HttpMethod method The System.Net.Http.HttpMethod to be converted. Returns Type Description HttpMethods A HttpMethods representation of the specified method . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-17.html": {
    "href": "api/core/Cuemon.Template-17.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Represents a Template with seventeen generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Arg16 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Arg15 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Arg14 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Arg13 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Arg12 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . T13 The type of the thirteenth parameter of this Template . T14 The type of the fourteenth parameter of this Template . T15 The type of the fifteenth parameter of this Template . T16 The type of the sixteenth parameter of this Template . T17 The type of the seventeenth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . T13 arg13 The value of the thirteenth parameter of this Template . T14 arg14 The value of the fourteenth parameter of this Template . T15 arg15 The value of the fifteenth parameter of this Template . T16 arg16 The value of the sixteenth parameter of this Template . T17 arg17 The value of the seventeenth parameter of this Template . Properties | Improve this Doc Arg17 Gets or sets the seventeenth parameter of this instance. Declaration public T17 Arg17 { get; set; } Property Value Type Description T17 The seventeenth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.XmlSerializer.html": {
    "href": "api/core/Cuemon.Serialization.Xml.XmlSerializer.html",
    "title": "Class XmlSerializer | Cuemon .NET Standard",
    "keywords": "Class XmlSerializer Serializes and deserializes objects into and from the XML format. Inheritance System.Object XmlSerializer Namespace : Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Syntax public class XmlSerializer Methods | Improve this Doc Create(XmlSerializerSettings) Creates a new XmlSerializer instance using the specified XmlSerializerSettings . Declaration public static XmlSerializer Create(XmlSerializerSettings settings) Parameters Type Name Description XmlSerializerSettings settings The settings to be applied to the XmlSerializer . Returns Type Description XmlSerializer A new XmlSerializer instance using the specified XmlSerializerSettings . Remarks If settings is null , DefaultSettings is tried invoked. Otherwise, as a fallback, a default instance of XmlSerializerSettings is created. | Improve this Doc Deserialize(Stream, Type) Deserializes the specified value into an object of objectType . Declaration public object Deserialize(Stream value, Type objectType) Parameters Type Name Description System.IO.Stream value The object to deserialize from XML format. System.Type objectType The type of the object to deserialize. Returns Type Description System.Object An object of objectType . | Improve this Doc Deserialize<T>(Stream) Deserializes the specified value into an object of T . Declaration public T Deserialize<T>(Stream value) Parameters Type Name Description System.IO.Stream value The object to deserialize from XML format. Returns Type Description T An object of T . Type Parameters Name Description T The type of the object to deserialize. | Improve this Doc Serialize(Object, Type) Serializes the specified value to a System.IO.Stream . Declaration public Stream Serialize(object value, Type objectType) Parameters Type Name Description System.Object value The object to serialize to XML format. System.Type objectType The type of the object to serialize. Returns Type Description System.IO.Stream A stream of the serialized object. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.XmlReaderExtensions.html": {
    "href": "api/core/Cuemon.Serialization.Xml.XmlReaderExtensions.html",
    "title": "Class XmlReaderExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlReaderExtensions Extension methods for the System.Xml.XmlReader . Inheritance System.Object XmlReaderExtensions Namespace : Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Syntax public static class XmlReaderExtensions Methods | Improve this Doc ToHierarchy(XmlReader) Converts the XML hierarchy of an System.Xml.XmlReader into an IHierarchy<T> . Declaration public static IHierarchy<DataPair> ToHierarchy(this XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader The reader to convert. Returns Type Description IHierarchy < DataPair > An IHierarchy<T> implementation that uses DataPair . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Dependency.html": {
    "href": "api/core/Cuemon.Runtime.Dependency.html",
    "title": "Class Dependency | Cuemon .NET Standard",
    "keywords": "Class Dependency An abstract class for establishing various methods of a dependency relationship to an object. The implementing class of the Dependency class must monitor the dependency relationships so that when any of them changes, action will automatically be taken. Inheritance System.Object Dependency DataDependency NetDependency Implements IDependency Namespace : Cuemon.Runtime Assembly : Cuemon.Runtime.dll Syntax public abstract class Dependency : IDependency Constructors | Improve this Doc Dependency() Initializes a new instance of the Dependency class. Declaration protected Dependency() Properties | Improve this Doc HasChanged Gets a value indicating whether the Dependency object has changed. Declaration public abstract bool HasChanged { get; } Property Value Type Description System.Boolean true if the Dependency object has changed; otherwise, false . | Improve this Doc UtcLastModified Gets time when the dependency was last changed. Declaration public DateTime UtcLastModified { get; } Property Value Type Description System.DateTime The time when the dependency was last changed. Remarks This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time). Methods | Improve this Doc Create<TResult>() Creates an instance of TResult that implements the IDependency interface using a constructor of five parameters. Declaration public static TResult Create<TResult>() where TResult : IDependency Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description TResult The type to create that implements the IDependency interface. | Improve this Doc Create<T, TResult>(T) Creates an instance of TResult that implements the IDependency interface using a constructor of five parameters. Declaration public static TResult Create<T, TResult>(T arg) where TResult : IDependency Parameters Type Name Description T arg The parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T The type of the parameter of the constructor. TResult The type to create that implements the IDependency interface. | Improve this Doc Create<T1, T2, TResult>(T1, T2) Creates an instance of TResult that implements the IDependency interface using a constructor of five parameters. Declaration public static TResult Create<T1, T2, TResult>(T1 arg1, T2 arg2) where TResult : IDependency Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. TResult The type to create that implements the IDependency interface. | Improve this Doc Create<T1, T2, T3, TResult>(T1, T2, T3) Creates an instance of TResult that implements the IDependency interface using a constructor of five parameters. Declaration public static TResult Create<T1, T2, T3, TResult>(T1 arg1, T2 arg2, T3 arg3) where TResult : IDependency Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. TResult The type to create that implements the IDependency interface. | Improve this Doc Create<T1, T2, T3, T4, TResult>(T1, T2, T3, T4) Creates an instance of TResult that implements the IDependency interface using a constructor of five parameters. Declaration public static TResult Create<T1, T2, T3, T4, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TResult : IDependency Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. TResult The type to create that implements the IDependency interface. | Improve this Doc Create<T1, T2, T3, T4, T5, TResult>(T1, T2, T3, T4, T5) Creates an instance of TResult that implements the IDependency interface using a constructor of five parameters. Declaration public static TResult Create<T1, T2, T3, T4, T5, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TResult : IDependency Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. T5 arg5 The fifth parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. T5 The type of the fifth parameter of the constructor. TResult The type to create that implements the IDependency interface. | Improve this Doc OnDependencyChangedRaised(DependencyEventArgs) Raises the DependencyChanged event. Declaration protected virtual void OnDependencyChangedRaised(DependencyEventArgs e) Parameters Type Name Description DependencyEventArgs e The DependencyEventArgs instance containing the event data. | Improve this Doc SetUtcLastModified(DateTime) Marks the time when a dependency last changed. Declaration protected void SetUtcLastModified(DateTime utcLastModified) Parameters Type Name Description System.DateTime utcLastModified The time when the dependency last changed. | Improve this Doc Start() Starts and performs the necessary dependency tasks of this instance. Declaration public abstract void Start() Events | Improve this Doc DependencyChanged Occurs when a Dependency has changed. Declaration public event EventHandler<DependencyEventArgs> DependencyChanged Event Type Type Description System.EventHandler < DependencyEventArgs > Implements IDependency Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Caching.html": {
    "href": "api/core/Cuemon.Runtime.Caching.html",
    "title": "Namespace Cuemon.Runtime.Caching | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Runtime.Caching Assembly : Cuemon.Runtime.Caching.dll Classes CacheCollection Implements a cache for an application. This class cannot be inherited. CacheEventArgs Provides data for cache related operations. This class cannot be inherited. CachingManager Provides access to caching in an application. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.HttpStatusCodeExtensions.html": {
    "href": "api/core/Cuemon.Net.HttpStatusCodeExtensions.html",
    "title": "Class HttpStatusCodeExtensions | Cuemon .NET Standard",
    "keywords": "Class HttpStatusCodeExtensions Extension methods for the System.Net.HttpStatusCode enum. Inheritance System.Object HttpStatusCodeExtensions Namespace : Cuemon.Net Assembly : Cuemon.Net.dll Syntax public static class HttpStatusCodeExtensions Methods | Improve this Doc IsSuccessStatusCode(HttpStatusCode) Determines whether the specified statusCode is within the successful range. Declaration public static bool IsSuccessStatusCode(this HttpStatusCode statusCode) Parameters Type Name Description System.Net.HttpStatusCode statusCode The System.Net.HttpStatusCode to evaluate. Returns Type Description System.Boolean true if System.Net.HttpStatusCode was in the Successful range (200-299); otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StringUtilityExtensions.html": {
    "href": "api/core/Cuemon.StringUtilityExtensions.html",
    "title": "Class StringUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class StringUtilityExtensions This is an extension implementation of the most common methods on the StringUtility class. Inheritance System.Object StringUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class StringUtilityExtensions Methods | Improve this Doc ContainsAll(String, String[]) Returns a value indicating whether all of the specified values occurs within the source . Declaration public static bool ContainsAll(this string source, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if all of the values occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc ContainsAll(String, StringComparison, String[]) Returns a value indicating whether all of the specified values occurs within the source . Declaration public static bool ContainsAll(this string source, StringComparison comparison, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if all of the values occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc ContainsAny(String, Char) Returns a value indicating whether the specified value occurs within the source . Declaration public static bool ContainsAny(this string source, char value) Parameters Type Name Description System.String source The System.String to seek. System.Char value The System.Char to search within source . Returns Type Description System.Boolean true if the value parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc ContainsAny(String, Char, StringComparison) Returns a value indicating whether the specified value occurs within the source . Declaration public static bool ContainsAny(this string source, char value, StringComparison comparison) Parameters Type Name Description System.String source The System.String to seek. System.Char value The System.Char to search within source . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description System.Boolean true if the value parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc ContainsAny(String, Char[]) Returns a value indicating whether the specified values occurs within the source object. Declaration public static bool ContainsAny(this string source, params char[] values) Parameters Type Name Description System.String source The System.String to seek. System.Char [] values The System.Char sequence to search within source . Returns Type Description System.Boolean true if the values parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc ContainsAny(String, String) Returns a value indicating whether the specified value occurs within the source . Declaration public static bool ContainsAny(this string source, string value) Parameters Type Name Description System.String source The System.String to seek. System.String value The System.String to search within source . Returns Type Description System.Boolean true if the value parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc ContainsAny(String, String, StringComparison) Returns a value indicating whether the specified value occurs within the source . Declaration public static bool ContainsAny(this string source, string value, StringComparison comparison) Parameters Type Name Description System.String source The System.String to seek. System.String value The System.String to search within source . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description System.Boolean true if the value parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc ContainsAny(String, String[]) Returns a value indicating whether any of the specified values occurs within the source . Declaration public static bool ContainsAny(this string source, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if any of the values occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc ContainsAny(String, StringComparison, Char[]) Returns a value indicating whether the specified values occurs within the source object. Declaration public static bool ContainsAny(this string source, StringComparison comparison, params char[] values) Parameters Type Name Description System.String source The System.String to seek. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.Char [] values The System.Char sequence to search within source . Returns Type Description System.Boolean true if the values parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc ContainsAny(String, StringComparison, String[]) Returns a value indicating whether any of the specified values occurs within the source . Declaration public static bool ContainsAny(this string source, StringComparison comparison, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if any of the values occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc Count(String, Char) Counts the occurrences of character in the specified source . Declaration public static int Count(this string source, char character) Parameters Type Name Description System.String source The source to count occurrences of character . System.Char character The System.Char value to count in source . Returns Type Description System.Int32 The number of times the character was found in the source . Exceptions Type Condition System.ArgumentNullException source is null. | Improve this Doc EqualsAny(String, String[]) Returns a value indicating the specified source equals one of the specified values . Declaration public static bool EqualsAny(this string source, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if one the values is the same as the source ; otherwise false . Remarks This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. Exceptions Type Condition System.ArgumentNullException source is null - or - values is null. | Improve this Doc EqualsAny(String, StringComparison, String[]) Returns a value indicating the specified source equals one of the specified values . Declaration public static bool EqualsAny(this string source, StringComparison comparison, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if one the values is the same as the source ; otherwise false . Exceptions Type Condition System.ArgumentNullException source is null - or - values is null. | Improve this Doc Escape(String) Escapes the given System.String the same way as the well known JavaScrip escape() function. Declaration public static string Escape(this string value) Parameters Type Name Description System.String value The System.String to escape. Returns Type Description System.String The input value with an escaped equivalent. | Improve this Doc GetHashCode32(String) Computes a suitable hash code from the specified System.String value . Declaration public static int GetHashCode32(this string value) Parameters Type Name Description System.String value A System.String value. Returns Type Description System.Int32 A 32-bit signed integer that is the hash code of value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc IsBase64(String) Determines whether the specified value matches a Base64 structure. Declaration public static bool IsBase64(this string value) Parameters Type Name Description System.String value The value to test for a Base64 structure. Returns Type Description System.Boolean true if the specified value matches a Base64 structure; otherwise, false . Remarks This method will skip common Base64 structures typically used as checksums. This includes 32, 128, 160, 256, 384 and 512 bit checksums. | Improve this Doc IsBase64(String, Func<String, Boolean>) Determines whether the specified value matches a Base64 structure. Declaration public static bool IsBase64(this string value, Func<string, bool> predicate) Parameters Type Name Description System.String value The value to test for a Base64 structure. System.Func < System.String , System.Boolean > predicate A function delegate that provides custom rules for bypassing the Base64 structure check. Returns Type Description System.Boolean true if the specified value matches a Base64 structure; otherwise, false . | Improve this Doc IsCountableSequence(String) Determines whether the specified value is a sequence of countable characters (hence, characters being either incremented or decremented with the same cardinality through out the sequence). Declaration public static bool IsCountableSequence(this string value) Parameters Type Name Description System.String value The value to test for a sequence of countable characters. Returns Type Description System.Boolean true if the specified value is a sequence of countable characters (hence, characters being either incremented or decremented with the same cardinality through out the sequence); otherwise, false . | Improve this Doc IsNullOrEmpty(IEnumerable<String>) Determines whether a string sequence has at least one value that equals to null or empty. Declaration public static bool IsNullOrEmpty(this IEnumerable<string> values) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values A string sequence in which to test for the presence of null or empty. Returns Type Description System.Boolean true if a string sequence has at least one value that equals to null or empty; otherwise, false . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(this IEnumerable<string> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>, Func<String, CultureInfo, Boolean>) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(this IEnumerable<string> source, Func<string, CultureInfo, bool> parser) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . System.Func < System.String , System.Globalization.CultureInfo , System.Boolean > parser The function delegate that evaluates if the elements of source is equivalent to the specified T . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>, CultureInfo) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(this IEnumerable<string> source, CultureInfo culture) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . System.Globalization.CultureInfo culture The culture-specific formatting information to apply on the elements within source . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>, CultureInfo, ITypeDescriptorContext) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(this IEnumerable<string> source, CultureInfo culture, ITypeDescriptorContext context) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . System.Globalization.CultureInfo culture The culture-specific formatting information to apply on the elements within source . System.ComponentModel.ITypeDescriptorContext context The type-specific formatting information to apply on the elements within source . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>, CultureInfo, Func<String, CultureInfo, Boolean>) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(this IEnumerable<string> source, CultureInfo culture, Func<string, CultureInfo, bool> parser) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . System.Globalization.CultureInfo culture The culture-specific formatting information to apply on the elements within source . System.Func < System.String , System.Globalization.CultureInfo , System.Boolean > parser The function delegate that evaluates if the elements of source is equivalent to the specified T . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc ParseFormat(String, Int32, out Int32) Parses the given string for any format arguments (eg. Text{0}-{1}.). Declaration public static bool ParseFormat(this string format, int maxArguments, out int foundArguments) Parameters Type Name Description System.String format The desired string format to parse. System.Int32 maxArguments The maximum allowed arguments in the string format. System.Int32 foundArguments The number of arguments found in the string format. Returns Type Description System.Boolean true if one or more format arguments is found and the found arguments does not exceed the maxArguments parameter; otherwise false . | Improve this Doc ParseFormat(String, out Int32) Parses the given string for any format arguments (eg. Text{0}-{1}.). Declaration public static bool ParseFormat(this string format, out int foundArguments) Parameters Type Name Description System.String format The desired string format to parse. System.Int32 foundArguments The number of arguments found in the string format. Returns Type Description System.Boolean true if one or more format arguments is found; otherwise false . | Improve this Doc RemoveAll(String, Char[]) Returns a new string in which all the specified filter values has been deleted from the specified source . Declaration public static string RemoveAll(this string source, params char[] filter) Parameters Type Name Description System.String source The source to delete occurrences found in filter . System.Char [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String A new string that is equivalent to source except for the removed characters. | Improve this Doc RemoveAll(String, String[]) Returns a new string in which all the specified filter values has been deleted from the specified source . Declaration public static string RemoveAll(this string source, params string[] filter) Parameters Type Name Description System.String source The source to delete occurrences found in filter . System.String [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String A new string that is equivalent to source except for the removed characters and/or words. Remarks This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. Exceptions Type Condition System.ArgumentNullException source is null or filter is null. | Improve this Doc RemoveAll(String, StringComparison, String[]) Returns a new string in which all the specified filter values has been deleted from the specified source . Declaration public static string RemoveAll(this string source, StringComparison comparison, params string[] filter) Parameters Type Name Description System.String source The source to delete occurrences found in filter . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String A new string that is equivalent to source except for the removed characters and/or words. Exceptions Type Condition System.ArgumentNullException source is null or filter is null. | Improve this Doc RemoveAll(String[], String[]) Returns a new string array in which all the specified filter values has been deleted from the specified source array. Declaration public static string[] RemoveAll(this string[] source, params string[] filter) Parameters Type Name Description System.String [] source The source array to delete occurrences found in filter . System.String [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String [] A new string array that is equivalent to source except for the removed characters and/or words. Remarks This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. Exceptions Type Condition System.ArgumentNullException source is null or filter is null. | Improve this Doc RemoveAll(String[], StringComparison, String[]) Returns a new string array in which all the specified filter values has been deleted from the specified source array. Declaration public static string[] RemoveAll(this string[] source, StringComparison comparison, params string[] filter) Parameters Type Name Description System.String [] source The source array to delete occurrences found in filter . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String [] A new string array that is equivalent to source except for the removed characters and/or words. Exceptions Type Condition System.ArgumentNullException source is null or filter is null. | Improve this Doc ReplaceAll(String, IEnumerable<StringReplacePair>, StringComparison) Replaces all occurrences of the OldValue with NewValue of the replacePairs sequence in value . Declaration public static string ReplaceAll(this string value, IEnumerable<StringReplacePair> replacePairs, StringComparison comparison) Parameters Type Name Description System.String value The System.String value to perform the replacement on. System.Collections.Generic.IEnumerable < StringReplacePair > replacePairs A sequence of StringReplacePair values. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description System.String A System.String equivalent to value but with all instances of OldValue replaced with NewValue . | Improve this Doc ReplaceAll(String, String, String) Replaces all occurrences of oldValue in value , with newValue . Declaration public static string ReplaceAll(this string value, string oldValue, string newValue) Parameters Type Name Description System.String value The System.String value to perform the replacement on. System.String oldValue The System.String value to be replaced. System.String newValue The System.String value to replace all occurrences of oldValue . Returns Type Description System.String A System.String equivalent to value but with all instances of oldValue replaced with newValue . Remarks This method performs an System.StringComparison.OrdinalIgnoreCase search to find oldValue . | Improve this Doc ReplaceAll(String, String, String, StringComparison) Replaces all occurrences of oldValue in value , with newValue . Declaration public static string ReplaceAll(this string value, string oldValue, string newValue, StringComparison comparison) Parameters Type Name Description System.String value The System.String value to perform the replacement on. System.String oldValue The System.String value to be replaced. System.String newValue The System.String value to replace all occurrences of oldValue . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description System.String A System.String equivalent to value but with all instances of oldValue replaced with newValue . | Improve this Doc Shuffle(IEnumerable<String>) Shuffles the specified values like a deck of cards. Declaration public static string Shuffle(this IEnumerable<string> values) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values The values to be shuffled in the randomization process. Returns Type Description System.String A random string from the shuffled values provided. Exceptions Type Condition System.ArgumentNullException values is null. System.ArgumentOutOfRangeException values is empty. | Improve this Doc Split(String) Returns a string array that contains the substrings of value that are delimited by a comma (\",\"). Declaration public static string[] Split(this string value) Parameters Type Name Description System.String value The value containing substrings and delimiters. Returns Type Description System.String [] An array whose elements contain the substrings of value that are delimited by a comma (\",\"). Remarks The following table shows the default values for the overloads of this method. Parameter Default Value delimiter , textQualifier \" provider System.Globalization.CultureInfo.InvariantCulture | Improve this Doc Split(String, String) Returns a string array that contains the substrings of value that are delimited by delimiter . Declaration public static string[] Split(this string value, string delimiter) Parameters Type Name Description System.String value The value containing substrings and delimiters. System.String delimiter The delimiter specification. Returns Type Description System.String [] An array whose elements contain the substrings of value that are delimited by delimiter . | Improve this Doc Split(String, String, String) Returns a string array that contains the substrings of value that are delimited by delimiter . A parameter specifies the textQualifier that surrounds a field. Declaration public static string[] Split(this string value, string delimiter, string textQualifier) Parameters Type Name Description System.String value The value containing substrings and delimiters. System.String delimiter The delimiter specification. System.String textQualifier The text qualifier specification that surrounds a field. Returns Type Description System.String [] An array whose elements contain the substrings of value that are delimited by delimiter . | Improve this Doc StartsWith(String, IEnumerable<String>) Determines whether the beginning of an instance of System.String matches at least one string in the specified sequence of strings. Declaration public static bool StartsWith(this string value, IEnumerable<string> startWithValues) Parameters Type Name Description System.String value The System.String to compare. System.Collections.Generic.IEnumerable < System.String > startWithValues A sequence of System.String values to match against. Returns Type Description System.Boolean true if at least one value matches the beginning of this string; otherwise, false . Remarks This match is performed by using a default value of System.StringComparison.OrdinalIgnoreCase . | Improve this Doc StartsWith(String, String[]) Determines whether the beginning of an instance of System.String matches at least one string in the specified sequence of strings. Declaration public static bool StartsWith(this string value, params string[] startWithValues) Parameters Type Name Description System.String value The System.String to compare. System.String [] startWithValues A sequence of System.String values to match against. Returns Type Description System.Boolean true if at least one value matches the beginning of this string; otherwise, false . Remarks This match is performed by using a default value of System.StringComparison.OrdinalIgnoreCase . | Improve this Doc StartsWith(String, StringComparison, IEnumerable<String>) Determines whether the beginning of an instance of System.String matches at least one string in the specified sequence of strings. Declaration public static bool StartsWith(this string value, StringComparison comparison, IEnumerable<string> startWithValues) Parameters Type Name Description System.String value The System.String to compare. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.Collections.Generic.IEnumerable < System.String > startWithValues A sequence of System.String values to match against. Returns Type Description System.Boolean true if at least one value matches the beginning of this string; otherwise, false . | Improve this Doc StartsWith(String, StringComparison, String[]) Determines whether the beginning of an instance of System.String matches at least one string in the specified sequence of strings. Declaration public static bool StartsWith(this string value, StringComparison comparison, params string[] startWithValues) Parameters Type Name Description System.String value The System.String to compare. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] startWithValues A sequence of System.String values to match against. Returns Type Description System.Boolean true if at least one value matches the beginning of this string; otherwise, false . Remarks This match is performed by using a default value of System.StringComparison.OrdinalIgnoreCase . | Improve this Doc TrimAll(String) Removes all occurrences of white-space characters from the specified value . Declaration public static string TrimAll(this string value) Parameters Type Name Description System.String value A System.String value. Returns Type Description System.String The string that remains after all occurrences of white-space characters are removed from the specified value . | Improve this Doc TrimAll(String, Char[]) Removes all occurrences of a set of characters specified in trimChars from the specified value . Declaration public static string TrimAll(this string value, params char[] trimChars) Parameters Type Name Description System.String value A System.String value. System.Char [] trimChars An array of Unicode characters to remove. Returns Type Description System.String The string that remains after all occurrences of the characters in the trimChars parameter are removed from the specified value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc Unescape(String) Unescapes the given System.String the same way as the well known Javascript unescape() function. Declaration public static string Unescape(this string value) Parameters Type Name Description System.String value The System.String to unescape. Returns Type Description System.String The input value with an unescaped equivalent. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Configuration.Configurable-1.html": {
    "href": "api/core/Cuemon.Configuration.Configurable-1.html",
    "title": "Class Configurable<TOptions> | Cuemon .NET Standard",
    "keywords": "Class Configurable<TOptions> Provides a generic way to support the options pattern on a class level. Inheritance System.Object Configurable<TOptions> CacheableObjectResult<T, TOptions> ConfigurableActionFilter<TOptions> ConfigurableAsyncActionFilter<TOptions> ConfigurableAsyncResultFilter<TOptions> ConfigurableFactoryFilter<TOptions> FaultDescriptorFilter Implements IConfigurable <TOptions> Namespace : Cuemon.Configuration Assembly : Cuemon.Core.dll Syntax public abstract class Configurable<TOptions> : IConfigurable<TOptions> where TOptions : class, new() Type Parameters Name Description TOptions The type of the configured options. Constructors | Improve this Doc Configurable(TOptions) Initializes a new instance of the Configurable<TOptions> class. Declaration protected Configurable(TOptions options) Parameters Type Name Description TOptions options The configured options of this instance. Properties | Improve this Doc Options Gets the configured options of this instance. Declaration public TOptions Options { get; } Property Value Type Description TOptions The configured options of this instance. Implements IConfigurable<TOptions> Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also IConfigurable <TOptions> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.PagedCollection-1.html": {
    "href": "api/core/Cuemon.Collections.Generic.PagedCollection-1.html",
    "title": "Class PagedCollection<T> | Cuemon .NET Standard",
    "keywords": "Class PagedCollection<T> Represents an System.Collections.Generic.IEnumerable<T> paged data sequence. Inheritance System.Object PagedCollection PagedCollection<T> Implements System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members PagedCollection.Search<T>(IEnumerable<T>, Func<T, PagedSettings, StringComparison, Boolean>, PagedSettings) PagedCollection.Search<T>(IEnumerable<T>, Func<T, PagedSettings, StringComparison, Boolean>, PagedSettings, StringComparison) PagedCollection.Sort<T>(IEnumerable<T>, Func<IEnumerable<T>, PagedSettings, IEnumerable<T>>, PagedSettings) Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public class PagedCollection<T> : PagedCollection, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of the elements of this instance. Constructors | Improve this Doc PagedCollection(IEnumerable<T>) Initializes a new instance of the PagedCollection<T> class. Declaration public PagedCollection(IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence. Remarks This will do a System.Linq.Enumerable.Count<TSource>(IEnumerable<TSource>) on source ; so if your source is fragile consider providing this information in the overloaded constructor. | Improve this Doc PagedCollection(IEnumerable<T>, PagedSettings) Initializes a new instance of the PagedCollection<T> class. Declaration public PagedCollection(IEnumerable<T> source, PagedSettings settings) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence. PagedSettings settings The PagedSettings that will be applied to this instance. | Improve this Doc PagedCollection(IEnumerable<T>, PagedSettings, Int32) Initializes a new instance of the PagedCollection<T> class. Declaration public PagedCollection(IEnumerable<T> source, PagedSettings settings, int totalElementCount) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence. PagedSettings settings The PagedSettings that will be applied to this instance. System.Int32 totalElementCount The total number of elements in the source sequence. | Improve this Doc PagedCollection(Func<PagedSettings, IEnumerable<T>>, PagedSettings, Func<PagedSettings, Int32>) Initializes a new instance of the PagedCollection<T> class. Declaration public PagedCollection(Func<PagedSettings, IEnumerable<T>> selector, PagedSettings settings, Func<PagedSettings, int> counter) Parameters Type Name Description System.Func < PagedSettings , System.Collections.Generic.IEnumerable <T>> selector The function delegate that will define the System.Collections.Generic.IEnumerable<T> source sequence of this instance. PagedSettings settings The PagedSettings that will be applied to this instance. System.Func < PagedSettings , System.Int32 > counter The function delegate that will define the TotalElementCount of this instance. Properties | Improve this Doc Count Gets the number of elements on the current page. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements on the current page. | Improve this Doc FirstPage Gets a value indicating whether this instance is on the first paged data sequence. Declaration public bool FirstPage { get; } Property Value Type Description System.Boolean true if this instance is on the first paged data sequence; otherwise, false . | Improve this Doc HasNextPage Gets a value indicating whether this instance has a next paged data sequence. Declaration public bool HasNextPage { get; } Property Value Type Description System.Boolean true if this instance has a next paged data sequence; otherwise, false . | Improve this Doc HasPreviousPage Gets a value indicating whether this instance has a previous paged data sequence. Declaration public bool HasPreviousPage { get; } Property Value Type Description System.Boolean true if this instance has a previous paged data sequence; otherwise, false . | Improve this Doc Item[Int32] Gets the element at the specified index. Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index The zero-based index of the element to get. Property Value Type Description T The element at the specified index. | Improve this Doc LastPage Gets a value indicating whether this instance is on the last paged data sequence. Declaration public bool LastPage { get; } Property Value Type Description System.Boolean true if this instance is on the last paged data sequence; otherwise, false . | Improve this Doc PageCount Gets the total amount of pages for the elements in this sequence. Declaration public int PageCount { get; } Property Value Type Description System.Int32 The total amount of pages for the elements in this sequence. | Improve this Doc Settings Gets the settings that specifies the paging features of this instance. Declaration public PagedSettings Settings { get; } Property Value Type Description PagedSettings The settings that specifies the paging features of this instance. | Improve this Doc TotalElementCount Gets the total number of elements in the sequence before paging is applied. Declaration public int TotalElementCount { get; } Property Value Type Description System.Int32 The total number of elements in the sequence before paging is applied. Methods | Improve this Doc GetEndOfNextPageRange(Int32) Gets the last number of the next page range relative to the specified page . Declaration public int GetEndOfNextPageRange(int page) Parameters Type Name Description System.Int32 page The page to calculate the last number of the next page range. Returns Type Description System.Int32 An System.Int32 that represents the last number of the next page range. | Improve this Doc GetEnumerator() Returns an enumerator that iterates through the paged collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the paged collection. | Improve this Doc GetStartOfNextPageRange(Int32) Gets the first number of the next page range relative to the specified page . Declaration public int GetStartOfNextPageRange(int page) Parameters Type Name Description System.Int32 page The page to calculate the first number of the next page range. Returns Type Description System.Int32 An System.Int32 that represents the first number of the next page range. | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc IEnumerable.GetEnumerator() Returns an enumerator that iterates through a paged collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the paged collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.JsonReaderParser-1.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.JsonReaderParser-1.html",
    "title": "Class JsonReaderParser<T> | Cuemon .NET Standard",
    "keywords": "Class JsonReaderParser<T> Provides a way to parse and extract values from a JSON document. Inheritance System.Object JsonReaderParser<T> Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public class JsonReaderParser<T> : object Type Parameters Name Description T The type of the object to apply a JSON document. Properties | Improve this Doc Instance Gets the instance specified on Create<T>(T, JsonReader) , but initialized with GetValues(String, Action<T, IDictionary<String, JsonReaderResult>>) and/or GetValuesFromArray(String, Action<T, IDictionary<String, IEnumerable<JsonReaderResult>>>) . Declaration public T Instance { get; } Property Value Type Description T The instance specified on Create<T>(T, JsonReader) . Methods | Improve this Doc GetValues(String, Action<T, IDictionary<String, JsonReaderResult>>) Retrieves one or more values from the specified propertyNames using the specified delegate parser . Declaration public JsonReaderParser<T> GetValues(string propertyNames, Action<T, IDictionary<string, JsonReaderResult>> parser) Parameters Type Name Description System.String propertyNames The comma-delimited property names (JSON path) to math in a JSON document. Action <T, IDictionary < System.String , JsonReaderResult >> parser The delegate that will extract values from propertyNames . Returns Type Description JsonReaderParser <T> A reference to this JsonReaderParser<T> instance. | Improve this Doc GetValuesFromArray(String, Action<T, IDictionary<String, IEnumerable<JsonReaderResult>>>) Retreives one or more values from the specified propertyNames using the specified delegate parser . Optimized for JSON arrays. Declaration public JsonReaderParser<T> GetValuesFromArray(string propertyNames, Action<T, IDictionary<string, IEnumerable<JsonReaderResult>>> parser) Parameters Type Name Description System.String propertyNames The comma-delimited property names (JSON path) to math in a JSON document. Action <T, IDictionary < System.String , IEnumerable < JsonReaderResult >>> parser The delegate that will extract values from propertyNames . Returns Type Description JsonReaderParser <T> A reference to this JsonReaderParser<T> instance. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.QueryStringUtility.html": {
    "href": "api/core/Cuemon.Web.QueryStringUtility.html",
    "title": "Class QueryStringUtility | Cuemon .NET Standard",
    "keywords": "Class QueryStringUtility This utility class is designed to make HTTP request querystring operations easier to work with. Inheritance System.Object QueryStringUtility Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public static class QueryStringUtility Methods | Improve this Doc Combine(NameValueCollection[]) Combines the specified query string values into one System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection Combine(params NameValueCollection[] values) Parameters Type Name Description System.Collections.Specialized.NameValueCollection [] values A variable number of query string values . Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the combined query string values . | Improve this Doc Combine(String[]) Combines the specified query string values into one System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection Combine(params string[] values) Parameters Type Name Description System.String [] values A variable number of query string values . Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the combined query string values . | Improve this Doc Remove(NameValueCollection, String[]) Sanitizes the query so that all keys (with matching values) is removed. Declaration public static NameValueCollection Remove(NameValueCollection query, params string[] keys) Parameters Type Name Description System.Collections.Specialized.NameValueCollection query The query string values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection query equivalent of query . | Improve this Doc Remove(String, String[]) Sanitizes the query so that all keys (with matching values) is removed. Declaration public static NameValueCollection Remove(string query, params string[] keys) Parameters Type Name Description System.String query The query string values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection query equivalent of query . | Improve this Doc RemoveDublets(NameValueCollection, String[]) Sanitizes the query so that all keys is assured only the latest value applied. Declaration public static NameValueCollection RemoveDublets(NameValueCollection query, params string[] keys) Parameters Type Name Description System.Collections.Specialized.NameValueCollection query The query string values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection query equivalent of query . | Improve this Doc RemoveDublets(String, String[]) Sanitizes the query so that all keys is assured only the latest value applied. Declaration public static NameValueCollection RemoveDublets(string query, params string[] keys) Parameters Type Name Description System.String query The query string values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection query equivalent of query . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.QueryStringConverter.html": {
    "href": "api/core/Cuemon.Web.QueryStringConverter.html",
    "title": "Class QueryStringConverter | Cuemon .NET Standard",
    "keywords": "Class QueryStringConverter This utility class is designed to make HTTP request querystring specific System.Collections.Specialized.NameValueCollection related conversions easier to work with. Inheritance System.Object QueryStringConverter Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public static class QueryStringConverter Methods | Improve this Doc FromDictionary(IDictionary<String, String[]>) Converts the specified query into its System.String equivalent. Declaration public static string FromDictionary(IDictionary<string, string[]> query) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String []> query The query string values to convert. Returns Type Description System.String A System.String equivalent to the values in the query . | Improve this Doc FromDictionary(IDictionary<String, String[]>, Boolean) Converts the specified query into its System.String equivalent. Declaration public static string FromDictionary(IDictionary<string, string[]> query, bool urlEncode) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String []> query The query string values to convert. System.Boolean urlEncode Specify true to encode the query into a URL-encoded string; otherwise, false . Returns Type Description System.String A System.String equivalent to the values in the query . | Improve this Doc FromNameValueCollection(NameValueCollection) Converts the specified query into its System.String equivalent. Declaration public static string FromNameValueCollection(NameValueCollection query) Parameters Type Name Description System.Collections.Specialized.NameValueCollection query The query string values to convert. Returns Type Description System.String A System.String equivalent to the values in the query . | Improve this Doc FromNameValueCollection(NameValueCollection, Boolean) Converts the specified query into its System.String equivalent. Declaration public static string FromNameValueCollection(NameValueCollection query, bool urlEncode) Parameters Type Name Description System.Collections.Specialized.NameValueCollection query The query string values to convert. System.Boolean urlEncode Specify true to encode the query into a URL-encoded string; otherwise, false . Returns Type Description System.String A System.String equivalent to the values in the query . | Improve this Doc FromString(String) Converts the specified query into its System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection FromString(string query) Parameters Type Name Description System.String query The query string values to convert. Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the values in the query . | Improve this Doc FromString(String, Boolean) Converts the specified query into its System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection FromString(string query, bool urlDecode) Parameters Type Name Description System.String query The query string values to convert. System.Boolean urlDecode Specify true to decode the query that has been encoded for transmission in a URL; otherwise, false . Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the values in the query . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.HttpUtilityExtensions.html": {
    "href": "api/core/Cuemon.Web.HttpUtilityExtensions.html",
    "title": "Class HttpUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class HttpUtilityExtensions This is an extension implementation of the most common methods on the HttpUtility class. Inheritance System.Object HttpUtilityExtensions Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public static class HttpUtilityExtensions Methods | Improve this Doc UrlDecode(String) Converts a string that has been encoded for transmission in a URL into a decoded string. Declaration public static string UrlDecode(this string value) Parameters Type Name Description System.String value The string to decode. Returns Type Description System.String A decoded string. | Improve this Doc UrlDecode(String, Encoding) Converts a string that has been encoded for transmission in a URL into a decoded string, using the specified encoding object. Declaration public static string UrlDecode(this string value, Encoding encoding) Parameters Type Name Description System.String value The string to decode. System.Text.Encoding encoding The System.Text.Encoding that specifies the decoding scheme. Returns Type Description System.String A decoded string. | Improve this Doc UrlEncode(String) Encodes a URL string. Declaration public static string UrlEncode(this string value) Parameters Type Name Description System.String value The text to encode. Returns Type Description System.String An encoded string. | Improve this Doc UrlEncode(String, Encoding) Encodes a URL string, using the specified encoding object. Declaration public static string UrlEncode(this string value, Encoding encoding) Parameters Type Name Description System.String value The value. System.Text.Encoding encoding The System.Text.Encoding that specifies the encoding scheme. Returns Type Description System.String An encoded string. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.HttpUtility.html": {
    "href": "api/core/Cuemon.Web.HttpUtility.html",
    "title": "Class HttpUtility | Cuemon .NET Standard",
    "keywords": "Class HttpUtility This utility class is a light-weight implementation of the now deprecated HttpUtility class. Was made for backward compatibility in terms of UrlEncode(String, Encoding) and UrlDecode(String, Encoding) . Inheritance System.Object HttpUtility Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public static class HttpUtility Remarks Kudos to the mono-project team for this class. I only modified some of the original code to fit into this class. For the original code, have a visit here for the source code: https://github.com/mono/mono/blob/master/mcs/class/System.Web/System.Web/HttpUtility.cs or here for the mono-project website: http://www.mono-project.com/ . Methods | Improve this Doc UrlDecode(String) Converts a string that has been encoded for transmission in a URL into a decoded string. Declaration public static string UrlDecode(string str) Parameters Type Name Description System.String str The string to decode. Returns Type Description System.String A decoded string. | Improve this Doc UrlDecode(String, Encoding) Converts a URL-encoded string into a decoded string, using the specified encoding object. Declaration public static string UrlDecode(string str, Encoding e) Parameters Type Name Description System.String str The string to decode. System.Text.Encoding e The System.Text.Encoding that specifies the decoding scheme. Returns Type Description System.String A decoded string. | Improve this Doc UrlEncode(String) Converts a string into a URL-encoded array of bytes using the specified encoding object. Declaration public static string UrlEncode(string str) Parameters Type Name Description System.String str The string to encode. Returns Type Description System.String An encoded array of bytes. | Improve this Doc UrlEncode(String, Encoding) Converts a string into a URL-encoded array of bytes using the specified encoding object. Declaration public static string UrlEncode(string str, Encoding e) Parameters Type Name Description System.String str The string to encode. System.Text.Encoding e The System.Text.Encoding that specifies the encoding scheme. Returns Type Description System.String An encoded array of bytes. | Improve this Doc UrlEncodeToBytes(Byte[], Int32, Int32) Converts an array of bytes into a URL-encoded array of bytes, starting at the specified position in the array and continuing for the specified number of bytes. Declaration public static byte[] UrlEncodeToBytes(byte[] bytes, int offset, int count) Parameters Type Name Description System.Byte [] bytes The array of bytes to encode. System.Int32 offset The position in the byte array at which to begin encoding. System.Int32 count The number of bytes to encode. Returns Type Description System.Byte [] An encoded array of bytes. | Improve this Doc UrlEncodeToBytes(Byte[], Int32, Int32, Boolean, Encoding) Converts an array of bytes into a URL-encoded array of bytes, starting at the specified position in the array and continuing for the specified number of bytes. Declaration public static byte[] UrlEncodeToBytes(byte[] bytes, int offset, int count, bool preferUppercaseHexadecimalEncoding, Encoding encoding = null) Parameters Type Name Description System.Byte [] bytes The array of bytes to encode. System.Int32 offset The position in the byte array at which to begin encoding. System.Int32 count The number of bytes to encode. System.Boolean preferUppercaseHexadecimalEncoding When true , the bytes is encoded using upper-case hexadecimal characters; otherwise lower-case hexadecimal characters. System.Text.Encoding encoding The text encoding to use when writing the encoded bytes. The default is System.Text.UTF8Encoding . Returns Type Description System.Byte [] An encoded array of bytes. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFuncUtility.html": {
    "href": "api/core/Cuemon.TesterFuncUtility.html",
    "title": "Class TesterFuncUtility | Cuemon .NET Standard",
    "keywords": "Class TesterFuncUtility This utility class is designed to handle those rare scenarios where you have knowledge about potential exceptions that can be safely ignored. Inheritance System.Object TesterFuncUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TesterFuncUtility Methods | Improve this Doc TryExecuteAction(Action) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteAction(Action method) Parameters Type Name Description System.Action method The delegate to invoke. Returns Type Description System.Boolean true if the delegate method was invoked without triggering an exception; otherwise false . | Improve this Doc TryExecuteAction<T>(Action<T>, T) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteAction<T>(Action<T> method, T arg) Parameters Type Name Description System.Action <T> method The delegate to invoke. T arg The first parameter of the method . Returns Type Description System.Boolean true if the delegate method was invoked without triggering an exception; otherwise false . Type Parameters Name Description T The type of the parameter of the method. | Improve this Doc TryExecuteAction<T1, T2>(Action<T1, T2>, T1, T2) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteAction<T1, T2>(Action<T1, T2> method, T1 arg1, T2 arg2) Parameters Type Name Description System.Action <T1, T2> method The delegate to invoke. T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . Returns Type Description System.Boolean true if the delegate method was invoked without triggering an exception; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. | Improve this Doc TryExecuteAction<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteAction<T1, T2, T3>(Action<T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Action <T1, T2, T3> method The delegate to invoke. T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . Returns Type Description System.Boolean true if the delegate method was invoked without triggering an exception; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. | Improve this Doc TryExecuteAction<T1, T2, T3, T4>(Action<T1, T2, T3, T4>, T1, T2, T3, T4) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteAction<T1, T2, T3, T4>(Action<T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Action <T1, T2, T3, T4> method The delegate to invoke. T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . T4 arg4 The fourth parameter of the method . Returns Type Description System.Boolean true if the delegate method was invoked without triggering an exception; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. T4 The type of the fourth parameter of the method. | Improve this Doc TryExecuteAction<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteAction<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5> method The delegate to invoke. T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . T4 arg4 The fourth parameter of the method . T5 arg5 The fifth parameter of the method . Returns Type Description System.Boolean true if the delegate method was invoked without triggering an exception; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. T4 The type of the fourth parameter of the method. T5 The type of the fifth parameter of the method. | Improve this Doc TryExecuteFunction<TResult>(Func<TResult>, out TResult) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteFunction<TResult>(Func<TResult> method, out TResult result) Parameters Type Name Description System.Func <TResult> method The function delegate to invoke to try and get the TResult . TResult result When this method returns, contains the TResult from method , or default ( TResult ) if an exception is thrown. Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description TResult The type of the return value of the method. | Improve this Doc TryExecuteFunction<T, TResult>(Func<T, TResult>, T) Returns a value that indicates whether the specified method was invoked without an exception. Declaration public static bool TryExecuteFunction<T, TResult>(Func<T, TResult> method, T arg) Parameters Type Name Description System.Func <T, TResult> method The function delegate to invoke. T arg The parameter of the method . Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T The type of the parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. | Improve this Doc TryExecuteFunction<T, TResult>(Func<T, TResult>, T, out TResult) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteFunction<T, TResult>(Func<T, TResult> method, T arg, out TResult result) Parameters Type Name Description System.Func <T, TResult> method The function delegate to invoke to try and get the TResult . T arg The first parameter of the method . TResult result When this method returns, contains the TResult from method , or default ( TResult ) if an exception is thrown. Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T The type of the first parameter of the method. TResult The type of the return value of the method. | Improve this Doc TryExecuteFunction<T1, T2, TResult>(Func<T1, T2, TResult>, T1, T2) Returns a value that indicates whether the specified method was invoked without an exception. Declaration public static bool TryExecuteFunction<T1, T2, TResult>(Func<T1, T2, TResult> method, T1 arg1, T2 arg2) Parameters Type Name Description System.Func <T1, T2, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. | Improve this Doc TryExecuteFunction<T1, T2, TResult>(Func<T1, T2, TResult>, T1, T2, out TResult) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteFunction<T1, T2, TResult>(Func<T1, T2, TResult> method, T1 arg1, T2 arg2, out TResult result) Parameters Type Name Description System.Func <T1, T2, TResult> method The function delegate to invoke to try and get the TResult . T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . TResult result When this method returns, contains the TResult from method , or default ( TResult ) if an exception is thrown. Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. TResult The type of the return value of the method. | Improve this Doc TryExecuteFunction<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, T1, T2, T3) Returns a value that indicates whether the specified method was invoked without an exception. Declaration public static bool TryExecuteFunction<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Func <T1, T2, T3, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. | Improve this Doc TryExecuteFunction<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, T1, T2, T3, out TResult) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteFunction<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> method, T1 arg1, T2 arg2, T3 arg3, out TResult result) Parameters Type Name Description System.Func <T1, T2, T3, TResult> method The function delegate to invoke to try and get the TResult . T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . TResult result When this method returns, contains the TResult from method , or default ( TResult ) if an exception is thrown. Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. TResult The type of the return value of the method. | Improve this Doc TryExecuteFunction<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Returns a value that indicates whether the specified method was invoked without an exception. Declaration public static bool TryExecuteFunction<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . T4 arg4 The fourth parameter of the method . Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. T4 The type of the fourth parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. | Improve this Doc TryExecuteFunction<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, out TResult) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteFunction<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> method The function delegate to invoke to try and get the TResult . T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . T4 arg4 The fourth parameter of the method . TResult result When this method returns, contains the TResult from method , or default ( TResult ) if an exception is thrown. Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. T4 The type of the fourth parameter of the method. TResult The type of the return value of the method. | Improve this Doc TryExecuteFunction<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Returns a value that indicates whether the specified method was invoked without an exception. Declaration public static bool TryExecuteFunction<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . T4 arg4 The fourth parameter of the method . T5 arg5 The fifth parameter of the method . Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. T4 The type of the fourth parameter of the method. T5 The type of the fifth parameter of the method. TResult The type of the return value of the method that you explicitly have chosen to ignore. | Improve this Doc TryExecuteFunction<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, out TResult) Returns a value that indicates whether the specified method can be invoked without an exception. Declaration public static bool TryExecuteFunction<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> method The function delegate to invoke to try and get the TResult . T1 arg1 The first parameter of the method . T2 arg2 The second parameter of the method . T3 arg3 The third parameter of the method . T4 arg4 The fourth parameter of the method . T5 arg5 The fifth parameter of the method . TResult result When this method returns, contains the TResult from method , or default ( TResult ) if an exception is thrown. Returns Type Description System.Boolean true if an instance of TResult has been created; otherwise false . Type Parameters Name Description T1 The type of the first parameter of the method. T2 The type of the second parameter of the method. T3 The type of the third parameter of the method. T4 The type of the fourth parameter of the method. T5 The type of the fifth parameter of the method. TResult The type of the return value of the method. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFuncFactory.html": {
    "href": "api/core/Cuemon.TesterFuncFactory.html",
    "title": "Class TesterFuncFactory | Cuemon .NET Standard",
    "keywords": "Class TesterFuncFactory Provides access to factory methods for creating TesterFuncFactory<TTuple, TResult, TSuccess> instances that encapsulate a tester function delegate with a variable amount of generic arguments. Inheritance System.Object TesterFuncFactory Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TesterFuncFactory Methods | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and eight generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and eight generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and nine generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . T9 arg9 The ninth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and nine generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . T9 The type of the ninth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and ten generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . T9 arg9 The ninth parameter of the tester function delegate method . T10 arg10 The tenth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and ten generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . T9 The type of the ninth parameter of the tester function delegate method . T10 The type of the tenth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and eleven generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . T9 arg9 The ninth parameter of the tester function delegate method . T10 arg10 The tenth parameter of the tester function delegate method . T11 arg11 The eleventh parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and eleven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . T9 The type of the ninth parameter of the tester function delegate method . T10 The type of the tenth parameter of the tester function delegate method . T11 The type of the eleventh parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and twelfth generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . T9 arg9 The ninth parameter of the tester function delegate method . T10 arg10 The tenth parameter of the tester function delegate method . T11 arg11 The eleventh parameter of the tester function delegate method . T12 arg12 The twelfth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and twelfth generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . T9 The type of the ninth parameter of the tester function delegate method . T10 The type of the tenth parameter of the tester function delegate method . T11 The type of the eleventh parameter of the tester function delegate method . T12 The type of the twelfth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and thirteen generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . T9 arg9 The ninth parameter of the tester function delegate method . T10 arg10 The tenth parameter of the tester function delegate method . T11 arg11 The eleventh parameter of the tester function delegate method . T12 arg12 The twelfth parameter of the tester function delegate method . T13 arg13 The thirteenth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and thirteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . T9 The type of the ninth parameter of the tester function delegate method . T10 The type of the tenth parameter of the tester function delegate method . T11 The type of the eleventh parameter of the tester function delegate method . T12 The type of the twelfth parameter of the tester function delegate method . T13 The type of the thirteenth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and fourteen generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . T9 arg9 The ninth parameter of the tester function delegate method . T10 arg10 The tenth parameter of the tester function delegate method . T11 arg11 The eleventh parameter of the tester function delegate method . T12 arg12 The twelfth parameter of the tester function delegate method . T13 arg13 The thirteenth parameter of the tester function delegate method . T14 arg14 The fourteenth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and fourteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . T9 The type of the ninth parameter of the tester function delegate method . T10 The type of the tenth parameter of the tester function delegate method . T11 The type of the eleventh parameter of the tester function delegate method . T12 The type of the twelfth parameter of the tester function delegate method . T13 The type of the thirteenth parameter of the tester function delegate method . T14 The type of the fourteenth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and fifteen generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . T9 arg9 The ninth parameter of the tester function delegate method . T10 arg10 The tenth parameter of the tester function delegate method . T11 arg11 The eleventh parameter of the tester function delegate method . T12 arg12 The twelfth parameter of the tester function delegate method . T13 arg13 The thirteenth parameter of the tester function delegate method . T14 arg14 The fourteenth parameter of the tester function delegate method . T15 arg15 The fifteenth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and fifteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . T9 The type of the ninth parameter of the tester function delegate method . T10 The type of the tenth parameter of the tester function delegate method . T11 The type of the eleventh parameter of the tester function delegate method . T12 The type of the twelfth parameter of the tester function delegate method . T13 The type of the thirteenth parameter of the tester function delegate method . T14 The type of the fourteenth parameter of the tester function delegate method . T15 The type of the fifteenth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and sixteen generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . T8 arg8 The eighth parameter of the tester function delegate method . T9 arg9 The ninth parameter of the tester function delegate method . T10 arg10 The tenth parameter of the tester function delegate method . T11 arg11 The eleventh parameter of the tester function delegate method . T12 arg12 The twelfth parameter of the tester function delegate method . T13 arg13 The thirteenth parameter of the tester function delegate method . T14 arg14 The fourteenth parameter of the tester function delegate method . T15 arg15 The fifteenth parameter of the tester function delegate method . T16 arg16 The sixteenth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and sixteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . T8 The type of the eighth parameter of the tester function delegate method . T9 The type of the ninth parameter of the tester function delegate method . T10 The type of the tenth parameter of the tester function delegate method . T11 The type of the eleventh parameter of the tester function delegate method . T12 The type of the twelfth parameter of the tester function delegate method . T13 The type of the thirteenth parameter of the tester function delegate method . T14 The type of the fourteenth parameter of the tester function delegate method . T15 The type of the fifteenth parameter of the tester function delegate method . T16 The type of the sixteenth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<TResult, TSuccess>(TesterFunc<TResult, TSuccess>) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method . Declaration public static TesterFuncFactory<Template, TResult, TSuccess> Create<TResult, TSuccess>(TesterFunc<TResult, TSuccess> method) Parameters Type Name Description TesterFunc <TResult, TSuccess> method The tester function delegate to invoke. Returns Type Description TesterFuncFactory < Template , TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method . Type Parameters Name Description TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T, TResult, TSuccess>(TesterFunc<T, TResult, TSuccess>, T) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and one generic argument. Declaration public static TesterFuncFactory<Template<T>, TResult, TSuccess> Create<T, TResult, TSuccess>(TesterFunc<T, TResult, TSuccess> method, T arg) Parameters Type Name Description TesterFunc <T, TResult, TSuccess> method The tester function delegate to invoke. T arg The parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and one generic argument. Type Parameters Name Description T The type of the parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, TResult, TSuccess>(TesterFunc<T1, T2, TResult, TSuccess>, T1, T2) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and two generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2>, TResult, TSuccess> Create<T1, T2, TResult, TSuccess>(TesterFunc<T1, T2, TResult, TSuccess> method, T1 arg1, T2 arg2) Parameters Type Name Description TesterFunc <T1, T2, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and two generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, TResult, TSuccess>(TesterFunc<T1, T2, T3, TResult, TSuccess>, T1, T2, T3) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and three generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3>, TResult, TSuccess> Create<T1, T2, T3, TResult, TSuccess>(TesterFunc<T1, T2, T3, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TesterFunc <T1, T2, T3, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and three generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, TResult, TSuccess>, T1, T2, T3, T4) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and four generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4>, TResult, TSuccess> Create<T1, T2, T3, T4, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and four generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess>, T1, T2, T3, T4, T5) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and five generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and five generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, TResult, TSuccess>, T1, T2, T3, T4, T5, T6) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and six generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and six generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, TResult, TSuccess>, T1, T2, T3, T4, T5, T6, T7) Creates a new TesterFuncFactory<TTuple, TResult, TSuccess> instance encapsulating the specified method and seven generic arguments. Declaration public static TesterFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7>, TResult, TSuccess> Create<T1, T2, T3, T4, T5, T6, T7, TResult, TSuccess>(TesterFunc<T1, T2, T3, T4, T5, T6, T7, TResult, TSuccess> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description TesterFunc <T1, T2, T3, T4, T5, T6, T7, TResult, TSuccess> method The tester function delegate to invoke. T1 arg1 The first parameter of the tester function delegate method . T2 arg2 The second parameter of the tester function delegate method . T3 arg3 The third parameter of the tester function delegate method . T4 arg4 The fourth parameter of the tester function delegate method . T5 arg5 The fifth parameter of the tester function delegate method . T6 arg6 The sixth parameter of the tester function delegate method . T7 arg7 The seventh parameter of the tester function delegate method . Returns Type Description TesterFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7>, TResult, TSuccess> An instance of TesterFuncFactory<TTuple, TResult, TSuccess> object initialized with the specified method and seven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the tester function delegate method . T2 The type of the second parameter of the tester function delegate method . T3 The type of the third parameter of the tester function delegate method . T4 The type of the fourth parameter of the tester function delegate method . T5 The type of the fifth parameter of the tester function delegate method . T6 The type of the sixth parameter of the tester function delegate method . T7 The type of the seventh parameter of the tester function delegate method . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . | Improve this Doc Invoke<TTuple, TResult, TSuccess>(TesterFunc<TTuple, TResult, TSuccess>, TTuple, out TResult) Invokes the specified delegate method with a n- tuple argument. Declaration public static TSuccess Invoke<TTuple, TResult, TSuccess>(TesterFunc<TTuple, TResult, TSuccess> method, TTuple tuple, out TResult result) where TTuple : Template Parameters Type Name Description TesterFunc <TTuple, TResult, TSuccess> method The tester function delegate to invoke. TTuple tuple The n-tuple argument of method . TResult result The out result value of the tester function delegate. Returns Type Description TSuccess The return value that indicates success of the tester function delegate method . Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . TResult The type of the out result value of the tester function delegate method . TSuccess The type of the return value that indicates success of the tester function delegate method . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFuncFactory-3.html": {
    "href": "api/core/Cuemon.TesterFuncFactory-3.html",
    "title": "Class TesterFuncFactory<TTuple, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Class TesterFuncFactory<TTuple, TResult, TSuccess> Provides an easy way of invoking an TesterFunc<TResult, TSuccess> function delegate regardless of the amount of parameters provided. Inheritance System.Object TemplateFactory <TTuple> TesterFuncFactory<TTuple, TResult, TSuccess> Inherited Members TemplateFactory<TTuple>.GenericArguments TemplateFactory<TTuple>.ToString() TemplateFactory<TTuple>.ThrowIfNoValidDelegate(Boolean) Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class TesterFuncFactory<TTuple, TResult, TSuccess> : TemplateFactory<TTuple> where TTuple : Template Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . TResult The type of the out result value of the tester function delegate Method . TSuccess The type of the return value that indicates success of the tester function delegate Method . Constructors | Improve this Doc TesterFuncFactory(TesterFunc<TTuple, TResult, TSuccess>, TTuple) Initializes a new instance of the TesterFuncFactory<TTuple, TResult, TSuccess> class. Declaration public TesterFuncFactory(TesterFunc<TTuple, TResult, TSuccess> method, TTuple tuple) Parameters Type Name Description TesterFunc <TTuple, TResult, TSuccess> method The tester function delegate to invoke. TTuple tuple The n-tuple argument of method . Properties | Improve this Doc DelegateInfo Gets the method represented by the tester function delegate. Declaration public override MethodInfo DelegateInfo { get; } Property Value Type Description System.Reflection.MethodInfo A System.Reflection.MethodInfo describing the method represented by the tester function delegate. Overrides Cuemon.TemplateFactory<TTuple>.DelegateInfo | Improve this Doc HasDelegate Gets a value indicating whether this instance has an assigned tester function delegate. Declaration public override bool HasDelegate { get; } Property Value Type Description System.Boolean true if this instance an assigned tester function delegate; otherwise, false . Overrides Cuemon.TemplateFactory<TTuple>.HasDelegate | Improve this Doc Method Gets the tester function delegate to invoke. Declaration protected TesterFunc<TTuple, TResult, TSuccess> Method { get; } Property Value Type Description TesterFunc <TTuple, TResult, TSuccess> The TesterFunc<TResult, TSuccess> delegate to invoke. Methods | Improve this Doc Clone() Creates a shallow copy of the current TesterFuncFactory<TTuple, TResult, TSuccess> object. Declaration public TesterFuncFactory<TTuple, TResult, TSuccess> Clone() Returns Type Description TesterFuncFactory <TTuple, TResult, TSuccess> A new TesterFuncFactory<TTuple, TResult, TSuccess> that is a copy of this instance. Remarks When thread safety is required this is the method to invoke. | Improve this Doc ExecuteMethod(out TResult) Executes the tester function delegate associated with this instance. Declaration public virtual TSuccess ExecuteMethod(out TResult result) Parameters Type Name Description TResult result The out result value of the tester function delegate. Returns Type Description TSuccess The return value that indicates success of the tester function delegate associated with this instance. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IntegerExtensions.html": {
    "href": "api/core/Cuemon.IntegerExtensions.html",
    "title": "Class IntegerExtensions | Cuemon .NET Standard",
    "keywords": "Class IntegerExtensions Provides extension methods for System.Int16 , System.Int32 and System.Int64 . Inheritance System.Object IntegerExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class IntegerExtensions Methods | Improve this Doc Max(Int16, Int16) Returns the larger of two 16-bit signed integers. Declaration public static short Max(this short value, short minimum) Parameters Type Name Description System.Int16 value The first of two 16-bit signed integers to compare. System.Int16 minimum The second of two 16-bit signed integers to compare. Returns Type Description System.Int16 Parameter value or minimum , whichever is larger. | Improve this Doc Max(Int32, Int32) Returns the larger of two 32-bit signed integers. Declaration public static int Max(this int value, int minimum) Parameters Type Name Description System.Int32 value The first of two 32-bit signed integers to compare. System.Int32 minimum The second of two 32-bit signed integers to compare. Returns Type Description System.Int32 Parameter value or minimum , whichever is larger. | Improve this Doc Max(Int64, Int64) Returns the larger of two 64-bit signed integers. Declaration public static long Max(this long value, long minimum) Parameters Type Name Description System.Int64 value The first of two 64-bit signed integers to compare. System.Int64 minimum The second of two 64-bit signed integers to compare. Returns Type Description System.Int64 Parameter value or minimum , whichever is larger. | Improve this Doc Min(Int16, Int16) Returns the smaller of two 16-bit signed integers. Declaration public static short Min(this short value, short maximum) Parameters Type Name Description System.Int16 value The first of two 16-bit signed integers to compare. System.Int16 maximum The second of two 16-bit signed integers to compare. Returns Type Description System.Int16 Parameter value or maximum , whichever is smaller. | Improve this Doc Min(Int32, Int32) Returns the smaller of two 32-bit signed integers. Declaration public static int Min(this int value, int maximum) Parameters Type Name Description System.Int32 value The first of two 32-bit signed integers to compare. System.Int32 maximum The second of two 32-bit signed integers to compare. Returns Type Description System.Int32 Parameter value or maximum , whichever is smaller. | Improve this Doc Min(Int64, Int64) Returns the smaller of two 64-bit signed integers. Declaration public static long Min(this long value, long maximum) Parameters Type Name Description System.Int64 value The first of two 64-bit signed integers to compare. System.Int64 maximum The second of two 64-bit signed integers to compare. Returns Type Description System.Int64 Parameter value or maximum , whichever is smaller. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DoubleConverter.html": {
    "href": "api/core/Cuemon.DoubleConverter.html",
    "title": "Class DoubleConverter | Cuemon .NET Standard",
    "keywords": "Class DoubleConverter This utility class is designed to make System.Double related conversions easier to work with. Inheritance System.Object DoubleConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DoubleConverter Methods | Improve this Doc FromEpochTime(DateTime) Converts the specified value to an equivalent Epoc time representation. Declaration public static double FromEpochTime(DateTime value) Parameters Type Name Description System.DateTime value The System.DateTime value to be converted. Returns Type Description System.Double A System.Double value that is equivalent to value . Remarks This implementation converts the value to an UTC representation ONLY if the System.DateTime.Kind equals System.DateTimeKind.Local . | Improve this Doc FromEpochTime(DateTime, Func<DateTime, DateTime>) Converts the specified value to an equivalent Epoc time representation. Declaration public static double FromEpochTime(DateTime value, Func<DateTime, DateTime> utcConverter) Parameters Type Name Description System.DateTime value The System.DateTime value to be converted. System.Func < System.DateTime , System.DateTime > utcConverter The function delegate that will convert the given value to its UTC equivalent. Returns Type Description System.Double A System.Double value that is equivalent to value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.html": {
    "href": "api/core/Cuemon.Diagnostics.html",
    "title": "Namespace Cuemon.Diagnostics | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Diagnostics Assembly : Cuemon.Core.dll Classes ExceptionDescriptor Provides information about an System.Exception , in a developer friendly way, optimized for open- and otherwise public application programming interfaces (API). ExceptionDescriptorAttribute Provides information about an System.Exception , in a developer friendly way, optimized for open- and otherwise public application programming interfaces (API). ExceptionDescriptorOptions Specifies options that is related to ExceptionDescriptor operations. FileVersionInfoExtensions Extension methods for the System.Diagnostics.FileVersionInfo class. Profiler Represents a base class for profiler related operations. ProfilerOptions Specifies options that is related to Profiler operations. TimeMeasure Provides a flexible, generic and lambda friendly way to perform time measuring operations. TimeMeasureOptions Specifies options that is related to TimeMeasureProfiler operations. TimeMeasureProfiler Represents a profiler that is optimized for time measuring operations. TimeMeasureProfiler<TResult> Represents a profiler that is optimized for time measuring operations that provides a return value. This class cannot be inherited. Enums EventLogEntryType Specifies the event type of an event log entry. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DayPart.html": {
    "href": "api/core/Cuemon.DayPart.html",
    "title": "Class DayPart | Cuemon .NET Standard",
    "keywords": "Class DayPart Represents a part of a day. Inheritance System.Object DayPart Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class DayPart Properties | Improve this Doc Name Gets the name of a DayPart . Declaration public string Name { get; } Property Value Type Description System.String The name of a DayPart . | Improve this Doc Range Gets the approximate range that this DayPart represents. Declaration public TimeRange Range { get; set; } Property Value Type Description TimeRange The approximate range that this DayPart represents. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ICacheableAsyncResultFilter.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ICacheableAsyncResultFilter.html",
    "title": "Interface ICacheableAsyncResultFilter | Cuemon .NET Standard",
    "keywords": "Interface ICacheableAsyncResultFilter A filter that asynchronously surrounds execution of action results successfully returned from an action. Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public interface ICacheableAsyncResultFilter Methods | Improve this Doc OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) Called asynchronously before the action result. Declaration Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext . Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate next The Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate . Invoked to execute the next result filter or the result itself. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion indicates the filter has executed. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.CacheableObjectResult-2.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.CacheableObjectResult-2.html",
    "title": "Class CacheableObjectResult<T, TOptions> | Cuemon .NET Standard",
    "keywords": "Class CacheableObjectResult<T, TOptions> Provides a base class for ICacheableObjectResult related operations. Inheritance System.Object Configurable <TOptions> CacheableObjectResult<T, TOptions> ContentBasedObjectResult<T> ContentTimeBasedObjectResult<T> TimeBasedObjectResult<T> Implements IConfigurable <TOptions> ICacheableObjectResult Inherited Members Configurable<TOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public abstract class CacheableObjectResult<T, TOptions> : Configurable<TOptions>, IConfigurable<TOptions>, ICacheableObjectResult where TOptions : class, new() Type Parameters Name Description T The type of the object to make cacheable. TOptions The type of the options to the cacheable object. Constructors | Improve this Doc CacheableObjectResult(T, Action<TOptions>) Initializes a new instance of the CacheableObjectResult<T, TOptions> class. Declaration protected CacheableObjectResult(T instance, Action<TOptions> setup) Parameters Type Name Description T instance The object to make cacheable. System.Action <TOptions> setup The System.Action<T> which need to be configured. Properties | Improve this Doc Value Gets or sets the value of the cacheable object. Declaration public object Value { get; set; } Property Value Type Description System.Object The value of the cacheable object. Implements IConfigurable<TOptions> ICacheableObjectResult Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Configurable <TOptions> ICacheableObjectResult (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Formatters.Xml | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Formatters.Xml Assembly : Cuemon.AspNetCore.Mvc.Formatters.Xml.dll Classes XmlMvcCoreBuilderExtensions Extension methods for adding XML formatters to MVC. XmlSerializationInputFormatter This class handles deserialization of JSON to objects using XmlFormatter . XmlSerializationMvcOptionsSetup A Microsoft.Extensions.Options.ConfigureOptions<TOptions> implementation which will add the XML serializer formatters to Microsoft.AspNetCore.Mvc.MvcOptions . XmlSerializationOutputFormatter This class handles serialization of objects to XML using XmlFormatter . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.TimeMeasuringFilter.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.TimeMeasuringFilter.html",
    "title": "Class TimeMeasuringFilter | Cuemon .NET Standard",
    "keywords": "Class TimeMeasuringFilter A filter that performs time measure profiling of an action method. Inheritance System.Object Configurable < TimeMeasuringOptions > ConfigurableActionFilter < TimeMeasuringOptions > TimeMeasuringFilter Implements IConfigurable < TimeMeasuringOptions > Microsoft.AspNetCore.Mvc.Filters.IActionFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members Configurable<TimeMeasuringOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters.Diagnostics Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class TimeMeasuringFilter : ConfigurableActionFilter<TimeMeasuringOptions>, IConfigurable<TimeMeasuringOptions>, IActionFilter, IFilterMetadata Constructors | Improve this Doc TimeMeasuringFilter(IOptions<TimeMeasuringOptions>, IHostingEnvironment) Initializes a new instance of the TimeMeasuringFilter class. Declaration public TimeMeasuringFilter(IOptions<TimeMeasuringOptions> setup, IHostingEnvironment he) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < TimeMeasuringOptions > setup The TimeMeasureOptions which need to be configured. Microsoft.Extensions.Hosting.IHostingEnvironment he The dependency injected Microsoft.Extensions.Hosting.IHostingEnvironment . Methods | Improve this Doc OnActionExecuted(ActionExecutedContext) Called after the action executes, before the action result. Declaration public override void OnActionExecuted(ActionExecutedContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext context The Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext . Overrides Cuemon.AspNetCore.Mvc.Filters.ConfigurableActionFilter<Cuemon.AspNetCore.Mvc.Filters.Diagnostics.TimeMeasuringOptions>.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext) | Improve this Doc OnActionExecuting(ActionExecutingContext) Called before the action executes, after model binding is complete. Declaration public override void OnActionExecuting(ActionExecutingContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext . Overrides Cuemon.AspNetCore.Mvc.Filters.ConfigurableActionFilter<Cuemon.AspNetCore.Mvc.Filters.Diagnostics.TimeMeasuringOptions>.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext) Implements IConfigurable<TOptions> Microsoft.AspNetCore.Mvc.Filters.IActionFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also ConfigurableActionFilter <TOptions> Microsoft.AspNetCore.Mvc.Filters.IActionFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DbColumn.html": {
    "href": "api/core/Cuemon.Data.DbColumn.html",
    "title": "Class DbColumn | Cuemon .NET Standard",
    "keywords": "Class DbColumn Represents a database column. Inheritance System.Object DbColumn Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class DbColumn Constructors | Improve this Doc DbColumn(DbType, Object) Initializes a new instance of the DbColumn class. Declaration public DbColumn(DbType columnDbType, object columnValue) Parameters Type Name Description System.Data.DbType columnDbType The System.Data.DbType of the database column. System.Object columnValue The value of the database column. Properties | Improve this Doc ColumnDbType Gets the System.Data.DbType of the database column. Declaration public DbType ColumnDbType { get; } Property Value Type Description System.Data.DbType The System.Data.DbType of the database column. | Improve this Doc ColumnType Gets the System.Type of the database column. Declaration public Type ColumnType { get; } Property Value Type Description System.Type The System.Type of the database column. | Improve this Doc ColumnValue Gets the database column value. Declaration public object ColumnValue { get; } Property Value Type Description System.Object Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataAdapterEventArgs.html": {
    "href": "api/core/Cuemon.Data.DataAdapterEventArgs.html",
    "title": "Class DataAdapterEventArgs | Cuemon .NET Standard",
    "keywords": "Class DataAdapterEventArgs Provides data for DataAdapter related operations. Inheritance System.Object System.EventArgs DataAdapterEventArgs Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public class DataAdapterEventArgs : EventArgs Constructors | Improve this Doc DataAdapterEventArgs() Initializes a new instance of the DataAdapterEventArgs class. Declaration protected DataAdapterEventArgs() Fields | Improve this Doc Empty Represents an DataAdapter event with no event data. Declaration public static readonly DataAdapterEventArgs Empty Field Value Type Description DataAdapterEventArgs Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataAdapter.html": {
    "href": "api/core/Cuemon.Data.DataAdapter.html",
    "title": "Class DataAdapter | Cuemon .NET Standard",
    "keywords": "Class DataAdapter An abstract class representing the actual data binding to a data source. Inheritance System.Object DataAdapter Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public abstract class DataAdapter Constructors | Improve this Doc DataAdapter() Initializes a new instance of the DataAdapter class. Declaration protected DataAdapter() | Improve this Doc DataAdapter(DataManager) Initializes a new instance of the DataAdapter class. Declaration protected DataAdapter(DataManager manager) Parameters Type Name Description DataManager manager The data manager as underlying DSL wrapper logic. Properties | Improve this Doc Manager Gets the data manager for this object. Please be aware, that you should only use this for custom methods as you will loose event control on Entity classes by using the manager directly. Declaration public DataManager Manager { get; } Property Value Type Description DataManager A DataManager object. Methods | Improve this Doc Delete(IDataCommand, DbParameter[]) Deletes data from a data source. Declaration protected void Delete(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. | Improve this Doc Insert(IDataCommand, QueryInsertAction, DbParameter[]) Inserts data to a data source. Declaration protected object Insert(IDataCommand dataCommand, QueryInsertAction action, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. QueryInsertAction action The insert action you wish to apply. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Object A System.Void object. | Improve this Doc Insert(IDataCommand, DbParameter[]) Inserts data to a data source with default insert action, AffectedRows. Declaration protected object Insert(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Object A System.Void object. | Improve this Doc OnDeletedRaised(DataAdapterEventArgs) Raises the Deleted event. Declaration protected virtual void OnDeletedRaised(DataAdapterEventArgs e) Parameters Type Name Description DataAdapterEventArgs e The DataAdapterEventArgs instance containing the event data. | Improve this Doc OnDeletingRaised(DataAdapterEventArgs) Raises the Deleting event. Declaration protected virtual void OnDeletingRaised(DataAdapterEventArgs e) Parameters Type Name Description DataAdapterEventArgs e The DataAdapterEventArgs instance containing the event data. | Improve this Doc OnInsertedRaised(DataAdapterEventArgs) Raises the Inserted event. Declaration protected virtual void OnInsertedRaised(DataAdapterEventArgs e) Parameters Type Name Description DataAdapterEventArgs e The DataAdapterEventArgs instance containing the event data. | Improve this Doc OnInsertingRaised(DataAdapterEventArgs) Raises the Inserting event. Declaration protected virtual void OnInsertingRaised(DataAdapterEventArgs e) Parameters Type Name Description DataAdapterEventArgs e The DataAdapterEventArgs instance containing the event data. | Improve this Doc OnSelectedRaised(DataAdapterEventArgs) Raises the Selected event. Declaration protected virtual void OnSelectedRaised(DataAdapterEventArgs e) Parameters Type Name Description DataAdapterEventArgs e The DataAdapterEventArgs instance containing the event data. | Improve this Doc OnSelectingRaised(DataAdapterEventArgs) Raises the Selecting event. Declaration protected virtual void OnSelectingRaised(DataAdapterEventArgs e) Parameters Type Name Description DataAdapterEventArgs e The DataAdapterEventArgs instance containing the event data. | Improve this Doc OnUpdatedRaised(DataAdapterEventArgs) Raises the Updated event. Declaration protected virtual void OnUpdatedRaised(DataAdapterEventArgs e) Parameters Type Name Description DataAdapterEventArgs e The DataAdapterEventArgs instance containing the event data. | Improve this Doc OnUpdatingRaised(DataAdapterEventArgs) Raises the Updating event. Declaration protected virtual void OnUpdatingRaised(DataAdapterEventArgs e) Parameters Type Name Description DataAdapterEventArgs e The DataAdapterEventArgs instance containing the event data. | Improve this Doc Select(IDataCommand, DbParameter[]) Selects data from a data source. Declaration protected DbDataReader Select(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Returns Type Description System.Data.Common.DbDataReader An object supporting the System.Data.Common.DbDataReader interface. | Improve this Doc Update(IDataCommand, DbParameter[]) Updates data in the data source. Declaration protected void Update(IDataCommand dataCommand, params DbParameter[] parameters) Parameters Type Name Description IDataCommand dataCommand The data command to execute. System.Data.Common.DbParameter [] parameters The parameters to use in the command. Events | Improve this Doc Deleted Occurs when a Delete operation has completed. Declaration public event EventHandler<DataAdapterEventArgs> Deleted Event Type Type Description System.EventHandler < DataAdapterEventArgs > | Improve this Doc Deleting Occurs before a Delete operation. Declaration public event EventHandler<DataAdapterEventArgs> Deleting Event Type Type Description System.EventHandler < DataAdapterEventArgs > | Improve this Doc Inserted Occurs when an Insert operation has completed. Declaration public event EventHandler<DataAdapterEventArgs> Inserted Event Type Type Description System.EventHandler < DataAdapterEventArgs > | Improve this Doc Inserting Occurs before an Insert operation. Declaration public event EventHandler<DataAdapterEventArgs> Inserting Event Type Type Description System.EventHandler < DataAdapterEventArgs > | Improve this Doc Selected Occurs when a Select operation has completed. Declaration public event EventHandler<DataAdapterEventArgs> Selected Event Type Type Description System.EventHandler < DataAdapterEventArgs > | Improve this Doc Selecting Occurs before a Select operation. Declaration public event EventHandler<DataAdapterEventArgs> Selecting Event Type Type Description System.EventHandler < DataAdapterEventArgs > | Improve this Doc Updated Occurs when an Update operation has completed. Declaration public event EventHandler<DataAdapterEventArgs> Updated Event Type Type Description System.EventHandler < DataAdapterEventArgs > | Improve this Doc Updating Occurs before an Update operation. Declaration public event EventHandler<DataAdapterEventArgs> Updating Event Type Type Description System.EventHandler < DataAdapterEventArgs > Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Condition.html": {
    "href": "api/core/Cuemon.Condition.html",
    "title": "Class Condition | Cuemon .NET Standard",
    "keywords": "Class Condition Provide ways to verify conditions a generic way for countless scenarios using true/false propositions. Inheritance System.Object Condition Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class Condition Methods | Improve this Doc AreEqual<T>(T, T) Determines whether the two specified x and y are equal by using the default equality operator from T . Declaration public static bool AreEqual<T>(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Boolean true if x are equal to y ; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc AreEqual<T>(T, T, IEqualityComparer<T>) Determines whether the two specified x and y are equal by using the equality operator. Declaration public static bool AreEqual<T>(T x, T y, IEqualityComparer<T> comparer) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing x and y . Returns Type Description System.Boolean true if x are equal to y ; otherwise false . Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentNullException comparer is null. | Improve this Doc AreNotEqual<T>(T, T) Determines whether the two specified x and y are different by using the default equality operator from T . Declaration public static bool AreNotEqual<T>(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Boolean true if x are different from y ; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc AreNotEqual<T>(T, T, IEqualityComparer<T>) Determines whether the two specified x and y are different by using the equality operator. Declaration public static bool AreNotEqual<T>(T x, T y, IEqualityComparer<T> comparer) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing x and y . Returns Type Description System.Boolean true if x are different from y ; otherwise false . Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentNullException comparer is null. | Improve this Doc AreNotSame<T>(T, T) Determines whether the two specified x object are not of the same instance as the y object. Declaration public static bool AreNotSame<T>(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Boolean true if x object are not of the same instance as the y object; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc AreSame<T>(T, T) Determines whether the two specified x object are of the same instance as the y object. Declaration public static bool AreSame<T>(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Boolean true if x object are of the same instance as the y object; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc FlipFlop(Boolean, Action, Action) Invokes one of two expressions depending on the value of condition . Declaration public static void FlipFlop(bool condition, Action firstExpression, Action secondExpression) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked; when false , the secondExpression is invoked. System.Action firstExpression The delegate that is invoked when condition is true . System.Action secondExpression The delegate that is invoked when condition is false . | Improve this Doc FlipFlop<T>(Boolean, Action<T>, Action<T>, T) Invokes one of two expressions depending on the value of condition . Declaration public static void FlipFlop<T>(bool condition, Action<T> firstExpression, Action<T> secondExpression, T arg) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked; when false , the secondExpression is invoked. System.Action <T> firstExpression The delegate that is invoked when condition is true . System.Action <T> secondExpression The delegate that is invoked when condition is false . T arg The parameter of the delegates firstExpression and secondExpression . Type Parameters Name Description T The type of the parameter of the delegates firstExpression and secondExpression . | Improve this Doc FlipFlop<T1, T2>(Boolean, Action<T1, T2>, Action<T1, T2>, T1, T2) Invokes one of two expressions depending on the value of condition . Declaration public static void FlipFlop<T1, T2>(bool condition, Action<T1, T2> firstExpression, Action<T1, T2> secondExpression, T1 arg1, T2 arg2) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked; when false , the secondExpression is invoked. System.Action <T1, T2> firstExpression The delegate that is invoked when condition is true . System.Action <T1, T2> secondExpression The delegate that is invoked when condition is false . T1 arg1 The first parameter of the delegates firstExpression and secondExpression . T2 arg2 The second parameter of the delegates firstExpression and secondExpression . Type Parameters Name Description T1 The type of the first parameter of the delegates firstExpression and secondExpression . T2 The type of the second parameter of the delegates firstExpression and secondExpression . | Improve this Doc FlipFlop<T1, T2, T3>(Boolean, Action<T1, T2, T3>, Action<T1, T2, T3>, T1, T2, T3) Invokes one of two expressions depending on the value of condition . Declaration public static void FlipFlop<T1, T2, T3>(bool condition, Action<T1, T2, T3> firstExpression, Action<T1, T2, T3> secondExpression, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked; when false , the secondExpression is invoked. System.Action <T1, T2, T3> firstExpression The delegate that is invoked when condition is true . System.Action <T1, T2, T3> secondExpression The delegate that is invoked when condition is false . T1 arg1 The first parameter of the delegates firstExpression and secondExpression . T2 arg2 The second parameter of the delegates firstExpression and secondExpression . T3 arg3 The third parameter of the delegates firstExpression and secondExpression . Type Parameters Name Description T1 The type of the first parameter of the delegates firstExpression and secondExpression . T2 The type of the second parameter of the delegates firstExpression and secondExpression . T3 The type of the third parameter of the delegates firstExpression and secondExpression . | Improve this Doc FlipFlop<T1, T2, T3, T4>(Boolean, Action<T1, T2, T3, T4>, Action<T1, T2, T3, T4>, T1, T2, T3, T4) Invokes one of two expressions depending on the value of condition . Declaration public static void FlipFlop<T1, T2, T3, T4>(bool condition, Action<T1, T2, T3, T4> firstExpression, Action<T1, T2, T3, T4> secondExpression, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked; when false , the secondExpression is invoked. System.Action <T1, T2, T3, T4> firstExpression The delegate that is invoked when condition is true . System.Action <T1, T2, T3, T4> secondExpression The delegate that is invoked when condition is false . T1 arg1 The first parameter of the delegates firstExpression and secondExpression . T2 arg2 The second parameter of the delegates firstExpression and secondExpression . T3 arg3 The third parameter of the delegates firstExpression and secondExpression . T4 arg4 The fourth parameter of the delegates firstExpression and secondExpression . Type Parameters Name Description T1 The type of the first parameter of the delegates firstExpression and secondExpression . T2 The type of the second parameter of the delegates firstExpression and secondExpression . T3 The type of the third parameter of the delegates firstExpression and secondExpression . T4 The type of the fourth parameter of the delegates firstExpression and secondExpression . | Improve this Doc FlipFlop<T1, T2, T3, T4, T5>(Boolean, Action<T1, T2, T3, T4, T5>, Action<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Invokes one of two expressions depending on the value of condition . Declaration public static void FlipFlop<T1, T2, T3, T4, T5>(bool condition, Action<T1, T2, T3, T4, T5> firstExpression, Action<T1, T2, T3, T4, T5> secondExpression, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked; when false , the secondExpression is invoked. System.Action <T1, T2, T3, T4, T5> firstExpression The delegate that is invoked when condition is true . System.Action <T1, T2, T3, T4, T5> secondExpression The delegate that is invoked when condition is false . T1 arg1 The first parameter of the delegates firstExpression and secondExpression . T2 arg2 The second parameter of the delegates firstExpression and secondExpression . T3 arg3 The third parameter of the delegates firstExpression and secondExpression . T4 arg4 The fourth parameter of the delegates firstExpression and secondExpression . T5 arg5 The fifth parameter of the delegates firstExpression and secondExpression . Type Parameters Name Description T1 The type of the first parameter of the delegates firstExpression and secondExpression . T2 The type of the second parameter of the delegates firstExpression and secondExpression . T3 The type of the third parameter of the delegates firstExpression and secondExpression . T4 The type of the fourth parameter of the delegates firstExpression and secondExpression . T5 The type of the fifth parameter of the delegates firstExpression and secondExpression . | Improve this Doc Initialize<TTuple>(TTuple, Boolean) Initializes a new instance of the ConditionBuilder<TTuple> with the specified argument tuple and the boolean value . Declaration public static ConditionBuilder<TTuple> Initialize<TTuple>(TTuple tuple, bool value) where TTuple : Template Parameters Type Name Description TTuple tuple The argument for the invoker methods of ConditionBuilder<TTuple> . System.Boolean value The value of a condition that can be either true or false . Returns Type Description ConditionBuilder <TTuple> A new instance of the ConditionBuilder<TTuple> initialized with the specified argument tuple and the boolean value . Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . | Improve this Doc Initialize<TTuple, TValue>(TTuple, TValue, Func<TValue, Boolean>) Initializes a new instance of the ConditionBuilder<TTuple> with the specified argument tuple and the result of the starting condition . Declaration public static ConditionBuilder<TTuple> Initialize<TTuple, TValue>(TTuple tuple, TValue value, Func<TValue, bool> condition) where TTuple : Template Parameters Type Name Description TTuple tuple The argument for the invoker methods of ConditionBuilder<TTuple> . TValue value The argument for condition . System.Func <TValue, System.Boolean > condition The delegate that will evaluate value . Returns Type Description ConditionBuilder <TTuple> A new instance of the ConditionBuilder<TTuple> initialized with the specified argument tuple and the result of the starting condition . Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . TValue The type of the value for condition . | Improve this Doc IsDefault<T>(T) Determines whether the specified value has its initial default value. Declaration public static bool IsDefault<T>(T value) Parameters Type Name Description T value The object to verify has its initial default value. Returns Type Description System.Boolean true if the specified value has its initial default value; otherwise, false . Type Parameters Name Description T The type of the value. | Improve this Doc IsEmailAddress(String) Determines whether the specified value has a valid format of an email address. Declaration public static bool IsEmailAddress(string value) Parameters Type Name Description System.String value The string to verify has a valid format of an email address. Returns Type Description System.Boolean true if the specified value has a valid format of an email address; otherwise, false . Remarks In my search for the most comprehensive and up-to-date regular expression for email address validation, this was the article I choose to implement: http://blog.trojanhunter.com/2012/09/26/the-best-regex-to-validate-an-email-address/ . | Improve this Doc IsEmpty(String) Determines whether the specified value is empty (\"\"). Declaration public static bool IsEmpty(string value) Parameters Type Name Description System.String value The string to verify is empty. Returns Type Description System.Boolean true if the specified value is empty; otherwise, false . | Improve this Doc IsFalse(Boolean) Determines whether the specified value is false . Declaration public static bool IsFalse(bool value) Parameters Type Name Description System.Boolean value The value to verify is false . Returns Type Description System.Boolean true if the specified value is false ; otherwise, false . | Improve this Doc IsGreaterThan<T>(T, T) Determines whether the specified x is greater than y . Declaration public static bool IsGreaterThan<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Boolean true if x is greater than y ; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc IsGreaterThanOrEqual<T>(T, T) Determines whether the specified x is greater than or equal to y . Declaration public static bool IsGreaterThanOrEqual<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Boolean true if x is greater than or equal to y ; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc IsGuid(String) Determines whether the specified value has a valid format of a System.Guid . Declaration public static bool IsGuid(string value) Parameters Type Name Description System.String value The string to verify has a valid format of a System.Guid . Returns Type Description System.Boolean true if the specified value has a format of a System.Guid ; otherwise, false . Remarks This implementation only evaluates for GUID formats of: DigitFormat | BraceFormat | ParenthesisFormat , eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses. The reason not to include NumberFormat , eg. 32 digits is the possible unintended GUID result of a MD5 string representation. | Improve this Doc IsGuid(String, GuidFormats) Determines whether the specified value has a valid format of a System.Guid . Declaration public static bool IsGuid(string value, GuidFormats format) Parameters Type Name Description System.String value The string to verify has a valid format of a System.Guid . GuidFormats format A bitmask comprised of one or more GuidFormats that specify how the GUID parsing is conducted. Returns Type Description System.Boolean true if the specified value has a format of a System.Guid ; otherwise, false . | Improve this Doc IsHex(Char) Determines whether the specified value is hexadecimal. Declaration public static bool IsHex(char value) Parameters Type Name Description System.Char value The character to verify is hexadecimal. Returns Type Description System.Boolean true if the specified value is hexadecimal; otherwise, false . | Improve this Doc IsHex(String) Determines whether the specified value is hexadecimal. Declaration public static bool IsHex(string value) Parameters Type Name Description System.String value The string to verify is hexadecimal. Returns Type Description System.Boolean true if the specified value is hexadecimal; otherwise, false . | Improve this Doc IsLowerThan<T>(T, T) Determines whether the specified x is lower than y . Declaration public static bool IsLowerThan<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Boolean true if x is lower than y ; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc IsLowerThanOrEqual<T>(T, T) Determines whether the specified x is lower than or equal to y . Declaration public static bool IsLowerThanOrEqual<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Boolean true if x is lower than or equal to y ; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc IsNotDefault<T>(T) Determines whether the specified value does not have its initial default value. Declaration public static bool IsNotDefault<T>(T value) Parameters Type Name Description T value The object to verify does not have its initial default value. Returns Type Description System.Boolean true if the specified value does not have its initial default value; otherwise, false . Type Parameters Name Description T The type of the value. | Improve this Doc IsNotNull<T>(T) Determines whether the specified value is not null. Declaration public static bool IsNotNull<T>(T value) Parameters Type Name Description T value The object to verify is not null. Returns Type Description System.Boolean true if the specified value is not null; otherwise, false . Type Parameters Name Description T The type of the value. | Improve this Doc IsNotWithinRange<T>(T, T, T) Determines whether the specified x is outside the range of min and max . Declaration public static bool IsNotWithinRange<T>(T x, T min, T max) where T : struct, IConvertible Parameters Type Name Description T x The object to compare. T min The minimum value of x . T max The maximum value of x . Returns Type Description System.Boolean true if x is outside the range of min and max ; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc IsNull<T>(T) Determines whether the specified value is null. Declaration public static bool IsNull<T>(T value) Parameters Type Name Description T value The object to verify is null. Returns Type Description System.Boolean true if the specified value is null; otherwise, false . Type Parameters Name Description T The type of the value. | Improve this Doc IsNumeric(String) Determines whether the specified value can be evaluated as a number. Declaration public static bool IsNumeric(string value) Parameters Type Name Description System.String value The value to be evaluated. Returns Type Description System.Boolean true if the specified value can be evaluated as a number; otherwise, false . Remarks This method implements a default permitted format of value as System.Globalization.NumberStyles.Number . This method implements a default culture-specific formatting information about value specified to System.Globalization.CultureInfo.InvariantCulture . | Improve this Doc IsNumeric(String, NumberStyles) Determines whether the specified value can be evaluated as a number. Declaration public static bool IsNumeric(string value, NumberStyles styles) Parameters Type Name Description System.String value The value to be evaluated. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . Returns Type Description System.Boolean true if the specified value can be evaluated as a number; otherwise, false . Remarks This method implements a default culture-specific formatting information about value specified to System.Globalization.CultureInfo.InvariantCulture . | Improve this Doc IsNumeric(String, NumberStyles, IFormatProvider) Determines whether the specified value can be evaluated as a number. Declaration public static bool IsNumeric(string value, NumberStyles styles, IFormatProvider provider) Parameters Type Name Description System.String value The value to be evaluated. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . System.IFormatProvider provider An System.IFormatProvider that supplies culture-specific formatting information about value . Returns Type Description System.Boolean true if the specified value can be evaluated as a number; otherwise, false . | Improve this Doc IsTrue(Boolean) Determines whether the specified value is true . Declaration public static bool IsTrue(bool value) Parameters Type Name Description System.Boolean value The value to verify is true . Returns Type Description System.Boolean true if the specified value is true ; otherwise, false . | Improve this Doc IsWhiteSpace(String) Determines whether the specified value consist only of white-space characters. Declaration public static bool IsWhiteSpace(string value) Parameters Type Name Description System.String value The string to verify consist only of white-space characters. Returns Type Description System.Boolean true if the specified value consist only of white-space characters; otherwise, false . | Improve this Doc IsWithinRange<T>(T, T, T) Determines whether the specified x is within range of min and max . Declaration public static bool IsWithinRange<T>(T x, T min, T max) where T : struct, IConvertible Parameters Type Name Description T x The object to compare. T min The minimum value of x . T max The maximum value of x . Returns Type Description System.Boolean true if x is within range of min and max ; otherwise false . Type Parameters Name Description T The type of objects to compare. | Improve this Doc TernaryIf<TResult>(Boolean, Func<TResult>, Func<TResult>) Returns one of two values depending on the value of condition . Declaration public static TResult TernaryIf<TResult>(bool condition, Func<TResult> firstExpression, Func<TResult> secondExpression) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked and becomes the result; when false , the secondExpression is invoked and becomes the result. System.Func <TResult> firstExpression The function delegate that is invoked when condition is true . System.Func <TResult> secondExpression The function delegate that is invoked when condition is false . Returns Type Description TResult The result of either function delegate firstExpression or function delegate secondExpression . Type Parameters Name Description TResult The type of the result. | Improve this Doc TernaryIf<T, TResult>(Boolean, Func<T, TResult>, Func<T, TResult>, T) Returns one of two values depending on the value of condition . Declaration public static TResult TernaryIf<T, TResult>(bool condition, Func<T, TResult> firstExpression, Func<T, TResult> secondExpression, T arg) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked and becomes the result; when false , the secondExpression is invoked and becomes the result. System.Func <T, TResult> firstExpression The function delegate that is invoked when condition is true . System.Func <T, TResult> secondExpression The function delegate that is invoked when condition is false . T arg The parameter of the function delegates firstExpression and secondExpression . Returns Type Description TResult The result of either function delegate firstExpression or function delegate secondExpression . Type Parameters Name Description T The type of the parameter of the function delegates firstExpression and secondExpression . TResult The type of the result. | Improve this Doc TernaryIf<T1, T2, TResult>(Boolean, Func<T1, T2, TResult>, Func<T1, T2, TResult>, T1, T2) Returns one of two values depending on the value of condition . Declaration public static TResult TernaryIf<T1, T2, TResult>(bool condition, Func<T1, T2, TResult> firstExpression, Func<T1, T2, TResult> secondExpression, T1 arg1, T2 arg2) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked and becomes the result; when false , the secondExpression is invoked and becomes the result. System.Func <T1, T2, TResult> firstExpression The function delegate that is invoked when condition is true . System.Func <T1, T2, TResult> secondExpression The function delegate that is invoked when condition is false . T1 arg1 The first parameter of the function delegates firstExpression and secondExpression . T2 arg2 The second parameter of the function delegates firstExpression and secondExpression . Returns Type Description TResult The result of either function delegate firstExpression or function delegate secondExpression . Type Parameters Name Description T1 The type of the first parameter of the function delegates firstExpression and secondExpression . T2 The type of the second parameter of the function delegates firstExpression and secondExpression . TResult The type of the result. | Improve this Doc TernaryIf<T1, T2, T3, TResult>(Boolean, Func<T1, T2, T3, TResult>, Func<T1, T2, T3, TResult>, T1, T2, T3) Returns one of two values depending on the value of condition . Declaration public static TResult TernaryIf<T1, T2, T3, TResult>(bool condition, Func<T1, T2, T3, TResult> firstExpression, Func<T1, T2, T3, TResult> secondExpression, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked and becomes the result; when false , the secondExpression is invoked and becomes the result. System.Func <T1, T2, T3, TResult> firstExpression The function delegate that is invoked when condition is true . System.Func <T1, T2, T3, TResult> secondExpression The function delegate that is invoked when condition is false . T1 arg1 The first parameter of the function delegates firstExpression and secondExpression . T2 arg2 The second parameter of the function delegates firstExpression and secondExpression . T3 arg3 The third parameter of the function delegates firstExpression and secondExpression . Returns Type Description TResult The result of either function delegate firstExpression or function delegate secondExpression . Type Parameters Name Description T1 The type of the first parameter of the function delegates firstExpression and secondExpression . T2 The type of the second parameter of the function delegates firstExpression and secondExpression . T3 The type of the third parameter of the function delegates firstExpression and secondExpression . TResult The type of the result. | Improve this Doc TernaryIf<T1, T2, T3, T4, TResult>(Boolean, Func<T1, T2, T3, T4, TResult>, Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Returns one of two values depending on the value of condition . Declaration public static TResult TernaryIf<T1, T2, T3, T4, TResult>(bool condition, Func<T1, T2, T3, T4, TResult> firstExpression, Func<T1, T2, T3, T4, TResult> secondExpression, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked and becomes the result; when false , the secondExpression is invoked and becomes the result. System.Func <T1, T2, T3, T4, TResult> firstExpression The function delegate that is invoked when condition is true . System.Func <T1, T2, T3, T4, TResult> secondExpression The function delegate that is invoked when condition is false . T1 arg1 The first parameter of the function delegates firstExpression and secondExpression . T2 arg2 The second parameter of the function delegates firstExpression and secondExpression . T3 arg3 The third parameter of the function delegates firstExpression and secondExpression . T4 arg4 The fourth parameter of the function delegates firstExpression and secondExpression . Returns Type Description TResult The result of either function delegate firstExpression or function delegate secondExpression . Type Parameters Name Description T1 The type of the first parameter of the function delegates firstExpression and secondExpression . T2 The type of the second parameter of the function delegates firstExpression and secondExpression . T3 The type of the third parameter of the function delegates firstExpression and secondExpression . T4 The type of the fourth parameter of the function delegates firstExpression and secondExpression . TResult The type of the result. | Improve this Doc TernaryIf<T1, T2, T3, T4, T5, TResult>(Boolean, Func<T1, T2, T3, T4, T5, TResult>, Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Returns one of two values depending on the value of condition . Declaration public static TResult TernaryIf<T1, T2, T3, T4, T5, TResult>(bool condition, Func<T1, T2, T3, T4, T5, TResult> firstExpression, Func<T1, T2, T3, T4, T5, TResult> secondExpression, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Boolean condition When true , the firstExpression is invoked and becomes the result; when false , the secondExpression is invoked and becomes the result. System.Func <T1, T2, T3, T4, T5, TResult> firstExpression The function delegate that is invoked when condition is true . System.Func <T1, T2, T3, T4, T5, TResult> secondExpression The function delegate that is invoked when condition is false . T1 arg1 The first parameter of the function delegates firstExpression and secondExpression . T2 arg2 The second parameter of the function delegates firstExpression and secondExpression . T3 arg3 The third parameter of the function delegates firstExpression and secondExpression . T4 arg4 The fourth parameter of the function delegates firstExpression and secondExpression . T5 arg5 The fifth parameter of the function delegates firstExpression and secondExpression . Returns Type Description TResult The result of either function delegate firstExpression or function delegate secondExpression . Type Parameters Name Description T1 The type of the first parameter of the function delegates firstExpression and secondExpression . T2 The type of the second parameter of the function delegates firstExpression and secondExpression . T3 The type of the third parameter of the function delegates firstExpression and secondExpression . T4 The type of the fourth parameter of the function delegates firstExpression and secondExpression . T5 The type of the fifth parameter of the function delegates firstExpression and secondExpression . TResult The type of the result. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.html": {
    "href": "api/core/Cuemon.Collections.html",
    "title": "Namespace Cuemon.Collections | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Collections Assembly : Cuemon.Core.dll Classes DataPairCollection Provides a collection of DataPair . DataPairDictionary Provides a collection of DataPair . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.PagedSettings.html": {
    "href": "api/core/Cuemon.Collections.Generic.PagedSettings.html",
    "title": "Class PagedSettings | Cuemon .NET Standard",
    "keywords": "Class PagedSettings Specifies a set of features to support on the PagedCollection object. This class cannot be inherited. Inheritance System.Object PagedSettings Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public sealed class PagedSettings Constructors | Improve this Doc PagedSettings() Initializes a new instance of the PagedSettings class. Declaration public PagedSettings() Properties | Improve this Doc Data Gets a collection of DataPair elements that provide information about arbitrary data. Declaration public DataPairDictionary Data { get; } Property Value Type Description DataPairDictionary The collection of DataPair elements that provide information about arbitrary data. | Improve this Doc DefaultPageSize Gets or sets the default page size of the PagedSettings class. Default is 25. Declaration public static int DefaultPageSize { get; set; } Property Value Type Description System.Int32 The default page size of the PagedSettings class. | Improve this Doc HasSearchCriteriaDefined Gets a value indicating whether this instance was invoked with a search operation. Declaration public bool HasSearchCriteriaDefined { get; } Property Value Type Description System.Boolean true if this instance invoked with a search operation; otherwise, false . | Improve this Doc HasSortOrderByDefined Gets a value indicating whether this instance was invoked with a sorting operation. Declaration public bool HasSortOrderByDefined { get; } Property Value Type Description System.Boolean true if this instance invoked with a sorting operation.; otherwise, false . | Improve this Doc PageNumber Gets or sets the one-based number of the page to iterate. Declaration public int PageNumber { get; set; } Property Value Type Description System.Int32 The one-based number of the page to iterate. | Improve this Doc PageSize Gets or sets the number of elements to display on a page. Declaration public int PageSize { get; set; } Property Value Type Description System.Int32 The number of elements to display on a page. | Improve this Doc SearchCriteria Gets the search criteria of this instance. Declaration public string SearchCriteria { get; set; } Property Value Type Description System.String The search criteria of this instance. | Improve this Doc SortOrderBy Gets the order by sorting of this instance. Declaration public string SortOrderBy { get; set; } Property Value Type Description System.String The order by sorting of this instance. | Improve this Doc SortOrderDirection Gets the direction of the order by sorting of this instance. Declaration public SortOrder SortOrderDirection { get; set; } Property Value Type Description SortOrder The direction of the order by sorting of this instance. Methods | Improve this Doc GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.ListUtility.html": {
    "href": "api/core/Cuemon.Collections.Generic.ListUtility.html",
    "title": "Class ListUtility | Cuemon .NET Standard",
    "keywords": "Class ListUtility This utility class is designed to make System.Collections.Generic.IList<T> related conversions easier to work with. Inheritance System.Object ListUtility Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class ListUtility Methods | Improve this Doc HasIndex<TSource>(Int32, IList<TSource>) Determines whether the elements of the System.Collections.Generic.IList<T> is within the range of the index . Declaration public static bool HasIndex<TSource>(int index, IList<TSource> elements) Parameters Type Name Description System.Int32 index The index to find. System.Collections.Generic.IList <TSource> elements The elements of the System.Collections.Generic.IList<T> . Returns Type Description System.Boolean true if the specified index is within the range of the elements ; otherwise, false . Type Parameters Name Description TSource The type of elements in the System.Collections.Generic.IList<T> . Exceptions Type Condition System.ArgumentNullException elements is null. | Improve this Doc Next<TSource>(Int32, IList<TSource>) Returns the next element of elements relative to index , or the last element of elements if index is equal or greater than System.Collections.Generic.ICollection<T>.Count . Declaration public static TSource Next<TSource>(int index, IList<TSource> elements) Parameters Type Name Description System.Int32 index The index of which to advance to the next element from. System.Collections.Generic.IList <TSource> elements The elements, relative to index , to return the next element of. Returns Type Description TSource default(TSource) if index is equal or greater than System.Collections.Generic.ICollection<T>.Count ; otherwise the next element of elements relative to index . Type Parameters Name Description TSource The type of elements in the System.Collections.Generic.IList<T> . Exceptions Type Condition System.ArgumentOutOfRangeException index is less than 0. | Improve this Doc Previous<TSource>(Int32, IList<TSource>) Returns the previous element of elements relative to index , or the first or last element of elements if index is equal, greater or lower than System.Collections.Generic.ICollection<T>.Count . Declaration public static TSource Previous<TSource>(int index, IList<TSource> elements) Parameters Type Name Description System.Int32 index The index of which to advance to the previous element from. System.Collections.Generic.IList <TSource> elements The elements, relative to index , to return the previous element of. Returns Type Description TSource default(TSource) if index is equal, greater or lower than System.Collections.Generic.ICollection<T>.Count ; otherwise the previous element of elements relative to index . Type Parameters Name Description TSource The type of elements in the System.Collections.Generic.IList<T> . Exceptions Type Condition System.ArgumentOutOfRangeException index is less than 0. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.DictionaryConverterExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.DictionaryConverterExtensions.html",
    "title": "Class DictionaryConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class DictionaryConverterExtensions This is an extension implementation of the DictionaryConverter class. Inheritance System.Object DictionaryConverterExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class DictionaryConverterExtensions Methods | Improve this Doc ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Creates a System.Collections.Generic.Dictionary<TKey, TValue> from the specified source sequence. Declaration public static IDictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> source The sequence to create a System.Collections.Generic.Dictionary<TKey, TValue> from. Returns Type Description System.Collections.Generic.IDictionary <TKey, TValue> A System.Collections.Generic.Dictionary<TKey, TValue> that is equivalent to the specified source sequence. Type Parameters Name Description TKey The type of keys in the source . TValue The type of values in the source . Exceptions Type Condition System.ArgumentNullException source is null. System.ArgumentException source contains at least one System.Collections.Generic.KeyValuePair<TKey,TValue> that produces duplicate keys for two elements. | Improve this Doc ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>) Creates a System.Collections.Generic.Dictionary<TKey, TValue> from the specified source sequence. Declaration public static IDictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> source The sequence to create a System.Collections.Generic.Dictionary<TKey, TValue> from. System.Collections.Generic.IEqualityComparer <TKey> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing keys. Returns Type Description System.Collections.Generic.IDictionary <TKey, TValue> A System.Collections.Generic.Dictionary<TKey, TValue> that is equivalent to the specified source sequence. Type Parameters Name Description TKey The type of keys in the source . TValue The type of values in the source . Exceptions Type Condition System.ArgumentNullException source is null - or - comparer is null. System.ArgumentException source contains at least one System.Collections.Generic.KeyValuePair<TKey,TValue> that produces duplicate keys for two elements. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.AuthenticationOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.AuthenticationOptions.html",
    "title": "Class AuthenticationOptions | Cuemon .NET Standard",
    "keywords": "Class AuthenticationOptions Base options for all authentication middleware. Inheritance System.Object AuthenticationOptions BasicAuthenticationOptions DigestAccessAuthenticationOptions HmacAuthenticationOptions Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public abstract class AuthenticationOptions Constructors | Improve this Doc AuthenticationOptions() Initializes a new instance of the AuthenticationOptions class. Declaration protected AuthenticationOptions() Properties | Improve this Doc HttpNotAuthorizedBody Gets or sets the function delegate for retrieving content for the body of an unauthorized request. Declaration public Func<byte[]> HttpNotAuthorizedBody { get; set; } Property Value Type Description System.Func < System.Byte []> A System.Func<TResult> for retrieving content for the body of an unauthorized request. | Improve this Doc RequireSecureConnection Gets or sets a value indicating whether a HTTP connection is required to use secure sockets (that is, HTTPS). Declaration public bool RequireSecureConnection { get; set; } Property Value Type Description System.Boolean true if the HTTP connection is required to use secure sockets (that is, HTTPS); otherwise, false . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.JsonReaderResultExtensions.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.JsonReaderResultExtensions.html",
    "title": "Class JsonReaderResultExtensions | Cuemon .NET Standard",
    "keywords": "Class JsonReaderResultExtensions Extension methods for the JsonReaderResult . Inheritance System.Object JsonReaderResultExtensions Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public static class JsonReaderResultExtensions : object Methods | Improve this Doc FirstProperty(IEnumerable<JsonReaderResult>, String) Returns the first JsonReaderResult matching the specified propertyName , or a default value if no property is found. Declaration public static JsonReaderResult FirstProperty(this IEnumerable<JsonReaderResult> source, string propertyName) Parameters Type Name Description IEnumerable < JsonReaderResult > source The sequence to return the first property value of. System.String propertyName The property name to find in source . Returns Type Description JsonReaderResult The first JsonReaderResult of the input sequence, or null if the sequence does not contains the specified propertyName . | Improve this Doc SingleProperty(IEnumerable<JsonReaderResult>, String) Returns the only JsonReaderResult matching the specified propertyName ; this method throws an exception if more than one property is found. Declaration public static JsonReaderResult SingleProperty(this IEnumerable<JsonReaderResult> source, string propertyName) Parameters Type Name Description IEnumerable < JsonReaderResult > source The sequence to return the single property value of. System.String propertyName The property name to find in source . Returns Type Description JsonReaderResult The single JsonReaderResult of the input sequence, or null if the sequence does not contains the specified propertyName . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.JsonReaderResult.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.JsonReaderResult.html",
    "title": "Class JsonReaderResult | Cuemon .NET Standard",
    "keywords": "Class JsonReaderResult Specifies a result set of a JSON reader operation. Inheritance System.Object JsonReaderResult Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public class JsonReaderResult : object Properties | Improve this Doc Children Gets the children of the JSON token. Declaration public IList<JsonReaderResult> Children { get; } Property Value Type Description IList < JsonReaderResult > The children of the JSON token. | Improve this Doc Parent Gets the parent of the JSON token. Declaration public JsonReaderResult Parent { get; } Property Value Type Description JsonReaderResult The parent of the JSON token. | Improve this Doc Path Gets the path of the JSON token. Declaration public string Path { get; } Property Value Type Description System.String The path of the JSON token. | Improve this Doc PropertyName Gets the name of the JSON token property. Declaration public string PropertyName { get; } Property Value Type Description System.String The name of the JSON token property. | Improve this Doc Type Gets the CLR type of the JSON token. Declaration public Type Type { get; } Property Value Type Description Type The CLR type of the JSON token. | Improve this Doc Value Gets the value of the JSON token. Declaration public object Value { get; } Property Value Type Description System.Object The value of the JSON token. Methods | Improve this Doc ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.JsonReaderParser.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.JsonReaderParser.html",
    "title": "Class JsonReaderParser | Cuemon .NET Standard",
    "keywords": "Class JsonReaderParser Provides access to factory methods for creating JsonReaderParser<T> instances. Inheritance System.Object JsonReaderParser Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public static class JsonReaderParser : object Methods | Improve this Doc Create<T>(T, JsonReader) Creates a new JsonReaderParser<T> instance. Declaration public static JsonReaderParser<T> Create<T>(T instance, JsonReader reader) Parameters Type Name Description T instance An initialized instance of T . JsonReader reader The to apply to instance . Returns Type Description JsonReaderParser <T> A new instance of JsonReaderParser<T> . Type Parameters Name Description T The type of the object to apply a JSON document. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.html": {
    "href": "api/core/Cuemon.Net.html",
    "title": "Namespace Cuemon.Net | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Net Assembly : Cuemon.Net.dll Classes HttpStatusCodeExtensions Extension methods for the System.Net.HttpStatusCode enum. NetDependency This NetDependency class will monitor any changes occurred to a Uniform Resource Identifier while notifying subscribing objects. NetWatcher A Watcher implementation, that can monitor and signal changes of one or more URI locations by raising the Changed event. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Messaging.DynamicCorrelation.html": {
    "href": "api/core/Cuemon.Messaging.DynamicCorrelation.html",
    "title": "Class DynamicCorrelation | Cuemon .NET Standard",
    "keywords": "Class DynamicCorrelation Provides a factory based way to create and wrap an ICorrelation implementation. Inheritance System.Object DynamicCorrelation Namespace : Cuemon.Messaging Assembly : Cuemon.Core.dll Syntax public static class DynamicCorrelation Methods | Improve this Doc Create(Func<String>) Creates a dynamic implementation of ICorrelation . Declaration public static ICorrelation Create(Func<string> correlationIdProvider) Parameters Type Name Description System.Func < System.String > correlationIdProvider The function delegate which provides a unique identifier of a request or message. Returns Type Description ICorrelation A dynamic ICorrelation implementation. | Improve this Doc Create(String) Creates a dynamic implementation of ICorrelation . Declaration public static ICorrelation Create(string correlationId) Parameters Type Name Description System.String correlationId The unique identifier of a request or message. Returns Type Description ICorrelation A dynamic ICorrelation implementation. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.MappingExtensions.html": {
    "href": "api/core/Cuemon.MappingExtensions.html",
    "title": "Class MappingExtensions | Cuemon .NET Standard",
    "keywords": "Class MappingExtensions This is an extension implementation of the most common methods on the Mapping class. Inheritance System.Object MappingExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class MappingExtensions Methods | Improve this Doc Add(ICollection<Mapping>, Int32, Int32) Creates a new Mapping using ordinals to specify both sourceIndex and destinationIndex columns/fields/items which is added to the specified collection of mappings. Declaration public static void Add(this ICollection<Mapping> collection, int sourceIndex, int destinationIndex) Parameters Type Name Description System.Collections.Generic.ICollection < Mapping > collection A collection of Mapping elements. System.Int32 sourceIndex The ordinal position of the source column/field/item within the data source. System.Int32 destinationIndex The ordinal position of the destination column/field/item within the data destination. | Improve this Doc Add(ICollection<Mapping>, Int32, String) Creates a new Mapping using an ordinal for the sourceIndex and a column/field/item name to describe the destination which is added to the specified collection of mappings. Declaration public static void Add(this ICollection<Mapping> collection, int sourceIndex, string destination) Parameters Type Name Description System.Collections.Generic.ICollection < Mapping > collection A collection of Mapping elements. System.Int32 sourceIndex The ordinal position of the source column/field/item within the data source. System.String destination The name of the destination column/field/item within the data destination. | Improve this Doc Add(ICollection<Mapping>, String, Int32) Creates a new Mapping using a column/field/item name to describe the source and an ordinal to specify the destinationIndex which is added to the specified collection of mappings. Declaration public static void Add(this ICollection<Mapping> collection, string source, int destinationIndex) Parameters Type Name Description System.Collections.Generic.ICollection < Mapping > collection A collection of Mapping elements. System.String source The name of the column/field/item within the data source. System.Int32 destinationIndex The ordinal position of the destination column/field/item within the data destination. | Improve this Doc Add(ICollection<Mapping>, String, String) Creates a new Mapping using column/field/item names to refer to a source and a destination which is added to the specified collection of mappings. Declaration public static void Add(this ICollection<Mapping> collection, string source, string destination) Parameters Type Name Description System.Collections.Generic.ICollection < Mapping > collection A collection of Mapping elements. System.String source The name of the column/field/item within the data source. System.String destination The name of the destination column/field/item within the data destination. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ChecksumStrength.html": {
    "href": "api/core/Cuemon.Integrity.ChecksumStrength.html",
    "title": "Enum ChecksumStrength | Cuemon .NET Standard",
    "keywords": "Enum ChecksumStrength Specifies the validation strength of a cache checksum. Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public enum ChecksumStrength Fields Name Description None Indicates that no checksum was specified. Strong Indicates that a strong, byte-for-byte checksum was specified. Weak Indicates that a weak, semantic equivalent checksum was specified. Extension Methods ByteConverterExtensions.ToByteArray<ChecksumStrength>() ConverterExtensions.ParseWith<ChecksumStrength, TResult>(Func<ChecksumStrength, TResult>) ConverterExtensions.ParseWith<ChecksumStrength, T, TResult>(Func<ChecksumStrength, T, TResult>, T) ConverterExtensions.ParseWith<ChecksumStrength, T1, T2, TResult>(Func<ChecksumStrength, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<ChecksumStrength, T1, T2, T3, TResult>(Func<ChecksumStrength, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<ChecksumStrength, T1, T2, T3, T4, TResult>(Func<ChecksumStrength, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<ChecksumStrength, T1, T2, T3, T4, T5, TResult>(Func<ChecksumStrength, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<ChecksumStrength, T1, T2, T3, T4, T5, T6, TResult>(Func<ChecksumStrength, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<ChecksumStrength, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<ChecksumStrength, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<ChecksumStrength, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<ChecksumStrength, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<ChecksumStrength, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<ChecksumStrength, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<ChecksumStrength>() DelegateUtilityExtensions.DynamicWrap<ChecksumStrength>() TweakerExtensions.Adjust<ChecksumStrength>(Func<ChecksumStrength, ChecksumStrength>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<ChecksumStrength>() WrapperExtensions.UseWrapper<ChecksumStrength>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<ChecksumStrength>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<ChecksumStrength>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IData.html": {
    "href": "api/core/Cuemon.IData.html",
    "title": "Interface IData | Cuemon .NET Standard",
    "keywords": "Interface IData Provides a way to supply information about the class implementing this interface. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public interface IData Properties | Improve this Doc Data Gets a collection of key/value pairs that provide information about this class. Declaration IDictionary<string, object> Data { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > An object that implements the System.Collections.Generic.IDictionary<TKey, TValue> interface and contains a collection of key/value pairs. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.HorizontalDirection.html": {
    "href": "api/core/Cuemon.HorizontalDirection.html",
    "title": "Enum HorizontalDirection | Cuemon .NET Standard",
    "keywords": "Enum HorizontalDirection Specifies a set of values defining a horizontal direction. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum HorizontalDirection Fields Name Description Left Indicates a vertical direction of Left. Right Indicates a vertical direction of Right. Extension Methods ByteConverterExtensions.ToByteArray<HorizontalDirection>() ConverterExtensions.ParseWith<HorizontalDirection, TResult>(Func<HorizontalDirection, TResult>) ConverterExtensions.ParseWith<HorizontalDirection, T, TResult>(Func<HorizontalDirection, T, TResult>, T) ConverterExtensions.ParseWith<HorizontalDirection, T1, T2, TResult>(Func<HorizontalDirection, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<HorizontalDirection, T1, T2, T3, TResult>(Func<HorizontalDirection, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<HorizontalDirection, T1, T2, T3, T4, TResult>(Func<HorizontalDirection, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<HorizontalDirection, T1, T2, T3, T4, T5, TResult>(Func<HorizontalDirection, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<HorizontalDirection, T1, T2, T3, T4, T5, T6, TResult>(Func<HorizontalDirection, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<HorizontalDirection, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<HorizontalDirection, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<HorizontalDirection, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<HorizontalDirection, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<HorizontalDirection, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<HorizontalDirection, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<HorizontalDirection>() DelegateUtilityExtensions.DynamicWrap<HorizontalDirection>() TweakerExtensions.Adjust<HorizontalDirection>(Func<HorizontalDirection, HorizontalDirection>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<HorizontalDirection>() WrapperExtensions.UseWrapper<HorizontalDirection>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<HorizontalDirection>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<HorizontalDirection>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.FileVersionInfoExtensions.html": {
    "href": "api/core/Cuemon.Diagnostics.FileVersionInfoExtensions.html",
    "title": "Class FileVersionInfoExtensions | Cuemon .NET Standard",
    "keywords": "Class FileVersionInfoExtensions Extension methods for the System.Diagnostics.FileVersionInfo class. Inheritance System.Object FileVersionInfoExtensions Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public static class FileVersionInfoExtensions Methods | Improve this Doc ToFileVersion(FileVersionInfo) Returns a System.Version from the specified fvi . Declaration public static Version ToFileVersion(this FileVersionInfo fvi) Parameters Type Name Description System.Diagnostics.FileVersionInfo fvi An instance of System.Diagnostics.FileVersionInfo . Returns Type Description System.Version A System.Version that represents the file version that the System.Diagnostics.FileVersionInfo is distributed with. Remarks Should the specified fvi not contain any file version, a System.Version initialized to 0.0.0.0 is returned. | Improve this Doc ToProductVersion(FileVersionInfo) Returns a System.Version from the specified fvi . Declaration public static Version ToProductVersion(this FileVersionInfo fvi) Parameters Type Name Description System.Diagnostics.FileVersionInfo fvi An instance of System.Diagnostics.FileVersionInfo . Returns Type Description System.Version A System.Version that represents the product version that the System.Diagnostics.FileVersionInfo is distributed with. Remarks Should the specified fvi not contain any product version, a System.Version initialized to 0.0.0.0 is returned. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.ExceptionDescriptorOptions.html": {
    "href": "api/core/Cuemon.Diagnostics.ExceptionDescriptorOptions.html",
    "title": "Class ExceptionDescriptorOptions | Cuemon .NET Standard",
    "keywords": "Class ExceptionDescriptorOptions Specifies options that is related to ExceptionDescriptor operations. Inheritance System.Object ExceptionDescriptorOptions Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public class ExceptionDescriptorOptions Constructors | Improve this Doc ExceptionDescriptorOptions() Initializes a new instance of the ExceptionDescriptorOptions class. Declaration public ExceptionDescriptorOptions() Properties | Improve this Doc HelpLink Gets or sets the optional link to a help page. Declaration public Uri HelpLink { get; set; } Property Value Type Description System.Uri The optional link to a help page. | Improve this Doc UseBaseException Gets or sets a value indicating whether to expose only the base exception that caused the faulted operation. Declaration public bool UseBaseException { get; set; } Property Value Type Description System.Boolean true if only the base exception is exposed; otherwise, false , to include the entire exception tree. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also ExceptionDescriptor (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.html": {
    "href": "api/core/Cuemon.Data.html",
    "title": "Namespace Cuemon.Data | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Data Assembly : Cuemon.Data.dll Classes BulkCopyDataReader Provides a way of copying an existing object implementing the System.Data.Common.DbDataReader interface to a filtered forward-only stream of rows that is mapped for bulk upload. This class cannot be inherited. DataAdapter An abstract class representing the actual data binding to a data source. DataAdapterEventArgs Provides data for DataAdapter related operations. DataAdapterException The exception that is thrown when a DataAdapter operation is in an invalid state. DataCommand Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database. DataConnection Represents a connection to a database. DataDependency This DataDependency class will monitor any changes occurred to an underlying data source while notifying subscribing objects. DataManager The DataManager is an abstract class in the Cuemon.Data namespace that can be used to implement execute commands of different database providers. DataParameterEqualityComparer Provides an equality comparison for System.Data.Common.DbParameter objects. DataTransfer Provides a way to convert an System.Data.IDataReader implementation to a table-like data transfer object. DataTransferColumn Represents the column meta information of a table-row in a database. This class cannot be inherited. DataTransferColumnCollection Represents a collection of DataTransferColumn objects for a table in a database. This class cannot be inherited. DataTransferExtensions This is an extensions implementation of the most common methods on the DataTransfer class. DataTransferRow Represents the row of a table in a database. This class cannot be inherited. DataTransferRowCollection Represents a collection of DataTransferRow objects for a table in a database. This class cannot be inherited. DataTransferSorter Provides a default implementation of a DataTransferRow sorter. This class cannot be inherited. DataWatcher A Watcher implementation, that can monitor and signal changes of one or more data locations by raising the Changed event. DbColumn Represents a database column. InOperator<T> Provides a safe way to include a Transact-SQL WHERE clause with an IN operator. QueryBuilder An abstract class for building T-SQL statements from table and columns definitions. QueryUtility This utility class is designed to make query related operations easier to work with. StringDataReader Provides a generic way of reading a forward-only stream of rows from a System.String based data source. This is an abstract class. UniqueIndexViolationException The exception that is thrown when a unique index violation occurs from a data source. Interfaces IDataCommand Represents a statement that is executed while an open connection to a data source exists. IDataConnection Represents a connection to a data source. Enums QueryFormat Identifies the format for a query fragment. QueryInsertAction Defines the available insert actions for the DataAdapter class. QueryType Identifies the type of data operation performed by a query against a data source. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.XmlClient.html": {
    "href": "api/core/Cuemon.Data.XmlClient.html",
    "title": "Namespace Cuemon.Data.XmlClient | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Data.XmlClient Assembly : Cuemon.Data.XmlClient.dll Classes XmlDataReader Provides a way of reading a forward-only stream of rows from an XML based data source. This class cannot be inherited. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TypeCodeConverter.html": {
    "href": "api/core/Cuemon.TypeCodeConverter.html",
    "title": "Class TypeCodeConverter | Cuemon .NET Standard",
    "keywords": "Class TypeCodeConverter This utility class is designed to make System.TypeCode related conversions easier to work with. Inheritance System.Object TypeCodeConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TypeCodeConverter Methods | Improve this Doc FromType(Type) Converts the specified source to its equivalent System.TypeCode representation. Declaration public static TypeCode FromType(Type source) Parameters Type Name Description System.Type source The System.Type to be converted. Returns Type Description System.TypeCode A System.TypeCode representation of the specified source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TypeArgumentOutOfRangeException.html": {
    "href": "api/core/Cuemon.TypeArgumentOutOfRangeException.html",
    "title": "Class TypeArgumentOutOfRangeException | Cuemon .NET Standard",
    "keywords": "Class TypeArgumentOutOfRangeException The exception that is thrown when the value of an type argument is outside the allowable range of values as defined by the invoked method. Inheritance System.Object System.Exception System.ArgumentException System.ArgumentOutOfRangeException TypeArgumentOutOfRangeException Inherited Members System.ArgumentOutOfRangeException.ActualValue System.ArgumentOutOfRangeException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class TypeArgumentOutOfRangeException : ArgumentOutOfRangeException Constructors | Improve this Doc TypeArgumentOutOfRangeException() Initializes a new instance of the TypeArgumentOutOfRangeException class. Declaration public TypeArgumentOutOfRangeException() | Improve this Doc TypeArgumentOutOfRangeException(String) Initializes a new instance of the TypeArgumentOutOfRangeException class. Declaration public TypeArgumentOutOfRangeException(string typeParamName) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. | Improve this Doc TypeArgumentOutOfRangeException(String, Exception) Initializes a new instance of the TypeArgumentOutOfRangeException class. Declaration public TypeArgumentOutOfRangeException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. | Improve this Doc TypeArgumentOutOfRangeException(String, String) Initializes a new instance of the TypeArgumentOutOfRangeException class. Declaration public TypeArgumentOutOfRangeException(string typeParamName, string message) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.String message The message that describes the error. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) ExceptionUtilityExtensions.Refine(Exception, MethodBase, Object[]) ExceptionUtilityExtensions.Refine(Exception, MethodDescriptor, Object[]) ExceptionUtilityExtensions.ParseException<TResult>(Exception) ExceptionUtilityExtensions.Flatten(Exception) ExceptionUtilityExtensions.Flatten(Exception, Type) StringConverterExtensions.ToEncodedString(Exception, Boolean) StringConverterExtensions.ToEncodedString(Exception, Boolean, Encoding) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.AssemblyUtility.html": {
    "href": "api/core/Cuemon.Reflection.AssemblyUtility.html",
    "title": "Class AssemblyUtility | Cuemon .NET Standard",
    "keywords": "Class AssemblyUtility This utility class is designed to make common System.Reflection.Assembly related operations easier to work with. Inheritance System.Object AssemblyUtility Namespace : Cuemon.Reflection Assembly : Cuemon.Reflection.dll Syntax public static class AssemblyUtility Methods | Improve this Doc GetAssemblyVersion(Assembly) Returns a System.Version that represents the version number of the specified assembly . Declaration public static Version GetAssemblyVersion(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to resolve a System.Version from. Returns Type Description System.Version A System.Version that represents the version number of the specified assembly . | Improve this Doc GetFileVersion(Assembly) Returns a System.Version that represents the file version number of the specified assembly . Declaration public static Version GetFileVersion(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to resolve a System.Version from. Returns Type Description System.Version A System.Version that represents the file version number of the specified assembly . | Improve this Doc GetProductVersion(Assembly) Returns a System.Version that represents the version of the product this assembly is distributed with. Declaration public static Version GetProductVersion(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to resolve a System.Version from. Returns Type Description System.Version A System.Version that represents the version of the product this assembly is distributed with. | Improve this Doc IsDebugBuild(Assembly) Determines whether the specified assembly is a debug build. Declaration public static bool IsDebugBuild(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to parse and determine whether it is a debug build or not. Returns Type Description System.Boolean true if the specified assembly is a debug build; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.ActivatorUtility.html": {
    "href": "api/core/Cuemon.Reflection.ActivatorUtility.html",
    "title": "Class ActivatorUtility | Cuemon .NET Standard",
    "keywords": "Class ActivatorUtility Provide ways to work more efficient with System.Activator related tasks. Inheritance System.Object ActivatorUtility Namespace : Cuemon.Reflection Assembly : Cuemon.Reflection.dll Syntax public static class ActivatorUtility Methods | Improve this Doc CreateInstance<TResult>() Creates an instance of TResult using the parameterless constructor. Declaration public static TResult CreateInstance<TResult>() Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description TResult The type to create. | Improve this Doc CreateInstance<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(T1, T2, T3, T4, T5, T6, T7, T8, T9) Creates an instance of TResult using a constructor of nine parameters. Declaration public static TResult CreateInstance<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. T5 arg5 The fifth parameter of the constructor. T6 arg6 The sixth parameter of the constructor. T7 arg7 The seventh parameter of the constructor. T8 arg8 The eighth parameter of the constructor. T9 arg9 The ninth parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. T5 The type of the fifth parameter of the constructor. T6 The type of the sixth parameter of the constructor. T7 The type of the seventh parameter of the constructor. T8 The type of the eighth parameter of the constructor. T9 The type of the ninth parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Creates an instance of TResult using a constructor of ten parameters. Declaration public static TResult CreateInstance<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. T5 arg5 The fifth parameter of the constructor. T6 arg6 The sixth parameter of the constructor. T7 arg7 The seventh parameter of the constructor. T8 arg8 The eighth parameter of the constructor. T9 arg9 The ninth parameter of the constructor. T10 arg10 The tenth parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. T5 The type of the fifth parameter of the constructor. T6 The type of the sixth parameter of the constructor. T7 The type of the seventh parameter of the constructor. T8 The type of the eighth parameter of the constructor. T9 The type of the ninth parameter of the constructor. T10 The type of the tenth parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T, TResult>(T) Creates an instance of TResult using a constructor of one parameters. Declaration public static TResult CreateInstance<T, TResult>(T arg) Parameters Type Name Description T arg The parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T The type of the parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T1, T2, TResult>(T1, T2) Creates an instance of TResult using a constructor of two parameters. Declaration public static TResult CreateInstance<T1, T2, TResult>(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T1, T2, T3, TResult>(T1, T2, T3) Creates an instance of TResult using a constructor of three parameters. Declaration public static TResult CreateInstance<T1, T2, T3, TResult>(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T1, T2, T3, T4, TResult>(T1, T2, T3, T4) Creates an instance of TResult using a constructor of four parameters. Declaration public static TResult CreateInstance<T1, T2, T3, T4, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T1, T2, T3, T4, T5, TResult>(T1, T2, T3, T4, T5) Creates an instance of TResult using a constructor of five parameters. Declaration public static TResult CreateInstance<T1, T2, T3, T4, T5, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. T5 arg5 The fifth parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. T5 The type of the fifth parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T1, T2, T3, T4, T5, T6, TResult>(T1, T2, T3, T4, T5, T6) Creates an instance of TResult using a constructor of six parameters. Declaration public static TResult CreateInstance<T1, T2, T3, T4, T5, T6, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. T5 arg5 The fifth parameter of the constructor. T6 arg6 The sixth parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. T5 The type of the fifth parameter of the constructor. T6 The type of the sixth parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T1, T2, T3, T4, T5, T6, T7, TResult>(T1, T2, T3, T4, T5, T6, T7) Creates an instance of TResult using a constructor of seven parameters. Declaration public static TResult CreateInstance<T1, T2, T3, T4, T5, T6, T7, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. T5 arg5 The fifth parameter of the constructor. T6 arg6 The sixth parameter of the constructor. T7 arg7 The seventh parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. T5 The type of the fifth parameter of the constructor. T6 The type of the sixth parameter of the constructor. T7 The type of the seventh parameter of the constructor. TResult The type to create. | Improve this Doc CreateInstance<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(T1, T2, T3, T4, T5, T6, T7, T8) Creates an instance of TResult using a constructor of eight parameters. Declaration public static TResult CreateInstance<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description T1 arg1 The first parameter of the constructor. T2 arg2 The second parameter of the constructor. T3 arg3 The third parameter of the constructor. T4 arg4 The fourth parameter of the constructor. T5 arg5 The fifth parameter of the constructor. T6 arg6 The sixth parameter of the constructor. T7 arg7 The seventh parameter of the constructor. T8 arg8 The eighth parameter of the constructor. Returns Type Description TResult A reference to the newly created object. Type Parameters Name Description T1 The type of the first parameter of the constructor. T2 The type of the second parameter of the constructor. T3 The type of the third parameter of the constructor. T4 The type of the fourth parameter of the constructor. T5 The type of the fifth parameter of the constructor. T6 The type of the sixth parameter of the constructor. T7 The type of the seventh parameter of the constructor. T8 The type of the eighth parameter of the constructor. TResult The type to create. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.JsonStreamConverter.html": {
    "href": "api/core/Cuemon.IO.JsonStreamConverter.html",
    "title": "Class JsonStreamConverter | Cuemon .NET Standard",
    "keywords": "Class JsonStreamConverter This utility class is designed to make JSON System.IO.Stream related conversions easier to work with. Inheritance System.Object JsonStreamConverter Namespace : Cuemon.IO Assembly : Cuemon.Xml.dll Syntax public static class JsonStreamConverter Methods | Improve this Doc FromXmlStream(Stream) Returns a UTF-8 encoded JSON representation of the specified XML stream and whose value is equivalent to the specified XML stream. Declaration public static Stream FromXmlStream(Stream value) Parameters Type Name Description System.IO.Stream value The XML to convert to a JSON representation. Returns Type Description System.IO.Stream A UTF-8 encoded JSON representation of the specified value and whose value is equivalent to value . Remarks The JSON representation is in compliance with RFC 4627. Take note, that all string values is escaped using Escape(String) . This is by design and to help ensure compatibility with a wide range of data. | Improve this Doc FromXmlStream(Stream, Encoding) Returns a JSON representation of the specified XML stream and whose value is equivalent to the specified XML stream. Declaration public static Stream FromXmlStream(Stream value, Encoding encoding) Parameters Type Name Description System.IO.Stream value The XML to convert to a JSON representation. System.Text.Encoding encoding The text encoding to use. Returns Type Description System.IO.Stream A JSON representation of the specified value and whose value is equivalent to value . Remarks The JSON representation is in compliance with RFC 4627. Take note, that all string values is escaped using Escape(String) . This is by design and to help ensure compatibility with a wide range of data. Exceptions Type Condition System.ArgumentOutOfRangeException This exception is thrown when encoding is not within the boundaries of RFC 4627. System.ArgumentNullException This exception is thrown should either of value or encoding have the value of null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.Compression.CompressionUtilityExtensions.html": {
    "href": "api/core/Cuemon.IO.Compression.CompressionUtilityExtensions.html",
    "title": "Class CompressionUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class CompressionUtilityExtensions This is an extension implementation of the most common methods on the CompressionUtility class. Inheritance System.Object CompressionUtilityExtensions Namespace : Cuemon.IO.Compression Assembly : Cuemon.IO.dll Syntax public static class CompressionUtilityExtensions Methods | Improve this Doc Compress(Stream) Compresses the source stream using the Deflate algorithm. Declaration public static Stream Compress(this Stream source) Parameters Type Name Description System.IO.Stream source The source stream to compress. Returns Type Description System.IO.Stream A compressed System.IO.Stream of the source . | Improve this Doc Compress(Stream, CompressionType) Compresses the source stream using the specified compressionType algorithm. Declaration public static Stream Compress(this Stream source, CompressionType compressionType) Parameters Type Name Description System.IO.Stream source The source stream to compress. CompressionType compressionType The compression algorithm to use for the compression. Returns Type Description System.IO.Stream A compressed System.IO.Stream of the source . | Improve this Doc Compress(Stream, CompressionType, Int32) Compresses the source stream using the specified compressionType algorithm. Declaration public static Stream Compress(this Stream source, CompressionType compressionType, int bufferSize) Parameters Type Name Description System.IO.Stream source The source stream to compress. CompressionType compressionType The compression algorithm to use for the compression. System.Int32 bufferSize The size of the buffer. This value must be greater than zero. The default size is 2048. Returns Type Description System.IO.Stream A compressed System.IO.Stream of the source . | Improve this Doc Decompress(Stream) Decompresses the source stream using the Deflate algorithm. Declaration public static Stream Decompress(this Stream source) Parameters Type Name Description System.IO.Stream source The source stream to decompress. Returns Type Description System.IO.Stream A decompressed System.IO.Stream of the source . | Improve this Doc Decompress(Stream, CompressionType) Decompresses the source stream using the specified compressionType algorithm. Declaration public static Stream Decompress(this Stream source, CompressionType compressionType) Parameters Type Name Description System.IO.Stream source The source stream to decompress. CompressionType compressionType The compression algorithm to use for the decompression. Returns Type Description System.IO.Stream A decompressed System.IO.Stream of the source . | Improve this Doc DecompressStream(Stream, CompressionType, Int32) Decompresses the source stream using the specified compressionType algorithm. Declaration public static Stream DecompressStream(Stream source, CompressionType compressionType, int bufferSize) Parameters Type Name Description System.IO.Stream source The source stream to decompress. CompressionType compressionType The compression algorithm to use for the decompression. System.Int32 bufferSize The size of the buffer. This value must be greater than zero. The default size is 2048. Returns Type Description System.IO.Stream A decompressed System.IO.Stream of the source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.TimeBasedObjectResult-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.TimeBasedObjectResult-1.html",
    "title": "Class TimeBasedObjectResult<T> | Cuemon .NET Standard",
    "keywords": "Class TimeBasedObjectResult<T> Provides a time based object result that is processed by a Last-Modified filter implementation. Inheritance System.Object Configurable < TimeBasedOptions > CacheableObjectResult <T, TimeBasedOptions > TimeBasedObjectResult<T> Implements IConfigurable < TimeBasedOptions > ICacheableObjectResult ICacheableTimestamp Inherited Members CacheableObjectResult<T, TimeBasedOptions>.Value Configurable<TimeBasedOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class TimeBasedObjectResult<T> : CacheableObjectResult<T, TimeBasedOptions>, IConfigurable<TimeBasedOptions>, ICacheableObjectResult, ICacheableTimestamp Type Parameters Name Description T The type of the object to make cacheable. Properties | Improve this Doc Created Gets a System.DateTime value from when data this instance represents was first created, expressed as the Coordinated Universal Time (UTC). Declaration public DateTime Created { get; } Property Value Type Description System.DateTime The timestamp from when data this instance represents was first created. | Improve this Doc Modified Gets a System.DateTime value from when data this instance represents was last modified, expressed as the Coordinated Universal Time (UTC). Declaration public DateTime? Modified { get; } Property Value Type Description System.Nullable < System.DateTime > The timestamp from when data this instance represents was last modified. Implements IConfigurable<TOptions> ICacheableObjectResult ICacheableTimestamp Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also CacheableObjectResult <T, TOptions> ICacheableIntegrity HttpLastModifiedHeader HttpCacheableFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.CorrelationIdentifierMiddleware.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.CorrelationIdentifierMiddleware.html",
    "title": "Class CorrelationIdentifierMiddleware | Cuemon .NET Standard",
    "keywords": "Class CorrelationIdentifierMiddleware Provides a Correlation ID middleware implementation for ASP.NET Core. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore < CorrelationIdentifierOptions > ConfigurableMiddleware < CorrelationIdentifierOptions > CorrelationIdentifierMiddleware Implements IConfigurable < CorrelationIdentifierOptions > Inherited Members ConfigurableMiddlewareCore<CorrelationIdentifierOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public class CorrelationIdentifierMiddleware : ConfigurableMiddleware<CorrelationIdentifierOptions>, IConfigurable<CorrelationIdentifierOptions> Constructors | Improve this Doc CorrelationIdentifierMiddleware(RequestDelegate, IOptions<CorrelationIdentifierOptions>) Initializes a new instance of the CorrelationIdentifierMiddleware class. Declaration public CorrelationIdentifierMiddleware(RequestDelegate next, IOptions<CorrelationIdentifierOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions < CorrelationIdentifierOptions > setup The CorrelationIdentifierOptions which need to be configured. | Improve this Doc CorrelationIdentifierMiddleware(RequestDelegate, Action<CorrelationIdentifierOptions>) Initializes a new instance of the CorrelationIdentifierMiddleware class. Declaration public CorrelationIdentifierMiddleware(RequestDelegate next, Action<CorrelationIdentifierOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action < CorrelationIdentifierOptions > setup The CorrelationIdentifierOptions which need to be configured. Fields | Improve this Doc HttpContextItemsKey The key from where the Correlation ID is stored throughout the request scope. Declaration public const string HttpContextItemsKey = \"Cuemon.AspNetCore.CorrelationMiddleware\" Field Value Type Description System.String Methods | Improve this Doc InvokeAsync(HttpContext) Executes the CorrelationIdentifierMiddleware . Declaration public override Task InvokeAsync(HttpContext context) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Overrides Cuemon.AspNetCore.ConfigurableMiddleware<Cuemon.AspNetCore.CorrelationIdentifierOptions>.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext) Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Integrity.ChecksumBuilderExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Integrity.ChecksumBuilderExtensions.html",
    "title": "Class ChecksumBuilderExtensions | Cuemon .NET Standard",
    "keywords": "Class ChecksumBuilderExtensions Extension methods for the ChecksumBuilder class. Inheritance System.Object ChecksumBuilderExtensions Namespace : Cuemon.AspNetCore.Integrity Assembly : Cuemon.AspNetCore.dll Syntax public static class ChecksumBuilderExtensions Methods | Improve this Doc ToEntityTag(ChecksumBuilder, Boolean) Creates an Microsoft.Net.Http.Headers.EntityTagHeaderValue from the specified builder . Declaration public static EntityTagHeaderValue ToEntityTag(this ChecksumBuilder builder, bool isWeak = false) Parameters Type Name Description ChecksumBuilder builder The ChecksumBuilder to extend. System.Boolean isWeak A value that indicates if this entity-tag header is a weak validator. Returns Type Description Microsoft.Net.Http.Headers.EntityTagHeaderValue An Microsoft.Net.Http.Headers.EntityTagHeaderValue that is initiated with a hexadecimal representation of Checksum and a value that indicates if the tag is weak. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.HostingEnvironmentOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.HostingEnvironmentOptions.html",
    "title": "Class HostingEnvironmentOptions | Cuemon .NET Standard",
    "keywords": "Class HostingEnvironmentOptions Configuration options for HostingEnvironmentMiddleware . Inheritance System.Object HostingEnvironmentOptions Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public class HostingEnvironmentOptions Constructors | Improve this Doc HostingEnvironmentOptions() Initializes a new instance of the HostingEnvironmentOptions class. Declaration public HostingEnvironmentOptions() Remarks The following table shows the initial property values for an instance of HostingEnvironmentOptions . Property Initial Value HeaderName X-Hosting-Environment SuppressHeaderPredicate _ => false Properties | Improve this Doc HeaderName Gets or sets the name of the hosting environment HTTP header. Declaration public string HeaderName { get; set; } Property Value Type Description System.String The name of the hosting environment HTTP header. | Improve this Doc SuppressHeaderPredicate Gets or sets the predicate that can suppress the hosting environment HTTP header. Declaration public Func<IHostingEnvironment, bool> SuppressHeaderPredicate { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Hosting.IHostingEnvironment , System.Boolean > The function delegate that can determine if the hosting environment HTTP header should be suppressed. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-4.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-4.html",
    "title": "Class ConfigurableMiddleware<T1, T2, T3, TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableMiddleware<T1, T2, T3, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with three dependency injected parameters. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore <TOptions> ConfigurableMiddleware<T1, T2, T3, TOptions> Implements IConfigurable <TOptions> Inherited Members ConfigurableMiddlewareCore<TOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class ConfigurableMiddleware<T1, T2, T3, TOptions> : ConfigurableMiddlewareCore<TOptions>, IConfigurable<TOptions> where TOptions : class, new() Type Parameters Name Description T1 The type of the first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . T2 The type of the second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . T3 The type of the third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . TOptions The type of the options to setup. Constructors | Improve this Doc ConfigurableMiddleware(RequestDelegate, IOptions<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, IOptions<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableMiddleware(RequestDelegate, Action<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, Action<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc InvokeAsync(HttpContext, T1, T2, T3) Executes the ConfigurableMiddleware<T1, T2, T3, TOptions> . Declaration public abstract Task InvokeAsync(HttpContext context, T1 di1, T2 di2, T3 di3) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T1 di1 The first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . T2 di2 The second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . T3 di3 The third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Middleware <T1, T2, T3> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticator.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticator.html",
    "title": "Delegate DigestAccessAuthenticator | Cuemon .NET Standard",
    "keywords": "Delegate DigestAccessAuthenticator Represents the method that defines an Authenticator typically assigned on DigestAccessAuthenticationOptions . Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public delegate ClaimsPrincipal DigestAccessAuthenticator(string username, out string password); Parameters Type Name Description System.String username The username to match and lookup the paired password . System.String password The password paired with username . Returns Type Description System.Security.Claims.ClaimsPrincipal A System.Security.Claims.ClaimsPrincipal that is associated with the result of password . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationMiddleware.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationMiddleware.html",
    "title": "Class DigestAccessAuthenticationMiddleware | Cuemon .NET Standard",
    "keywords": "Class DigestAccessAuthenticationMiddleware Provides a HTTP Digest Access Authentication middleware implementation for ASP.NET Core. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore < DigestAccessAuthenticationOptions > ConfigurableMiddleware < DigestAccessAuthenticationOptions > DigestAccessAuthenticationMiddleware Implements IConfigurable < DigestAccessAuthenticationOptions > Inherited Members ConfigurableMiddlewareCore<DigestAccessAuthenticationOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public class DigestAccessAuthenticationMiddleware : ConfigurableMiddleware<DigestAccessAuthenticationOptions>, IConfigurable<DigestAccessAuthenticationOptions> Constructors | Improve this Doc DigestAccessAuthenticationMiddleware(RequestDelegate, IOptions<DigestAccessAuthenticationOptions>) Initializes a new instance of the DigestAccessAuthenticationMiddleware class. Declaration public DigestAccessAuthenticationMiddleware(RequestDelegate next, IOptions<DigestAccessAuthenticationOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions < DigestAccessAuthenticationOptions > setup The DigestAccessAuthenticationOptions which need to be configured. | Improve this Doc DigestAccessAuthenticationMiddleware(RequestDelegate, Action<DigestAccessAuthenticationOptions>) Initializes a new instance of the DigestAccessAuthenticationMiddleware class. Declaration public DigestAccessAuthenticationMiddleware(RequestDelegate next, Action<DigestAccessAuthenticationOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action < DigestAccessAuthenticationOptions > setup The middleware DigestAccessAuthenticationOptions which need to be configured. Properties | Improve this Doc AuthenticationScheme Gets the name of the authentication scheme. Declaration public string AuthenticationScheme { get; } Property Value Type Description System.String The name of the authentication scheme. Methods | Improve this Doc InvokeAsync(HttpContext) Executes the DigestAccessAuthenticationMiddleware . Declaration public override Task InvokeAsync(HttpContext context) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Overrides Cuemon.AspNetCore.ConfigurableMiddleware<Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationOptions>.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext) Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/mailcore/Cuemon.Net.Mail.html": {
    "href": "api/mailcore/Cuemon.Net.Mail.html",
    "title": "Namespace Cuemon.Net.Mail | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Net.Mail Assembly : Cuemon.Net.Mail.dll Classes MailDistributor Provides a way for applications to distribute one or more e-mails in batches by using the Simple Mail Transfer Protocol (SMTP). (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/mailcore/Cuemon.Net.Mail.MailDistributor.html": {
    "href": "api/mailcore/Cuemon.Net.Mail.MailDistributor.html",
    "title": "Class MailDistributor | Cuemon .NET Standard",
    "keywords": "Class MailDistributor Provides a way for applications to distribute one or more e-mails in batches by using the Simple Mail Transfer Protocol (SMTP). Inheritance System.Object MailDistributor Namespace : Cuemon.Net.Mail Assembly : Cuemon.Net.Mail.dll Syntax public class MailDistributor Constructors | Improve this Doc MailDistributor(Func<SmtpClient>, Int32) Initializes a new instance of the MailDistributor class. Declaration public MailDistributor(Func<SmtpClient> carrier, int deliverySize = 20) Parameters Type Name Description System.Func < SmtpClient > carrier The function delegate that will instantiate a new mail carrier per delivery. System.Int32 deliverySize The maximum number of mails a carrier can deliver at a time. Default is a size of 20. Remarks A delivery is determined by the deliverySize . This means, that if you are to send 100 e-mails and you have a deliverySize of 20, these 100 e-mails will be distributed to 5 invoked instances of carrier shipping up till 20 e-mails each (depending if you have a filter or not). Methods | Improve this Doc SendAsync(IEnumerable<MailMessage>, Func<MailMessage, Boolean>) Sends the specified sequence of mails to an SMTP server. Declaration public Task SendAsync(IEnumerable<MailMessage> mails, Func<MailMessage, bool> filter = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Net.Mail.MailMessage > mails The e-mails to send to an SMTP server. System.Func < System.Net.Mail.MailMessage , System.Boolean > filter The function delegate that defines the conditions for sending of the mails sequence. Returns Type Description System.Threading.Tasks.Task Remarks The function delegate filter will only include those mails that evaluates to true . | Improve this Doc SendOneAsync(MailMessage, Func<MailMessage, Boolean>) Sends the specified mail to an SMTP server. Declaration public Task SendOneAsync(MailMessage mail, Func<MailMessage, bool> filter = null) Parameters Type Name Description System.Net.Mail.MailMessage mail The e-mail to send to an SMTP server. System.Func < System.Net.Mail.MailMessage , System.Boolean > filter The function delegate that defines the conditions for the sending of mail . Returns Type Description System.Threading.Tasks.Task Remarks The function delegate filter will only include the mail if that evaluates to true . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TweakerExtensions.html": {
    "href": "api/core/Cuemon.TweakerExtensions.html",
    "title": "Class TweakerExtensions | Cuemon .NET Standard",
    "keywords": "Class TweakerExtensions Extension methods for the Tweaker class. Inheritance System.Object TweakerExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TweakerExtensions Methods | Improve this Doc Adjust<T>(T, Func<T, T>) Adjust the specified value with the function delegate tweaker . Declaration public static T Adjust<T>(this T value, Func<T, T> tweaker) Parameters Type Name Description T value The value to adjust. System.Func <T, T> tweaker The function delegate that will adjust the specified value . Returns Type Description T The value in its original or adjusted form. Type Parameters Name Description T The type of the value to adjust. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Tweaker.html": {
    "href": "api/core/Cuemon.Tweaker.html",
    "title": "Class Tweaker | Cuemon .NET Standard",
    "keywords": "Class Tweaker Provides a way to change any instance of the same generic type. Inheritance System.Object Tweaker Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class Tweaker Methods | Improve this Doc Adjust<T>(T, Func<T, T>) Adjust the specified value with the function delegate tweaker . Declaration public static T Adjust<T>(T value, Func<T, T> tweaker) Parameters Type Name Description T value The value to adjust. System.Func <T, T> tweaker The function delegate that will adjust the specified value . Returns Type Description T The value in its original or adjusted form. Type Parameters Name Description T The type of the value to adjust. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.DependencyEventArgs.html": {
    "href": "api/core/Cuemon.Runtime.DependencyEventArgs.html",
    "title": "Class DependencyEventArgs | Cuemon .NET Standard",
    "keywords": "Class DependencyEventArgs Provides data for dependency related operations. Inheritance System.Object System.EventArgs DependencyEventArgs Namespace : Cuemon.Runtime Assembly : Cuemon.Runtime.dll Syntax public class DependencyEventArgs : EventArgs Constructors | Improve this Doc DependencyEventArgs(DateTime) Initializes a new instance of the DependencyEventArgs class. Declaration public DependencyEventArgs(DateTime utcLastModified) Parameters Type Name Description System.DateTime utcLastModified Fields | Improve this Doc Empty Represents an event with no event data. Declaration public static readonly DependencyEventArgs Empty Field Value Type Description DependencyEventArgs Properties | Improve this Doc UtcLastModified Gets the System.DateTime value from when a Dependency was last changed, or a System.DateTime.MinValue if an empty event. Declaration public DateTime UtcLastModified { get; } Property Value Type Description System.DateTime The System.DateTime value from when a Dependency was last changed, or a System.DateTime.MinValue if an empty event. Remarks This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time). Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.Http.HttpManager.html": {
    "href": "api/core/Cuemon.Net.Http.HttpManager.html",
    "title": "Class HttpManager | Cuemon .NET Standard",
    "keywords": "Class HttpManager Provides ways for sending HTTP requests and receiving HTTP responses from a resource identified by a URI. This class cannot be inherited. Inheritance System.Object HttpManager Implements System.IDisposable Namespace : Cuemon.Net.Http Assembly : Cuemon.Net.dll Syntax public sealed class HttpManager : IDisposable Constructors | Improve this Doc HttpManager(Action<HttpManagerOptions>) Initializes a new instance of the HttpManager class. Declaration public HttpManager(Action<HttpManagerOptions> setup = null) Parameters Type Name Description System.Action < HttpManagerOptions > setup Properties | Improve this Doc DefaultRequestHeaders Gets the headers which should be sent with each request. Declaration public HttpRequestHeaders DefaultRequestHeaders { get; } Property Value Type Description System.Net.Http.Headers.HttpRequestHeaders The headers which should be sent with each request. | Improve this Doc Timeout Gets or sets the timespan to wait before the request times out. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description System.TimeSpan The timespan to wait before the request times out. Methods | Improve this Doc Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc HttpAsync(HttpMethod, Uri, MediaTypeHeaderValue, Stream, CancellationToken) Send a request as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpAsync(HttpMethod method, Uri location, MediaTypeHeaderValue contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Net.Http.HttpMethod method The HTTP method. System.Uri location The System.Uri to request. System.Net.Http.Headers.MediaTypeHeaderValue contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpAsync(HttpMethod, Uri, String, Stream, CancellationToken) Send a request as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpAsync(HttpMethod method, Uri location, string contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Net.Http.HttpMethod method The HTTP method. System.Uri location The System.Uri to request. System.String contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpAsync(Uri, Action<HttpRequestOptions>) Send a request as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpAsync(Uri location, Action<HttpRequestOptions> setup) Parameters Type Name Description System.Uri location The System.Uri to request. System.Action < HttpRequestOptions > setup The HttpRequestOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpDeleteAsync(Uri, CancellationToken) Send a DELETE request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpDeleteAsync(Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpGetAsync(Uri, CancellationToken) Send a GET request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpGetAsync(Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpHeadAsync(Uri, CancellationToken) Send a HEAD request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpHeadAsync(Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpOptionsAsync(Uri, CancellationToken) Send an OPTIONS request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpOptionsAsync(Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPatchAsync(Uri, MediaTypeHeaderValue, Stream, CancellationToken) Send a PATCH request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpPatchAsync(Uri location, MediaTypeHeaderValue contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Net.Http.Headers.MediaTypeHeaderValue contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPatchAsync(Uri, String, Stream, CancellationToken) Send a PATCH request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpPatchAsync(Uri location, string contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.String contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPostAsync(Uri, MediaTypeHeaderValue, Stream, CancellationToken) Send a POST request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpPostAsync(Uri location, MediaTypeHeaderValue contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Net.Http.Headers.MediaTypeHeaderValue contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPostAsync(Uri, String, Stream, CancellationToken) Send a POST request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpPostAsync(Uri location, string contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.String contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPutAsync(Uri, MediaTypeHeaderValue, Stream, CancellationToken) Send a PUT request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpPutAsync(Uri location, MediaTypeHeaderValue contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Net.Http.Headers.MediaTypeHeaderValue contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpPutAsync(Uri, String, Stream, CancellationToken) Send a PUT request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpPutAsync(Uri location, string contentType, Stream content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.String contentType The Content-Type header of the HTTP request sent to the server. System.IO.Stream content The HTTP request content sent to the server. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. | Improve this Doc HttpTraceAsync(Uri, CancellationToken) Send a TRACE request to the specified Uri as an asynchronous operation. Declaration public Task<HttpResponseMessage> HttpTraceAsync(Uri location, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Uri location The System.Uri to request. System.Threading.CancellationToken ct The cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < HttpResponseMessage > The task object representing the asynchronous operation. Implements System.IDisposable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also System.IDisposable (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.MethodWrappedException.html": {
    "href": "api/core/Cuemon.MethodWrappedException.html",
    "title": "Class MethodWrappedException | Cuemon .NET Standard",
    "keywords": "Class MethodWrappedException Wraps an exception that was refined with meta information from either Refine(Exception, MethodBase, Object[]) or Refine(Exception, MethodDescriptor, Object[]) . This class cannot be inherited. Inheritance System.Object System.Exception MethodWrappedException Inherited Members System.Exception.GetBaseException() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public sealed class MethodWrappedException : Exception Properties | Improve this Doc ThrowingMethod Gets the method that was the cause of this MethodWrappedException . Declaration public MethodDescriptor ThrowingMethod { get; } Property Value Type Description MethodDescriptor The method throwing this MethodWrappedException . Methods | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Exception.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) ExceptionUtilityExtensions.Unwrap(MethodWrappedException) ExceptionUtilityExtensions.Refine(Exception, MethodBase, Object[]) ExceptionUtilityExtensions.Refine(Exception, MethodDescriptor, Object[]) ExceptionUtilityExtensions.ParseException<TResult>(Exception) ExceptionUtilityExtensions.Flatten(Exception) ExceptionUtilityExtensions.Flatten(Exception, Type) StringConverterExtensions.ToEncodedString(Exception, Boolean) StringConverterExtensions.ToEncodedString(Exception, Boolean, Encoding) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also System.Exception (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.Converters.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.Converters.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Formatters.Xml.Converters | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Formatters.Xml.Converters Assembly : Cuemon.AspNetCore.Mvc.dll Classes XmlConverterListExtensions Extension methods for the System.Collections.Generic.IList<T> . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Filters | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Filters Assembly : Cuemon.AspNetCore.Mvc.dll Classes ConfigurableActionFilter<TOptions> A base class implementation of a filter that surrounds execution of the action. ConfigurableAsyncActionFilter<TOptions> A base class implementation of a filter that asynchronously surrounds execution of the action, after model binding is complete. ConfigurableAsyncResultFilter<TOptions> A base class implementation of a filter that asynchronously surrounds execution of action results successfully returned from an action. ConfigurableFactoryFilter<TOptions> A base class implementation of a filter metadata which can create an instance of an executable filter. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ConfigurableAsyncActionFilter-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ConfigurableAsyncActionFilter-1.html",
    "title": "Class ConfigurableAsyncActionFilter<TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableAsyncActionFilter<TOptions> A base class implementation of a filter that asynchronously surrounds execution of the action, after model binding is complete. Inheritance System.Object Configurable <TOptions> ConfigurableAsyncActionFilter<TOptions> Implements IConfigurable <TOptions> Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members Configurable<TOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public abstract class ConfigurableAsyncActionFilter<TOptions> : Configurable<TOptions>, IConfigurable<TOptions>, IAsyncActionFilter, IFilterMetadata where TOptions : class, new() Type Parameters Name Description TOptions The type of the configured options. Constructors | Improve this Doc ConfigurableAsyncActionFilter(IOptions<TOptions>) Initializes a new instance of the ConfigurableAsyncResultFilter<TOptions> class. Declaration protected ConfigurableAsyncActionFilter(IOptions<TOptions> setup) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableAsyncActionFilter(Action<TOptions>) Initializes a new instance of the ConfigurableAsyncResultFilter<TOptions> class. Declaration protected ConfigurableAsyncActionFilter(Action<TOptions> setup) Parameters Type Name Description System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Called asynchronously before the action, after model binding is complete. Declaration public abstract Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext . Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate next The Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate . Invoked to execute the next action filter or the action itself. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion indicates the filter has executed. Implements IConfigurable<TOptions> Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Configurable <TOptions> Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StringUtility.html": {
    "href": "api/core/Cuemon.StringUtility.html",
    "title": "Class StringUtility | Cuemon .NET Standard",
    "keywords": "Class StringUtility This utility class is designed to make System.String operations easier to work with. Inheritance System.Object StringUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class StringUtility Fields | Improve this Doc AlphanumericCharactersCaseSensitive A case sensitive representation of an alphanumeric character set consisting of the numbers 0 to 9 and the letters Aa to Zz. Declaration public const string AlphanumericCharactersCaseSensitive = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789\" Field Value Type Description System.String | Improve this Doc AlphanumericCharactersSingleCase A single case representation of an alphanumeric character set consisting of the numbers 0 to 9 and the letters A to Z. Declaration public const string AlphanumericCharactersSingleCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" Field Value Type Description System.String | Improve this Doc CarriageReturn Carriage-return character. Declaration public const string CarriageReturn = \"\\r\" Field Value Type Description System.String | Improve this Doc EnglishAlphabetCharactersMajuscule An uppercase representation of the English alphabet character set consisting of the letters A to Z. Declaration public static readonly string EnglishAlphabetCharactersMajuscule Field Value Type Description System.String | Improve this Doc EnglishAlphabetCharactersMinuscule A lowercase representation of the English alphabet character set consisting of the letters a to z. Declaration public static readonly string EnglishAlphabetCharactersMinuscule Field Value Type Description System.String | Improve this Doc HexadecimalCharacters A representation of a hexadecimal character set consisting of the numbers 0 to 9 and the letters A to F. Declaration public static readonly string HexadecimalCharacters Field Value Type Description System.String | Improve this Doc Linefeed Linefeed character. Declaration public const string Linefeed = \"\\n\" Field Value Type Description System.String | Improve this Doc NetworkPathReference A network-path reference, eg. two forward slashes (//). Declaration public const string NetworkPathReference = \"//\" Field Value Type Description System.String | Improve this Doc NewLine Carriage-return/linefeed character combination. Declaration public const string NewLine = \"\\r\\n\" Field Value Type Description System.String | Improve this Doc NumericCharacters A representation of a numeric character set consisting of the numbers 0 to 9. Declaration public const string NumericCharacters = \"0123456789\" Field Value Type Description System.String | Improve this Doc PunctuationMarks A representation of the most common punctuation marks that conforms to the ASCII printable characters. Declaration public static readonly string PunctuationMarks Field Value Type Description System.String | Improve this Doc Tab Tab character. Declaration public const string Tab = \"\\t\" Field Value Type Description System.String | Improve this Doc WhiteSpaceCharacters A representation of the most common whitespace characters. Declaration public static readonly string WhiteSpaceCharacters Field Value Type Description System.String Methods | Improve this Doc Chunk(String) Returns a sequence that is chunked into string-slices having a length of 1024 that is equivalent to value . Declaration public static IEnumerable<string> Chunk(string value) Parameters Type Name Description System.String value A System.String to chunk into a sequence of smaller string-slices for partitioned storage or similar. Returns Type Description System.Collections.Generic.IEnumerable < System.String > A sequence that is chunked into string-slices having a length of 1024 that is equivalent to value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc Chunk(String, Int32) Returns a sequence that is chunked into string-slices of the specified length that is equivalent to value . Default is 1024. Declaration public static IEnumerable<string> Chunk(string value, int length) Parameters Type Name Description System.String value A System.String to chunk into a sequence of smaller string-slices for partitioned storage or similar. System.Int32 length The desired length of each string-slice in the sequence. Returns Type Description System.Collections.Generic.IEnumerable < System.String > A sequence that is chunked into string-slices of the specified length that is equivalent to value . Exceptions Type Condition System.ArgumentNullException value is null. System.ArgumentOutOfRangeException length is less or equal to 0. | Improve this Doc Contains(String, Char) Returns a value indicating whether the specified value occurs within the source . Declaration public static bool Contains(string source, char value) Parameters Type Name Description System.String source The System.String to seek. System.Char value The System.Char to search within source . Returns Type Description System.Boolean true if the value parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc Contains(String, Char, StringComparison) Returns a value indicating whether the specified value occurs within the source . Declaration public static bool Contains(string source, char value, StringComparison comparison) Parameters Type Name Description System.String source The System.String to seek. System.Char value The System.Char to search within source . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description System.Boolean true if the value parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc Contains(String, Char[]) Returns a value indicating whether any of the specified values occurs within the source . Declaration public static bool Contains(string source, params char[] values) Parameters Type Name Description System.String source The System.String to seek. System.Char [] values The System.Char sequence to search within source . Returns Type Description System.Boolean true if any of the values occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc Contains(String, String) Returns a value indicating whether the specified value occurs within the source . Declaration public static bool Contains(string source, string value) Parameters Type Name Description System.String source The System.String to seek. System.String value The System.String to search within source . Returns Type Description System.Boolean true if the value parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc Contains(String, String, StringComparison) Returns a value indicating whether the specified value occurs within the source . Declaration public static bool Contains(string source, string value, StringComparison comparison) Parameters Type Name Description System.String source The System.String to seek. System.String value The System.String to search within source . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description System.Boolean true if the value parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc Contains(String, String[]) Returns a value indicating whether the specified values occurs within the source . Declaration public static bool Contains(string source, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if the values parameter occurs within the source , or if value is the empty string (\"\"); otherwise, false . Remarks This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc Contains(String, StringComparison, Char[]) Returns a value indicating whether any of the specified values occurs within the source . Declaration public static bool Contains(string source, StringComparison comparison, params char[] values) Parameters Type Name Description System.String source The System.String to seek. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.Char [] values The System.Char sequence to search within source . Returns Type Description System.Boolean true if any of the values occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc Contains(String, StringComparison, String[]) Returns a value indicating whether any of the specified values occurs within the source . Declaration public static bool Contains(string source, StringComparison comparison, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if any of the values occurs within the source , or if value is the empty string (\"\"); otherwise, false . | Improve this Doc Count(String, Char) Counts the occurrences of character in the specified source . Declaration public static int Count(string source, char character) Parameters Type Name Description System.String source The source to count occurrences of character . System.Char character The System.Char value to count in source . Returns Type Description System.Int32 The number of times the character was found in the source . Exceptions Type Condition System.ArgumentNullException source is null. | Improve this Doc CreateFixedString(Char, Int32) Generates a string from the specified Unicode character repeated until the specified length. Declaration public static string CreateFixedString(char character, int length) Parameters Type Name Description System.Char character A Unicode character. System.Int32 length The number of times character occurs. Returns Type Description System.String A System.String filled with the specified character until the specified length . | Improve this Doc CreateRandomString(Int32) Generates a random string with the specified length using values of AlphanumericCharactersCaseSensitive . Declaration public static string CreateRandomString(int length) Parameters Type Name Description System.Int32 length The length of the random string to generate. Returns Type Description System.String A random string from the values of AlphanumericCharactersCaseSensitive . | Improve this Doc CreateRandomString(Int32, String[]) Generates a random string with the specified length from the provided values. Declaration public static string CreateRandomString(int length, params string[] values) Parameters Type Name Description System.Int32 length The length of the random string to generate. System.String [] values The values to use in the randomization process. Returns Type Description System.String A random string from the values provided. | Improve this Doc Equals(String, String[]) Returns a value indicating the specified source equals one of the specified values . Declaration public static bool Equals(string source, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if one the values is the same as the source ; otherwise false . Remarks This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. Exceptions Type Condition System.ArgumentNullException source is null - or - values is null. | Improve this Doc Equals(String, StringComparison, String[]) Returns a value indicating the specified source equals one of the specified values . Declaration public static bool Equals(string source, StringComparison comparison, params string[] values) Parameters Type Name Description System.String source The System.String to seek. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] values The System.String sequence to search within source . Returns Type Description System.Boolean true if one the values is the same as the source ; otherwise false . Exceptions Type Condition System.ArgumentNullException source is null - or - values is null. | Improve this Doc Escape(String) Escapes the given System.String the same way as the well known JavaScrip escape() function. Declaration public static string Escape(string value) Parameters Type Name Description System.String value The System.String to escape. Returns Type Description System.String The input value with an escaped equivalent. | Improve this Doc GetHashCode(String) Computes a suitable hash code from the specified System.String value . Declaration public static int GetHashCode(string value) Parameters Type Name Description System.String value A System.String value. Returns Type Description System.Int32 A 32-bit signed integer that is the hash code of value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc HasConsecutiveCharacters(String, Char, Int32) Determines whether the specified value contains a succession character of length . Declaration public static bool HasConsecutiveCharacters(string value, char character, int length = 2) Parameters Type Name Description System.String value The value to test for consecutive characters. System.Char character The characters to locate with the specified length . System.Int32 length The number of characters in succession. Returns Type Description System.Boolean true if the specified value contains a succession character of length ; otherwise, false . | Improve this Doc HasConsecutiveCharacters(String, IEnumerable<Char>, Int32) Determines whether the specified value contains at least one of the succession characters of length . Declaration public static bool HasConsecutiveCharacters(string value, IEnumerable<char> characters, int length = 2) Parameters Type Name Description System.String value The value to test for consecutive characters. System.Collections.Generic.IEnumerable < System.Char > characters The character to locate with the specified length . System.Int32 length The number of characters in succession. Returns Type Description System.Boolean true if the specified value contains at least one of the succession characters of length ; otherwise, false . | Improve this Doc IsBase64(String) Determines whether the specified value matches a Base64 structure. Declaration public static bool IsBase64(string value) Parameters Type Name Description System.String value The value to test for a Base64 structure. Returns Type Description System.Boolean true if the specified value matches a Base64 structure; otherwise, false . Remarks This method will skip common Base64 structures typically used as checksums. This includes 32, 128, 160, 256, 384 and 512 bit checksums. | Improve this Doc IsBase64(String, Func<String, Boolean>) Determines whether the specified value matches a Base64 structure. Declaration public static bool IsBase64(string value, Func<string, bool> predicate) Parameters Type Name Description System.String value The value to test for a Base64 structure. System.Func < System.String , System.Boolean > predicate A function delegate that provides custom rules for bypassing the Base64 structure check. Returns Type Description System.Boolean true if the specified value matches a Base64 structure; otherwise, false . | Improve this Doc IsCountableSequence(String) Determines whether the specified value is a sequence of countable characters (hence, characters being either incremented or decremented with the same cardinality through out the sequence). Declaration public static bool IsCountableSequence(string value) Parameters Type Name Description System.String value The value to test for a sequence of countable characters. Returns Type Description System.Boolean true if the specified value is a sequence of countable characters (hence, characters being either incremented or decremented with the same cardinality through out the sequence); otherwise, false . | Improve this Doc IsNullOrEmpty(IEnumerable<String>) Determines whether a string sequence has at least one value that equals to null or empty. Declaration public static bool IsNullOrEmpty(IEnumerable<string> values) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values A string sequence in which to test for the presence of null or empty. Returns Type Description System.Boolean true if a string sequence has at least one value that equals to null or empty; otherwise, false . | Improve this Doc IsNullOrEmpty(String[]) Determines whether one or more string values equals to null or empty. Declaration public static bool IsNullOrEmpty(params string[] values) Parameters Type Name Description System.String [] values One or more string values to test for the presence of null or empty. Returns Type Description System.Boolean true if one or more string values equals to null or empty; otherwise, false . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(IEnumerable<string> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>, Func<String, CultureInfo, Boolean>) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(IEnumerable<string> source, Func<string, CultureInfo, bool> parser) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . System.Func < System.String , System.Globalization.CultureInfo , System.Boolean > parser The function delegate that evaluates if the elements of source is equivalent to the specified T . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>, CultureInfo) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(IEnumerable<string> source, CultureInfo culture) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . System.Globalization.CultureInfo culture The culture-specific formatting information to apply on the elements within source . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>, CultureInfo, ITypeDescriptorContext) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(IEnumerable<string> source, CultureInfo culture, ITypeDescriptorContext context) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . System.Globalization.CultureInfo culture The culture-specific formatting information to apply on the elements within source . System.ComponentModel.ITypeDescriptorContext context The type-specific formatting information to apply on the elements within source . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc IsSequenceOf<T>(IEnumerable<String>, CultureInfo, Func<String, CultureInfo, Boolean>) Determines whether the elements of the specified source is equivalent to the specified T . Declaration public static bool IsSequenceOf<T>(IEnumerable<string> source, CultureInfo culture, Func<string, CultureInfo, bool> parser) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > source A sequence in which to evaluate if a string value is equivalent to the specified T . System.Globalization.CultureInfo culture The culture-specific formatting information to apply on the elements within source . System.Func < System.String , System.Globalization.CultureInfo , System.Boolean > parser The function delegate that evaluates if the elements of source is equivalent to the specified T . Returns Type Description System.Boolean true if elements of the source parameter was successfully converted; otherwise false . Type Parameters Name Description T The type of the expected values contained within the sequence of source . | Improve this Doc ParseDistinctDifference(String, String, out String) Parses whether the two specified values has a distinct difference from each other. Declaration public static bool ParseDistinctDifference(string definite, string arbitrary, out string difference) Parameters Type Name Description System.String definite The value that specifies valid characters. System.String arbitrary The value to distinctively compare with definite . System.String difference The distinct difference between arbitrary and definite or System.String.Empty if no difference. Returns Type Description System.Boolean true if there is a distinct difference between arbitrary and definite ; otherwise false . | Improve this Doc ParseFormat(String, Int32, out Int32) Parses the given string for any format arguments (eg. Text{0}-{1}.). Declaration public static bool ParseFormat(string format, int maxArguments, out int foundArguments) Parameters Type Name Description System.String format The desired string format to parse. System.Int32 maxArguments The maximum allowed arguments in the string format. System.Int32 foundArguments The number of arguments found in the string format. Returns Type Description System.Boolean true if one or more format arguments is found and the found arguments does not exceed the maxArguments parameter; otherwise false . | Improve this Doc ParseFormat(String, out Int32) Parses the given string for any format arguments (eg. Text{0}-{1}.). Declaration public static bool ParseFormat(string format, out int foundArguments) Parameters Type Name Description System.String format The desired string format to parse. System.Int32 foundArguments The number of arguments found in the string format. Returns Type Description System.Boolean true if one or more format arguments is found; otherwise false . | Improve this Doc RemoveAll(String, Char[]) Returns a new string in which all the specified filter values has been deleted from the specified source . Declaration public static string RemoveAll(string source, params char[] filter) Parameters Type Name Description System.String source The source to delete occurrences found in filter . System.Char [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String A new string that is equivalent to source except for the removed characters. | Improve this Doc RemoveAll(String, String[]) Returns a new string in which all the specified filter values has been deleted from the specified source . Declaration public static string RemoveAll(string source, params string[] filter) Parameters Type Name Description System.String source The source to delete occurrences found in filter . System.String [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String A new string that is equivalent to source except for the removed characters and/or words. Remarks This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc RemoveAll(String, StringComparison, String[]) Returns a new string in which all the specified filter values has been deleted from the specified source . Declaration public static string RemoveAll(string source, StringComparison comparison, params string[] filter) Parameters Type Name Description System.String source The source to delete occurrences found in filter . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String A new string that is equivalent to source except for the removed characters and/or words. | Improve this Doc RemoveAll(String[], String[]) Returns a new string array in which all the specified filter values has been deleted from the specified source array. Declaration public static string[] RemoveAll(string[] source, params string[] filter) Parameters Type Name Description System.String [] source The source array to delete occurrences found in filter . System.String [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String [] A new string array that is equivalent to source except for the removed characters and/or words. Remarks This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position. | Improve this Doc RemoveAll(String[], StringComparison, String[]) Returns a new string array in which all the specified filter values has been deleted from the specified source array. Declaration public static string[] RemoveAll(string[] source, StringComparison comparison, params string[] filter) Parameters Type Name Description System.String [] source The source array to delete occurrences found in filter . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] filter The filter containing the characters and/or words to delete. Returns Type Description System.String [] A new string array that is equivalent to source except for the removed characters and/or words. | Improve this Doc Replace(String, IEnumerable<StringReplacePair>, StringComparison) Replaces all occurrences of the OldValue with NewValue of the replacePairs sequence in value . Declaration public static string Replace(string value, IEnumerable<StringReplacePair> replacePairs, StringComparison comparison) Parameters Type Name Description System.String value The System.String value to perform the replacement on. System.Collections.Generic.IEnumerable < StringReplacePair > replacePairs A sequence of StringReplacePair values. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description System.String A System.String equivalent to value but with all instances of OldValue replaced with NewValue . | Improve this Doc Replace(String, String, String) Replaces all occurrences of oldValue in value , with newValue . Declaration public static string Replace(string value, string oldValue, string newValue) Parameters Type Name Description System.String value The System.String value to perform the replacement on. System.String oldValue The System.String value to be replaced. System.String newValue The System.String value to replace all occurrences of oldValue . Returns Type Description System.String A System.String equivalent to value but with all instances of oldValue replaced with newValue . Remarks This method performs an System.StringComparison.OrdinalIgnoreCase search to find oldValue . | Improve this Doc Replace(String, String, String, StringComparison) Replaces all occurrences of oldValue in value , with newValue . Declaration public static string Replace(string value, string oldValue, string newValue, StringComparison comparison) Parameters Type Name Description System.String value The System.String value to perform the replacement on. System.String oldValue The System.String value to be replaced. System.String newValue The System.String value to replace all occurrences of oldValue . System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description System.String A System.String equivalent to value but with all instances of oldValue replaced with newValue . | Improve this Doc Shuffle(IEnumerable<String>) Shuffles the specified values like a deck of cards. Declaration public static string Shuffle(IEnumerable<string> values) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values The values to be shuffled in the randomization process. Returns Type Description System.String A random string from the shuffled values provided. Exceptions Type Condition System.ArgumentNullException values is null. System.ArgumentOutOfRangeException values is empty. | Improve this Doc Shuffle(String[]) Shuffles the specified values like a deck of cards. Declaration public static string Shuffle(params string[] values) Parameters Type Name Description System.String [] values The values to be shuffled in the randomization process. Returns Type Description System.String A random string from the shuffled values provided. Exceptions Type Condition System.ArgumentNullException values is null. System.ArgumentOutOfRangeException values is empty. | Improve this Doc Split(String) Returns a string array that contains the substrings of value that are delimited by a comma (\",\"). Declaration public static string[] Split(string value) Parameters Type Name Description System.String value The value containing substrings and delimiters. Returns Type Description System.String [] An array whose elements contain the substrings of value that are delimited by a comma (\",\"). Remarks The following table shows the default values for the overloads of this method. Parameter Default Value delimiter , textQualifier \" provider System.Globalization.CultureInfo.InvariantCulture | Improve this Doc Split(String, String) Returns a string array that contains the substrings of value that are delimited by delimiter . Declaration public static string[] Split(string value, string delimiter) Parameters Type Name Description System.String value The value containing substrings and delimiters. System.String delimiter The delimiter specification. Returns Type Description System.String [] An array whose elements contain the substrings of value that are delimited by delimiter . | Improve this Doc Split(String, String, String) Returns a string array that contains the substrings of value that are delimited by delimiter . A parameter specifies the textQualifier that surrounds a field. Declaration public static string[] Split(string value, string delimiter, string textQualifier) Parameters Type Name Description System.String value The value containing substrings and delimiters. System.String delimiter The delimiter specification. System.String textQualifier The text qualifier specification that surrounds a field. Returns Type Description System.String [] An array whose elements contain the substrings of value that are delimited by delimiter . | Improve this Doc Split(String, String, String, IFormatProvider) Returns a string array that contains the substrings of value that are delimited by delimiter . A parameter specifies the textQualifier that surrounds a field. Declaration public static string[] Split(string value, string delimiter, string textQualifier, IFormatProvider provider) Parameters Type Name Description System.String value The value containing substrings and delimiters. System.String delimiter The delimiter specification. System.String textQualifier The text qualifier specification that surrounds a field. System.IFormatProvider provider An System.IFormatProvider that supplies culture-specific formatting information. Returns Type Description System.String [] An array whose elements contain the substrings of value that are delimited by delimiter . Remarks This method was inspired by an article on StackOverflow @ http://stackoverflow.com/questions/2807536/split-string-in-c-sharp . | Improve this Doc StartsWith(String, IEnumerable<String>) Determines whether the beginning of an instance of System.String matches at least one string in the specified sequence of strings. Declaration public static bool StartsWith(string value, IEnumerable<string> startWithValues) Parameters Type Name Description System.String value The System.String to compare. System.Collections.Generic.IEnumerable < System.String > startWithValues A sequence of System.String values to match against. Returns Type Description System.Boolean true if at least one value matches the beginning of this string; otherwise, false . Remarks This match is performed by using a default value of System.StringComparison.OrdinalIgnoreCase . | Improve this Doc StartsWith(String, String[]) Determines whether the beginning of an instance of System.String matches at least one string in the specified sequence of strings. Declaration public static bool StartsWith(string value, params string[] startWithValues) Parameters Type Name Description System.String value The System.String to compare. System.String [] startWithValues A sequence of System.String values to match against. Returns Type Description System.Boolean true if at least one value matches the beginning of this string; otherwise, false . Remarks This match is performed by using a default value of System.StringComparison.OrdinalIgnoreCase . | Improve this Doc StartsWith(String, StringComparison, IEnumerable<String>) Determines whether the beginning of an instance of System.String matches at least one string in the specified sequence of strings. Declaration public static bool StartsWith(string value, StringComparison comparison, IEnumerable<string> startWithValues) Parameters Type Name Description System.String value The System.String to compare. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.Collections.Generic.IEnumerable < System.String > startWithValues A sequence of System.String values to match against. Returns Type Description System.Boolean true if at least one value matches the beginning of this string; otherwise, false . | Improve this Doc StartsWith(String, StringComparison, String[]) Determines whether the beginning of an instance of System.String matches at least one string in the specified sequence of strings. Declaration public static bool StartsWith(string value, StringComparison comparison, params string[] startWithValues) Parameters Type Name Description System.String value The System.String to compare. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. System.String [] startWithValues A sequence of System.String values to match against. Returns Type Description System.Boolean true if at least one value matches the beginning of this string; otherwise, false . Remarks This match is performed by using a default value of System.StringComparison.OrdinalIgnoreCase . | Improve this Doc TrimAll(String) Removes all occurrences of white-space characters from the specified value . Declaration public static string TrimAll(string value) Parameters Type Name Description System.String value A System.String value. Returns Type Description System.String The string that remains after all occurrences of white-space characters are removed from the specified value . | Improve this Doc TrimAll(String, Char[]) Removes all occurrences of a set of characters specified in trimChars from the specified value . Declaration public static string TrimAll(string value, params char[] trimChars) Parameters Type Name Description System.String value A System.String value. System.Char [] trimChars An array of Unicode characters to remove. Returns Type Description System.String The string that remains after all occurrences of the characters in the trimChars parameter are removed from the specified value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc Unescape(String) Unescapes the given System.String the same way as the well known Javascript unescape() function. Declaration public static string Unescape(string value) Parameters Type Name Description System.String value The System.String to unescape. Returns Type Description System.String The input value with an unescaped equivalent. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StringReplacePair.html": {
    "href": "api/core/Cuemon.StringReplacePair.html",
    "title": "Struct StringReplacePair | Cuemon .NET Standard",
    "keywords": "Struct StringReplacePair Defines a oldValue/newValue pair that can be set or retrieved for string replace operations. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public struct StringReplacePair Constructors | Improve this Doc StringReplacePair(String, String) Initializes a new instance of the StringReplacePair struct. Declaration public StringReplacePair(string oldValue, string newValue) Parameters Type Name Description System.String oldValue The System.String value to be replaced. System.String newValue The System.String value to replace all occurrences of oldValue . Properties | Improve this Doc NewValue Gets the System.String value to replace all occurrences of OldValue . Declaration public string NewValue { get; set; } Property Value Type Description System.String The System.String value to replace all occurrences of OldValue . | Improve this Doc OldValue Gets the System.String value to be replaced. Declaration public string OldValue { get; set; } Property Value Type Description System.String The System.String value to be replaced. Methods | Improve this Doc Equals(StringReplacePair) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(StringReplacePair other) Parameters Type Name Description StringReplacePair other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc ToString() Returns a string representation of the StringReplacePair , using the string representations of the oldValue and newValue. Declaration public override string ToString() Returns Type Description System.String A string representation of the StringReplacePair , which includes the string representations of the oldValue and newValue. Overrides System.ValueType.ToString() Remarks The string representation consists of the string representations of the oldValue and newValue, separated by a comma and a space, and enclosed in square brackets. For example, the ToString method for a StringReplacePair structure with the string OldValue \"Test1\" and the string NewValue \"Test2\" returns the string \"[Test1, Test2]\". Operators | Improve this Doc Equality(StringReplacePair, StringReplacePair) Indicates whether two StringReplacePair instances are equal. Declaration public static bool operator ==(StringReplacePair replacePair1, StringReplacePair replacePair2) Parameters Type Name Description StringReplacePair replacePair1 The first date interval to compare. StringReplacePair replacePair2 The second date interval to compare. Returns Type Description System.Boolean true if the values of replacePair1 and replacePair2 are equal; otherwise, false. | Improve this Doc Inequality(StringReplacePair, StringReplacePair) Indicates whether two DateSpan instances are not equal. Declaration public static bool operator !=(StringReplacePair replacePair1, StringReplacePair replacePair2) Parameters Type Name Description StringReplacePair replacePair1 The first date interval to compare. StringReplacePair replacePair2 The second date interval to compare. Returns Type Description System.Boolean true if the values of replacePair1 and replacePair2 are not equal; otherwise, false. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.Converters.html": {
    "href": "api/core/Cuemon.Serialization.Xml.Converters.html",
    "title": "Namespace Cuemon.Serialization.Xml.Converters | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Serialization.Xml.Converters Assembly : Cuemon.Serialization.Xml.dll Classes DefaultXmlConverter Provides a default way to convert objects to and from XML. XmlConverter Converts an object to and from XML. XmlConverterListExtensions Extension methods for the System.Collections.Generic.IList<T> . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.Converters.XmlConverterListExtensions.html": {
    "href": "api/core/Cuemon.Serialization.Xml.Converters.XmlConverterListExtensions.html",
    "title": "Class XmlConverterListExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlConverterListExtensions Extension methods for the System.Collections.Generic.IList<T> . Inheritance System.Object XmlConverterListExtensions Namespace : Cuemon.Serialization.Xml.Converters Assembly : Cuemon.Serialization.Xml.dll Syntax public static class XmlConverterListExtensions Methods | Improve this Doc AddDateTimeConverter(IList<XmlConverter>) Adds an System.DateTime XML converter to the list. Declaration public static void AddDateTimeConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddEnumerableConverter(IList<XmlConverter>) Adds an System.Collections.IEnumerable XML converter to the list. Declaration public static void AddEnumerableConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddExceptionConverter(IList<XmlConverter>, Boolean) Adds an System.Exception XML converter to the list. Declaration public static void AddExceptionConverter(this IList<XmlConverter> converters, bool includeStackTrace) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. System.Boolean includeStackTrace if set to true the stack of an exception is included. | Improve this Doc AddExceptionDescriptorConverter(IList<XmlConverter>) Adds an ExceptionDescriptor XML converter to the list. Declaration public static void AddExceptionDescriptorConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddStringConverter(IList<XmlConverter>) Adds an System.String XML converter to the list. Declaration public static void AddStringConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddTimeSpanConverter(IList<XmlConverter>) Adds an System.TimeSpan XML converter to the list. Declaration public static void AddTimeSpanConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddUriConverter(IList<XmlConverter>) Adds an System.Uri XML converter to the list. Declaration public static void AddUriConverter(this IList<XmlConverter> converters) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. | Improve this Doc AddXmlConverter<T>(IList<XmlConverter>, Action<XmlWriter, T, XmlQualifiedEntity>, Func<XmlReader, Type, T>, Func<Type, Boolean>) Adds an XML converter to the list. Declaration public static void AddXmlConverter<T>(this IList<XmlConverter> converters, Action<XmlWriter, T, XmlQualifiedEntity> writer = null, Func<XmlReader, Type, T> reader = null, Func<Type, bool> canConvertPredicate = null) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. System.Action < System.Xml.XmlWriter , T, XmlQualifiedEntity > writer The delegate that converts T to its XML representation. System.Func < System.Xml.XmlReader , System.Type , T> reader The delegate that generates T from its XML representation. System.Func < System.Type , System.Boolean > canConvertPredicate The delegate that determines if an object can be converted. Type Parameters Name Description T The type of the object to converts to and from XML. | Improve this Doc FirstOrDefaultReaderConverter(IList<XmlConverter>, Type) Returns the first XmlConverter of the converters that CanConvert(Type) and CanRead the specified objectType ; otherwise null if no XmlConverter is found. Declaration public static XmlConverter FirstOrDefaultReaderConverter(this IList<XmlConverter> converters, Type objectType) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. System.Type objectType Type of the object to deserialize. Returns Type Description XmlConverter An XmlConverter that can deserialize the specified objectType ; otherwise null . | Improve this Doc FirstOrDefaultWriterConverter(IList<XmlConverter>, Type) Returns the first XmlConverter of the converters that CanConvert(Type) and CanWrite the specified objectType ; otherwise null if no XmlConverter is found. Declaration public static XmlConverter FirstOrDefaultWriterConverter(this IList<XmlConverter> converters, Type objectType) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. System.Type objectType Type of the object to serialize. Returns Type Description XmlConverter An XmlConverter that can serialize the specified objectType ; otherwise null . | Improve this Doc InsertXmlConverter<T>(IList<XmlConverter>, Int32, Action<XmlWriter, T, XmlQualifiedEntity>, Func<XmlReader, Type, T>, Func<Type, Boolean>) Inserts an XML converter to the list at the specified index . Declaration public static void InsertXmlConverter<T>(this IList<XmlConverter> converters, int index, Action<XmlWriter, T, XmlQualifiedEntity> writer = null, Func<XmlReader, Type, T> reader = null, Func<Type, bool> canConvertPredicate = null) Parameters Type Name Description System.Collections.Generic.IList < XmlConverter > converters The list of XML converters. System.Int32 index The zero-based index at which an XML converter should be inserted. System.Action < System.Xml.XmlWriter , T, XmlQualifiedEntity > writer The delegate that converts T to its XML representation. System.Func < System.Xml.XmlReader , System.Type , T> reader The delegate that generates T from its XML representation. System.Func < System.Type , System.Boolean > canConvertPredicate The delegate that determines if an object can be converted. Type Parameters Name Description T The type of the object to converts to and from XML. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.StringHashOptions.html": {
    "href": "api/core/Cuemon.Security.Cryptography.StringHashOptions.html",
    "title": "Class StringHashOptions | Cuemon .NET Standard",
    "keywords": "Class StringHashOptions Specifies options that is related to System.Security.Cryptography.HashAlgorithm operations. This class cannot be inherited. Inheritance System.Object HashOptions StringHashOptions Inherited Members HashOptions.AlgorithmType Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public sealed class StringHashOptions : HashOptions Constructors | Improve this Doc StringHashOptions() Initializes a new instance of the StringHashOptions class. Declaration public StringHashOptions() Remarks The following table shows the initial property values for an instance of StringHashOptions . Property Initial Value AlgorithmType MD5 Encoding System.Text.Encoding.Unicode Preamble Remove Properties | Improve this Doc Encoding Gets or sets the encoding for the operation. Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding The encoding for the operation. | Improve this Doc Preamble Gets or sets the action to take in regards to encoding related preamble sequences. Declaration public PreambleSequence Preamble { get; set; } Property Value Type Description PreambleSequence A value that indicates whether to preserve or remove preamble sequences. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also HashOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.StreamKeyedHashOptions.html": {
    "href": "api/core/Cuemon.Security.Cryptography.StreamKeyedHashOptions.html",
    "title": "Class StreamKeyedHashOptions | Cuemon .NET Standard",
    "keywords": "Class StreamKeyedHashOptions Specifies options that is related to System.Security.Cryptography.KeyedHashAlgorithm operations. This class cannot be inherited. Inheritance System.Object KeyedHashOptions StreamKeyedHashOptions Inherited Members KeyedHashOptions.AlgorithmType Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public sealed class StreamKeyedHashOptions : KeyedHashOptions Constructors | Improve this Doc StreamKeyedHashOptions() Initializes a new instance of the StreamKeyedHashOptions class. Declaration public StreamKeyedHashOptions() Remarks The following table shows the initial property values for an instance of StreamKeyedHashOptions . Property Initial Value AlgorithmType SHA1 LeaveStreamOpen false Properties | Improve this Doc LeaveStreamOpen Gets or sets a value indicating whether the System.IO.Stream is being left open or to have it being closed and disposed. Declaration public bool LeaveStreamOpen { get; set; } Property Value Type Description System.Boolean true if the System.IO.Stream is being left open; otherwise, false to have it being closed and disposed of. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also KeyedHashOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.AdvancedEncryptionStandardKeySize.html": {
    "href": "api/core/Cuemon.Security.Cryptography.AdvancedEncryptionStandardKeySize.html",
    "title": "Enum AdvancedEncryptionStandardKeySize | Cuemon .NET Standard",
    "keywords": "Enum AdvancedEncryptionStandardKeySize Specifies the key size to be used in the Advanced Encryption Standard (AES) cipher. Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public enum AdvancedEncryptionStandardKeySize Fields Name Description AES128 A key size of 128 bit. AES192 A key size of 192 bit. AES256 A key size of 256 bit. Extension Methods ByteConverterExtensions.ToByteArray<AdvancedEncryptionStandardKeySize>() ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, TResult>(Func<AdvancedEncryptionStandardKeySize, TResult>) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T, TResult>(Func<AdvancedEncryptionStandardKeySize, T, TResult>, T) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T1, T2, TResult>(Func<AdvancedEncryptionStandardKeySize, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T1, T2, T3, TResult>(Func<AdvancedEncryptionStandardKeySize, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, TResult>(Func<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, TResult>(Func<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, T6, TResult>(Func<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<AdvancedEncryptionStandardKeySize, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<AdvancedEncryptionStandardKeySize>() DelegateUtilityExtensions.DynamicWrap<AdvancedEncryptionStandardKeySize>() TweakerExtensions.Adjust<AdvancedEncryptionStandardKeySize>(Func<AdvancedEncryptionStandardKeySize, AdvancedEncryptionStandardKeySize>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<AdvancedEncryptionStandardKeySize>() WrapperExtensions.UseWrapper<AdvancedEncryptionStandardKeySize>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<AdvancedEncryptionStandardKeySize>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<AdvancedEncryptionStandardKeySize>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-1.html",
    "title": "Class ConfigurableMiddleware<TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableMiddleware<TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore <TOptions> ConfigurableMiddleware<TOptions> BasicAuthenticationMiddleware DigestAccessAuthenticationMiddleware HmacAuthenticationMiddleware CorrelationIdentifierMiddleware Implements IConfigurable <TOptions> Inherited Members ConfigurableMiddlewareCore<TOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class ConfigurableMiddleware<TOptions> : ConfigurableMiddlewareCore<TOptions>, IConfigurable<TOptions> where TOptions : class, new() Type Parameters Name Description TOptions The type of the options to setup. Constructors | Improve this Doc ConfigurableMiddleware(RequestDelegate, IOptions<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, IOptions<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableMiddleware(RequestDelegate, Action<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, Action<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc InvokeAsync(HttpContext) Executes the Middleware . Declaration public abstract Task InvokeAsync(HttpContext context) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Middleware (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAuthenticationUtility.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAuthenticationUtility.html",
    "title": "Class DigestAuthenticationUtility | Cuemon .NET Standard",
    "keywords": "Class DigestAuthenticationUtility Provides an isolated set of members to work with HTTP Digest access authentication. Inheritance System.Object DigestAuthenticationUtility Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public static class DigestAuthenticationUtility Fields | Improve this Doc CredentialAlgorithm The value of the header credential algorithm of a HTTP Digest access authentication. Declaration public const string CredentialAlgorithm = \"algorithm\" Field Value Type Description System.String | Improve this Doc CredentialClientNonce The value of the header credential client nonce of a HTTP Digest access authentication. Declaration public const string CredentialClientNonce = \"cnonce\" Field Value Type Description System.String | Improve this Doc CredentialDigestUri The value of the header credential digest URI of a HTTP Digest access authentication. Declaration public const string CredentialDigestUri = \"uri\" Field Value Type Description System.String | Improve this Doc CredentialNonce The value of the header credential nonce of a HTTP Digest access authentication. Declaration public const string CredentialNonce = \"nonce\" Field Value Type Description System.String | Improve this Doc CredentialNonceCount The value of the header credential nonce count of a HTTP Digest access authentication. Declaration public const string CredentialNonceCount = \"nc\" Field Value Type Description System.String | Improve this Doc CredentialOpaque The value of the header credential opaque of a HTTP Digest access authentication. Declaration public const string CredentialOpaque = \"opaque\" Field Value Type Description System.String | Improve this Doc CredentialQualityOfProtection The value of the header credential quality of protection of a HTTP Digest access authentication. Declaration public const string CredentialQualityOfProtection = \"qop\" Field Value Type Description System.String | Improve this Doc CredentialQualityOfProtectionOptions The value of the header credential quality of protection options of a HTTP Digest access authentication. Declaration public const string CredentialQualityOfProtectionOptions = \"auth,auth-int\" Field Value Type Description System.String | Improve this Doc CredentialRealm The value of the header credential realm of a HTTP Digest access authentication. Declaration public const string CredentialRealm = \"realm\" Field Value Type Description System.String | Improve this Doc CredentialResponse The value of the header credential response of a HTTP Digest access authentication. Declaration public const string CredentialResponse = \"response\" Field Value Type Description System.String | Improve this Doc CredentialUserName The value of the header credential user name of a HTTP Digest access authentication. Declaration public const string CredentialUserName = \"username\" Field Value Type Description System.String Methods | Improve this Doc ComputeHash1(IDictionary<String, String>, String, HashAlgorithmType) Computes a by parameter defined HashAlgorithmType hash value of the required values for the HTTP Digest access authentication HA1. Declaration public static string ComputeHash1(IDictionary<string, string> credentials, string password, HashAlgorithmType algorithm) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > credentials The credentials of the HA1 computed value ( CredentialUserName , CredentialRealm ). System.String password The password to include in the HA1 computed value. HashAlgorithmType algorithm The algorithm to use when computing the HA1 value. Returns Type Description System.String A System.String in the format of H(' credentials [CredentialUserName]: credentials [CredentialRealm]: password '). | Improve this Doc ComputeHash2(IDictionary<String, String>, String, HashAlgorithmType) Computes a by parameter defined HashAlgorithmType hash value of the required values for the HTTP Digest access authentication HA2. Declaration public static string ComputeHash2(IDictionary<string, string> credentials, string httpMethod, HashAlgorithmType algorithm) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > credentials The credentials of the HA2 computed value ( CredentialDigestUri ). System.String httpMethod The HTTP method to include in the HA2 computed value. HashAlgorithmType algorithm The algorithm to use when computing the HA2 value. Returns Type Description System.String A System.String in the format of H(' httpMethod : credentials [CredentialDigestUri]'). | Improve this Doc ComputeResponse(IDictionary<String, String>, String, String, HashAlgorithmType) Computes a by parameter defined HashAlgorithmType hash value of the required values for the HTTP Digest access authentication RESPONSE. Declaration public static byte[] ComputeResponse(IDictionary<string, string> credentials, string hash1, string hash2, HashAlgorithmType algorithm) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > credentials The credentials of the RESPONSE computed value ( CredentialNonce , CredentialNonceCount , CredentialClientNonce , CredentialQualityOfProtection ). System.String hash1 The HA1 to include in the RESPONSE computed value. System.String hash2 The HA2 to include in the RESPONSE computed value. HashAlgorithmType algorithm The algorithm to use when computing the RESPONSE value. Returns Type Description System.Byte [] A System.String in the format of H(' hash1 : credentials [CredentialNonce]: credentials [CredentialNonceCount]: credentials [CredentialClientNonce]: credentials [CredentialQualityOfProtection]: hash2 '). | Improve this Doc DefaultNonceExpiredParser(String, TimeSpan) A default implementation of a nonce parser. Declaration public static bool DefaultNonceExpiredParser(string nonce, TimeSpan timeToLive) Parameters Type Name Description System.String nonce The nonce protocol. System.TimeSpan timeToLive The time-to-live (ttl) of the nonce . Returns Type Description System.Boolean true if the specified nonce has expired compared to timeToLive ; otherwise, false . | Improve this Doc DefaultNonceGenerator(DateTime, String, Byte[]) A default implementation of a nonce generator. Declaration public static string DefaultNonceGenerator(DateTime timestamp, string entityTag, byte[] privateKey) Parameters Type Name Description System.DateTime timestamp The System.DateTime value to include in the generated nonce. System.String entityTag An opaque identifier to include in the generated nonce. System.Byte [] privateKey A cryptographic private key to include as a cipher in the generated nonce. Returns Type Description System.String A nonce protocol in the format of ' timestamp :H( timestamp entityTag privateKey )'. | Improve this Doc DefaultOpaqueGenerator() A default implementation of opaque generator. Declaration public static string DefaultOpaqueGenerator() Returns Type Description System.String An opaque value consisting of hexadecimal characters with a length of 32 bytes. | Improve this Doc ParseAlgorithm(HashAlgorithmType) Converts the specified algorithm to its HTTP Digest access authentication header credential algorithm equivalent. Declaration public static string ParseAlgorithm(HashAlgorithmType algorithm) Parameters Type Name Description HashAlgorithmType algorithm The algorithm to convert. Returns Type Description System.String A string containing either MD5, SHA-256 or SHA-512-256. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationBuilderExtension.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationBuilderExtension.html",
    "title": "Class DigestAccessAuthenticationBuilderExtension | Cuemon .NET Standard",
    "keywords": "Class DigestAccessAuthenticationBuilderExtension This is a factory implementation of the DigestAccessAuthenticationMiddleware class. Inheritance System.Object DigestAccessAuthenticationBuilderExtension Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public static class DigestAccessAuthenticationBuilderExtension Methods | Improve this Doc UseDigestAccessAuthentication(IApplicationBuilder, Action<DigestAccessAuthenticationOptions>) Adds a HTTP Digest Authentication scheme to the Microsoft.AspNetCore.Builder.IApplicationBuilder request execution pipeline. Declaration public static IApplicationBuilder UseDigestAccessAuthentication(this IApplicationBuilder builder, Action<DigestAccessAuthenticationOptions> setup = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder builder The type that provides the mechanisms to configure an application’s request pipeline. System.Action < DigestAccessAuthenticationOptions > setup The HTTP DigestAccessAuthenticationMiddleware middleware which need to be configured. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder A reference to this instance after the operation has completed. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.Converters.JsonConverterCollectionExtensions.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.Converters.JsonConverterCollectionExtensions.html",
    "title": "Class JsonConverterCollectionExtensions | Cuemon .NET Standard",
    "keywords": "Class JsonConverterCollectionExtensions Extension methods for the . Inheritance System.Object JsonConverterCollectionExtensions Namespace : Cuemon.Serialization.Json.Converters Assembly : Cuemon.Serialization.Json.dll Syntax public static class JsonConverterCollectionExtensions : object Methods | Improve this Doc AddDataPairConverter(ICollection<JsonConverter>) Adds an DataPair JSON converter to the list. Declaration public static void AddDataPairConverter(this ICollection<JsonConverter> converters) Parameters Type Name Description ICollection < JsonConverter > converters The list of JSON converters. | Improve this Doc AddExceptionConverter(ICollection<JsonConverter>, Boolean) Adds an JSON converter to the list. Declaration public static void AddExceptionConverter(this ICollection<JsonConverter> converters, bool includeStackTrace) Parameters Type Name Description ICollection < JsonConverter > converters The list of JSON converters. System.Boolean includeStackTrace if set to true the stack of an exception is included in the converted result. | Improve this Doc AddExceptionDescriptorConverter(ICollection<JsonConverter>) Adds an ExceptionDescriptor JSON converter to the list. Declaration public static void AddExceptionDescriptorConverter(this ICollection<JsonConverter> converters) Parameters Type Name Description ICollection < JsonConverter > converters The list of JSON converters. | Improve this Doc AddStringEnumConverter(ICollection<JsonConverter>) Adds an JSON converter to the list. Declaration public static void AddStringEnumConverter(this ICollection<JsonConverter> converters) Parameters Type Name Description ICollection < JsonConverter > converters The list of JSON converters. | Improve this Doc AddStringFlagsEnumConverter(ICollection<JsonConverter>) Adds a combined and JSON converter to the list. Declaration public static void AddStringFlagsEnumConverter(this ICollection<JsonConverter> converters) Parameters Type Name Description ICollection < JsonConverter > converters The list of JSON converters. | Improve this Doc AddTimeSpanConverter(ICollection<JsonConverter>) Adds a JSON converter to the list. Declaration public static void AddTimeSpanConverter(this ICollection<JsonConverter> converters) Parameters Type Name Description ICollection < JsonConverter > converters The list of JSON converters. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.html": {
    "href": "api/core/Cuemon.html",
    "title": "Namespace Cuemon | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon Assembly : Cuemon.Core.dll Classes ActionFactory Provides access to factory methods for creating ActionFactory<TTuple> instances that encapsulate a delegate with a variable amount of generic arguments. ActionFactory<TTuple> Provides an easy way of invoking an System.Action delegate regardless of the amount of parameters provided. ArgumentEmptyException The exception that is thrown when an empty System.String is passed to a method that does not accept it as a valid argument. AssignmentUtility This utility class is designed to make arithmetic assignment operations for numeric operands easier to work with by using generics. ByteConverter This utility class is designed to make System.Byte related conversions easier to work with. ByteConverterExtensions This is an extension implementation of the ByteConverter class. ByteExtensions This is an extension implementation of the System.Byte structure using various methods already found in the Microsoft .NET Framework. ByteUtility This utility class is designed to make common System.Byte operations easier to work with. ByteUtilityExtensions This is an extension implementation of the most common methods on the ByteUtility class. CharConverter This utility class is designed to make System.Char related conversions easier to work with. CharConverterExtensions This is an extensions implementation of the CharConverter class. Condition Provide ways to verify conditions a generic way for countless scenarios using true/false propositions. ConditionBuilder<TTuple> Supports the Condition in building custom scenarios using true/false propositions. ConditionExtensions This is an extension implementation of the most common methods on the Condition class. Converter This utility class is designed to make generic conversions easier to work with. ConverterExtensions This is an extension implementation of the Converter class. ConvertibleConverter This utility class is designed to make System.IConvertible related conversions easier to work with. ConvertibleConverterExtensions This is an extension implementation of the ConvertibleConverter class. DataPair Represents a generic way to provide information about arbitrary data. DataPair<T> Represents a generic way to provide information about arbitrary data. DateTimeConverter This utility class is designed to make System.DateTime related conversions easier to work with. DateTimeConverterExtensions This is an extension implementation of the DateTimeConverter class. DateTimeExtensions This is an extensions implementation of the System.DateTime structure using methods already found in the Microsoft .NET Framework. DateTimeUtility This utility class is designed to make System.DateTime operations easier to work with. DateTimeUtilityExtensions This is an extension implementation of the most common methods on the DateTimeUtility class. DayPart Represents a part of a day. DayParts Provides a roughly way to determine if a given part of day is either; Night, Morning, Forenoon, Afternoon og Evening. DelegateUtility This utility class is designed to make common delegate operations easier to work with. DelegateUtilityExtensions This is an extension implementation of the most common methods on the DelegateUtility class. DoubleConverter This utility class is designed to make System.Double related conversions easier to work with. DoubleConverterExtensions This is an extension implementation of the DoubleConverter class. EnumUtility This utility class is designed to make enum related operations easier to work with. EnumUtilityExtensions This is an extension implementation of the most common methods on the EnumUtility class. EventUtility This utility class is designed to make some event related operations easier to work with. ExceptionUtility This utility class is designed to make exception operations more flexible and easier to work with. ExceptionUtilityExtensions This is an extension implementation of the most common methods on the ExceptionUtility class. FuncFactory Provides access to factory methods for creating FuncFactory<TTuple, TResult> instances that encapsulate a function delegate with a variable amount of generic arguments. FuncFactory<TTuple, TResult> Provides an easy way of invoking an System.Func<TResult> function delegate regardless of the amount of parameters provided. GuidConverter This utility class is designed to make System.Guid related conversions easier to work with. GuidConverterExtensions This is an extension implementation of the GuidConverter class. GuidUtility This utility class is designed to make some System.Guid operations easier to work with. Hierarchy<T> Represents a way to expose a node of a hierarchical structure, including the node object of type T . HierarchyExtensions Extension methods for a hierarchical structure based on IHierarchy<T> . HierarchySerializer Provides a way to serialize objects to nodes of IHierarchy<T> . HierarchyUtility This utility class is designed to make object hierarchy operations easier to work with. IndexMapping Defines the mapping between a column/field/item in a data source and a column/field/item in the data destination. This class cannot be inherited. Initializer Provides a generic way to wrap and initialize a class for countless scenarios. InitializerBuilder<T> Supports the Initializer for building custom initializers. IntegerExtensions Provides extension methods for System.Int16 , System.Int32 and System.Int64 . LatencyException The exception that is thrown when a latency related operation was taking to long to complete. LoopUtility Provides support for a generic way of specifying loops while providing ways to encapsulate and re-use existing code. Mapping Defines the mapping between a column/field/item in a data source and a column/field/item in the data destination. MappingExtensions This is an extension implementation of the most common methods on the Mapping class. MethodWrappedException Wraps an exception that was refined with meta information from either Refine(Exception, MethodBase, Object[]) or Refine(Exception, MethodDescriptor, Object[]) . This class cannot be inherited. NumberUtility This utility class is designed to make number operations easier to work with. NumberUtilityExtensions This is an extension implementation of the most common methods on the NumberUtility class. ObjectConverter This utility class is designed to make System.Object related conversions easier to work with. StringConverter This utility class is designed to make System.String related conversions easier to work with. StringConverterExtensions This is an extension implementation of the StringConverter class. StringExtensions This is an extension implementation of the System.String class using various methods already found in the Microsoft .NET Framework. StringFormatter This utility class is designed to make System.String related formating operations easier to work with. StringUtility This utility class is designed to make System.String operations easier to work with. StringUtilityExtensions This is an extension implementation of the most common methods on the StringUtility class. StructUtility This utility class is designed to make common struct related operations easier to work with. StructUtilityExtensions This is an extension implementation of the most common methods on the StructUtility class. TaskActionFactory Provides access to factory methods for creating TaskActionFactory<TTuple> instances that encapsulate a System.Threading.Tasks.Task based function delegate with a variable amount of generic arguments. TaskActionFactory<TTuple> Provides an easy way of invoking an System.Action delegate regardless of the amount of parameters provided. TaskFuncFactory Provides access to factory methods for creating TaskFuncFactory<TTuple, TResult> instances that encapsulate a System.Threading.Tasks.Task<TResult> based function delegate with a variable amount of generic arguments. TaskFuncFactory<TTuple, TResult> Provides an easy way of invoking an System.Func<TResult> function delegate regardless of the amount of parameters provided. Template Represents a Template with an empty value. Template<T1> Represents a Template with a single generic value. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Represents a Template with ten generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Represents a Template with eleven generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Represents a Template with twelve generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Represents a Template with thirteen generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Represents a Template with fourteen generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Represents a Template with fifteen generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Represents a Template with sixteen generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Represents a Template with seventeen generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Represents a Template with eighteen generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Represents a Template with nineteen generic values. Template<T1, T2> Represents a Template with two generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Represents a Template with twenty generic values. Template<T1, T2, T3> Represents a Template with three generic values. Template<T1, T2, T3, T4> Represents a Template with four generic values. Template<T1, T2, T3, T4, T5> Represents a Template with five generic values. Template<T1, T2, T3, T4, T5, T6> Represents a Template with six generic values. Template<T1, T2, T3, T4, T5, T6, T7> Represents a Template with seven generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8> Represents a Template with eight generic values. Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> Represents a Template with nine generic values. TemplateFactory<TTuple> Provides a base-class for delegate based factories. TesterDoer Provides a set of methods that can assist with the tester-doer pattern. TesterFuncFactory Provides access to factory methods for creating TesterFuncFactory<TTuple, TResult, TSuccess> instances that encapsulate a tester function delegate with a variable amount of generic arguments. TesterFuncFactory<TTuple, TResult, TSuccess> Provides an easy way of invoking an TesterFunc<TResult, TSuccess> function delegate regardless of the amount of parameters provided. TesterFuncUtility This utility class is designed to handle those rare scenarios where you have knowledge about potential exceptions that can be safely ignored. TimeSpanConverter This utility class is designed to make System.TimeSpan related conversions easier to work with. TimeSpanConverterExtensions This is an extension implementation of the TimeSpanConverter class. TimeSpanExtensions Extension methods for the System.TimeSpan structure. TransientFaultEvidence Provides evidence about a faulted TransientOperation . TransientFaultException The exception that is thrown when a transient fault handling was unsuccessful. TransientOperation Provides developers ways to make their applications more resilient by adding robust transient fault handling logic ideal for temporary condition such as network connectivity issues or service unavailability. TransientOperationOptions Specifies options that is related to TransientOperation handling. TupleUtility Provides static methods for creating tuple objects. Tweaker Provides a way to change any instance of the same generic type. TweakerExtensions Extension methods for the Tweaker class. TypeArgumentException The exception that is thrown when one of the type arguments provided to a method is not valid. TypeArgumentOutOfRangeException The exception that is thrown when the value of an type argument is outside the allowable range of values as defined by the invoked method. TypeCodeConverter This utility class is designed to make System.TypeCode related conversions easier to work with. TypeCodeConverterExtensions This is an extension implementation of the most common methods on the TypeCodeConverter class. TypeExtensions Extension methods for the System.Type . TypeUtility This utility class is designed to make System.Type operations easier to work with. TypeUtilityExtensions This is an extension implementation of the most common methods on the TypeUtility class. UriConverter This utility class is designed to make System.Uri related conversions easier to work with. UriSchemeConverter This utility class is designed to make UriScheme related conversions easier to work with. UriUtility This utility class is designed to make System.Uri operations easier to work with. Validator Provides a generic way to validate different types of arguments passed to members. VersionUtility This utility class is designed to make common System.Version related operations easier to work with. Wrapper Provides helper method for a Wrapper<T> object. Wrapper<T> Provides a way to wrap an object of type T . WrapperExtensions Extension methods for the IWrapper<T> . Structs DateSpan Represents a System.DateTime interval between two System.DateTime values. StringReplacePair Defines a oldValue/newValue pair that can be set or retrieved for string replace operations. TimeRange Represents a period of time between two System.DateTime values. Interfaces IData Provides a way to supply information about the class implementing this interface. IHierarchy<T> Provides a generic way to expose a node of a hierarchical structure, including the node object of type T . IWrapper<T> Provides a generic way to wrap an object instance of T inside another object. Enums AssignmentOperator Defines the most common assignment operators for numeric operands. CasingMethod Specifies ways that a string must be converted in terms of casing. DateTimeFormatPattern Defines the default pattern to use when formatting date- and time values. GuidFormats Specifies allowed GUID formats in parsing related methods. HorizontalDirection Specifies a set of values defining a horizontal direction. PreambleSequence Specifies what action to take in regards to encoding preamble sequences. RandomSeverity Specifies the severity of the generation of a random number. RelationalOperator Defines the most common numerical relational operators. RoundOffAccuracy The accuracy of a rounding for a computed number. SortOrder Specifies the direction of a sort operation. StandardizedDateTimeFormatPattern Defines some standardized patterns to use when formatting date- and time values. TimeUnit Specifies the unit of time - typically used with a System.TimeSpan . UriScheme Defines the schemes available for an System.Uri class. VerticalDirection Specifies a set of values defining a vertical direction. Delegates TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<TResult, TSuccess> Encapsulates a method and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T, TResult, TSuccess> Encapsulates a method that has one parameter and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, TResult, TSuccess> Encapsulates a method that has two parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, TResult, TSuccess> Encapsulates a method that has three parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, TResult, TSuccess> Encapsulates a method that has four parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. TesterFunc<T1, T2, T3, T4, T5, T6, T7, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Validator.html": {
    "href": "api/core/Cuemon.Validator.html",
    "title": "Class Validator | Cuemon .NET Standard",
    "keywords": "Class Validator Provides a generic way to validate different types of arguments passed to members. Inheritance System.Object Validator Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class Validator Methods | Improve this Doc ThrowIf(Func<Boolean>, Func<String, String, Exception>, String, String) Validates from the provided condition . An exception is resolved and thrown if the condition evaluates true . Declaration public static void ThrowIf(Func<bool> condition, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description System.Func < System.Boolean > condition The function delegate that determines if an exception is thrown. System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIf<TValue>(TValue, Func<TValue, Boolean>, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates true . Declaration public static void ThrowIf<TValue>(TValue value, Func<TValue, bool> condition, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, System.Boolean > condition The function delegate that determines if an exception is thrown. System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIf<TValue, T>(TValue, Func<TValue, T, Boolean>, T, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates true . Declaration public static void ThrowIf<TValue, T>(TValue value, Func<TValue, T, bool> condition, T arg, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T, System.Boolean > condition The function delegate that determines if an exception is thrown. T arg The parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T The type of the parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIf<TValue, T1, T2>(TValue, Func<TValue, T1, T2, Boolean>, T1, T2, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates true . Declaration public static void ThrowIf<TValue, T1, T2>(TValue value, Func<TValue, T1, T2, bool> condition, T1 arg1, T2 arg2, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T1, T2, System.Boolean > condition The function delegate that determines if an exception is thrown. T1 arg1 The first parameter of the function delegate condition . T2 arg2 The second parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T1 The type of the first parameter of the function delegate condition . T2 The type of the second parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIf<TValue, T1, T2, T3>(TValue, Func<TValue, T1, T2, T3, Boolean>, T1, T2, T3, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates true . Declaration public static void ThrowIf<TValue, T1, T2, T3>(TValue value, Func<TValue, T1, T2, T3, bool> condition, T1 arg1, T2 arg2, T3 arg3, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T1, T2, T3, System.Boolean > condition The function delegate that determines if an exception is thrown. T1 arg1 The first parameter of the function delegate condition . T2 arg2 The second parameter of the function delegate condition . T3 arg3 The third parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T1 The type of the first parameter of the function delegate condition . T2 The type of the second parameter of the function delegate condition . T3 The type of the third parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIf<TValue, T1, T2, T3, T4>(TValue, Func<TValue, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates true . Declaration public static void ThrowIf<TValue, T1, T2, T3, T4>(TValue value, Func<TValue, T1, T2, T3, T4, bool> condition, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T1, T2, T3, T4, System.Boolean > condition The function delegate that determines if an exception is thrown. T1 arg1 The first parameter of the function delegate condition . T2 arg2 The second parameter of the function delegate condition . T3 arg3 The third parameter of the function delegate condition . T4 arg4 The fourth parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T1 The type of the first parameter of the function delegate condition . T2 The type of the second parameter of the function delegate condition . T3 The type of the third parameter of the function delegate condition . T4 The type of the fourth parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIf<TValue, T1, T2, T3, T4, T5>(TValue, Func<TValue, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates true . Declaration public static void ThrowIf<TValue, T1, T2, T3, T4, T5>(TValue value, Func<TValue, T1, T2, T3, T4, T5, bool> condition, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T1, T2, T3, T4, T5, System.Boolean > condition The function delegate that determines if an exception is thrown. T1 arg1 The first parameter of the function delegate condition . T2 arg2 The second parameter of the function delegate condition . T3 arg3 The third parameter of the function delegate condition . T4 arg4 The fourth parameter of the function delegate condition . T5 arg5 The fifth parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T1 The type of the first parameter of the function delegate condition . T2 The type of the second parameter of the function delegate condition . T3 The type of the third parameter of the function delegate condition . T4 The type of the fourth parameter of the function delegate condition . T5 The type of the fifth parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIfContainsType(Object, String, String, Type[]) Validates and throws an System.ArgumentOutOfRangeException if the specified value is contained within at least one of the specified types . Declaration public static void ThrowIfContainsType(object value, string paramName, string message, params Type[] types) Parameters Type Name Description System.Object value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Type [] types A variable number of System.Type arguments to match with the type of value . Exceptions Type Condition System.ArgumentNullException value is null - or - types is null. System.ArgumentOutOfRangeException value is contained within at least one of the specified types . | Improve this Doc ThrowIfContainsType(Object, String, Type[]) Validates and throws an System.ArgumentOutOfRangeException if the specified value is contained within at least one of the specified types . Declaration public static void ThrowIfContainsType(object value, string paramName, params Type[] types) Parameters Type Name Description System.Object value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.Type [] types A variable number of System.Type arguments to match with the type of value . Exceptions Type Condition System.ArgumentNullException value is null - or - types is null. System.ArgumentOutOfRangeException value is contained within at least one of the specified types . | Improve this Doc ThrowIfContainsType(Type, String, String, Type[]) Validates and throws an System.ArgumentOutOfRangeException if the specified value is contained within at least one of the specified types . Declaration public static void ThrowIfContainsType(Type value, string paramName, string message, params Type[] types) Parameters Type Name Description System.Type value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Type [] types A variable number of System.Type arguments to match with the type of value . Exceptions Type Condition System.ArgumentNullException value is null - or - types is null. System.ArgumentOutOfRangeException value is contained within at least one of the specified types . | Improve this Doc ThrowIfContainsType(Type, String, Type[]) Validates and throws an System.ArgumentOutOfRangeException if the specified value is contained within at least one of the specified types . Declaration public static void ThrowIfContainsType(Type value, string paramName, params Type[] types) Parameters Type Name Description System.Type value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.Type [] types A variable number of System.Type arguments to match with the type of value . Exceptions Type Condition System.ArgumentNullException value is null - or - types is null. System.ArgumentOutOfRangeException value is contained within at least one of the specified types . | Improve this Doc ThrowIfContainsType<T>(String, String, Type[]) Validates and throws an TypeArgumentOutOfRangeException if the specified T is contained within at least one of the specified types . Declaration public static void ThrowIfContainsType<T>(string typeParamName, string message, params Type[] types) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.String message A message that describes the error. System.Type [] types A variable number of System.Type arguments to match with the type of T . Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException types is null. TypeArgumentOutOfRangeException T is contained within at least one of the specified types . | Improve this Doc ThrowIfContainsType<T>(String, Type[]) Validates and throws an TypeArgumentOutOfRangeException if the specified T is contained within at least one of the specified types . Declaration public static void ThrowIfContainsType<T>(string typeParamName, params Type[] types) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.Type [] types A variable number of System.Type arguments to match with the type of T . Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException types is null. TypeArgumentOutOfRangeException T is contained within at least one of the specified types . | Improve this Doc ThrowIfDistinctDifference(String, String, String, String) Validates and throws an System.ArgumentOutOfRangeException if there is a distinct difference between arbitrary and definite . Declaration public static void ThrowIfDistinctDifference(string definite, string arbitrary, string paramName, string message) Parameters Type Name Description System.String definite The value that specifies valid characters. System.String arbitrary The value to distinctively compare with definite . System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentOutOfRangeException There is a distinct difference between arbitrary and definite . | Improve this Doc ThrowIfEmailAddress(String, String) Validates and throws an System.ArgumentException if the specified value has the format of an email address. Declaration public static void ThrowIfEmailAddress(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value cannot be an email address. | Improve this Doc ThrowIfEmailAddress(String, String, String) Validates and throws an System.ArgumentException if the specified value has the format of an email address. Declaration public static void ThrowIfEmailAddress(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value cannot be an email address. | Improve this Doc ThrowIfEmpty(String, String) Validates and throws an ArgumentEmptyException if the specified value is empty. Declaration public static void ThrowIfEmpty(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition ArgumentEmptyException value cannot be empty. | Improve this Doc ThrowIfEmpty(String, String, String) Validates and throws an ArgumentEmptyException if the specified value is empty. Declaration public static void ThrowIfEmpty(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition ArgumentEmptyException value cannot be empty. | Improve this Doc ThrowIfEnum<TEnum>(String, Boolean, String) Validates and throws an System.ArgumentException if the specified value represents an enumeration. Declaration public static void ThrowIfEnum<TEnum>(string value, bool ignoreCase, string paramName) where TEnum : struct, IConvertible Parameters Type Name Description System.String value The value to be evaluated. System.Boolean ignoreCase true to ignore case; false to regard case. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description TEnum The type of the enumeration. Exceptions Type Condition System.ArgumentException value represents an enumeration. | Improve this Doc ThrowIfEnum<TEnum>(String, Boolean, String, String) Validates and throws an System.ArgumentException if the specified value represents an enumeration. Declaration public static void ThrowIfEnum<TEnum>(string value, bool ignoreCase, string paramName, string message) where TEnum : struct, IConvertible Parameters Type Name Description System.String value The value to be evaluated. System.Boolean ignoreCase true to ignore case; false to regard case. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TEnum The type of the enumeration. Exceptions Type Condition System.ArgumentException value represents an enumeration. | Improve this Doc ThrowIfEnum<TEnum>(String, String) Validates and throws an System.ArgumentException if the specified value represents an enumeration. Declaration public static void ThrowIfEnum<TEnum>(string value, string paramName) where TEnum : struct, IConvertible Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description TEnum The type of the enumeration. Exceptions Type Condition System.ArgumentException value represents an enumeration. | Improve this Doc ThrowIfEnumType<TEnum>(String) Validates and throws an TypeArgumentException if the specified TEnum represents an enumeration. Declaration public static void ThrowIfEnumType<TEnum>(string typeParamName) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. Type Parameters Name Description TEnum The type to check is an enumeration. Exceptions Type Condition TypeArgumentException TEnum represents an enumeration. | Improve this Doc ThrowIfEnumType<TEnum>(String, String) Validates and throws an TypeArgumentException if the specified TEnum represents an enumeration. Declaration public static void ThrowIfEnumType<TEnum>(string typeParamName, string message) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TEnum The type to check is an enumeration. Exceptions Type Condition TypeArgumentException TEnum represents an enumeration. | Improve this Doc ThrowIfEqual<T>(T, T, IEqualityComparer<T>, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are equal to the y object. Declaration public static void ThrowIfEqual<T>(T x, T y, IEqualityComparer<T> comparer, string paramName) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing x and y . System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are equal to one another. | Improve this Doc ThrowIfEqual<T>(T, T, IEqualityComparer<T>, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are equal to the y object. Declaration public static void ThrowIfEqual<T>(T x, T y, IEqualityComparer<T> comparer, string paramName, string message) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing x and y . System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are equal to one another. | Improve this Doc ThrowIfEqual<T>(T, T, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are equal to the y object. Declaration public static void ThrowIfEqual<T>(T x, T y, string paramName) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are equal to one another. | Improve this Doc ThrowIfEqual<T>(T, T, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are equal to the y object. Declaration public static void ThrowIfEqual<T>(T x, T y, string paramName, string message) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are equal to one another. | Improve this Doc ThrowIfFalse(Boolean, String) Validates and throws an System.ArgumentException if the specified value is false . Declaration public static void ThrowIfFalse(bool value, string paramName) Parameters Type Name Description System.Boolean value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value must be true . | Improve this Doc ThrowIfFalse(Boolean, String, String) Validates and throws an System.ArgumentException if the specified value is false . Declaration public static void ThrowIfFalse(bool value, string paramName, string message) Parameters Type Name Description System.Boolean value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value must be true . | Improve this Doc ThrowIfGreaterThan<T>(T, T, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x is greater than y . Declaration public static void ThrowIfGreaterThan<T>(T x, T y, string paramName) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x is greater than y . | Improve this Doc ThrowIfGreaterThan<T>(T, T, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x is greater than y . Declaration public static void ThrowIfGreaterThan<T>(T x, T y, string paramName, string message) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x is greater than y . | Improve this Doc ThrowIfGreaterThanOrEqual<T>(T, T, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x is greater than or equal to y . Declaration public static void ThrowIfGreaterThanOrEqual<T>(T x, T y, string paramName) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x is greater than or equal to y . | Improve this Doc ThrowIfGreaterThanOrEqual<T>(T, T, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x is greater than or equal to y . Declaration public static void ThrowIfGreaterThanOrEqual<T>(T x, T y, string paramName, string message) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x is greater than or equal to y . | Improve this Doc ThrowIfGuid(String, GuidFormats, String) Validates and throws an System.ArgumentException if the specified value has the format of a System.Guid . Declaration public static void ThrowIfGuid(string value, GuidFormats format, string paramName) Parameters Type Name Description System.String value The value to be evaluated. GuidFormats format A bitmask comprised of one or more GuidFormats that specify how the GUID parsing is conducted. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value cannot be a System.Guid . | Improve this Doc ThrowIfGuid(String, GuidFormats, String, String) Validates and throws an System.ArgumentException if the specified value has the format of a System.Guid . Declaration public static void ThrowIfGuid(string value, GuidFormats format, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. GuidFormats format A bitmask comprised of one or more GuidFormats that specify how the GUID parsing is conducted. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value cannot be a System.Guid . | Improve this Doc ThrowIfGuid(String, String) Validates and throws an System.ArgumentException if the specified value has the format of a System.Guid . Declaration public static void ThrowIfGuid(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Remarks This implementation only evaluates for GUID formats of: DigitFormat | BraceFormat | ParenthesisFormat , eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses. The reason not to include NumberFormat , eg. 32 digits is the possible unintended GUID result of a MD5 string representation. Exceptions Type Condition System.ArgumentException value cannot be a System.Guid . | Improve this Doc ThrowIfHex(String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified value is hexadecimal. Declaration public static void ThrowIfHex(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentOutOfRangeException value cannot be hexadecimal. | Improve this Doc ThrowIfHex(String, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified value is hexadecimal. Declaration public static void ThrowIfHex(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentOutOfRangeException value cannot be hexadecimal. | Improve this Doc ThrowIfLowerThan<T>(T, T, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x is lower than y . Declaration public static void ThrowIfLowerThan<T>(T x, T y, string paramName) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x is lower than y . | Improve this Doc ThrowIfLowerThan<T>(T, T, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x is lower than y . Declaration public static void ThrowIfLowerThan<T>(T x, T y, string paramName, string message) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x is lower than y . | Improve this Doc ThrowIfLowerThanOrEqual<T>(T, T, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x is lower than or equal to y . Declaration public static void ThrowIfLowerThanOrEqual<T>(T x, T y, string paramName) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x is lower than or equal to y . | Improve this Doc ThrowIfLowerThanOrEqual<T>(T, T, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x is lower than or equal to y . Declaration public static void ThrowIfLowerThanOrEqual<T>(T x, T y, string paramName, string message) where T : struct, IConvertible Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x is lower than or equal to y . | Improve this Doc ThrowIfNot(Func<Boolean>, Func<String, String, Exception>, String, String) Validates from the provided condition . An exception is resolved and thrown if the condition evaluates false . Declaration public static void ThrowIfNot(Func<bool> condition, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description System.Func < System.Boolean > condition The function delegate that determines if an exception is thrown. System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIfNot<TValue>(TValue, Func<TValue, Boolean>, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates false . Declaration public static void ThrowIfNot<TValue>(TValue value, Func<TValue, bool> condition, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, System.Boolean > condition The function delegate that determines if an exception is thrown. System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIfNot<TValue, T>(TValue, Func<TValue, T, Boolean>, T, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates false . Declaration public static void ThrowIfNot<TValue, T>(TValue value, Func<TValue, T, bool> condition, T arg, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T, System.Boolean > condition The function delegate that determines if an exception is thrown. T arg The parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T The type of the parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIfNot<TValue, T1, T2>(TValue, Func<TValue, T1, T2, Boolean>, T1, T2, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates false . Declaration public static void ThrowIfNot<TValue, T1, T2>(TValue value, Func<TValue, T1, T2, bool> condition, T1 arg1, T2 arg2, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T1, T2, System.Boolean > condition The function delegate that determines if an exception is thrown. T1 arg1 The first parameter of the function delegate condition . T2 arg2 The second parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T1 The type of the first parameter of the function delegate condition . T2 The type of the second parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIfNot<TValue, T1, T2, T3>(TValue, Func<TValue, T1, T2, T3, Boolean>, T1, T2, T3, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates false . Declaration public static void ThrowIfNot<TValue, T1, T2, T3>(TValue value, Func<TValue, T1, T2, T3, bool> condition, T1 arg1, T2 arg2, T3 arg3, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T1, T2, T3, System.Boolean > condition The function delegate that determines if an exception is thrown. T1 arg1 The first parameter of the function delegate condition . T2 arg2 The second parameter of the function delegate condition . T3 arg3 The third parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T1 The type of the first parameter of the function delegate condition . T2 The type of the second parameter of the function delegate condition . T3 The type of the third parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIfNot<TValue, T1, T2, T3, T4>(TValue, Func<TValue, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates false . Declaration public static void ThrowIfNot<TValue, T1, T2, T3, T4>(TValue value, Func<TValue, T1, T2, T3, T4, bool> condition, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T1, T2, T3, T4, System.Boolean > condition The function delegate that determines if an exception is thrown. T1 arg1 The first parameter of the function delegate condition . T2 arg2 The second parameter of the function delegate condition . T3 arg3 The third parameter of the function delegate condition . T4 arg4 The fourth parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T1 The type of the first parameter of the function delegate condition . T2 The type of the second parameter of the function delegate condition . T3 The type of the third parameter of the function delegate condition . T4 The type of the fourth parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIfNot<TValue, T1, T2, T3, T4, T5>(TValue, Func<TValue, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5, Func<String, String, Exception>, String, String) Validates the specified value from the provided condition . An exception is resolved and thrown if the condition evaluates false . Declaration public static void ThrowIfNot<TValue, T1, T2, T3, T4, T5>(TValue value, Func<TValue, T1, T2, T3, T4, T5, bool> condition, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Func<string, string, Exception> exception, string paramName, string message) Parameters Type Name Description TValue value The value that will be evaluated by condition . System.Func <TValue, T1, T2, T3, T4, T5, System.Boolean > condition The function delegate that determines if an exception is thrown. T1 arg1 The first parameter of the function delegate condition . T2 arg2 The second parameter of the function delegate condition . T3 arg3 The third parameter of the function delegate condition . T4 arg4 The fourth parameter of the function delegate condition . T5 arg5 The fifth parameter of the function delegate condition . System.Func < System.String , System.String , System.Exception > exception The function delegate that resolves the System.Exception to be thrown. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TValue The type of the value to evaluate. T1 The type of the first parameter of the function delegate condition . T2 The type of the second parameter of the function delegate condition . T3 The type of the third parameter of the function delegate condition . T4 The type of the fourth parameter of the function delegate condition . T5 The type of the fifth parameter of the function delegate condition . Exceptions Type Condition System.ArgumentNullException condition is null -or- exception is null. | Improve this Doc ThrowIfNotContainsType(Object, String, String, Type[]) Validates and throws an System.ArgumentOutOfRangeException if the specified value is not contained within at least one of the specified types . Declaration public static void ThrowIfNotContainsType(object value, string paramName, string message, params Type[] types) Parameters Type Name Description System.Object value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Type [] types A variable number of System.Type arguments to match with the type of value . Exceptions Type Condition System.ArgumentNullException value is null - or - types is null. System.ArgumentOutOfRangeException value is not contained within at least one of the specified types . | Improve this Doc ThrowIfNotContainsType(Object, String, Type[]) Validates and throws an System.ArgumentOutOfRangeException if the specified value is not contained within at least one of the specified types . Declaration public static void ThrowIfNotContainsType(object value, string paramName, params Type[] types) Parameters Type Name Description System.Object value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.Type [] types A variable number of System.Type arguments to match with the type of value . Exceptions Type Condition System.ArgumentNullException value is null - or - types is null. System.ArgumentOutOfRangeException value is not contained within at least one of the specified types . | Improve this Doc ThrowIfNotContainsType(Type, String, String, Type[]) Validates and throws an System.ArgumentOutOfRangeException if the specified value is not contained within at least one of the specified types . Declaration public static void ThrowIfNotContainsType(Type value, string paramName, string message, params Type[] types) Parameters Type Name Description System.Type value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Type [] types A variable number of System.Type arguments to match with the type of value . Exceptions Type Condition System.ArgumentNullException value is null - or - types is null. System.ArgumentOutOfRangeException value is not contained within at least one of the specified types . | Improve this Doc ThrowIfNotContainsType(Type, String, Type[]) Validates and throws an System.ArgumentOutOfRangeException if the specified value is not contained within at least one of the specified types . Declaration public static void ThrowIfNotContainsType(Type value, string paramName, params Type[] types) Parameters Type Name Description System.Type value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.Type [] types A variable number of System.Type arguments to match with the type of value . Exceptions Type Condition System.ArgumentNullException value is null - or - types is null. System.ArgumentOutOfRangeException value is not contained within at least one of the specified types . | Improve this Doc ThrowIfNotContainsType<T>(String, String, Type[]) Validates and throws an TypeArgumentOutOfRangeException if the specified T is not contained within at least one of the specified types . Declaration public static void ThrowIfNotContainsType<T>(string typeParamName, string message, params Type[] types) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.String message A message that describes the error. System.Type [] types A variable number of System.Type arguments to match with the type of T . Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException types is null. TypeArgumentOutOfRangeException T is not contained within at least one of the specified types . | Improve this Doc ThrowIfNotContainsType<T>(String, Type[]) Validates and throws an TypeArgumentOutOfRangeException if the specified T is not contained within at least one of the specified types . Declaration public static void ThrowIfNotContainsType<T>(string typeParamName, params Type[] types) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.Type [] types A variable number of System.Type arguments to match with the type of T . Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException types is null. TypeArgumentOutOfRangeException T is not contained within at least one of the specified types . | Improve this Doc ThrowIfNotDistinctDifference(String, String, String, String) Validates and throws an System.ArgumentOutOfRangeException if there is not a distinct difference between arbitrary and definite . Declaration public static void ThrowIfNotDistinctDifference(string definite, string arbitrary, string paramName, string message) Parameters Type Name Description System.String definite The value that specifies valid characters. System.String arbitrary The value to distinctively compare with definite . System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentOutOfRangeException There is not a distinct difference between arbitrary and definite . | Improve this Doc ThrowIfNotEmailAddress(String, String) Validates and throws an System.ArgumentException if the specified value does not have the format of an email address. Declaration public static void ThrowIfNotEmailAddress(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value must be an email address. | Improve this Doc ThrowIfNotEmailAddress(String, String, String) Validates and throws an System.ArgumentException if the specified value does not have the format of an email address. Declaration public static void ThrowIfNotEmailAddress(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value must be an email address. | Improve this Doc ThrowIfNotEnum<TEnum>(String, Boolean, String) Validates and throws an System.ArgumentException if the specified value does not represents an enumeration. Declaration public static void ThrowIfNotEnum<TEnum>(string value, bool ignoreCase, string paramName) where TEnum : struct, IConvertible Parameters Type Name Description System.String value The value to be evaluated. System.Boolean ignoreCase true to ignore case; false to regard case. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description TEnum The type of the enumeration. Exceptions Type Condition System.ArgumentException value does not represents an enumeration. | Improve this Doc ThrowIfNotEnum<TEnum>(String, Boolean, String, String) Validates and throws an System.ArgumentException if the specified value does not represents an enumeration. Declaration public static void ThrowIfNotEnum<TEnum>(string value, bool ignoreCase, string paramName, string message) where TEnum : struct, IConvertible Parameters Type Name Description System.String value The value to be evaluated. System.Boolean ignoreCase true to ignore case; false to regard case. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TEnum The type of the enumeration. Exceptions Type Condition System.ArgumentException value does not represents an enumeration. | Improve this Doc ThrowIfNotEnum<TEnum>(String, String) Validates and throws an System.ArgumentException if the specified value does not represents an enumeration. Declaration public static void ThrowIfNotEnum<TEnum>(string value, string paramName) where TEnum : struct, IConvertible Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description TEnum The type of the enumeration. Exceptions Type Condition System.ArgumentException value does not represents an enumeration. | Improve this Doc ThrowIfNotEnumType<TEnum>(String) Validates and throws an TypeArgumentException if the specified TEnum does not represents an enumeration. Declaration public static void ThrowIfNotEnumType<TEnum>(string typeParamName) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. Type Parameters Name Description TEnum The type to check is not an enumeration. Exceptions Type Condition TypeArgumentException TEnum does not represents an enumeration. | Improve this Doc ThrowIfNotEnumType<TEnum>(String, String) Validates and throws an TypeArgumentException if the specified TEnum does not represents an enumeration. Declaration public static void ThrowIfNotEnumType<TEnum>(string typeParamName, string message) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description TEnum The type to check is not an enumeration. Exceptions Type Condition TypeArgumentException TEnum does not represents an enumeration. | Improve this Doc ThrowIfNotEqual<T>(T, T, IEqualityComparer<T>, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are not equal to the y object. Declaration public static void ThrowIfNotEqual<T>(T x, T y, IEqualityComparer<T> comparer, string paramName) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing x and y . System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are not equal to one another. | Improve this Doc ThrowIfNotEqual<T>(T, T, IEqualityComparer<T>, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are not equal to the y object. Declaration public static void ThrowIfNotEqual<T>(T x, T y, IEqualityComparer<T> comparer, string paramName, string message) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing x and y . System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are not equal to one another. | Improve this Doc ThrowIfNotEqual<T>(T, T, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are not equal to the y object. Declaration public static void ThrowIfNotEqual<T>(T x, T y, string paramName) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are not equal to one another. | Improve this Doc ThrowIfNotEqual<T>(T, T, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are not equal to the y object. Declaration public static void ThrowIfNotEqual<T>(T x, T y, string paramName, string message) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are not equal to one another. | Improve this Doc ThrowIfNotGuid(String, GuidFormats, String) Validates and throws an System.ArgumentException if the specified value does not have the format of a System.Guid . Declaration public static void ThrowIfNotGuid(string value, GuidFormats format, string paramName) Parameters Type Name Description System.String value The value to be evaluated. GuidFormats format A bitmask comprised of one or more GuidFormats that specify how the GUID parsing is conducted. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value must be a System.Guid . | Improve this Doc ThrowIfNotGuid(String, GuidFormats, String, String) Validates and throws an System.ArgumentException if the specified value does not have the format of a System.Guid . Declaration public static void ThrowIfNotGuid(string value, GuidFormats format, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. GuidFormats format A bitmask comprised of one or more GuidFormats that specify how the GUID parsing is conducted. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value must be a System.Guid . | Improve this Doc ThrowIfNotGuid(String, String) Validates and throws an System.ArgumentException if the specified value does not have the format of a System.Guid . Declaration public static void ThrowIfNotGuid(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Remarks This implementation only evaluates for GUID formats of: DigitFormat | BraceFormat | ParenthesisFormat , eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses. The reason not to include NumberFormat , eg. 32 digits is the possible unintended GUID result of a MD5 string representation. Exceptions Type Condition System.ArgumentException value must be a System.Guid . | Improve this Doc ThrowIfNotHex(String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified value is not hexadecimal. Declaration public static void ThrowIfNotHex(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentOutOfRangeException value must be hexadecimal. | Improve this Doc ThrowIfNotHex(String, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified value is not hexadecimal. Declaration public static void ThrowIfNotHex(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentOutOfRangeException value must be hexadecimal. | Improve this Doc ThrowIfNotNumber(String, String) Validates and throws an System.ArgumentException if the specified value is not a number. Declaration public static void ThrowIfNotNumber(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value must be a number. | Improve this Doc ThrowIfNotNumber(String, String, NumberStyles) Validates and throws an System.ArgumentException if the specified value is not a number. Declaration public static void ThrowIfNotNumber(string value, string paramName, NumberStyles styles) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . Exceptions Type Condition System.ArgumentException value must be a number. | Improve this Doc ThrowIfNotNumber(String, String, NumberStyles, IFormatProvider) Validates and throws an System.ArgumentException if the specified value is not a number. Declaration public static void ThrowIfNotNumber(string value, string paramName, NumberStyles styles, IFormatProvider provider) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . System.IFormatProvider provider An System.IFormatProvider that supplies culture-specific formatting information about value . Exceptions Type Condition System.ArgumentException value must be a number. | Improve this Doc ThrowIfNotNumber(String, String, String) Validates and throws an System.ArgumentException if the specified value is not a number. Declaration public static void ThrowIfNotNumber(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value must be a number. | Improve this Doc ThrowIfNotNumber(String, String, String, NumberStyles) Validates and throws an System.ArgumentException if the specified value is not a number. Declaration public static void ThrowIfNotNumber(string value, string paramName, string message, NumberStyles styles) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . Exceptions Type Condition System.ArgumentException value must be a number. | Improve this Doc ThrowIfNotNumber(String, String, String, NumberStyles, IFormatProvider) Validates and throws an System.ArgumentException if the specified value is not a number. Declaration public static void ThrowIfNotNumber(string value, string paramName, string message, NumberStyles styles, IFormatProvider provider) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . System.IFormatProvider provider An System.IFormatProvider that supplies culture-specific formatting information about value . Exceptions Type Condition System.ArgumentException value must be a number. | Improve this Doc ThrowIfNotSame<T>(T, T, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are not of the same instance as the y object. Declaration public static void ThrowIfNotSame<T>(T x, T y, string paramName) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are of the same instance. | Improve this Doc ThrowIfNotSame<T>(T, T, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are not of the same instance as the y object. Declaration public static void ThrowIfNotSame<T>(T x, T y, string paramName, string message) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are not of the same instance. | Improve this Doc ThrowIfNotUri(String, String) Validates and throws an System.ArgumentException if the specified value does not have the format of an System.Uri . Declaration public static void ThrowIfNotUri(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value must be an System.Uri . | Improve this Doc ThrowIfNotUri(String, UriKind, String, String) Validates and throws an System.ArgumentException if the specified value does not have the format of an System.Uri . Declaration public static void ThrowIfNotUri(string value, UriKind uriKind, string paramName, string message = \"Value must be an URI.\") Parameters Type Name Description System.String value The value to be evaluated. System.UriKind uriKind The type of the URI. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value must be an System.Uri . | Improve this Doc ThrowIfNull<T>(T, String) Validates and throws an System.ArgumentNullException if the specified value is null. Declaration public static void ThrowIfNull<T>(T value, string paramName) Parameters Type Name Description T value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException value cannot be null. | Improve this Doc ThrowIfNull<T>(T, String, String) Validates and throws an System.ArgumentNullException if the specified value is null. Declaration public static void ThrowIfNull<T>(T value, string paramName, string message) Parameters Type Name Description T value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException value cannot be null. | Improve this Doc ThrowIfNullOrEmpty(String, String) Validates and throws either an System.ArgumentNullException or ArgumentEmptyException if the specified value is respectively null or empty. Declaration public static void ThrowIfNullOrEmpty(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentNullException value cannot be null. ArgumentEmptyException value cannot be empty. | Improve this Doc ThrowIfNullOrEmpty(String, String, String) Validates and throws either an System.ArgumentNullException or ArgumentEmptyException if the specified value is respectively null or empty. Declaration public static void ThrowIfNullOrEmpty(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentNullException value cannot be null. ArgumentEmptyException value cannot be empty. | Improve this Doc ThrowIfNullOrWhitespace(String, String) Validates and throws either an System.ArgumentNullException , ArgumentEmptyException or System.ArgumentException if the specified value is respectively null, empty or consist only of white-space characters. Declaration public static void ThrowIfNullOrWhitespace(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentNullException value cannot be null. ArgumentEmptyException value cannot be empty. System.ArgumentException value cannot consist only of white-space characters. | Improve this Doc ThrowIfNullOrWhitespace(String, String, String) Validates and throws either an System.ArgumentNullException , ArgumentEmptyException or System.ArgumentException if the specified value is respectively null, empty or consist only of white-space characters. Declaration public static void ThrowIfNullOrWhitespace(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentNullException value cannot be null. ArgumentEmptyException value cannot be empty. System.ArgumentException value cannot consist only of white-space characters. | Improve this Doc ThrowIfNumber(String, String) Validates and throws an System.ArgumentException if the specified value is a number. Declaration public static void ThrowIfNumber(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value cannot be a number. | Improve this Doc ThrowIfNumber(String, String, NumberStyles) Validates and throws an System.ArgumentException if the specified value is a number. Declaration public static void ThrowIfNumber(string value, string paramName, NumberStyles styles) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . Exceptions Type Condition System.ArgumentException value cannot be a number. | Improve this Doc ThrowIfNumber(String, String, NumberStyles, IFormatProvider) Validates and throws an System.ArgumentException if the specified value is a number. Declaration public static void ThrowIfNumber(string value, string paramName, NumberStyles styles, IFormatProvider provider) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . System.IFormatProvider provider An System.IFormatProvider that supplies culture-specific formatting information about value . Exceptions Type Condition System.ArgumentException value cannot be a number. | Improve this Doc ThrowIfNumber(String, String, String) Validates and throws an System.ArgumentException if the specified value is a number. Declaration public static void ThrowIfNumber(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value cannot be a number. | Improve this Doc ThrowIfNumber(String, String, String, NumberStyles) Validates and throws an System.ArgumentException if the specified value is a number. Declaration public static void ThrowIfNumber(string value, string paramName, string message, NumberStyles styles) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . Exceptions Type Condition System.ArgumentException value cannot be a number. | Improve this Doc ThrowIfNumber(String, String, String, NumberStyles, IFormatProvider) Validates and throws an System.ArgumentException if the specified value is a number. Declaration public static void ThrowIfNumber(string value, string paramName, string message, NumberStyles styles, IFormatProvider provider) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. System.Globalization.NumberStyles styles A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of value . System.IFormatProvider provider An System.IFormatProvider that supplies culture-specific formatting information about value . Exceptions Type Condition System.ArgumentException value cannot be a number. | Improve this Doc ThrowIfSame<T>(T, T, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are of the same instance as the y object. Declaration public static void ThrowIfSame<T>(T x, T y, string paramName) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are not of the same instance. | Improve this Doc ThrowIfSame<T>(T, T, String, String) Validates and throws an System.ArgumentOutOfRangeException if the specified x object are of the same instance as the y object. Declaration public static void ThrowIfSame<T>(T x, T y, string paramName, string message) Parameters Type Name Description T x The first object to compare. T y The second object to compare. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Type Parameters Name Description T The type of objects to compare. Exceptions Type Condition System.ArgumentOutOfRangeException x and y are of the same instance. | Improve this Doc ThrowIfTrue(Boolean, String) Validates and throws an System.ArgumentException if the specified value is true . Declaration public static void ThrowIfTrue(bool value, string paramName) Parameters Type Name Description System.Boolean value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value must be false . | Improve this Doc ThrowIfTrue(Boolean, String, String) Validates and throws an System.ArgumentException if the specified value is true . Declaration public static void ThrowIfTrue(bool value, string paramName, string message) Parameters Type Name Description System.Boolean value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value must be false . | Improve this Doc ThrowIfUri(String, String) Validates and throws an System.ArgumentException if the specified value has the format of an System.Uri . Declaration public static void ThrowIfUri(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value cannot be an System.Uri . | Improve this Doc ThrowIfUri(String, UriKind, String, String) Validates and throws an System.ArgumentException if the specified value has the format of an System.Uri . Declaration public static void ThrowIfUri(string value, UriKind uriKind, string paramName, string message = \"Value cannot be an URI.\") Parameters Type Name Description System.String value The value to be evaluated. System.UriKind uriKind The type of the URI. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value cannot be an System.Uri . | Improve this Doc ThrowIfWhiteSpace(String, String) Validates and throws an ArgumentEmptyException if the specified value consist only of white-space characters. Declaration public static void ThrowIfWhiteSpace(string value, string paramName) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. Exceptions Type Condition System.ArgumentException value cannot consist only of white-space characters. | Improve this Doc ThrowIfWhiteSpace(String, String, String) Validates and throws an System.ArgumentException if the specified value consist only of white-space characters. Declaration public static void ThrowIfWhiteSpace(string value, string paramName, string message) Parameters Type Name Description System.String value The value to be evaluated. System.String paramName The name of the parameter that caused the exception. System.String message A message that describes the error. Exceptions Type Condition System.ArgumentException value cannot consist only of white-space characters. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.UriUtility.html": {
    "href": "api/core/Cuemon.UriUtility.html",
    "title": "Class UriUtility | Cuemon .NET Standard",
    "keywords": "Class UriUtility This utility class is designed to make System.Uri operations easier to work with. Inheritance System.Object UriUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class UriUtility Properties | Improve this Doc AllUriSchemes Gets all URI schemes currently supported by the .NET framework. Declaration public static IEnumerable<UriScheme> AllUriSchemes { get; } Property Value Type Description System.Collections.Generic.IEnumerable < UriScheme > A sequence of all URI schemes currently supported by the .NET framework. Methods | Improve this Doc IsProtocolRelativeUri(String) Determines whether the specified value is a protocol-relative URI string. Declaration public static bool IsProtocolRelativeUri(string value) Parameters Type Name Description System.String value The string value representing the protocol-relative URI. Returns Type Description System.Boolean true if the specified value is a protocol-relative URI; otherwise, false . | Improve this Doc IsProtocolRelativeUri(String, String) Determines whether the specified value is a protocol-relative URI string. Declaration public static bool IsProtocolRelativeUri(string value, string relativeReference) Parameters Type Name Description System.String value The string value representing the protocol-relative URI. System.String relativeReference The relative reference that value must begin with. Default is NetworkPathReference . Returns Type Description System.Boolean true if the specified value is a protocol-relative URI; otherwise, false . | Improve this Doc IsUri(String) Determines whether the specified value is an absolute URI string from all known URI schemes. Declaration public static bool IsUri(string value) Parameters Type Name Description System.String value The string value representing the URI. Returns Type Description System.Boolean true if the specified value evaluates to an URI; otherwise, false . | Improve this Doc IsUri(String, IEnumerable<UriScheme>) Determines whether the specified value is an absolute URI string. Declaration public static bool IsUri(string value, IEnumerable<UriScheme> uriSchemes) Parameters Type Name Description System.String value The string value representing the URI. System.Collections.Generic.IEnumerable < UriScheme > uriSchemes A sequence of UriScheme values to use in the validation of the URI. Returns Type Description System.Boolean true if the specified value evaluates to an absolute URI; otherwise, false . | Improve this Doc IsUri(String, UriKind) Determines whether the specified value is an URI string from all known URI schemes. Declaration public static bool IsUri(string value, UriKind uriKind) Parameters Type Name Description System.String value The string value representing the URI. System.UriKind uriKind The type of the URI. Returns Type Description System.Boolean true if the specified value evaluates to an URI; otherwise, false . | Improve this Doc IsUri(String, UriKind, IEnumerable<UriScheme>) Determines whether the specified value is an URI string. Declaration public static bool IsUri(string value, UriKind uriKind, IEnumerable<UriScheme> uriSchemes) Parameters Type Name Description System.String value The string value representing the URI. System.UriKind uriKind The type of the URI. System.Collections.Generic.IEnumerable < UriScheme > uriSchemes A sequence of UriScheme values to use in the validation of the URI. Returns Type Description System.Boolean true if the specified value evaluates to an URI; otherwise, false . | Improve this Doc Parse(String, UriKind) Converts the specified string representation of an URI value to its System.Uri equivalent, limited to what is specified in the parameter. Declaration public static Uri Parse(string uriString, UriKind uriKind) Parameters Type Name Description System.String uriString A string containing the URI to convert. System.UriKind uriKind The type of the URI. Returns Type Description System.Uri An System.Uri that is equivalent to the value contained in uriString . Exceptions Type Condition System.ArgumentNullException uriString is null. ArgumentEmptyException uriString is empty. | Improve this Doc Parse(String, UriKind, IEnumerable<UriScheme>) Converts the specified string representation of an URI value to its System.Uri equivalent, limited to what is specified in the parameter. Declaration public static Uri Parse(string uriString, UriKind uriKind, IEnumerable<UriScheme> uriSchemes) Parameters Type Name Description System.String uriString A string containing the URI to convert. System.UriKind uriKind The type of the URI. System.Collections.Generic.IEnumerable < UriScheme > uriSchemes A sequence of UriScheme values to use in the parsing of the URI. Returns Type Description System.Uri An System.Uri that is equivalent to the value contained in uriString . Exceptions Type Condition System.ArgumentNullException uriString is null - or - uriSchemes is null. ArgumentEmptyException uriString is empty. | Improve this Doc TryParse(String, UriKind, IEnumerable<UriScheme>, out Uri) Converts the specified string representation of an URI value to its System.Uri equivalent, limited to what is specified in the parameter. Declaration public static bool TryParse(string uriString, UriKind uriKind, IEnumerable<UriScheme> uriSchemes, out Uri result) Parameters Type Name Description System.String uriString A string containing the URI to convert. System.UriKind uriKind The type of the URI. System.Collections.Generic.IEnumerable < UriScheme > uriSchemes A sequence of UriScheme values to use in the parsing of the URI. System.Uri result When this method returns, contains the constructed System.Uri . Returns Type Description System.Boolean true if the System.Uri was successfully created; otherwise, false. Remarks If this method returns true, the new System.Uri is in result. | Improve this Doc TryParse(String, UriKind, out Uri) Converts the specified string representation of an URI value to its System.Uri equivalent. Declaration public static bool TryParse(string uriString, UriKind uriKind, out Uri result) Parameters Type Name Description System.String uriString A string containing the URI to convert. System.UriKind uriKind The type of the URI. System.Uri result When this method returns, contains the constructed System.Uri . Returns Type Description System.Boolean true if the System.Uri was successfully created; otherwise, false. Remarks If this method returns true, the new System.Uri is in result. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.UriSchemeConverter.html": {
    "href": "api/core/Cuemon.UriSchemeConverter.html",
    "title": "Class UriSchemeConverter | Cuemon .NET Standard",
    "keywords": "Class UriSchemeConverter This utility class is designed to make UriScheme related conversions easier to work with. Inheritance System.Object UriSchemeConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class UriSchemeConverter Methods | Improve this Doc FromString(String) Converts the specified string representation of an URI scheme to its UriScheme equivalent. Declaration public static UriScheme FromString(string uriScheme) Parameters Type Name Description System.String uriScheme A string containing an URI scheme to convert. Returns Type Description UriScheme An UriScheme equivalent to the specified uriScheme or Undefined if a conversion is not possible. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.FaultDescriptorOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.FaultDescriptorOptions.html",
    "title": "Class FaultDescriptorOptions | Cuemon .NET Standard",
    "keywords": "Class FaultDescriptorOptions Specifies options that is related to FaultDescriptorFilter operations. Inheritance System.Object FaultDescriptorOptions Namespace : Cuemon.AspNetCore.Mvc.Filters.Diagnostics Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class FaultDescriptorOptions Constructors | Improve this Doc FaultDescriptorOptions() Initializes a new instance of the FaultDescriptorOptions class. Declaration public FaultDescriptorOptions() Remarks The following table shows the initial property values for an instance of FaultDescriptorOptions . Property Initial Value HttpStatusCodeResolver if an exception inherits from System.ArgumentException , is of type System.ComponentModel.DataAnnotations.ValidationException or System.FormatException , a System.Net.HttpStatusCode.BadRequest is returned; otherwise System.Net.HttpStatusCode.InternalServerError . ExceptionDescriptorResolver null ExceptionCallback null IncludeRequest false RequestBodyParser null Properties | Improve this Doc ExceptionCallback Gets or sets the callback delegate that is invoked when an exception has been thrown. Declaration public Action<Exception, ExceptionDescriptor> ExceptionCallback { get; set; } Property Value Type Description System.Action < System.Exception , ExceptionDescriptor > A System.Action<T> . The default value is null . | Improve this Doc ExceptionDescriptorResolver Gets or sets the function delegate that will resolve a ExceptionDescriptor from the specified System.Exception . Declaration public Func<Exception, ExceptionDescriptor> ExceptionDescriptorResolver { get; set; } Property Value Type Description System.Func < System.Exception , ExceptionDescriptor > The function delegate that will resolve a ExceptionDescriptor from the specified System.Exception . | Improve this Doc HttpStatusCodeResolver Gets or sets the function delegate that will resolve a System.Net.HttpStatusCode from the specified System.Exception . Declaration public Func<Exception, HttpStatusCode> HttpStatusCodeResolver { get; set; } Property Value Type Description System.Func < System.Exception , System.Net.HttpStatusCode > The function delegate that will resolve a System.Net.HttpStatusCode from the specified System.Exception . | Improve this Doc IncludeRequest Gets or sets a value indicating whether the request that caused the exception should be included as evidence. Declaration public bool IncludeRequest { get; set; } Property Value Type Description System.Boolean true if the request that caused the exception should be included as evidence; otherwise, false . | Improve this Doc MarkExceptionHandled Gets or sets a value indicating whether to mark ASP.NET Core MVC Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.ExceptionHandled to true . Declaration public bool MarkExceptionHandled { get; set; } Property Value Type Description System.Boolean true if Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.ExceptionHandled should be set; otherwise, false . | Improve this Doc RequestBodyParser Gets or sets the function delegate that, when IncludeRequest is true , will determines the string result of a HTTP request body. Declaration public Func<Stream, string> RequestBodyParser { get; set; } Property Value Type Description System.Func < System.IO.Stream , System.String > The function delegate that determines the string result of a HTTP request body. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also FaultDescriptorFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Globalization.RegionInfoExtensions.html": {
    "href": "api/core/Cuemon.Globalization.RegionInfoExtensions.html",
    "title": "Class RegionInfoExtensions | Cuemon .NET Standard",
    "keywords": "Class RegionInfoExtensions This is an extension implementation of the System.Globalization.RegionInfo class. Inheritance System.Object RegionInfoExtensions Namespace : Cuemon.Globalization Assembly : Cuemon.Core.dll Syntax public static class RegionInfoExtensions Methods | Improve this Doc GetCultures(RegionInfo) Resolves a sequence of related System.Globalization.CultureInfo objects for the specified region . Declaration public static IEnumerable<CultureInfo> GetCultures(this RegionInfo region) Parameters Type Name Description System.Globalization.RegionInfo region The region to resolve a sequence of System.Globalization.CultureInfo objects from. Returns Type Description System.Collections.Generic.IEnumerable < System.Globalization.CultureInfo > An System.Collections.Generic.IEnumerable<T> sequence of System.Globalization.CultureInfo objects. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Serialization.JsonInstanceCollection.html": {
    "href": "api/core/Cuemon.Runtime.Serialization.JsonInstanceCollection.html",
    "title": "Class JsonInstanceCollection | Cuemon .NET Standard",
    "keywords": "Class JsonInstanceCollection Represents a list of JSON children from a structural data source. Inheritance System.Object System.Collections.Generic.List < JsonInstance > JsonInstanceCollection Implements System.Collections.Generic.IList < JsonInstance > System.Collections.Generic.ICollection < JsonInstance > System.Collections.Generic.IReadOnlyList < JsonInstance > System.Collections.Generic.IReadOnlyCollection < JsonInstance > System.Collections.Generic.IEnumerable < JsonInstance > System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Add(Cuemon.Runtime.Serialization.JsonInstance) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.AddRange(System.Collections.Generic.IEnumerable<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.AsReadOnly() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.BinarySearch(Cuemon.Runtime.Serialization.JsonInstance) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.BinarySearch(Cuemon.Runtime.Serialization.JsonInstance, System.Collections.Generic.IComparer<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.BinarySearch(System.Int32, System.Int32, Cuemon.Runtime.Serialization.JsonInstance, System.Collections.Generic.IComparer<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Clear() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Contains(Cuemon.Runtime.Serialization.JsonInstance) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.CopyTo(Cuemon.Runtime.Serialization.JsonInstance[]) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.CopyTo(Cuemon.Runtime.Serialization.JsonInstance[], System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.CopyTo(System.Int32, Cuemon.Runtime.Serialization.JsonInstance[], System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Exists(System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Find(System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.FindAll(System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.FindIndex(System.Int32, System.Int32, System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.FindIndex(System.Int32, System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.FindIndex(System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.FindLast(System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.FindLastIndex(System.Int32, System.Int32, System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.FindLastIndex(System.Int32, System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.FindLastIndex(System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.ForEach(System.Action<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.GetEnumerator() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.GetRange(System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.IndexOf(Cuemon.Runtime.Serialization.JsonInstance) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.IndexOf(Cuemon.Runtime.Serialization.JsonInstance, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.IndexOf(Cuemon.Runtime.Serialization.JsonInstance, System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Insert(System.Int32, Cuemon.Runtime.Serialization.JsonInstance) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.LastIndexOf(Cuemon.Runtime.Serialization.JsonInstance) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.LastIndexOf(Cuemon.Runtime.Serialization.JsonInstance, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.LastIndexOf(Cuemon.Runtime.Serialization.JsonInstance, System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Remove(Cuemon.Runtime.Serialization.JsonInstance) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.RemoveAll(System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.RemoveAt(System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.RemoveRange(System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Reverse() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Reverse(System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Sort() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Sort(System.Collections.Generic.IComparer<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Sort(System.Comparison<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.Generic.IEnumerable<Cuemon.Runtime.Serialization.JsonInstance>.GetEnumerator() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.Add(System.Object) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.Contains(System.Object) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.IndexOf(System.Object) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.Remove(System.Object) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.ToArray() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.TrimExcess() System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.TrueForAll(System.Predicate<Cuemon.Runtime.Serialization.JsonInstance>) System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Capacity System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Count System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.Item[System.Int32] System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.Generic.ICollection<Cuemon.Runtime.Serialization.JsonInstance>.IsReadOnly System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.ICollection.SyncRoot System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.IsFixedSize System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.IsReadOnly System.Collections.Generic.List<Cuemon.Runtime.Serialization.JsonInstance>.System.Collections.IList.Item[System.Int32] Namespace : Cuemon.Runtime.Serialization Assembly : Cuemon.Runtime.dll Syntax public sealed class JsonInstanceCollection : List<JsonInstance>, IList<JsonInstance>, ICollection<JsonInstance>, IReadOnlyList<JsonInstance>, IReadOnlyCollection<JsonInstance>, IEnumerable<JsonInstance>, IList, ICollection, IEnumerable Constructors | Improve this Doc JsonInstanceCollection() Initializes a new instance of the JsonInstanceCollection class. Declaration public JsonInstanceCollection() | Improve this Doc JsonInstanceCollection(IEnumerable<JsonInstance>) Initializes a new instance of the JsonInstanceCollection class. Declaration public JsonInstanceCollection(IEnumerable<JsonInstance> instances) Parameters Type Name Description System.Collections.Generic.IEnumerable < JsonInstance > instances The instances to fill this JsonInstanceCollection with. Methods | Improve this Doc Compare(JsonInstance, JsonInstance) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public static int Compare(JsonInstance x, JsonInstance y) Parameters Type Name Description JsonInstance x The first object to compare. JsonInstance y The second object to compare. Returns Type Description System.Int32 Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y. | Improve this Doc FilterByName(String) Returns a list of JsonInstance filtered by the specified name . Declaration public IList<JsonInstance> FilterByName(string name) Parameters Type Name Description System.String name The name of the JsonInstance to filter by. Returns Type Description System.Collections.Generic.IList < JsonInstance > A list of JsonInstance filtered by the specified name . Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) ListUtilityExtensions.HasIndex<TSource>(IList<TSource>, Int32) ListUtilityExtensions.Next<TSource>(IList<TSource>, Int32) ListUtilityExtensions.Previous<TSource>(IList<TSource>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.TextReaderConverterExtensions.html": {
    "href": "api/core/Cuemon.IO.TextReaderConverterExtensions.html",
    "title": "Class TextReaderConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class TextReaderConverterExtensions This is an extension implementation of the TextReaderConverter class. Inheritance System.Object TextReaderConverterExtensions Namespace : Cuemon.IO Assembly : Cuemon.IO.dll Syntax public static class TextReaderConverterExtensions Methods | Improve this Doc ToTextReader(String) Converts the specified value to a System.IO.TextReader object. Declaration public static TextReader ToTextReader(this string value) Parameters Type Name Description System.String value The string to be converted. Returns Type Description System.IO.TextReader A System.IO.TextReader initialized with value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.TextReaderConverter.html": {
    "href": "api/core/Cuemon.IO.TextReaderConverter.html",
    "title": "Class TextReaderConverter | Cuemon .NET Standard",
    "keywords": "Class TextReaderConverter This utility class is designed to make System.IO.TextReader related conversions easier to work with. Inheritance System.Object TextReaderConverter Namespace : Cuemon.IO Assembly : Cuemon.IO.dll Syntax public static class TextReaderConverter Methods | Improve this Doc FromString(String) Converts the specified value to a System.IO.TextReader object. Declaration public static TextReader FromString(string value) Parameters Type Name Description System.String value The string to be converted. Returns Type Description System.IO.TextReader A System.IO.TextReader initialized with value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.StreamWriterUtility.html": {
    "href": "api/core/Cuemon.IO.StreamWriterUtility.html",
    "title": "Class StreamWriterUtility | Cuemon .NET Standard",
    "keywords": "Class StreamWriterUtility This utility class is designed to make System.IO.StreamWriter related operations easier to work with. Inheritance System.Object StreamWriterUtility Namespace : Cuemon.IO Assembly : Cuemon.IO.dll Syntax public static class StreamWriterUtility Methods | Improve this Doc CreateStream(Action<StreamWriter>, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream(Action<StreamWriter> writer, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter > writer The delegate that will create an in-memory System.IO.Stream . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . | Improve this Doc CreateStream<T>(Action<StreamWriter, T>, T, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T>(Action<StreamWriter, T> writer, T arg, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T> writer The delegate that will create an in-memory System.IO.Stream . T arg The parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T The type of the parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<StreamWriter, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<StreamWriter, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . T7 arg7 The seventh parameter of the delegate writer . T8 arg8 The eighth parameter of the delegate writer . T9 arg9 The ninth parameter of the delegate writer . T10 arg10 The tenth parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . T7 The type of the seventh parameter of the delegate writer . T8 The type of the eighth parameter of the delegate writer . T9 The type of the ninth parameter of the delegate writer . T10 The type of the tenth parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2>(Action<StreamWriter, T1, T2>, T1, T2, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2>(Action<StreamWriter, T1, T2> writer, T1 arg1, T2 arg2, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2, T3>(Action<StreamWriter, T1, T2, T3>, T1, T2, T3, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2, T3>(Action<StreamWriter, T1, T2, T3> writer, T1 arg1, T2 arg2, T3 arg3, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2, T3> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2, T3, T4>(Action<StreamWriter, T1, T2, T3, T4>, T1, T2, T3, T4, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2, T3, T4>(Action<StreamWriter, T1, T2, T3, T4> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2, T3, T4> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2, T3, T4, T5>(Action<StreamWriter, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2, T3, T4, T5>(Action<StreamWriter, T1, T2, T3, T4, T5> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2, T3, T4, T5> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2, T3, T4, T5, T6>(Action<StreamWriter, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2, T3, T4, T5, T6>(Action<StreamWriter, T1, T2, T3, T4, T5, T6> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2, T3, T4, T5, T6> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2, T3, T4, T5, T6, T7>(Action<StreamWriter, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2, T3, T4, T5, T6, T7>(Action<StreamWriter, T1, T2, T3, T4, T5, T6, T7> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2, T3, T4, T5, T6, T7> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . T7 arg7 The seventh parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . T7 The type of the seventh parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2, T3, T4, T5, T6, T7, T8>(Action<StreamWriter, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2, T3, T4, T5, T6, T7, T8>(Action<StreamWriter, T1, T2, T3, T4, T5, T6, T7, T8> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2, T3, T4, T5, T6, T7, T8> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . T7 arg7 The seventh parameter of the delegate writer . T8 arg8 The eighth parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . T7 The type of the seventh parameter of the delegate writer . T8 The type of the eighth parameter of the delegate writer . | Improve this Doc CreateStream<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<StreamWriter, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Action<StreamWriterOptions>) Creates and returns a System.IO.Stream by the specified delegate writer . Declaration public static Stream CreateStream<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<StreamWriter, T1, T2, T3, T4, T5, T6, T7, T8, T9> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Action<StreamWriterOptions> setup = null) Parameters Type Name Description System.Action < System.IO.StreamWriter , T1, T2, T3, T4, T5, T6, T7, T8, T9> writer The delegate that will create an in-memory System.IO.Stream . T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . T7 arg7 The seventh parameter of the delegate writer . T8 arg8 The eighth parameter of the delegate writer . T9 arg9 The ninth parameter of the delegate writer . System.Action < StreamWriterOptions > setup The StreamWriterOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the content created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . T7 The type of the seventh parameter of the delegate writer . T8 The type of the eighth parameter of the delegate writer . T9 The type of the ninth parameter of the delegate writer . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.html": {
    "href": "api/core/Cuemon.Security.Cryptography.html",
    "title": "Namespace Cuemon.Security.Cryptography | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Classes AdvancedEncryptionStandardUtility This utility class is designed to make System.Security.Cryptography.Aes operations easier to work with. CyclicRedundancyCheck Represents the abstract class from which all implementations of the CRC hash algorithm inherit. CyclicRedundancyCheck32 Computes the CRC32 hash value for the input data using the implementation provided by the cyclic redundancy check class (CRC). This class cannot be inherited. HashOptions Specifies options that is related to System.Security.Cryptography.HashAlgorithm operations. HashResult Represents the result of a computed System.Security.Cryptography.HashAlgorithm or System.Security.Cryptography.KeyedHashAlgorithm operation. This class cannot be inherited. HashUtility This utility class is designed to make System.Security.Cryptography.HashAlgorithm operations easier to work with. HashUtilityExtensions This is an extension implementation of the most common methods on the HashUtility class. HmacUtility This utility class is designed to make HMAC (Hash-based Message Authentication Code) System.Security.Cryptography.KeyedHashAlgorithm operations easier to work with. HmacUtilityExtensions This is an extension implementation of the most common methods on the HmacUtility class. KeyedHashOptions Specifies options that is related to System.Security.Cryptography.KeyedHashAlgorithm operations. StreamHashOptions Specifies options that is related to System.Security.Cryptography.HashAlgorithm operations. This class cannot be inherited. StreamKeyedHashOptions Specifies options that is related to System.Security.Cryptography.KeyedHashAlgorithm operations. This class cannot be inherited. StringHashOptions Specifies options that is related to System.Security.Cryptography.HashAlgorithm operations. This class cannot be inherited. StringKeyedHashOptions Specifies options that is related to System.Security.Cryptography.KeyedHashAlgorithm operations. This class cannot be inherited. StrongNumberUtility This utility class is designed to make cryptography strong number operations easier to work with. Enums AdvancedEncryptionStandardKeySize Specifies the key size to be used in the Advanced Encryption Standard (AES) cipher. HashAlgorithmType Specifies the algorithm used for generating hash values. HmacAlgorithmType Specifies the algorithm used for generating hash-based message authentication code values. PolynomialRepresentation Defines the common ways to express a CRC generator polynomial representation. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.StrongNumberUtility.html": {
    "href": "api/core/Cuemon.Security.Cryptography.StrongNumberUtility.html",
    "title": "Class StrongNumberUtility | Cuemon .NET Standard",
    "keywords": "Class StrongNumberUtility This utility class is designed to make cryptography strong number operations easier to work with. Inheritance System.Object StrongNumberUtility Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public static class StrongNumberUtility Methods | Improve this Doc GetRandomNumber() Generates a nonnegative random number. Declaration public static int GetRandomNumber() Returns Type Description System.Int32 A 32-bit signed integer greater than or equal to zero and less than System.Int32.MaxValue . | Improve this Doc GetRandomNumber(Int32) Generates a nonnegative random number less than the specified maximum. Declaration public static int GetRandomNumber(int maxValue) Parameters Type Name Description System.Int32 maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero. Returns Type Description System.Int32 A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values ordinarily includes zero but not maxValue. However, if maxValue equals zero, maxValue is returned. | Improve this Doc GetRandomNumber(Int32, Int32) Generates a random number within a specified range. Declaration public static int GetRandomNumber(int minValue, int maxValue) Parameters Type Name Description System.Int32 minValue The inclusive lower bound of the random number returned. System.Int32 maxValue The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. Returns Type Description System.Int32 A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned. Exceptions Type Condition System.ArgumentOutOfRangeException minValue is greater than maxValue (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.StringKeyedHashOptions.html": {
    "href": "api/core/Cuemon.Security.Cryptography.StringKeyedHashOptions.html",
    "title": "Class StringKeyedHashOptions | Cuemon .NET Standard",
    "keywords": "Class StringKeyedHashOptions Specifies options that is related to System.Security.Cryptography.KeyedHashAlgorithm operations. This class cannot be inherited. Inheritance System.Object KeyedHashOptions StringKeyedHashOptions Inherited Members KeyedHashOptions.AlgorithmType Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public sealed class StringKeyedHashOptions : KeyedHashOptions Constructors | Improve this Doc StringKeyedHashOptions() Initializes a new instance of the StringKeyedHashOptions class. Declaration public StringKeyedHashOptions() Remarks The following table shows the initial property values for an instance of StringKeyedHashOptions . Property Initial Value AlgorithmType SHA1 Encoding System.Text.Encoding.Unicode Preamble Remove Properties | Improve this Doc Encoding Gets or sets the encoding for the operation. Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding The encoding for the operation. | Improve this Doc Preamble Gets or sets the action to take in regards to encoding related preamble sequences. Declaration public PreambleSequence Preamble { get; set; } Property Value Type Description PreambleSequence A value that indicates whether to preserve or remove preamble sequences. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also KeyedHashOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.WatcherEventArgs.html": {
    "href": "api/core/Cuemon.Runtime.WatcherEventArgs.html",
    "title": "Class WatcherEventArgs | Cuemon .NET Standard",
    "keywords": "Class WatcherEventArgs Provides data for watcher related operations. Inheritance System.Object System.EventArgs WatcherEventArgs Namespace : Cuemon.Runtime Assembly : Cuemon.Runtime.dll Syntax public class WatcherEventArgs : EventArgs Constructors | Improve this Doc WatcherEventArgs() Initializes a new instance of the WatcherEventArgs class. Declaration protected WatcherEventArgs() | Improve this Doc WatcherEventArgs(DateTime) Initializes a new instance of the WatcherEventArgs class. Declaration public WatcherEventArgs(DateTime utcLastModified) Parameters Type Name Description System.DateTime utcLastModified The time when a Watcher last detected changes to a resource. | Improve this Doc WatcherEventArgs(DateTime, TimeSpan) Initializes a new instance of the WatcherEventArgs class. Declaration public WatcherEventArgs(DateTime utcLastModified, TimeSpan delayed) Parameters Type Name Description System.DateTime utcLastModified The time when a Watcher last detected changes to a resource. System.TimeSpan delayed The time a Watcher was intentionally delayed before signaling changes to a resource. Fields | Improve this Doc Empty Represents an event with no event data. Declaration public static readonly WatcherEventArgs Empty Field Value Type Description WatcherEventArgs Properties | Improve this Doc Delayed Gets the time a Watcher was intentionally delayed before signaling changes to a resource. Declaration public TimeSpan Delayed { get; } Property Value Type Description System.TimeSpan | Improve this Doc UtcLastModified Gets the time when a watcher last detected changes to a resource, or a System.DateTime.MinValue if an empty event. Declaration public DateTime UtcLastModified { get; } Property Value Type Description System.DateTime The time when a watcher last detected changes to a resource, or a System.DateTime.MinValue if an empty event. Remarks This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time). Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Watcher.html": {
    "href": "api/core/Cuemon.Runtime.Watcher.html",
    "title": "Class Watcher | Cuemon .NET Standard",
    "keywords": "Class Watcher An abstract class for establishing a watcher, that can monitor and signal changes of a resource by raising the Changed event. Inheritance System.Object Watcher DataWatcher NetWatcher Implements System.IDisposable Namespace : Cuemon.Runtime Assembly : Cuemon.Runtime.dll Syntax public abstract class Watcher : IDisposable Constructors | Improve this Doc Watcher() Initializes a new instance of the Watcher class, where the signaling is initiated immediately and hereby followed by a periodic signaling every 2 minutes. Declaration protected Watcher() | Improve this Doc Watcher(TimeSpan) Initializes a new instance of the Watcher class, where the signaling is initiated immediately. Declaration protected Watcher(TimeSpan period) Parameters Type Name Description System.TimeSpan period The time interval between periodic signaling. Specify negative one (-1) milliseconds to disable periodic signaling. | Improve this Doc Watcher(TimeSpan, TimeSpan) Initializes a new instance of the Watcher class. Declaration protected Watcher(TimeSpan dueTime, TimeSpan period) Parameters Type Name Description System.TimeSpan dueTime A System.TimeSpan representing the amount of time to delay before the Watcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling. Specify negative one (-1) milliseconds to disable periodic signaling. | Improve this Doc Watcher(TimeSpan, TimeSpan, TimeSpan) Initializes a new instance of the Watcher class. Declaration protected Watcher(TimeSpan dueTime, TimeSpan period, TimeSpan dueTimeOnChanged) Parameters Type Name Description System.TimeSpan dueTime A System.TimeSpan representing the amount of time to delay before the Watcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling. Specify negative one (-1) milliseconds to disable periodic signaling. System.TimeSpan dueTimeOnChanged The amount of time to postpone a Changed event. Specify zero (0) to disable postponing. Properties | Improve this Doc DueTime Gets or sets the System.TimeSpan representing the amount of time to delay before the Watcher starts signaling. Declaration protected TimeSpan DueTime { get; } Property Value Type Description System.TimeSpan A System.TimeSpan representing the amount of time to delay before the Watcher starts signaling. | Improve this Doc DueTimeOnChanged Gets the amount of time to postpone a Changed event. Declaration protected TimeSpan DueTimeOnChanged { get; } Property Value Type Description System.TimeSpan | Improve this Doc Period Gets the time interval between periodic signaling. Declaration protected TimeSpan Period { get; } Property Value Type Description System.TimeSpan A System.TimeSpan representing the time interval between periodic signaling. | Improve this Doc UtcLastModified Gets time when the resource being monitored was last changed. Declaration public DateTime UtcLastModified { get; } Property Value Type Description System.DateTime The time when the resource being monitored was last changed. Remarks This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time). | Improve this Doc UtcLastSignaled Gets the time when the last signaling occurred. Declaration public DateTime UtcLastSignaled { get; } Property Value Type Description System.DateTime The time when the last signaling occurred. Remarks This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time). Methods | Improve this Doc ChangeSignaling(TimeSpan) Changes the signaling timer of the Watcher . Declaration public void ChangeSignaling(TimeSpan dueTime) Parameters Type Name Description System.TimeSpan dueTime A System.TimeSpan representing the amount of time to delay before the Watcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. | Improve this Doc ChangeSignaling(TimeSpan, TimeSpan) Changes the signaling timer of the Watcher . Declaration public virtual void ChangeSignaling(TimeSpan dueTime, TimeSpan period) Parameters Type Name Description System.TimeSpan dueTime A System.TimeSpan representing the amount of time to delay before the Watcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling. Specify negative one (-1) milliseconds to disable periodic signaling. Remarks If dueTime is zero (0), the signaling is started immediately. If dueTime is negative one (-1) milliseconds, the signaling is never started; and the underlying timer is disabled, but can be re-enabled by specifying a positive value for dueTime . If period is zero (0) or negative one (-1) milliseconds, and dueTime is positive, the signaling is done once; the periodic behavior of the underlying timer is disabled, but can be re-enabled by specifying a value greater than zero for period . | Improve this Doc Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc HandleSignaling() Handles the signaling of this Watcher . Declaration protected abstract void HandleSignaling() | Improve this Doc OnChangedRaised() Raises the Changed event. Declaration protected void OnChangedRaised() Remarks This method raises the Changed event with UtcLastModified and DueTimeOnChanged passed to a new instance of WatcherEventArgs . | Improve this Doc OnChangedRaised(WatcherEventArgs) Raises the Changed event. Declaration protected virtual void OnChangedRaised(WatcherEventArgs e) Parameters Type Name Description WatcherEventArgs e The WatcherEventArgs instance containing the event data. | Improve this Doc SetUtcLastModified(DateTime) Marks the time when a resource being monitored was last changed. Declaration protected void SetUtcLastModified(DateTime utcLastModified) Parameters Type Name Description System.DateTime utcLastModified The time when a resource being monitored was last changed. Events | Improve this Doc Changed Occurs when a resource has changed. Declaration public event EventHandler<WatcherEventArgs> Changed Event Type Type Description System.EventHandler < WatcherEventArgs > Implements System.IDisposable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Globalization.html": {
    "href": "api/core/Cuemon.Globalization.html",
    "title": "Namespace Cuemon.Globalization | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Globalization Assembly : Cuemon.Core.dll Classes RegionInfoExtensions This is an extension implementation of the System.Globalization.RegionInfo class. World This static class is designed to make System.Globalization operations easier to work with. Interfaces IMessageLocalizer Provides a generic way to support localized messages on attribute decorated methods. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Globalization.World.html": {
    "href": "api/core/Cuemon.Globalization.World.html",
    "title": "Class World | Cuemon .NET Standard",
    "keywords": "Class World This static class is designed to make System.Globalization operations easier to work with. Inheritance System.Object World Namespace : Cuemon.Globalization Assembly : Cuemon.Core.dll Syntax public static class World Properties | Improve this Doc Regions Gets the by .NET specific regions of the world. Declaration public static IEnumerable<RegionInfo> Regions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Globalization.RegionInfo > The .NET specific regions of the world. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.ExceptionDescriptorAttribute.html": {
    "href": "api/core/Cuemon.Diagnostics.ExceptionDescriptorAttribute.html",
    "title": "Class ExceptionDescriptorAttribute | Cuemon .NET Standard",
    "keywords": "Class ExceptionDescriptorAttribute Provides information about an System.Exception , in a developer friendly way, optimized for open- and otherwise public application programming interfaces (API). Inheritance System.Object System.Attribute ExceptionDescriptorAttribute Implements IMessageLocalizer Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class ExceptionDescriptorAttribute : Attribute, IMessageLocalizer Constructors | Improve this Doc ExceptionDescriptorAttribute(Type) Initializes a new instance of the ExceptionDescriptorAttribute class. Declaration public ExceptionDescriptorAttribute(Type failureType) Parameters Type Name Description System.Type failureType The System.Type of the failure to match and describe. Properties | Improve this Doc Code Gets or sets an error code that uniquely identifies the type of failure. Declaration public string Code { get; set; } Property Value Type Description System.String The number that identifies the type of failure. | Improve this Doc FailureType Gets the System.Type of System.Exception to match and describe. Declaration public Type FailureType { get; } Property Value Type Description System.Type The System.Type of System.Exception to match. | Improve this Doc HelpLink Gets or sets a link to the help page associated with this failure. Declaration public string HelpLink { get; set; } Property Value Type Description System.String The location of an optional help page associated with this failure. | Improve this Doc Message Gets or sets a default message that describes the current failure. Declaration public string Message { get; set; } Property Value Type Description System.String The default message that explains the reason for the failure. | Improve this Doc MessageResourceName Gets or sets the resource name (property name) to use as the key for lookups on the resource type. Declaration public string MessageResourceName { get; set; } Property Value Type Description System.String Use this property to set the name of the property within MessageResourceType that will provide a localized message that describes the current failure. | Improve this Doc MessageResourceType Gets or sets the resource type to use for message lookups. Declaration public Type MessageResourceType { get; set; } Property Value Type Description System.Type Use this property only in conjunction with MessageResourceName . They are used together to retrieve localized messages at runtime. Implements IMessageLocalizer Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also System.Attribute (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.CacheValidatorExtensions.html": {
    "href": "api/core/Cuemon.Integrity.CacheValidatorExtensions.html",
    "title": "Class CacheValidatorExtensions | Cuemon .NET Standard",
    "keywords": "Class CacheValidatorExtensions This is an extension implementation of the most common methods on the CacheValidator class. Inheritance System.Object CacheValidatorExtensions Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public static class CacheValidatorExtensions Methods | Improve this Doc GetCacheValidator(DateTime, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, Byte[], Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, byte[] checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.Byte [] checksum An array of bytes containing a checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, Double, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, double checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.Double checksum A System.Double value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, Int16, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, short checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.Int16 checksum A System.Int16 value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, Int32, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, int checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.Int32 checksum A System.Int32 value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, Int64, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, long checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.Int64 checksum A System.Int64 value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, Single, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, float checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.Single checksum A System.Single value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, String, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, string checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.String checksum A System.String value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, UInt16, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, ushort checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.UInt16 checksum A System.UInt16 value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, UInt32, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, uint checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.UInt32 checksum A System.UInt32 value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(DateTime, DateTime, UInt64, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified parameters. Declaration public static CacheValidator GetCacheValidator(this DateTime created, DateTime modified, ulong checksum, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.DateTime created A System.DateTime value for when data this CacheValidator represents was first created. System.DateTime modified A System.DateTime value for when data this CacheValidator represents was last modified. System.UInt64 checksum A System.UInt64 value containing a byte-for-byte checksum of the data this CacheValidator represents. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified parameters. | Improve this Doc GetCacheValidator(Assembly, Boolean, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified assembly . Declaration public static CacheValidator GetCacheValidator(this Assembly assembly, bool readByteForByteChecksum = false, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to resolve a CacheValidator from. System.Boolean readByteForByteChecksum true to read the assembly byte-for-byte to promote a strong integrity checksum; false to read common properties of the assembly for a weak (but reliable) integrity checksum. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that fully represents the integrity of the specified assembly . | Improve this Doc GetCacheValidator(String, Int32, Action<CacheValidatorOptions>) Returns a CacheValidator from the specified fileName . Declaration public static CacheValidator GetCacheValidator(this string fileName, int bytesToRead = 0, Action<CacheValidatorOptions> setup = null) Parameters Type Name Description System.String fileName The fully qualified name of the file. System.Int32 bytesToRead The maximum size of a byte-for-byte that promotes a medium/strong integrity check of the specified fileName . A value of 0 (or less) leaves the integrity check at weak. System.Action < CacheValidatorOptions > setup The CacheValidatorOptions which need to be configured. Returns Type Description CacheValidator A CacheValidator that represents either a weak, medium or strong integrity check of the specified fileName . Remarks Should the specified fileName trigger any sort of exception, a Default is returned. Exceptions Type Condition System.ArgumentNullException fileName is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.ISortableTable-1.html": {
    "href": "api/core/Cuemon.Collections.Generic.ISortableTable-1.html",
    "title": "Interface ISortableTable<TSource> | Cuemon .NET Standard",
    "keywords": "Interface ISortableTable<TSource> Defines a generic way to perform a table-like sorting operation. Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public interface ISortableTable<TSource> Type Parameters Name Description TSource The type of the elements of to OrderBy(IEnumerable<TSource>, SortOrder) . Properties | Improve this Doc OrderByColumn Gets the column on which to perform a sorting operation. Declaration string OrderByColumn { get; } Property Value Type Description System.String The column on which to perform a sorting operation. Methods | Improve this Doc OrderBy(IEnumerable<TSource>, SortOrder) Sorts the elements of source using the order of direction . Declaration IEnumerable<TSource> OrderBy(IEnumerable<TSource> source, SortOrder direction) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order by direction . SortOrder direction The SortOrder to apply to the source sequence. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> whose elements are sorted according to OrderByColumn and direction . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.CorrelationBuilderExtension.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.CorrelationBuilderExtension.html",
    "title": "Class CorrelationBuilderExtension | Cuemon .NET Standard",
    "keywords": "Class CorrelationBuilderExtension This is a factory implementation of the CorrelationIdentifierMiddleware class. Inheritance System.Object CorrelationBuilderExtension Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public static class CorrelationBuilderExtension Methods | Improve this Doc UseCorrelationIdentifierHeader(IApplicationBuilder, Action<CorrelationIdentifierOptions>) Adds a correlation identifier HTTP header to the Microsoft.AspNetCore.Builder.IApplicationBuilder request execution pipeline. Declaration public static IApplicationBuilder UseCorrelationIdentifierHeader(this IApplicationBuilder builder, Action<CorrelationIdentifierOptions> setup = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder builder The type that provides the mechanisms to configure an application’s request pipeline. System.Action < CorrelationIdentifierOptions > setup The CorrelationIdentifierOptions middleware which need to be configured. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder A reference to this instance after the operation has completed. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.html",
    "title": "Namespace Cuemon.AspNetCore.Authentication | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Classes AuthenticationOptions Base options for all authentication middleware. AuthenticationUtility Provides a set of generic ways to work with HTTP based authentication. BasicAuthenticationBuilderExtension This is a factory implementation of the BasicAuthenticationMiddleware class. BasicAuthenticationMiddleware Provides a HTTP Basic Authentication middleware implementation for ASP.NET Core. BasicAuthenticationOptions Configuration options for BasicAuthenticationMiddleware . This class cannot be inherited. DigestAccessAuthenticationBuilderExtension This is a factory implementation of the DigestAccessAuthenticationMiddleware class. DigestAccessAuthenticationMiddleware Provides a HTTP Digest Access Authentication middleware implementation for ASP.NET Core. DigestAccessAuthenticationOptions Configuration options for DigestAccessAuthenticationMiddleware . This class cannot be inherited. DigestAccessAuthenticationParameters Represents a set of parameters that is needed for creating an application of cryptographic hashing with usage of nonce values to prevent replay attacks. DigestAuthenticationUtility Provides an isolated set of members to work with HTTP Digest access authentication. HmacAuthenticationBuilderExtension This is a factory implementation of the HmacAuthenticationMiddleware class. HmacAuthenticationMiddleware Provides a HTTP HMAC Authentication middleware implementation for ASP.NET Core. HmacAuthenticationOptions Configuration options for HmacAuthenticationMiddleware . This class cannot be inherited. HmacAuthenticationParameters Represents a set of parameters that is needed for creating a keyed-hash message authentication code (HMAC). Delegates BasicAuthenticator Represents the method that defines an Authenticator typically assigned on BasicAuthenticationOptions . DigestAccessAuthenticator Represents the method that defines an Authenticator typically assigned on DigestAccessAuthenticationOptions . HmacAuthenticator Represents the method that defines an Authenticator typically assigned on HmacAuthenticationOptions . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TypeArgumentException.html": {
    "href": "api/core/Cuemon.TypeArgumentException.html",
    "title": "Class TypeArgumentException | Cuemon .NET Standard",
    "keywords": "Class TypeArgumentException The exception that is thrown when one of the type arguments provided to a method is not valid. Inheritance System.Object System.Exception System.ArgumentException TypeArgumentException Inherited Members System.ArgumentException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class TypeArgumentException : ArgumentException Constructors | Improve this Doc TypeArgumentException() Initializes a new instance of the TypeArgumentException class. Declaration public TypeArgumentException() | Improve this Doc TypeArgumentException(String) Initializes a new instance of the TypeArgumentException class. Declaration public TypeArgumentException(string typeParamName) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. | Improve this Doc TypeArgumentException(String, Exception) Initializes a new instance of the TypeArgumentException class. Declaration public TypeArgumentException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. | Improve this Doc TypeArgumentException(String, String) Initializes a new instance of the TypeArgumentException class. Declaration public TypeArgumentException(string typeParamName, string message) Parameters Type Name Description System.String typeParamName The name of the type parameter that caused the exception. System.String message The message that describes the error. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) ExceptionUtilityExtensions.Refine(Exception, MethodBase, Object[]) ExceptionUtilityExtensions.Refine(Exception, MethodDescriptor, Object[]) ExceptionUtilityExtensions.ParseException<TResult>(Exception) ExceptionUtilityExtensions.Flatten(Exception) ExceptionUtilityExtensions.Flatten(Exception, Type) StringConverterExtensions.ToEncodedString(Exception, Boolean) StringConverterExtensions.ToEncodedString(Exception, Boolean, Encoding) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StandardizedDateTimeFormatPattern.html": {
    "href": "api/core/Cuemon.StandardizedDateTimeFormatPattern.html",
    "title": "Enum StandardizedDateTimeFormatPattern | Cuemon .NET Standard",
    "keywords": "Enum StandardizedDateTimeFormatPattern Defines some standardized patterns to use when formatting date- and time values. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum StandardizedDateTimeFormatPattern Fields Name Description Iso8601CompleteDateBasic Displays a date using the ISO8601 basic date format, eg.: YYYYMMDD. Iso8601CompleteDateExtended Displays a date using the ISO8601 extended date format (human readable), eg.: YYYY-MM-DD. Iso8601CompleteDateTimeBasic Displays a date using the ISO8601 basic date format in conjunction with the ISO8601 time format, eg.: YYYYMMDDThhmmssTZD. Iso8601CompleteDateTimeExtended Displays a date using the ISO8601 extended date format (human readable) in conjunction with the ISO8601 extended time format (human readable), eg.: YYYY-MM-DDThh:mm:ssTZD. Extension Methods ByteConverterExtensions.ToByteArray<StandardizedDateTimeFormatPattern>() ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, TResult>(Func<StandardizedDateTimeFormatPattern, TResult>) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T, TResult>(Func<StandardizedDateTimeFormatPattern, T, TResult>, T) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T1, T2, TResult>(Func<StandardizedDateTimeFormatPattern, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T1, T2, T3, TResult>(Func<StandardizedDateTimeFormatPattern, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, TResult>(Func<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, TResult>(Func<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, T6, TResult>(Func<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<StandardizedDateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<StandardizedDateTimeFormatPattern>() DelegateUtilityExtensions.DynamicWrap<StandardizedDateTimeFormatPattern>() TweakerExtensions.Adjust<StandardizedDateTimeFormatPattern>(Func<StandardizedDateTimeFormatPattern, StandardizedDateTimeFormatPattern>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<StandardizedDateTimeFormatPattern>() WrapperExtensions.UseWrapper<StandardizedDateTimeFormatPattern>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<StandardizedDateTimeFormatPattern>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<StandardizedDateTimeFormatPattern>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.SortOrder.html": {
    "href": "api/core/Cuemon.SortOrder.html",
    "title": "Enum SortOrder | Cuemon .NET Standard",
    "keywords": "Enum SortOrder Specifies the direction of a sort operation. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum SortOrder Fields Name Description Ascending Sorts in ascending order. Descending Sorts in descending order. Unspecified No sort order is specified, meaning the default sorting is used. Extension Methods ByteConverterExtensions.ToByteArray<SortOrder>() ConverterExtensions.ParseWith<SortOrder, TResult>(Func<SortOrder, TResult>) ConverterExtensions.ParseWith<SortOrder, T, TResult>(Func<SortOrder, T, TResult>, T) ConverterExtensions.ParseWith<SortOrder, T1, T2, TResult>(Func<SortOrder, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<SortOrder, T1, T2, T3, TResult>(Func<SortOrder, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<SortOrder, T1, T2, T3, T4, TResult>(Func<SortOrder, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<SortOrder, T1, T2, T3, T4, T5, TResult>(Func<SortOrder, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<SortOrder, T1, T2, T3, T4, T5, T6, TResult>(Func<SortOrder, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<SortOrder, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<SortOrder, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<SortOrder, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<SortOrder, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<SortOrder, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<SortOrder, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<SortOrder>() DelegateUtilityExtensions.DynamicWrap<SortOrder>() TweakerExtensions.Adjust<SortOrder>(Func<SortOrder, SortOrder>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<SortOrder>() WrapperExtensions.UseWrapper<SortOrder>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<SortOrder>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<SortOrder>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.html": {
    "href": "api/core/Cuemon.Serialization.Xml.html",
    "title": "Namespace Cuemon.Serialization.Xml | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Classes DynamicXmlConverter Provides a factory based way to create and wrap an XmlConverter implementation. DynamicXmlSerializable Provides a factory based way to create and wrap an System.Xml.Serialization.IXmlSerializable implementation. XmlConvert Provides methods for converting between .NET types and XML types. XmlReaderExtensions Extension methods for the System.Xml.XmlReader . XmlSerializer Serializes and deserializes objects into and from the XML format. XmlSerializerSettings Specifies options that is related to XmlSerializer operations. XmlSerializerSettingsExtensions Extension methods for the XmlSerializerSettings . XmlWriterExtensions Extension methods for the System.Xml.XmlWriter . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.HashUtilityExtensions.html": {
    "href": "api/core/Cuemon.Security.Cryptography.HashUtilityExtensions.html",
    "title": "Class HashUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class HashUtilityExtensions This is an extension implementation of the most common methods on the HashUtility class. Inheritance System.Object HashUtilityExtensions Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public static class HashUtilityExtensions Methods | Improve this Doc ComputeHash(Byte[], Action<HashOptions>) Computes a hash value of the specified value . Declaration public static HashResult ComputeHash(this byte[] value, Action<HashOptions> setup = null) Parameters Type Name Description System.Byte [] value The System.Byte array to compute a hash code for. System.Action < HashOptions > setup The HashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified value . | Improve this Doc ComputeHash(Stream, Action<StreamHashOptions>) Computes a hash value of the specified value . Declaration public static HashResult ComputeHash(this Stream value, Action<StreamHashOptions> setup = null) Parameters Type Name Description System.IO.Stream value The System.IO.Stream object to compute a hash code for. System.Action < StreamHashOptions > setup The StreamHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified value . | Improve this Doc ComputeHash(Object, Action<HashOptions>) Computes a hash value of the specified value . Declaration public static HashResult ComputeHash(this object value, Action<HashOptions> setup = null) Parameters Type Name Description System.Object value The object to compute a hash code for. System.Action < HashOptions > setup The HashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified value . | Improve this Doc ComputeHash(Object[], Action<HashOptions>) Combines a sequence of objects into one object, and computes a hash value of the specified sequence, values . Declaration public static HashResult ComputeHash(this object[] values, Action<HashOptions> setup = null) Parameters Type Name Description System.Object [] values The objects to compute a hash code for. System.Action < HashOptions > setup The HashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified object sequence values . | Improve this Doc ComputeHash(String, Action<StringHashOptions>) Computes a hash value of the specified value . Declaration public static HashResult ComputeHash(this string value, Action<StringHashOptions> setup = null) Parameters Type Name Description System.String value The System.String value to compute a hash code for. System.Action < StringHashOptions > setup The StringHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified value . | Improve this Doc ComputeHash(String[], Action<StringHashOptions>) Computes a hash value of the specified values . Declaration public static HashResult ComputeHash(this string[] values, Action<StringHashOptions> setup = null) Parameters Type Name Description System.String [] values The System.String sequence to compute a hash code for. System.Action < StringHashOptions > setup The StringHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified values . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.HashUtility.html": {
    "href": "api/core/Cuemon.Security.Cryptography.HashUtility.html",
    "title": "Class HashUtility | Cuemon .NET Standard",
    "keywords": "Class HashUtility This utility class is designed to make System.Security.Cryptography.HashAlgorithm operations easier to work with. Inheritance System.Object HashUtility Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public static class HashUtility Methods | Improve this Doc ComputeHash(Byte[], Action<HashOptions>) Computes a hash value of the specified value . Declaration public static HashResult ComputeHash(byte[] value, Action<HashOptions> setup = null) Parameters Type Name Description System.Byte [] value The System.Byte array to compute a hash code for. System.Action < HashOptions > setup The HashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified value . | Improve this Doc ComputeHash(Stream, Action<StreamHashOptions>) Computes a hash value of the specified value . Declaration public static HashResult ComputeHash(Stream value, Action<StreamHashOptions> setup = null) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to compute a hash code for. System.Action < StreamHashOptions > setup The StreamHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified value . | Improve this Doc ComputeHash(Object, Action<HashOptions>) Computes a hash value of the specified value . Declaration public static HashResult ComputeHash(object value, Action<HashOptions> setup = null) Parameters Type Name Description System.Object value The object to compute a hash code for. System.Action < HashOptions > setup The HashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified value . | Improve this Doc ComputeHash(Object[], Action<HashOptions>) Combines a sequence of objects into one object, and computes a hash value of the specified values . Declaration public static HashResult ComputeHash(object[] values, Action<HashOptions> setup = null) Parameters Type Name Description System.Object [] values The objects to compute a hash code for. System.Action < HashOptions > setup The HashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified object sequence values . | Improve this Doc ComputeHash(String, Action<StringHashOptions>) Computes a hash value of the specified value . Declaration public static HashResult ComputeHash(string value, Action<StringHashOptions> setup = null) Parameters Type Name Description System.String value The System.String to compute a hash code for. System.Action < StringHashOptions > setup The StringHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified value . | Improve this Doc ComputeHash(String[], Action<StringHashOptions>) Computes a hash value of the specified values . Declaration public static HashResult ComputeHash(string[] values, Action<StringHashOptions> setup = null) Parameters Type Name Description System.String [] values The System.String array to compute a hash code for. System.Action < StringHashOptions > setup The StringHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed hash value of the specified values . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.FileInfoConverter.html": {
    "href": "api/core/Cuemon.IO.FileInfoConverter.html",
    "title": "Class FileInfoConverter | Cuemon .NET Standard",
    "keywords": "Class FileInfoConverter This utility class is designed to make System.IO.FileInfo related conversions easier to work with. Inheritance System.Object FileInfoConverter Namespace : Cuemon.IO Assembly : Cuemon.IO.dll Syntax public static class FileInfoConverter Methods | Improve this Doc Convert<T>(String, Func<FileInfo, Byte[], T>) Converts the specified fileName to an instance of T using the function delegate converter . Declaration public static T Convert<T>(string fileName, Func<FileInfo, byte[], T> converter) Parameters Type Name Description System.String fileName The fully qualified name of the file. System.Func < System.IO.FileInfo , System.Byte [], T> converter The function delegate that will handle the conversion. Returns Type Description T An instance of T . Type Parameters Name Description T The type of the converted object. | Improve this Doc Convert<T>(String, Int32, Func<FileInfo, Byte[], T>) Converts the specified fileName to an instance of T using the function delegate converter . Declaration public static T Convert<T>(string fileName, int bytesToRead, Func<FileInfo, byte[], T> converter) Parameters Type Name Description System.String fileName The fully qualified name of the file. System.Int32 bytesToRead The amount of bytes to read from the specified fileName . System.Func < System.IO.FileInfo , System.Byte [], T> converter The function delegate that will handle the conversion. Returns Type Description T An instance of T . Type Parameters Name Description T The type of the converted object. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.Compression.html": {
    "href": "api/core/Cuemon.IO.Compression.html",
    "title": "Namespace Cuemon.IO.Compression | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.IO.Compression Assembly : Cuemon.IO.dll Classes CompressionUtility This utility class is designed to make System.IO.Stream related compression operations easier to work with. CompressionUtilityExtensions This is an extension implementation of the most common methods on the CompressionUtility class. Enums CompressionType Specifies the algorithm used for compression. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.QueryUtility.html": {
    "href": "api/core/Cuemon.Data.QueryUtility.html",
    "title": "Class QueryUtility | Cuemon .NET Standard",
    "keywords": "Class QueryUtility This utility class is designed to make query related operations easier to work with. Inheritance System.Object QueryUtility Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public static class QueryUtility Methods | Improve this Doc GetQueryFragment(QueryFormat, IEnumerable<Int32>) Converts a sequence of System.Int32 values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, IEnumerable<int> values) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Collections.Generic.IEnumerable < System.Int32 > values The values to be generated in the specified format for the query fragment. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, IEnumerable<Int32>, Boolean) Converts sequence of System.Int32 values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, IEnumerable<int> values, bool distinct) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Collections.Generic.IEnumerable < System.Int32 > values The values to be generated in the specified format for the query fragment. System.Boolean distinct if set to true , values will be filtered for doublets. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, IEnumerable<Int64>) Converts a sequence of System.Int64 values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, IEnumerable<long> values) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Collections.Generic.IEnumerable < System.Int64 > values The values to be generated in the specified format for the query fragment. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, IEnumerable<Int64>, Boolean) Converts sequence of System.Int64 values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, IEnumerable<long> values, bool distinct) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Collections.Generic.IEnumerable < System.Int64 > values The values to be generated in the specified format for the query fragment. System.Boolean distinct if set to true , values will be filtered for doublets. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, IEnumerable<Object>) Converts a sequence of System.Object values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, IEnumerable<object> values) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Collections.Generic.IEnumerable < System.Object > values The values to be generated in the specified format for the query fragment. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, IEnumerable<Object>, Boolean) Converts sequence of System.Object values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, IEnumerable<object> values, bool distinct) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Collections.Generic.IEnumerable < System.Object > values The values to be generated in the specified format for the query fragment. System.Boolean distinct if set to true , values will be filtered for doublets. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, IEnumerable<String>) Converts a sequence of System.String values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, IEnumerable<string> values) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Collections.Generic.IEnumerable < System.String > values The values to be generated in the specified format for the query fragment. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, IEnumerable<String>, Boolean) Converts sequence of System.String values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, IEnumerable<string> values, bool distinct) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Collections.Generic.IEnumerable < System.String > values The values to be generated in the specified format for the query fragment. System.Boolean distinct if set to true , values will be filtered for doublets. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, Int32[]) Converts an array of System.Int32 values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, int[] values) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Int32 [] values The values to be generated in the specified format for the query fragment. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, Int32[], Boolean) Converts an array of System.Int32 values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, int[] values, bool distinct) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Int32 [] values The values to be generated in the specified format for the query fragment. System.Boolean distinct if set to true , values will be filtered for doublets. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, Int64[]) Converts an array of System.Int64 values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, long[] values) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Int64 [] values The values to be generated in the specified format for the query fragment. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, Int64[], Boolean) Converts an array of System.Int64 values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, long[] values, bool distinct) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Int64 [] values The values to be generated in the specified format for the query fragment. System.Boolean distinct if set to true , values will be filtered for doublets. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, Object[]) Converts an array of System.Object values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, object[] values) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Object [] values The values to be generated in the specified format for the query fragment. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, Object[], Boolean) Converts an array of System.Object values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, object[] values, bool distinct) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.Object [] values The values to be generated in the specified format for the query fragment. System.Boolean distinct if set to true , values will be filtered for doublets. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, String[]) Converts an array of System.String values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, string[] values) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.String [] values The values to be generated in the specified format for the query fragment. Returns Type Description System.String A query fragment in the desired format. | Improve this Doc GetQueryFragment(QueryFormat, String[], Boolean) Converts an array of System.String values to the desired query fragment format. Declaration public static string GetQueryFragment(QueryFormat format, string[] values, bool distinct) Parameters Type Name Description QueryFormat format The format to use for the query fragment. System.String [] values The values to be generated in the specified format for the query fragment. System.Boolean distinct if set to true , values will be filtered for doublets. Returns Type Description System.String A query fragment in the desired format. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataTransferExtensions.html": {
    "href": "api/core/Cuemon.Data.DataTransferExtensions.html",
    "title": "Class DataTransferExtensions | Cuemon .NET Standard",
    "keywords": "Class DataTransferExtensions This is an extensions implementation of the most common methods on the DataTransfer class. Inheritance System.Object DataTransferExtensions Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public static class DataTransferExtensions Methods | Improve this Doc ToColumns(IDataReader) Converts the specified and read-initialized reader implementation to a column-like data transfer object. Declaration public static DataTransferColumnCollection ToColumns(this IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The read-initialized reader to be converted. Returns Type Description DataTransferColumnCollection A DataTransferColumnCollection that is the result of the specified and read-initialized reader . Exceptions Type Condition System.ArgumentNullException reader is null. System.ArgumentException reader is closed. System.InvalidOperationException Invalid attempt to read from reader when no data is present. | Improve this Doc ToRows(IDataReader) Converts the specified reader implementation to a table-like data transfer object. Declaration public static DataTransferRowCollection ToRows(this IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The reader to be converted. Returns Type Description DataTransferRowCollection A DataTransferRowCollection that is the result of the specified reader . Exceptions Type Condition System.ArgumentNullException reader is null. System.ArgumentException reader is closed. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.PartitionCollectionExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.PartitionCollectionExtensions.html",
    "title": "Class PartitionCollectionExtensions | Cuemon .NET Standard",
    "keywords": "Class PartitionCollectionExtensions This is an extension implementation that provides ways to partition System.Collections.Generic.IEnumerable<T> sequences. Inheritance System.Object PartitionCollectionExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class PartitionCollectionExtensions Methods | Improve this Doc ToPartitionCollection<T>(IEnumerable<T>) Converts the specified source to a partitioned data sequence. Default partition size is 128. Declaration public static PartitionCollection<T> ToPartitionCollection<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence. Returns Type Description PartitionCollection <T> An instance of PartitionCollection<T> . Type Parameters Name Description T The type of the elements of source . | Improve this Doc ToPartitionCollection<T>(IEnumerable<T>, Int32) Converts the specified source to a partitioned data sequence. Declaration public static PartitionCollection<T> ToPartitionCollection<T>(this IEnumerable<T> source, int size) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence. System.Int32 size The number of elements a partition can hold. Returns Type Description PartitionCollection <T> An instance of PartitionCollection<T> . Type Parameters Name Description T The type of the elements of source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.DictionaryUtility.html": {
    "href": "api/core/Cuemon.Collections.Generic.DictionaryUtility.html",
    "title": "Class DictionaryUtility | Cuemon .NET Standard",
    "keywords": "Class DictionaryUtility This utility class provides a set of concrete static methods for supporting the EnumerableUtility . Inheritance System.Object DictionaryUtility Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class DictionaryUtility Methods | Improve this Doc FirstMatchOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey[]) Returns the first TValue matching one of the specified keys in a System.Collections.Generic.IDictionary<TKey, TValue> , or a default value if the source contains no elements or no match was found. Declaration public static TValue FirstMatchOrDefault<TKey, TValue>(IDictionary<TKey, TValue> source, params TKey[] keys) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source The System.Collections.Generic.IDictionary<TKey, TValue> to return a matching TValue from. TKey[] keys A variable number of keys to match in the specified source . Returns Type Description TValue default(TValue) if source is empty or no match was found; otherwise, the matching element in source . Type Parameters Name Description TKey The System.Type of the key. TValue The System.Type of the value. Remarks The default value for reference and nullable types is null. | Improve this Doc FirstMatchOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TValue, TKey[]) Returns the first TValue matching one of the specified keys in a System.Collections.Generic.IDictionary<TKey, TValue> , or a defaultValue if the source contains no elements or no match was found. Declaration public static TValue FirstMatchOrDefault<TKey, TValue>(IDictionary<TKey, TValue> source, TValue defaultValue, params TKey[] keys) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source The System.Collections.Generic.IDictionary<TKey, TValue> to return a matching TValue from. TValue defaultValue The default value to return when source contains no elements or no match was found. TKey[] keys A variable number of keys to match in the specified source . Returns Type Description TValue defaultValue if source is empty or no match was found; otherwise, the matching element in source . Type Parameters Name Description TKey The System.Type of the key. TValue The System.Type of the value. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.JsonMvcCoreBuilderExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.JsonMvcCoreBuilderExtensions.html",
    "title": "Class JsonMvcCoreBuilderExtensions | Cuemon .NET Standard",
    "keywords": "Class JsonMvcCoreBuilderExtensions Extension methods for adding JSON formatters to MVC. Inheritance System.Object JsonMvcCoreBuilderExtensions Namespace : Cuemon.AspNetCore.Mvc.Formatters.Json Assembly : Cuemon.AspNetCore.Mvc.Formatters.Json.dll Syntax public static class JsonMvcCoreBuilderExtensions Methods | Improve this Doc AddJsonFormatterOptions(IMvcBuilder, Action<JsonFormatterOptions>) Adds configuration of JsonFormatterOptions for the application. Declaration public static IMvcBuilder AddJsonFormatterOptions(this IMvcBuilder builder, Action<JsonFormatterOptions> setup) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IMvcBuilder builder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . System.Action < JsonFormatterOptions > setup The JsonFormatterOptions which need to be configured. Returns Type Description Microsoft.Extensions.DependencyInjection.IMvcBuilder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . | Improve this Doc AddJsonFormatterOptions(IMvcCoreBuilder, Action<JsonFormatterOptions>) Adds configuration of JsonFormatterOptions for the application. Declaration public static IMvcCoreBuilder AddJsonFormatterOptions(this IMvcCoreBuilder builder, Action<JsonFormatterOptions> setup) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . System.Action < JsonFormatterOptions > setup The JsonFormatterOptions which need to be configured. Returns Type Description Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . | Improve this Doc AddJsonSerializationFormatters(IMvcBuilder) Adds the JSON Serializer formatters to MVC. Declaration public static IMvcBuilder AddJsonSerializationFormatters(this IMvcBuilder builder) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IMvcBuilder builder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . Returns Type Description Microsoft.Extensions.DependencyInjection.IMvcBuilder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . | Improve this Doc AddJsonSerializationFormatters(IMvcCoreBuilder) Adds the JSON Serializer formatters to MVC. Declaration public static IMvcCoreBuilder AddJsonSerializationFormatters(this IMvcCoreBuilder builder) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder The Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder . Returns Type Description Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder The Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.PagedCollection.html": {
    "href": "api/core/Cuemon.Collections.Generic.PagedCollection.html",
    "title": "Class PagedCollection | Cuemon .NET Standard",
    "keywords": "Class PagedCollection Represents a way of setting default values for the PagedCollection<T> class. Inheritance System.Object PagedCollection PagedCollection <T> Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public class PagedCollection Constructors | Improve this Doc PagedCollection() Initializes a new instance of the PagedCollection class. Declaration protected PagedCollection() Methods | Improve this Doc Search<T>(IEnumerable<T>, Func<T, PagedSettings, StringComparison, Boolean>, PagedSettings) Retrieves all the elements in source that match the conditions defined by the specified function delegate match . Declaration public static PagedCollection<T> Search<T>(IEnumerable<T> source, Func<T, PagedSettings, StringComparison, bool> match, PagedSettings settings) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The sequence to search and apply paging on. System.Func <T, PagedSettings , System.StringComparison , System.Boolean > match The function delegate that defines the conditions of the elements to search for. PagedSettings settings The settings that specifies the conditions of the match before applying paging to this instance. Returns Type Description PagedCollection <T> A PagedCollection<T> that is the result of match . Type Parameters Name Description T Remarks This search is performed by using a default value of System.StringComparison.OrdinalIgnoreCase . | Improve this Doc Search<T>(IEnumerable<T>, Func<T, PagedSettings, StringComparison, Boolean>, PagedSettings, StringComparison) Retrieves all the elements in source that match the conditions defined by the specified function delegate match . Declaration public static PagedCollection<T> Search<T>(IEnumerable<T> source, Func<T, PagedSettings, StringComparison, bool> match, PagedSettings settings, StringComparison comparison) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The sequence to search and apply paging on. System.Func <T, PagedSettings , System.StringComparison , System.Boolean > match The function delegate that defines the conditions of the elements to search for. PagedSettings settings The settings that specifies the conditions of the match before applying paging to this instance. System.StringComparison comparison One of the enumeration values that specifies the rules to use in the comparison. Returns Type Description PagedCollection <T> A PagedCollection<T> that is the result of match . Type Parameters Name Description T | Improve this Doc Sort<T>(IEnumerable<T>, Func<IEnumerable<T>, PagedSettings, IEnumerable<T>>, PagedSettings) Sort all the elements in source by the settings applied to the specified function delegate sorter . Declaration public static PagedCollection<T> Sort<T>(IEnumerable<T> source, Func<IEnumerable<T>, PagedSettings, IEnumerable<T>> sorter, PagedSettings settings) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The sequence to sort and apply paging on. System.Func < System.Collections.Generic.IEnumerable <T>, PagedSettings , System.Collections.Generic.IEnumerable <T>> sorter The function delegate that defines how the sorting is applied to the elements in source . PagedSettings settings The settings that specifies the conditions of the sorter before applying paging to this instance. Returns Type Description PagedCollection <T> A PagedCollection<T> that is sorted by the specified sorter . Type Parameters Name Description T Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.DictionaryConverter.html": {
    "href": "api/core/Cuemon.Collections.Generic.DictionaryConverter.html",
    "title": "Class DictionaryConverter | Cuemon .NET Standard",
    "keywords": "Class DictionaryConverter This utility class is designed to make System.Collections.Generic.IDictionary<TKey, TValue> related conversions easier to work with. Inheritance System.Object DictionaryConverter Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class DictionaryConverter Methods | Improve this Doc FromEnumerable<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Creates a System.Collections.Generic.Dictionary<TKey, TValue> from the specified source sequence. Declaration public static IDictionary<TKey, TValue> FromEnumerable<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> source The sequence to create a System.Collections.Generic.Dictionary<TKey, TValue> from. Returns Type Description System.Collections.Generic.IDictionary <TKey, TValue> A System.Collections.Generic.Dictionary<TKey, TValue> that is equivalent to the specified source sequence. Type Parameters Name Description TKey The type of keys in the source . TValue The type of values in the source . Exceptions Type Condition System.ArgumentNullException source is null. System.ArgumentException source contains at least one System.Collections.Generic.KeyValuePair<TKey,TValue> that produces duplicate keys for two elements. | Improve this Doc FromEnumerable<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>) Creates a System.Collections.Generic.Dictionary<TKey, TValue> from the specified source sequence. Declaration public static IDictionary<TKey, TValue> FromEnumerable<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>> source, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> source The sequence to create a System.Collections.Generic.Dictionary<TKey, TValue> from. System.Collections.Generic.IEqualityComparer <TKey> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing keys. Returns Type Description System.Collections.Generic.IDictionary <TKey, TValue> A System.Collections.Generic.Dictionary<TKey, TValue> that is equivalent to the specified source sequence. Type Parameters Name Description TKey The type of keys in the source . TValue The type of values in the source . Exceptions Type Condition System.ArgumentNullException source is null - or - comparer is null. System.ArgumentException source contains at least one System.Collections.Generic.KeyValuePair<TKey,TValue> that produces duplicate keys for two elements. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.ConditionalCollection-1.html": {
    "href": "api/core/Cuemon.Collections.Generic.ConditionalCollection-1.html",
    "title": "Class ConditionalCollection<T> | Cuemon .NET Standard",
    "keywords": "Class ConditionalCollection<T> Provides the abstract base class for a generic, conditional collection. Inheritance System.Object ConditionalCollection<T> Implements System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public abstract class ConditionalCollection<T> : ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the collection. Constructors | Improve this Doc ConditionalCollection() Initializes a new instance of the ConditionalCollection<T> class. Declaration protected ConditionalCollection() Properties | Improve this Doc Count Gets the number of elements contained in the ConditionalCollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements actually contained in the ConditionalCollection<T> . | Improve this Doc IsReadOnly Gets a value indicating whether the ConditionalCollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if this instance is read only; otherwise, false . Methods | Improve this Doc Add(T) Adds an item to the ConditionalCollection<T> . Declaration public abstract void Add(T item) Parameters Type Name Description T item The object to add to the ConditionalCollection<T> . | Improve this Doc Add(T, Action) Adds an item to the ConditionalCollection<T> . Declaration protected void Add(T item, Action validator) Parameters Type Name Description T item The object to add to the ConditionalCollection<T> . System.Action validator The delegate that validates the item being added to the ConditionalCollection<T> . | Improve this Doc Clear() Removes all items from the ConditionalCollection<T> . Declaration public void Clear() | Improve this Doc Contains(T) Determines whether the ConditionalCollection<T> contains a specific value. Declaration public abstract bool Contains(T item) Parameters Type Name Description T item The object to locate in the ConditionalCollection<T> . Returns Type Description System.Boolean true if item is found in the ConditionalCollection<T> ; otherwise, false . | Improve this Doc Contains(T, IEqualityComparer<T>) Determines whether the ConditionalCollection<T> contains a specific value by using a specified comparer . Declaration protected bool Contains(T item, IEqualityComparer<T> comparer) Parameters Type Name Description T item The object to locate in the ConditionalCollection<T> . System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing the specified item with an element from the ConditionalCollection<T> . Returns Type Description System.Boolean true if item is found in the ConditionalCollection<T> ; otherwise, false . | Improve this Doc CopyTo(T[], Int32) Copies the elements of the ConditionalCollection<T> to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional System.Array that is the destination of the elements copied from ConditionalCollection<T> . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. | Improve this Doc GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> An enumerator that can be used to iterate through the collection. | Improve this Doc Remove(T) Removes the first occurrence of a specific object from the ConditionalCollection<T> . Declaration public abstract bool Remove(T item) Parameters Type Name Description T item The object to remove from the ConditionalCollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the ConditionalCollection<T> ; otherwise, false . This method also returns false if item is not found in the original ConditionalCollection<T> . | Improve this Doc Remove(T, Func<T, Boolean>, IEqualityComparer<T>) Removes all occurrences of a specific object from the ConditionalCollection<T> that match the conditions defined by the specified predicate and comparer . Declaration protected bool Remove(T item, Func<T, bool> predicate, IEqualityComparer<T> comparer = null) Parameters Type Name Description T item The object to remove from the ConditionalCollection<T> . System.Func <T, System.Boolean > predicate The function delegate that will iterate and match the specified item from the ConditionalCollection<T> . System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing the specified item with an element from the ConditionalCollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the ConditionalCollection<T> ; otherwise, false . This method also returns false if item is not found in the original ConditionalCollection<T> . Explicit Interface Implementations | Improve this Doc IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also System.Collections.Generic.ICollection <T> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ActionFactory.html": {
    "href": "api/core/Cuemon.ActionFactory.html",
    "title": "Class ActionFactory | Cuemon .NET Standard",
    "keywords": "Class ActionFactory Provides access to factory methods for creating ActionFactory<TTuple> instances that encapsulate a delegate with a variable amount of generic arguments. Inheritance System.Object ActionFactory Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ActionFactory Methods | Improve this Doc Create(Action) Creates a new ActionFactory<TTuple> instance encapsulating the specified method . Declaration public static ActionFactory<Template> Create(Action method) Parameters Type Name Description System.Action method The delegate to invoke. Returns Type Description ActionFactory < Template > An instance of ActionFactory<TTuple> object initialized with the specified method . | Improve this Doc Create<T>(Action<T>, T) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and one generic argument. Declaration public static ActionFactory<Template<T>> Create<T>(Action<T> method, T arg) Parameters Type Name Description System.Action <T> method The delegate to invoke. T arg The parameter of the delegate method . Returns Type Description ActionFactory < Template <T>> An instance of ActionFactory<TTuple> object initialized with the specified method and one generic argument. Type Parameters Name Description T The type of the parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and ten generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> An instance of ActionFactory<TTuple> object initialized with the specified method and ten generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and eleven generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> An instance of ActionFactory<TTuple> object initialized with the specified method and eleven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and twelfth generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> An instance of ActionFactory<TTuple> object initialized with the specified method and twelfth generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and thirteen generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . T13 arg13 The thirteenth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> An instance of ActionFactory<TTuple> object initialized with the specified method and thirteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . T13 The type of the thirteenth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and fourteen generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . T13 arg13 The thirteenth parameter of the delegate method . T14 arg14 The fourteenth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> An instance of ActionFactory<TTuple> object initialized with the specified method and fourteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . T13 The type of the thirteenth parameter of the delegate method . T14 The type of the fourteenth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and fifteen generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . T13 arg13 The thirteenth parameter of the delegate method . T14 arg14 The fourteenth parameter of the delegate method . T15 arg15 The fifteenth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> An instance of ActionFactory<TTuple> object initialized with the specified method and fifteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . T13 The type of the thirteenth parameter of the delegate method . T14 The type of the fourteenth parameter of the delegate method . T15 The type of the fifteenth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and sixteen generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . T13 arg13 The thirteenth parameter of the delegate method . T14 arg14 The fourteenth parameter of the delegate method . T15 arg15 The fifteenth parameter of the delegate method . T16 arg16 The sixteenth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> An instance of ActionFactory<TTuple> object initialized with the specified method and sixteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . T13 The type of the thirteenth parameter of the delegate method . T14 The type of the fourteenth parameter of the delegate method . T15 The type of the fifteenth parameter of the delegate method . T16 The type of the sixteenth parameter of the delegate method . | Improve this Doc Create<T1, T2>(Action<T1, T2>, T1, T2) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and two generic arguments. Declaration public static ActionFactory<Template<T1, T2>> Create<T1, T2>(Action<T1, T2> method, T1 arg1, T2 arg2) Parameters Type Name Description System.Action <T1, T2> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2>> An instance of ActionFactory<TTuple> object initialized with the specified method and two generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . | Improve this Doc Create<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and three generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3>> Create<T1, T2, T3>(Action<T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Action <T1, T2, T3> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3>> An instance of ActionFactory<TTuple> object initialized with the specified method and three generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4>(Action<T1, T2, T3, T4>, T1, T2, T3, T4) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and four generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4>> Create<T1, T2, T3, T4>(Action<T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Action <T1, T2, T3, T4> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4>> An instance of ActionFactory<TTuple> object initialized with the specified method and four generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and five generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5>> Create<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5>> An instance of ActionFactory<TTuple> object initialized with the specified method and five generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and six generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6>> Create<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6>> An instance of ActionFactory<TTuple> object initialized with the specified method and six generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and seven generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7>> Create<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7>> An instance of ActionFactory<TTuple> object initialized with the specified method and seven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8>(Action<T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and eight generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8>> Create<T1, T2, T3, T4, T5, T6, T7, T8>(Action<T1, T2, T3, T4, T5, T6, T7, T8> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8>> An instance of ActionFactory<TTuple> object initialized with the specified method and eight generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Creates a new ActionFactory<TTuple> instance encapsulating the specified method and nine generic arguments. Declaration public static ActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9> method The delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . Returns Type Description ActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9>> An instance of ActionFactory<TTuple> object initialized with the specified method and nine generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . | Improve this Doc Invoke<TTuple>(Action<TTuple>, TTuple) Invokes the specified delegate method with a n- tuple argument. Declaration public static void Invoke<TTuple>(Action<TTuple> method, TTuple tuple) where TTuple : Template Parameters Type Name Description System.Action <TTuple> method The delegate to invoke. TTuple tuple The n-tuple argument of method . Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ActionFactory-1.html": {
    "href": "api/core/Cuemon.ActionFactory-1.html",
    "title": "Class ActionFactory<TTuple> | Cuemon .NET Standard",
    "keywords": "Class ActionFactory<TTuple> Provides an easy way of invoking an System.Action delegate regardless of the amount of parameters provided. Inheritance System.Object TemplateFactory <TTuple> ActionFactory<TTuple> Inherited Members TemplateFactory<TTuple>.GenericArguments TemplateFactory<TTuple>.HasDelegate TemplateFactory<TTuple>.DelegateInfo TemplateFactory<TTuple>.ToString() TemplateFactory<TTuple>.ThrowIfNoValidDelegate(Boolean) Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public sealed class ActionFactory<TTuple> : TemplateFactory<TTuple> where TTuple : Template Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . Constructors | Improve this Doc ActionFactory(Action<TTuple>, TTuple) Initializes a new instance of the ActionFactory class. Declaration public ActionFactory(Action<TTuple> method, TTuple tuple) Parameters Type Name Description System.Action <TTuple> method The delegate to invoke. TTuple tuple The n-tuple argument of method . Methods | Improve this Doc BeginExecuteMethod(AsyncCallback, Object) Executes the specified delegate asynchronous operation with the specified arguments. Declaration public void BeginExecuteMethod(AsyncCallback callback, object state) Parameters Type Name Description System.AsyncCallback callback The method to be called when the operation has completed. System.Object state An optional object that contains information about the asynchronous operation. | Improve this Doc Clone() Creates a shallow copy of the current ActionFactory<TTuple> object. Declaration public ActionFactory<TTuple> Clone() Returns Type Description ActionFactory <TTuple> A new ActionFactory<TTuple> that is a copy of this instance. Remarks When thread safety is required this is the method to invoke. | Improve this Doc EndExecuteMethod(IAsyncResult) Called when the asynchronous operation initiated by BeginExecuteMethod(AsyncCallback, Object) has completed. Declaration public void EndExecuteMethod(IAsyncResult result) Parameters Type Name Description System.IAsyncResult result The System.IAsyncResult that represents a specific invoke asynchronous operation, returned when calling BeginExecuteMethod(AsyncCallback, Object) . | Improve this Doc ExecuteMethod() Executes the delegate associated with this instance. Declaration public void ExecuteMethod() | Improve this Doc ExecuteMethodAsync() Executes the delegate associated with this instance as an asynchronous operation. Declaration public Task ExecuteMethodAsync() Returns Type Description System.Threading.Tasks.Task Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.Converters.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.Converters.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Formatters.Json.Converters | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Formatters.Json.Converters Assembly : Cuemon.AspNetCore.Mvc.dll Classes JsonConverterCollectionExtensions Extension methods for the System.Collections.Generic.ICollection<T> . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.Converters.JsonConverterCollectionExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.Converters.JsonConverterCollectionExtensions.html",
    "title": "Class JsonConverterCollectionExtensions | Cuemon .NET Standard",
    "keywords": "Class JsonConverterCollectionExtensions Extension methods for the System.Collections.Generic.ICollection<T> . Inheritance System.Object JsonConverterCollectionExtensions Namespace : Cuemon.AspNetCore.Mvc.Formatters.Json.Converters Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public static class JsonConverterCollectionExtensions Methods | Improve this Doc AddStringValuesConverter(ICollection<JsonConverter>) Adds an Microsoft.Extensions.Primitives.StringValues JSON converter to the list. Declaration public static void AddStringValuesConverter(this ICollection<JsonConverter> converters) Parameters Type Name Description System.Collections.Generic.ICollection < Newtonsoft.Json.JsonConverter > converters The list of JSON converters. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ConfigurableAsyncResultFilter-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ConfigurableAsyncResultFilter-1.html",
    "title": "Class ConfigurableAsyncResultFilter<TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableAsyncResultFilter<TOptions> A base class implementation of a filter that asynchronously surrounds execution of action results successfully returned from an action. Inheritance System.Object Configurable <TOptions> ConfigurableAsyncResultFilter<TOptions> HttpCacheableFilter Implements IConfigurable <TOptions> Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members Configurable<TOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public abstract class ConfigurableAsyncResultFilter<TOptions> : Configurable<TOptions>, IConfigurable<TOptions>, IAsyncResultFilter, IFilterMetadata where TOptions : class, new() Type Parameters Name Description TOptions The type of the configured options. Constructors | Improve this Doc ConfigurableAsyncResultFilter(IOptions<TOptions>) Initializes a new instance of the ConfigurableAsyncResultFilter<TOptions> class. Declaration protected ConfigurableAsyncResultFilter(IOptions<TOptions> setup) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableAsyncResultFilter(Action<TOptions>) Initializes a new instance of the ConfigurableAsyncResultFilter<TOptions> class. Declaration protected ConfigurableAsyncResultFilter(Action<TOptions> setup) Parameters Type Name Description System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) Called asynchronously before the action result. Declaration public abstract Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext . Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate next The Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate . Invoked to execute the next result filter or the result itself. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion indicates the filter has executed. Implements IConfigurable<TOptions> Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Configurable <TOptions> Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DataPair-1.html": {
    "href": "api/core/Cuemon.DataPair-1.html",
    "title": "Class DataPair<T> | Cuemon .NET Standard",
    "keywords": "Class DataPair<T> Represents a generic way to provide information about arbitrary data. Inheritance System.Object DataPair DataPair<T> Inherited Members DataPair.Name DataPair.Value DataPair.HasValue DataPair.Type DataPair.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class DataPair<T> : DataPair Type Parameters Name Description T The type of the data value being represented by this instance. Constructors | Improve this Doc DataPair(String, T) Initializes a new instance of the DataPair class. Declaration public DataPair(string name, T value) Parameters Type Name Description System.String name The name of the data pair. T value The value of the data pair. | Improve this Doc DataPair(String, T, Type) Initializes a new instance of the DataPair class. Declaration public DataPair(string name, T value, Type typeOf) Parameters Type Name Description System.String name The name of the data pair. T value The value of the data pair. System.Type typeOf The type of the data pair. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.EnumerableUtility.html": {
    "href": "api/core/Cuemon.Collections.Generic.EnumerableUtility.html",
    "title": "Class EnumerableUtility | Cuemon .NET Standard",
    "keywords": "Class EnumerableUtility This utility class provides a set of static methods for querying objects that implement System.Collections.Generic.IEnumerable<T> . Inheritance System.Object EnumerableUtility Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class EnumerableUtility Methods | Improve this Doc Chunk<TSource>(ref IEnumerable<TSource>) Returns a chunked System.Collections.Generic.IEnumerable<T> sequence with a maximum of 128 elements. Declaration public static IEnumerable<TSource> Chunk<TSource>(ref IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to chunk into smaller slices for a batch run or similar. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains no more than 128 elements from the source sequence. Type Parameters Name Description TSource The type of the elements of source . Remarks The original source is reduced equivalent to the number of elements in the returned sequence. Exceptions Type Condition System.ArgumentNullException source is null. | Improve this Doc Chunk<TSource>(ref IEnumerable<TSource>, Int32) Returns a chunked System.Collections.Generic.IEnumerable<T> sequence with a maximum of the specified size . Default is 128. Declaration public static IEnumerable<TSource> Chunk<TSource>(ref IEnumerable<TSource> source, int size) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to chunk into smaller slices for a batch run or similar. System.Int32 size The amount of elements to process at a time. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains no more than the specified size of elements from the source sequence. Type Parameters Name Description TSource The type of the elements of source . Remarks The original source is reduced equivalent to the number of elements in the returned sequence. Exceptions Type Condition System.ArgumentNullException source is null. System.ArgumentException size is less or equal to 0. | Improve this Doc Concat<TSource>(IEnumerable<TSource>[]) Concatenates the specified sequences in sources into one sequence. Declaration public static IEnumerable<TSource> Concat<TSource>(params IEnumerable<TSource>[] sources) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource>[] sources The sequences to concatenate into one System.Collections.Generic.IEnumerable<T> . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains the concatenated elements of the specified sequences in sources . Type Parameters Name Description TSource The type of the elements of the input sequences of . | Improve this Doc Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) Determines whether a sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer<T> . Declaration public static bool Contains<TSource>(IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence in which to locate a value. TSource value The value to locate in the sequence. System.Collections.Generic.IEqualityComparer <TSource> comparer An equality comparer to compare values. Returns Type Description System.Boolean true if the source sequence contains an element that has the specified value; otherwise, false . Type Parameters Name Description TSource The type of the System.Collections.Generic.IEnumerable<T> of . | Improve this Doc Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) Determines whether a sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer<T> . Declaration public static bool Contains<TSource>(IEnumerable<TSource> source, TSource value, Func<TSource, TSource, bool> condition) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence in which to locate a value. TSource value The value to locate in the sequence. System.Func <TSource, TSource, System.Boolean > condition The function delegate that will compare values from the source sequence with value . Returns Type Description System.Boolean true if the source sequence contains an element that has the specified value; otherwise, false . Type Parameters Name Description TSource The type of the System.Collections.Generic.IEnumerable<T> of . | Improve this Doc FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) Retrieves all the elements that match the conditions defined by the specified predicate. Declaration public static IEnumerable<TSource> FindAll<TSource>(IEnumerable<TSource> source, Func<TSource, bool> match) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, System.Boolean > match The function delegate that defines the conditions of the elements to search for. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the function delegate match . T2 arg2 The second parameter of the function delegate match . T3 arg3 The third parameter of the function delegate match . T4 arg4 The fourth parameter of the function delegate match . T5 arg5 The fifth parameter of the function delegate match . T6 arg6 The sixth parameter of the function delegate match . T7 arg7 The seventh parameter of the function delegate match . T8 arg8 The eighth parameter of the function delegate match . T9 arg9 The ninth parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate match . T2 The type of the second parameter of the function delegate match . T3 The type of the third parameter of the function delegate match . T4 The type of the fourth parameter of the function delegate match . T5 The type of the fifth parameter of the function delegate match . T6 The type of the sixth parameter of the function delegate match . T7 The type of the seventh parameter of the function delegate match . T8 The type of the eighth parameter of the function delegate match . T9 The type of the ninth parameter of the function delegate match . | Improve this Doc FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T>(IEnumerable<TSource> source, Func<TSource, T, bool> match, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T arg The first parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T The type of the first parameter of the function delegate match . | Improve this Doc FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2>(IEnumerable<TSource> source, Func<TSource, T1, T2, bool> match, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the function delegate match . T2 arg2 The second parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate match . T2 The type of the second parameter of the function delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, bool> match, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the function delegate match . T2 arg2 The second parameter of the function delegate match . T3 arg3 The third parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate match . T2 The type of the second parameter of the function delegate match . T3 The type of the third parameter of the function delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the function delegate match . T2 arg2 The second parameter of the function delegate match . T3 arg3 The third parameter of the function delegate match . T4 arg4 The fourth parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate match . T2 The type of the second parameter of the function delegate match . T3 The type of the third parameter of the function delegate match . T4 The type of the fourth parameter of the function delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the function delegate match . T2 arg2 The second parameter of the function delegate match . T3 arg3 The third parameter of the function delegate match . T4 arg4 The fourth parameter of the function delegate match . T5 arg5 The fifth parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate match . T2 The type of the second parameter of the function delegate match . T3 The type of the third parameter of the function delegate match . T4 The type of the fourth parameter of the function delegate match . T5 The type of the fifth parameter of the function delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, T6, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the function delegate match . T2 arg2 The second parameter of the function delegate match . T3 arg3 The third parameter of the function delegate match . T4 arg4 The fourth parameter of the function delegate match . T5 arg5 The fifth parameter of the function delegate match . T6 arg6 The sixth parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate match . T2 The type of the second parameter of the function delegate match . T3 The type of the third parameter of the function delegate match . T4 The type of the fourth parameter of the function delegate match . T5 The type of the fifth parameter of the function delegate match . T6 The type of the sixth parameter of the function delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the function delegate match . T2 arg2 The second parameter of the function delegate match . T3 arg3 The third parameter of the function delegate match . T4 arg4 The fourth parameter of the function delegate match . T5 arg5 The fifth parameter of the function delegate match . T6 arg6 The sixth parameter of the function delegate match . T7 arg7 The seventh parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate match . T2 The type of the second parameter of the function delegate match . T3 The type of the third parameter of the function delegate match . T4 The type of the fourth parameter of the function delegate match . T5 The type of the fifth parameter of the function delegate match . T6 The type of the sixth parameter of the function delegate match . T7 The type of the seventh parameter of the function delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the function delegate match . T2 arg2 The second parameter of the function delegate match . T3 arg3 The third parameter of the function delegate match . T4 arg4 The fourth parameter of the function delegate match . T5 arg5 The fifth parameter of the function delegate match . T6 arg6 The sixth parameter of the function delegate match . T7 arg7 The seventh parameter of the function delegate match . T8 arg8 The eighth parameter of the function delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate match . T2 The type of the second parameter of the function delegate match . T3 The type of the third parameter of the function delegate match . T4 The type of the fourth parameter of the function delegate match . T5 The type of the fifth parameter of the function delegate match . T6 The type of the sixth parameter of the function delegate match . T7 The type of the seventh parameter of the function delegate match . T8 The type of the eighth parameter of the function delegate match . | Improve this Doc RandomOrDefault<TSource>(IEnumerable<TSource>) Returns a random element of a sequence of elements, or a default value if no element is found. Declaration public static TSource RandomOrDefault<TSource>(IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> to return a random element of. Returns Type Description TSource default(TSource) if source is empty; otherwise, a random element of source . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) Returns a random element of a sequence of elements, or a default value if no element is found. Declaration public static TSource RandomOrDefault<TSource>(IEnumerable<TSource> source, Func<IEnumerable<TSource>, TSource> randomizer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> to return a random element of. System.Func < System.Collections.Generic.IEnumerable <TSource>, TSource> randomizer The function delegate that will select a random element of source . Returns Type Description TSource default(TSource) if source is empty; otherwise, a random element of source . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc RangeOf<T>(Int32, Func<Int32, T>) Generates a sequence of T within a specified range. Declaration public static IEnumerable<T> RangeOf<T>(int count, Func<int, T> resolver) Parameters Type Name Description System.Int32 count The number of objects of T to generate. System.Func < System.Int32 , T> resolver The function delegate that will resolve the value of T ; the parameter passed to the delegate represents the index of the element to return. Returns Type Description System.Collections.Generic.IEnumerable <T> An System.Collections.Generic.IEnumerable<T> that contains a range of T elements. Type Parameters Name Description T The type of the elements to return. Exceptions Type Condition System.ArgumentOutOfRangeException count is less than 0. | Improve this Doc SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource>(IEnumerable<TSource> source, Func<IEnumerable<TSource>, TSource> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, TSource> selector The function delegate that defines the condition of the element to retrieve. Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. | Improve this Doc SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T>(IEnumerable<TSource> source, Func<IEnumerable<TSource>, T, TSource> selector, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T, TSource> selector The function delegate that defines the condition of the element to retrieve. T arg The parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T The type of the parameter of the function delegate selector . | Improve this Doc SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T1, T2>(IEnumerable<TSource> source, Func<IEnumerable<TSource>, T1, T2, TSource> selector, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T1, T2, TSource> selector The function delegate that defines the condition of the element to retrieve. T1 arg1 The first parameter of the function delegate selector . T2 arg2 The second parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate selector . T2 The type of the second parameter of the function delegate selector . | Improve this Doc SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource> source, Func<IEnumerable<TSource>, T1, T2, T3, TSource> selector, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T1, T2, T3, TSource> selector The function delegate that defines the condition of the element to retrieve. T1 arg1 The first parameter of the function delegate selector . T2 arg2 The second parameter of the function delegate selector . T3 arg3 The third parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate selector . T2 The type of the second parameter of the function delegate selector . T3 The type of the third parameter of the function delegate selector . | Improve this Doc SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource> source, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource> selector, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T1, T2, T3, T4, TSource> selector The function delegate that defines the condition of the element to retrieve. T1 arg1 The first parameter of the function delegate selector . T2 arg2 The second parameter of the function delegate selector . T3 arg3 The third parameter of the function delegate selector . T4 arg4 The fourth parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate selector . T2 The type of the second parameter of the function delegate selector . T3 The type of the third parameter of the function delegate selector . T4 The type of the fourth parameter of the function delegate selector . | Improve this Doc SelectOne<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, T5, TSource>, T1, T2, T3, T4, T5) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource> source, Func<IEnumerable<TSource>, T1, T2, T3, T4, T5, TSource> selector, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T1, T2, T3, T4, T5, TSource> selector The function delegate that defines the condition of the element to retrieve. T1 arg1 The first parameter of the function delegate selector . T2 arg2 The second parameter of the function delegate selector . T3 arg3 The third parameter of the function delegate selector . T4 arg4 The fourth parameter of the function delegate selector . T5 arg5 The fifth parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate selector . T2 The type of the second parameter of the function delegate selector . T3 The type of the third parameter of the function delegate selector . T4 The type of the fourth parameter of the function delegate selector . T5 The type of the fifth parameter of the function delegate selector . | Improve this Doc SortAscending<TSource>(IEnumerable<TSource>) Returns ascending sorted elements from a sequence by using the default comparer to compare values. Declaration public static IEnumerable<TSource> SortAscending<TSource>(IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains ascending sorted elements from the source sequence. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc SortAscending<TSource>(IEnumerable<TSource>, IComparer<TSource>) Returns ascending sorted elements from a sequence by using a specified System.Collections.Generic.Comparer<T> to compare values. Declaration public static IEnumerable<TSource> SortAscending<TSource>(IEnumerable<TSource> source, IComparer<TSource> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order. System.Collections.Generic.IComparer <TSource> comparer An System.Collections.Generic.IComparer<T> to compare values. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains ascending sorted elements from the source sequence. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc SortAscending<TSource>(IEnumerable<TSource>, Comparison<TSource>) Returns ascending sorted elements from a sequence by using a specified System.Collections.Generic.Comparer<T> to compare values. Declaration public static IEnumerable<TSource> SortAscending<TSource>(IEnumerable<TSource> source, Comparison<TSource> comparison) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order. System.Comparison <TSource> comparison The System.Comparison<T> to use when comparing elements. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains ascending sorted elements from the source sequence. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc SortDescending<TSource>(IEnumerable<TSource>) Returns ascending sorted elements from a sequence by using the default comparer to compare values. Declaration public static IEnumerable<TSource> SortDescending<TSource>(IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains descending sorted elements from the source sequence. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc SortDescending<TSource>(IEnumerable<TSource>, IComparer<TSource>) Returns descending sorted elements from a sequence by using a specified System.Collections.Generic.Comparer<T> to compare values. Declaration public static IEnumerable<TSource> SortDescending<TSource>(IEnumerable<TSource> source, IComparer<TSource> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order. System.Collections.Generic.IComparer <TSource> comparer An System.Collections.Generic.IComparer<T> to compare values. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains descending sorted elements from the source sequence. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc SortDescending<TSource>(IEnumerable<TSource>, Comparison<TSource>) Returns descending sorted elements from a sequence by using a specified System.Collections.Generic.Comparer<T> to compare values. Declaration public static IEnumerable<TSource> SortDescending<TSource>(IEnumerable<TSource> source, Comparison<TSource> comparison) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order. System.Comparison <TSource> comparison The System.Comparison<T> to use when comparing elements. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains descending sorted elements from the source sequence. Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc Yield<TSource>(TSource) Returns an System.Collections.Generic.IEnumerable<T> sequence with the specified source as the only element. Declaration public static IEnumerable<TSource> Yield<TSource>(TSource source) Parameters Type Name Description TSource source The value to yield into an System.Collections.Generic.IEnumerable<T> sequence. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence with the specified source as the only element. Type Parameters Name Description TSource The type of source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.EnumerableSizeComparer-1.html": {
    "href": "api/core/Cuemon.Collections.Generic.EnumerableSizeComparer-1.html",
    "title": "Class EnumerableSizeComparer<T> | Cuemon .NET Standard",
    "keywords": "Class EnumerableSizeComparer<T> Provides System.Collections.Generic.IEnumerable<T> size comparison. Inheritance System.Object System.Collections.Generic.Comparer <T> EnumerableSizeComparer<T> Implements System.Collections.Generic.IComparer <T> System.Collections.IComparer Inherited Members System.Collections.Generic.Comparer<T>.Create(System.Comparison<T>) System.Collections.Generic.Comparer<T>.System.Collections.IComparer.Compare(System.Object, System.Object) Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public class EnumerableSizeComparer<T> : Comparer<T>, IComparer<T>, IComparer where T : IEnumerable Type Parameters Name Description T The System.Collections.Generic.IEnumerable<T> type to compare. Properties | Improve this Doc Default Returns a default comparer for the type specified by the generic argument. Declaration public static IComparer<T> Default { get; } Property Value Type Description System.Collections.Generic.IComparer <T> Methods | Improve this Doc Compare(T, T) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public override int Compare(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Int32 A signed integer that indicates the relative values of x and y, as explained here: Less than zero - x is less than y. Zero - x equals y. Greater than zero - x is greater than y. Overrides System.Collections.Generic.Comparer<T>.Compare(T, T) Implements System.Collections.Generic.IComparer<T> System.Collections.IComparer Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.CharConverter.html": {
    "href": "api/core/Cuemon.CharConverter.html",
    "title": "Class CharConverter | Cuemon .NET Standard",
    "keywords": "Class CharConverter This utility class is designed to make System.Char related conversions easier to work with. Inheritance System.Object CharConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class CharConverter Methods | Improve this Doc FromStream(Stream, Action<EncodingOptions>) Converts the given System.IO.Stream to a char array starting from position 0 (when supported). Declaration public static char[] FromStream(Stream value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.IO.Stream value The System.IO.Stream value to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.Char [] A sequence of characters equivalent to the System.IO.Stream value. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc FromString(String, Action<EncodingOptions>) Converts the given System.String to an equivalent sequence of characters. Declaration public static char[] FromString(string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The System.String value to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.Char [] A sequence of characters equivalent to the System.String value. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.CasingMethod.html": {
    "href": "api/core/Cuemon.CasingMethod.html",
    "title": "Enum CasingMethod | Cuemon .NET Standard",
    "keywords": "Enum CasingMethod Specifies ways that a string must be converted in terms of casing. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum CasingMethod Fields Name Description Default Indicates default behavior which is leaving the casing unaltered, hence allowing mixed casing. LowerCase Indicates that all characters will be converted to lowercase. TitleCase Indicates that characters will be converted to Title Case. UpperCase Indicates that all characters will be converted to UPPERCASE. Extension Methods ByteConverterExtensions.ToByteArray<CasingMethod>() ConverterExtensions.ParseWith<CasingMethod, TResult>(Func<CasingMethod, TResult>) ConverterExtensions.ParseWith<CasingMethod, T, TResult>(Func<CasingMethod, T, TResult>, T) ConverterExtensions.ParseWith<CasingMethod, T1, T2, TResult>(Func<CasingMethod, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<CasingMethod, T1, T2, T3, TResult>(Func<CasingMethod, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<CasingMethod, T1, T2, T3, T4, TResult>(Func<CasingMethod, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<CasingMethod, T1, T2, T3, T4, T5, TResult>(Func<CasingMethod, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<CasingMethod, T1, T2, T3, T4, T5, T6, TResult>(Func<CasingMethod, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<CasingMethod, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<CasingMethod, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<CasingMethod, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<CasingMethod, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<CasingMethod, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<CasingMethod, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<CasingMethod>() DelegateUtilityExtensions.DynamicWrap<CasingMethod>() TweakerExtensions.Adjust<CasingMethod>(Func<CasingMethod, CasingMethod>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<CasingMethod>() WrapperExtensions.UseWrapper<CasingMethod>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<CasingMethod>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<CasingMethod>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.XmlSerializationOutputFormatter.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.XmlSerializationOutputFormatter.html",
    "title": "Class XmlSerializationOutputFormatter | Cuemon .NET Standard",
    "keywords": "Class XmlSerializationOutputFormatter This class handles serialization of objects to XML using XmlFormatter . Inheritance System.Object Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter XmlSerializationOutputFormatter Implements Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider Inherited Members Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.SelectCharacterEncoding(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.SupportedEncodings Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.CanWriteType(System.Type) Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.GetSupportedContentTypes(System.String, System.Type) Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext) Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.WriteResponseHeaders(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.SupportedMediaTypes Namespace : Cuemon.AspNetCore.Mvc.Formatters.Xml Assembly : Cuemon.AspNetCore.Mvc.Formatters.Xml.dll Syntax public class XmlSerializationOutputFormatter : TextOutputFormatter, IOutputFormatter, IApiResponseTypeMetadataProvider Constructors | Improve this Doc XmlSerializationOutputFormatter(XmlFormatterOptions) Initializes a new instance of the XmlSerializationOutputFormatter class. Declaration public XmlSerializationOutputFormatter(XmlFormatterOptions formatterOptions) Parameters Type Name Description XmlFormatterOptions formatterOptions Methods | Improve this Doc WriteResponseBodyAsync(OutputFormatterWriteContext, Encoding) Write response body as an asynchronous operation. Declaration public override Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext context The formatter context associated with the call. System.Text.Encoding selectedEncoding The System.Text.Encoding that should be used to write the response. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task which can write the response body. Overrides Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.Text.Encoding) Implements Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.XmlSerializationMvcOptionsSetup.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.XmlSerializationMvcOptionsSetup.html",
    "title": "Class XmlSerializationMvcOptionsSetup | Cuemon .NET Standard",
    "keywords": "Class XmlSerializationMvcOptionsSetup A Microsoft.Extensions.Options.ConfigureOptions<TOptions> implementation which will add the XML serializer formatters to Microsoft.AspNetCore.Mvc.MvcOptions . Inheritance System.Object Microsoft.Extensions.Options.ConfigureOptions < Microsoft.AspNetCore.Mvc.MvcOptions > XmlSerializationMvcOptionsSetup Implements Microsoft.Extensions.Options.IConfigureOptions < Microsoft.AspNetCore.Mvc.MvcOptions > Inherited Members Microsoft.Extensions.Options.ConfigureOptions<Microsoft.AspNetCore.Mvc.MvcOptions>.Configure(Microsoft.AspNetCore.Mvc.MvcOptions) Microsoft.Extensions.Options.ConfigureOptions<Microsoft.AspNetCore.Mvc.MvcOptions>.Action Namespace : Cuemon.AspNetCore.Mvc.Formatters.Xml Assembly : Cuemon.AspNetCore.Mvc.Formatters.Xml.dll Syntax public class XmlSerializationMvcOptionsSetup : ConfigureOptions<MvcOptions>, IConfigureOptions<MvcOptions> Constructors | Improve this Doc XmlSerializationMvcOptionsSetup(IOptions<XmlFormatterOptions>) Creates a new XmlSerializationMvcOptionsSetup . Declaration public XmlSerializationMvcOptionsSetup(IOptions<XmlFormatterOptions> formatterOptions) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < XmlFormatterOptions > formatterOptions Implements Microsoft.Extensions.Options.IConfigureOptions<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.HttpRequestEvidence.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.HttpRequestEvidence.html",
    "title": "Class HttpRequestEvidence | Cuemon .NET Standard",
    "keywords": "Class HttpRequestEvidence Provides detailed information about a given Microsoft.AspNetCore.Http.HttpRequest . Inheritance System.Object HttpRequestEvidence Namespace : Cuemon.AspNetCore.Mvc.Filters.Diagnostics Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class HttpRequestEvidence Properties | Improve this Doc Body Gets the body of the request. Declaration public string Body { get; } Property Value Type Description System.String The body of the request. | Improve this Doc Cookies Gets the collection of cookies for the request. Declaration public IRequestCookieCollection Cookies { get; } Property Value Type Description Microsoft.AspNetCore.Http.IRequestCookieCollection The collection of cookies for the request. | Improve this Doc Form Gets the associated keys and values collection from the Microsoft.AspNetCore.Http.HttpRequest.Form . Declaration public IFormCollection Form { get; } Property Value Type Description Microsoft.AspNetCore.Http.IFormCollection The associated keys and values collection parsed from the Microsoft.AspNetCore.Http.HttpRequest.Form . | Improve this Doc Headers Gets the request headers. Declaration public IHeaderDictionary Headers { get; } Property Value Type Description Microsoft.AspNetCore.Http.IHeaderDictionary The headers of the request. | Improve this Doc Location Gets the request URL in a fully un-escaped form (except for the QueryString). Declaration public string Location { get; } Property Value Type Description System.String The request URL in a fully un-escaped form (except for the QueryString). | Improve this Doc Method Gets the request HTTP method. Declaration public string Method { get; } Property Value Type Description System.String The HTTP method. | Improve this Doc Query Gets the associated keys and values collection parsed from the Microsoft.AspNetCore.Http.HttpRequest.QueryString . Declaration public IQueryCollection Query { get; } Property Value Type Description Microsoft.AspNetCore.Http.IQueryCollection The associated keys and values collection parsed from the Microsoft.AspNetCore.Http.HttpRequest.QueryString . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Hierarchy-1.html": {
    "href": "api/core/Cuemon.Hierarchy-1.html",
    "title": "Class Hierarchy<T> | Cuemon .NET Standard",
    "keywords": "Class Hierarchy<T> Represents a way to expose a node of a hierarchical structure, including the node object of type T . Inheritance System.Object Wrapper <T> Hierarchy<T> Implements IHierarchy <T> IWrapper <T> IData Inherited Members Wrapper<T>.Instance Wrapper<T>.InstanceType Wrapper<T>.MemberReference Wrapper<T>.HasMemberReference Wrapper<T>.Data Wrapper<T>.InstanceAs<TResult>() Wrapper<T>.InstanceAs<TResult>(IFormatProvider) Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public sealed class Hierarchy<T> : Wrapper<T>, IHierarchy<T>, IWrapper<T>, IData Type Parameters Name Description T The type of the object represented in the hierarchical structure. Constructors | Improve this Doc Hierarchy() Initializes a new instance of the Hierarchy<T> class. Declaration public Hierarchy() Properties | Improve this Doc Depth Gets the current depth of the node in the hierarchical structure. Declaration public int Depth { get; } Property Value Type Description System.Int32 The current depth of the in the hierarchical structure. | Improve this Doc HasChildren Gets a value indicating whether this instance has any children. Declaration public bool HasChildren { get; } Property Value Type Description System.Boolean true if this instance has any children; otherwise, false . | Improve this Doc HasParent Gets a value indicating whether this instance has a parent. Declaration public bool HasParent { get; } Property Value Type Description System.Boolean true if this instance has a parent; otherwise, false . | Improve this Doc Index Gets the zero-based index of the current node that this hierarchical structure represents. Declaration public int Index { get; } Property Value Type Description System.Int32 The zero-based index of the current node that this hierarchical structure represents. | Improve this Doc Item[Int32] Gets the node at the specified index. Declaration public IHierarchy<T> this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description IHierarchy <T> The node at the specified index. Methods | Improve this Doc Add(T) Adds the specified instance to a node in the hierarchical structure representation. Declaration public IHierarchy<T> Add(T instance) Parameters Type Name Description T instance The instance to a node in the hierarchical structure represents. Returns Type Description IHierarchy <T> A reference to the newly added hierarchical node. | Improve this Doc Add(T, MemberInfo) Adds the specified instance to a node in the hierarchical structure representation. Declaration public IHierarchy<T> Add(T instance, MemberInfo member) Parameters Type Name Description T instance The instance to a node in the hierarchical structure represents. System.Reflection.MemberInfo member The member from where instance was referenced. Returns Type Description IHierarchy <T> A reference to the newly added hierarchical node. | Improve this Doc Add(T, Type) Adds the specified instance to a node in the hierarchical structure representation. Declaration public IHierarchy<T> Add(T instance, Type instanceType) Parameters Type Name Description T instance The instance to a node in the hierarchical structure represents. System.Type instanceType The type of instance . Returns Type Description IHierarchy <T> A reference to the newly added hierarchical node. Exceptions Type Condition System.ArgumentNullException instanceType is null. | Improve this Doc Add(T, Type, MemberInfo) Adds the specified instance to a node in the hierarchical structure representation. Declaration public IHierarchy<T> Add(T instance, Type instanceType, MemberInfo member) Parameters Type Name Description T instance The instance to a node in the hierarchical structure represents. System.Type instanceType The type of instance . System.Reflection.MemberInfo member The member from where instance was referenced. Returns Type Description IHierarchy <T> A reference to the newly added hierarchical node. Exceptions Type Condition System.ArgumentNullException instanceType is null. | Improve this Doc GetChildren() Gets an System.Collections.Generic.IEnumerable<T> sequence that represents all the child nodes of the current hierarchical node. Declaration public IEnumerable<IHierarchy<T>> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable < IHierarchy <T>> An System.Collections.Generic.IEnumerable<T> sequence that represents all the child nodes of the current hierarchical node. | Improve this Doc GetParent() Gets the parent node of the current node in the hierarchical structure. Declaration public IHierarchy<T> GetParent() Returns Type Description IHierarchy <T> The parent node of the current node in the hierarchical structure. | Improve this Doc GetPath() Gets the hierarchical path of the node in the hierarchical structure. Declaration public string GetPath() Returns Type Description System.String A System.String that identifies the hierarchical path relative to the current node. | Improve this Doc GetPath(Func<IHierarchy<T>, String>) Gets the hierarchical path of the node in the hierarchical structure. Declaration public string GetPath(Func<IHierarchy<T>, string> pathResolver) Parameters Type Name Description System.Func < IHierarchy <T>, System.String > pathResolver The function delegate path resolver. Returns Type Description System.String A System.String that identifies the hierarchical path relative to the current node. | Improve this Doc Replace(T) Allows for the instance on the current node to be replaced with a new instance . Declaration public void Replace(T instance) Parameters Type Name Description T instance The new instance to replace the original with. | Improve this Doc Replace(T, Type) Allows for the instance on the current node to be replaced with a new instance . Declaration public void Replace(T instance, Type instanceType) Parameters Type Name Description T instance The new instance to replace the original with. System.Type instanceType The type of the new instance. Implements IHierarchy<T> IWrapper<T> IData Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) HierarchyExtensions.FindFirstInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.FindSingleInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.FindInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.FindFirst<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.FindSingle<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.Find<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.Replace<T>(IHierarchy<T>, Action<IHierarchy<T>, T>) HierarchyExtensions.Root<T>(IHierarchy<T>) HierarchyExtensions.AncestorsAndSelf<T>(IHierarchy<T>) HierarchyExtensions.DescendantsAndSelf<T>(IHierarchy<T>) HierarchyExtensions.SiblingsAndSelf<T>(IHierarchy<T>) HierarchyExtensions.SiblingsAndSelfAt<T>(IHierarchy<T>, Int32) HierarchyExtensions.NodeAt<T>(IHierarchy<T>, Int32) HierarchyExtensions.FlattenAll<T>(IHierarchy<T>) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.TimeMeasureOptions.html": {
    "href": "api/core/Cuemon.Diagnostics.TimeMeasureOptions.html",
    "title": "Class TimeMeasureOptions | Cuemon .NET Standard",
    "keywords": "Class TimeMeasureOptions Specifies options that is related to TimeMeasureProfiler operations. Inheritance System.Object ProfilerOptions TimeMeasureOptions TimeMeasuringOptions Inherited Members ProfilerOptions.MethodDescriptor ProfilerOptions.RuntimeParameters Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public class TimeMeasureOptions : ProfilerOptions Constructors | Improve this Doc TimeMeasureOptions() Initializes a new instance of the TimeMeasureOptions class. Declaration public TimeMeasureOptions() Remarks The following table shows the initial property values for an instance of TimeMeasureOptions . Property Initial Value TimeMeasureCompletedThreshold System.TimeSpan.Zero Properties | Improve this Doc DefaultTimeMeasureCompletedThreshold Gets or sets the time measuring threshold before the CompletedCallback is invoked, Declaration public static TimeSpan DefaultTimeMeasureCompletedThreshold { get; set; } Property Value Type Description System.TimeSpan The default time measuring threshold before the CompletedCallback is invoked. | Improve this Doc TimeMeasureCompletedThreshold Gets or sets the time measuring threshold before the CompletedCallback is invoked. Declaration public TimeSpan TimeMeasureCompletedThreshold { get; set; } Property Value Type Description System.TimeSpan The time measuring threshold before the CompletedCallback is invoked. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also ProfilerOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.TimeMeasure.html": {
    "href": "api/core/Cuemon.Diagnostics.TimeMeasure.html",
    "title": "Class TimeMeasure | Cuemon .NET Standard",
    "keywords": "Class TimeMeasure Provides a flexible, generic and lambda friendly way to perform time measuring operations. Inheritance System.Object TimeMeasure Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public static class TimeMeasure Properties | Improve this Doc CompletedCallback Gets or sets the callback that is invoked when a time measuring operation is completed. Declaration public static Action<TimeMeasureProfiler> CompletedCallback { get; set; } Property Value Type Description System.Action < TimeMeasureProfiler > A System.Action<T> . The default value is null . Methods | Improve this Doc WithAction(Action, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction(Action action, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action action The delegate to time measure. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. | Improve this Doc WithAction<T>(Action<T>, T, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T>(Action<T> action, T arg, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T> action The delegate to time measure. T arg The parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T The type of the parameter of the action delegate. | Improve this Doc WithAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. T7 arg7 The seventh parameter of the action delegate. T8 arg8 The eighth parameter of the action delegate. T9 arg9 The ninth parameter of the action delegate . T10 arg10 The tenth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. T7 The type of the seventh parameter of the action delegate. T8 The type of the eighth parameter of the action delegate. T9 The type of the ninth parameter of the action delegate. T10 The type of the tenth parameter of the action delegate. | Improve this Doc WithAction<T1, T2>(Action<T1, T2>, T1, T2, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2>(Action<T1, T2> action, T1 arg1, T2 arg2, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. | Improve this Doc WithAction<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2, T3>(Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. | Improve this Doc WithAction<T1, T2, T3, T4>(Action<T1, T2, T3, T4>, T1, T2, T3, T4, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2, T3, T4>(Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. | Improve this Doc WithAction<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. | Improve this Doc WithAction<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. | Improve this Doc WithAction<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. T7 arg7 The seventh parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. T7 The type of the seventh parameter of the action delegate. | Improve this Doc WithAction<T1, T2, T3, T4, T5, T6, T7, T8>(Action<T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2, T3, T4, T5, T6, T7, T8>(Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. T7 arg7 The seventh parameter of the action delegate. T8 arg8 The eighth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. T7 The type of the seventh parameter of the action delegate. T8 The type of the eighth parameter of the action delegate. | Improve this Doc WithAction<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static TimeMeasureProfiler WithAction<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9> action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. T7 arg7 The seventh parameter of the action delegate. T8 arg8 The eighth parameter of the action delegate. T9 arg9 The ninth parameter of the action delegate . System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. T7 The type of the seventh parameter of the action delegate. T8 The type of the eighth parameter of the action delegate. T9 The type of the ninth parameter of the action delegate. | Improve this Doc WithActionAsync(Func<Task>, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync(Func<Task> action, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > action The delegate to time measure. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. | Improve this Doc WithActionAsync<T>(Func<T, Task>, T, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T>(Func<T, Task> action, T arg, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T, System.Threading.Tasks.Task > action The delegate to time measure. T arg The parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T The type of the parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. T7 arg7 The seventh parameter of the action delegate. T8 arg8 The eighth parameter of the action delegate. T9 arg9 The ninth parameter of the action delegate . T10 arg10 The tenth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. T7 The type of the seventh parameter of the action delegate. T8 The type of the eighth parameter of the action delegate. T9 The type of the ninth parameter of the action delegate. T10 The type of the tenth parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2>(Func<T1, T2, Task>, T1, T2, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2>(Func<T1, T2, Task> action, T1 arg1, T2 arg2, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2, T3>(Func<T1, T2, T3, Task>, T1, T2, T3, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2, T3>(Func<T1, T2, T3, Task> action, T1 arg1, T2 arg2, T3 arg3, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task>, T1, T2, T3, T4, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Task>, T1, T2, T3, T4, T5, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Task> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Task>, T1, T2, T3, T4, T5, T6, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Task> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Task>, T1, T2, T3, T4, T5, T6, T7, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Task> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. T7 arg7 The seventh parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. T7 The type of the seventh parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task>, T1, T2, T3, T4, T5, T6, T7, T8, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. T7 arg7 The seventh parameter of the action delegate. T8 arg8 The eighth parameter of the action delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. T7 The type of the seventh parameter of the action delegate. T8 The type of the eighth parameter of the action delegate. | Improve this Doc WithActionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Action<TimeMeasureOptions>) Profile and time measure the specified action delegate. Declaration public static Task<TimeMeasureProfiler> WithActionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Threading.Tasks.Task > action The delegate to time measure. T1 arg1 The first parameter of the action delegate. T2 arg2 The second parameter of the action delegate. T3 arg3 The third parameter of the action delegate. T4 arg4 The fourth parameter of the action delegate. T5 arg5 The fifth parameter of the action delegate. T6 arg6 The sixth parameter of the action delegate. T7 arg7 The seventh parameter of the action delegate. T8 arg8 The eighth parameter of the action delegate. T9 arg9 The ninth parameter of the action delegate . System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler > A TimeMeasureProfiler with the result of the time measuring. Type Parameters Name Description T1 The type of the first parameter of the action delegate. T2 The type of the second parameter of the action delegate. T3 The type of the third parameter of the action delegate. T4 The type of the fourth parameter of the action delegate. T5 The type of the fifth parameter of the action delegate. T6 The type of the sixth parameter of the action delegate. T7 The type of the seventh parameter of the action delegate. T8 The type of the eighth parameter of the action delegate. T9 The type of the ninth parameter of the action delegate. | Improve this Doc WithFunc<TResult>(Func<TResult>, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<TResult>(Func<TResult> function, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <TResult> function The function delegate to time measure. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. T7 arg7 The seventh parameter of the function delegate. T8 arg8 The eighth parameter of the function delegate. T9 arg9 The ninth parameter of the function delegate . System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. T7 The type of the seventh parameter of the function delegate. T8 The type of the eighth parameter of the function delegate. T9 The type of the ninth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. T7 arg7 The seventh parameter of the function delegate. T8 arg8 The eighth parameter of the function delegate. T9 arg9 The ninth parameter of the function delegate . T10 arg10 The tenth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. T7 The type of the seventh parameter of the function delegate. T8 The type of the eighth parameter of the function delegate. T9 The type of the ninth parameter of the function delegate. T10 The type of the tenth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T, TResult>(Func<T, TResult>, T, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T, TResult>(Func<T, TResult> function, T arg, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T, TResult> function The function delegate to time measure. T arg The parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T The type of the parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, TResult>(Func<T1, T2, TResult>, T1, T2, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, TResult>(Func<T1, T2, TResult> function, T1 arg1, T2 arg2, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, T1, T2, T3, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> function, T1 arg1, T2 arg2, T3 arg3, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. T7 arg7 The seventh parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. T7 The type of the seventh parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static TimeMeasureProfiler<TResult> WithFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. T7 arg7 The seventh parameter of the function delegate. T8 arg8 The eighth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description TimeMeasureProfiler <TResult> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. T7 The type of the seventh parameter of the function delegate. T8 The type of the eighth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<TResult>(Func<Task<TResult>>, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<TResult>(Func<Task<TResult>> function, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. T7 arg7 The seventh parameter of the function delegate. T8 arg8 The eighth parameter of the function delegate. T9 arg9 The ninth parameter of the function delegate . System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. T7 The type of the seventh parameter of the function delegate. T8 The type of the eighth parameter of the function delegate. T9 The type of the ninth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. T7 arg7 The seventh parameter of the function delegate. T8 arg8 The eighth parameter of the function delegate. T9 arg9 The ninth parameter of the function delegate . T10 arg10 The tenth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. T7 The type of the seventh parameter of the function delegate. T8 The type of the eighth parameter of the function delegate. T9 The type of the ninth parameter of the function delegate. T10 The type of the tenth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T, TResult>(Func<T, Task<TResult>>, T, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T, TResult>(Func<T, Task<TResult>> function, T arg, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T arg The parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T The type of the parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, TResult>(Func<T1, T2, Task<TResult>>, T1, T2, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, TResult>(Func<T1, T2, Task<TResult>> function, T1 arg1, T2 arg2, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult>>, T1, T2, T3, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult>> function, T1 arg1, T2 arg2, T3 arg3, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>>, T1, T2, T3, T4, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, Task<TResult>>, T1, T2, T3, T4, T5, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, Task<TResult>> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, Task<TResult>>, T1, T2, T3, T4, T5, T6, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, Task<TResult>> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. T7 arg7 The seventh parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. T7 The type of the seventh parameter of the function delegate. TResult The type of the return value of the function delegate. | Improve this Doc WithFuncAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, Action<TimeMeasureOptions>) Profile and time measure the specified function delegate. Declaration public static Task<TimeMeasureProfiler<TResult>> WithFuncAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> function, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Action<TimeMeasureOptions> setup = null) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Threading.Tasks.Task <TResult>> function The function delegate to time measure. T1 arg1 The first parameter of the function delegate. T2 arg2 The second parameter of the function delegate. T3 arg3 The third parameter of the function delegate. T4 arg4 The fourth parameter of the function delegate. T5 arg5 The fifth parameter of the function delegate. T6 arg6 The sixth parameter of the function delegate. T7 arg7 The seventh parameter of the function delegate. T8 arg8 The eighth parameter of the function delegate. System.Action < TimeMeasureOptions > setup The TimeMeasureOptions which need to be configured. Returns Type Description System.Threading.Tasks.Task < TimeMeasureProfiler <TResult>> A TimeMeasureProfiler<TResult> with the result of the time measuring and the encapsulated function delegate. Type Parameters Name Description T1 The type of the first parameter of the function delegate. T2 The type of the second parameter of the function delegate. T3 The type of the third parameter of the function delegate. T4 The type of the fourth parameter of the function delegate. T5 The type of the fifth parameter of the function delegate. T6 The type of the sixth parameter of the function delegate. T7 The type of the seventh parameter of the function delegate. T8 The type of the eighth parameter of the function delegate. TResult The type of the return value of the function delegate. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DateTimeConverter.html": {
    "href": "api/core/Cuemon.DateTimeConverter.html",
    "title": "Class DateTimeConverter | Cuemon .NET Standard",
    "keywords": "Class DateTimeConverter This utility class is designed to make System.DateTime related conversions easier to work with. Inheritance System.Object DateTimeConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DateTimeConverter Methods | Improve this Doc FromEpochTime(Double) Converts the specified Epoc time value to an equivalent System.DateTime representation. Declaration public static DateTime FromEpochTime(double value) Parameters Type Name Description System.Double value The System.Double value to be converted. Returns Type Description System.DateTime A System.DateTime value that is equivalent to value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.Formatters.XmlFormatter.html": {
    "href": "api/core/Cuemon.Serialization.Xml.Formatters.XmlFormatter.html",
    "title": "Class XmlFormatter | Cuemon .NET Standard",
    "keywords": "Class XmlFormatter Serializes and deserializes an object in XML format. Inheritance System.Object Formatter < System.IO.Stream > XmlFormatter Inherited Members Formatter<Stream>.Serialize(Object) Formatter<Stream>.Deserialize<T>(Stream) Namespace : Cuemon.Serialization.Xml.Formatters Assembly : Cuemon.Serialization.Xml.dll Syntax public class XmlFormatter : Formatter<Stream> Constructors | Improve this Doc XmlFormatter() Initializes a new instance of the XmlFormatter class. Declaration public XmlFormatter() | Improve this Doc XmlFormatter(XmlFormatterOptions) Initializes a new instance of the XmlFormatter class. Declaration public XmlFormatter(XmlFormatterOptions options) Parameters Type Name Description XmlFormatterOptions options The configured XmlFormatterOptions . | Improve this Doc XmlFormatter(Action<XmlFormatterOptions>) Initializes a new instance of the XmlFormatter class. Declaration public XmlFormatter(Action<XmlFormatterOptions> setup) Parameters Type Name Description System.Action < XmlFormatterOptions > setup The XmlFormatterOptions which need to be configured. Properties | Improve this Doc Options Gets the configured options of this XmlFormatter . Declaration protected XmlFormatterOptions Options { get; } Property Value Type Description XmlFormatterOptions The configured options of this XmlFormatter . Methods | Improve this Doc Deserialize(Stream, Type) Deserializes the specified value into an object of objectType . Declaration public override object Deserialize(Stream value, Type objectType) Parameters Type Name Description System.IO.Stream value The stream from which to deserialize the object graph. System.Type objectType The type of the deserialized object. Returns Type Description System.Object An object of objectType . Overrides Cuemon.Serialization.Formatters.Formatter<System.IO.Stream>.Deserialize(System.IO.Stream, System.Type) | Improve this Doc Serialize(Object, Type) Serializes the specified source to an object of System.IO.Stream . Declaration public override Stream Serialize(object source, Type objectType) Parameters Type Name Description System.Object source The object to serialize to XML format. System.Type objectType The type of the object to serialize. Returns Type Description System.IO.Stream A stream of the serialized source . Overrides Cuemon.Serialization.Formatters.Formatter<System.IO.Stream>.Serialize(System.Object, System.Type) Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also Formatter <TFormat> DefaultXmlConverter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.DynamicXmlSerializable.html": {
    "href": "api/core/Cuemon.Serialization.Xml.DynamicXmlSerializable.html",
    "title": "Class DynamicXmlSerializable | Cuemon .NET Standard",
    "keywords": "Class DynamicXmlSerializable Provides a factory based way to create and wrap an System.Xml.Serialization.IXmlSerializable implementation. Inheritance System.Object DynamicXmlSerializable Namespace : Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Syntax public static class DynamicXmlSerializable Methods | Improve this Doc Create<T>(T, Action<XmlWriter, T>, Action<XmlReader>, Func<XmlSchema>) Creates a dynamic instance of an System.Xml.Serialization.IXmlSerializable implementation wrapping System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter) through writer , System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader) through reader and System.Xml.Serialization.IXmlSerializable.GetSchema() through schema . Declaration public static IXmlSerializable Create<T>(T source, Action<XmlWriter, T> writer, Action<XmlReader> reader = null, Func<XmlSchema> schema = null) Parameters Type Name Description T source The object that needs support for an System.Xml.Serialization.IXmlSerializable implementation. System.Action < System.Xml.XmlWriter , T> writer The delegate that converts source to its XML representation. System.Action < System.Xml.XmlReader > reader The delegate that generates source from its XML representation. System.Func < XmlSchema > schema The function delegate that can provide a schema of the source . Returns Type Description System.Xml.Serialization.IXmlSerializable An System.Xml.Serialization.IXmlSerializable implementation of source . Type Parameters Name Description T The type of the source to implement an System.Xml.Serialization.IXmlSerializable . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.DynamicXmlConverter.html": {
    "href": "api/core/Cuemon.Serialization.Xml.DynamicXmlConverter.html",
    "title": "Class DynamicXmlConverter | Cuemon .NET Standard",
    "keywords": "Class DynamicXmlConverter Provides a factory based way to create and wrap an XmlConverter implementation. Inheritance System.Object DynamicXmlConverter Namespace : Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Syntax public static class DynamicXmlConverter Methods | Improve this Doc Create(Type, Action<XmlWriter, Object, XmlQualifiedEntity>, Func<XmlReader, Type, Object>, Func<Type, Boolean>) Creates a dynamic instance of an XmlConverter implementation wrapping WriteXml(XmlWriter, Object, XmlQualifiedEntity) through writer and ReadXml(XmlReader, Type) through reader . Declaration public static XmlConverter Create(Type objectType, Action<XmlWriter, object, XmlQualifiedEntity> writer = null, Func<XmlReader, Type, object> reader = null, Func<Type, bool> canConvertPredicate = null) Parameters Type Name Description System.Type objectType The type of the object to make convertible. System.Action < System.Xml.XmlWriter , System.Object , XmlQualifiedEntity > writer The delegate that converts an object to its XML representation. System.Func < System.Xml.XmlReader , System.Type , System.Object > reader The delegate that generates an object from its XML representation. System.Func < System.Type , System.Boolean > canConvertPredicate The predicate that determines if an XmlConverter can convert. Returns Type Description XmlConverter An XmlConverter implementation of an object. | Improve this Doc Create<T>(Action<XmlWriter, T, XmlQualifiedEntity>, Func<XmlReader, Type, T>, Func<Type, Boolean>) Creates a dynamic instance of an XmlConverter implementation wrapping WriteXml(XmlWriter, Object, XmlQualifiedEntity) through writer and ReadXml(XmlReader, Type) through reader . Declaration public static XmlConverter Create<T>(Action<XmlWriter, T, XmlQualifiedEntity> writer = null, Func<XmlReader, Type, T> reader = null, Func<Type, bool> canConvertPredicate = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T, XmlQualifiedEntity > writer The delegate that converts T to its XML representation. System.Func < System.Xml.XmlReader , System.Type , T> reader The delegate that generates T from its XML representation. System.Func < System.Type , System.Boolean > canConvertPredicate The predicate that determines if an XmlConverter can convert. Returns Type Description XmlConverter An XmlConverter implementation of T . Type Parameters Name Description T The type to implement an XmlConverter . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.Http.HttpRequestOptions.html": {
    "href": "api/core/Cuemon.Net.Http.HttpRequestOptions.html",
    "title": "Class HttpRequestOptions | Cuemon .NET Standard",
    "keywords": "Class HttpRequestOptions Specifies options that is related to HttpManager operations. Inheritance System.Object AsyncOptions HttpRequestOptions Inherited Members AsyncOptions.CancellationToken Namespace : Cuemon.Net.Http Assembly : Cuemon.Net.dll Syntax public class HttpRequestOptions : AsyncOptions Constructors | Improve this Doc HttpRequestOptions() Initializes a new instance of the HttpRequestOptions class. Declaration public HttpRequestOptions() Properties | Improve this Doc CompletionOption Gets the recommended completion option of a response. Declaration public HttpCompletionOption CompletionOption { get; } Property Value Type Description System.Net.Http.HttpCompletionOption The recommended completion option of a response. | Improve this Doc Request Gets the HTTP request message to send. Declaration public HttpRequestMessage Request { get; } Property Value Type Description System.Net.Http.HttpRequestMessage The HTTP request message to send. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.HashOptions.html": {
    "href": "api/core/Cuemon.Security.Cryptography.HashOptions.html",
    "title": "Class HashOptions | Cuemon .NET Standard",
    "keywords": "Class HashOptions Specifies options that is related to System.Security.Cryptography.HashAlgorithm operations. Inheritance System.Object HashOptions StreamHashOptions StringHashOptions Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public class HashOptions Constructors | Improve this Doc HashOptions() Initializes a new instance of the HashOptions class. Declaration public HashOptions() Remarks The following table shows the initial property values for an instance of HashOptions . Property Initial Value AlgorithmType MD5 Properties | Improve this Doc AlgorithmType Gets or sets the hash algorithm to use for the computation. Declaration public HashAlgorithmType AlgorithmType { get; set; } Property Value Type Description HashAlgorithmType The hash algorithm to use for the computation. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.HashAlgorithmType.html": {
    "href": "api/core/Cuemon.Security.Cryptography.HashAlgorithmType.html",
    "title": "Enum HashAlgorithmType | Cuemon .NET Standard",
    "keywords": "Enum HashAlgorithmType Specifies the algorithm used for generating hash values. Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public enum HashAlgorithmType Fields Name Description CRC32 The Cyclic Redundancy Check 32 (CRC32) algorithm (32 bits), reversed for broader compatibility (0xEDB88320). MD5 The Message Digest 5 (MD5) algorithm (128 bits). SHA1 The Secure Hashing Algorithm (SHA1) algorithm (160 bits). SHA256 The Secure Hashing Algorithm (SHA256) algorithm (256 bits). SHA384 The Secure Hashing Algorithm (SHA384) algorithm (384 bits). SHA512 The Secure Hashing Algorithm (SHA512) algorithm (512 bits). Extension Methods ByteConverterExtensions.ToByteArray<HashAlgorithmType>() ConverterExtensions.ParseWith<HashAlgorithmType, TResult>(Func<HashAlgorithmType, TResult>) ConverterExtensions.ParseWith<HashAlgorithmType, T, TResult>(Func<HashAlgorithmType, T, TResult>, T) ConverterExtensions.ParseWith<HashAlgorithmType, T1, T2, TResult>(Func<HashAlgorithmType, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<HashAlgorithmType, T1, T2, T3, TResult>(Func<HashAlgorithmType, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<HashAlgorithmType, T1, T2, T3, T4, TResult>(Func<HashAlgorithmType, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<HashAlgorithmType, T1, T2, T3, T4, T5, TResult>(Func<HashAlgorithmType, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<HashAlgorithmType, T1, T2, T3, T4, T5, T6, TResult>(Func<HashAlgorithmType, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<HashAlgorithmType, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<HashAlgorithmType, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<HashAlgorithmType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<HashAlgorithmType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<HashAlgorithmType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<HashAlgorithmType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<HashAlgorithmType>() DelegateUtilityExtensions.DynamicWrap<HashAlgorithmType>() TweakerExtensions.Adjust<HashAlgorithmType>(Func<HashAlgorithmType, HashAlgorithmType>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<HashAlgorithmType>() WrapperExtensions.UseWrapper<HashAlgorithmType>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<HashAlgorithmType>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<HashAlgorithmType>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.CyclicRedundancyCheck32.html": {
    "href": "api/core/Cuemon.Security.Cryptography.CyclicRedundancyCheck32.html",
    "title": "Class CyclicRedundancyCheck32 | Cuemon .NET Standard",
    "keywords": "Class CyclicRedundancyCheck32 Computes the CRC32 hash value for the input data using the implementation provided by the cyclic redundancy check class (CRC). This class cannot be inherited. Inheritance System.Object System.Security.Cryptography.HashAlgorithm CyclicRedundancyCheck CyclicRedundancyCheck32 Implements System.IDisposable Inherited Members CyclicRedundancyCheck.Initialize() CyclicRedundancyCheck.HashCoreResult CyclicRedundancyCheck.LookupTable CyclicRedundancyCheck.Representation CyclicRedundancyCheck.Polynomial System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[]) System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32) System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream) System.Security.Cryptography.HashAlgorithm.Dispose() System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean) Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public sealed class CyclicRedundancyCheck32 : CyclicRedundancyCheck, IDisposable Constructors | Improve this Doc CyclicRedundancyCheck32() Initializes a new instance of the CyclicRedundancyCheck32 class. Declaration public CyclicRedundancyCheck32() | Improve this Doc CyclicRedundancyCheck32(PolynomialRepresentation) Initializes a new instance of the CyclicRedundancyCheck class. Declaration public CyclicRedundancyCheck32(PolynomialRepresentation representation) Parameters Type Name Description PolynomialRepresentation representation The CRC generator polynomial representation. Properties | Improve this Doc DefaultSeed Gets the CRC default seed value. Declaration public override long DefaultSeed { get; } Property Value Type Description System.Int64 The CRC default seed value. Overrides CyclicRedundancyCheck.DefaultSeed | Improve this Doc HashSize Gets the size, in bits, of the computed hash code. Declaration public override int HashSize { get; } Property Value Type Description System.Int32 The size of the hash. Overrides System.Security.Cryptography.HashAlgorithm.HashSize Methods | Improve this Doc HashCore(Byte[], Int32, Int32) When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(byte[] array, int ibStart, int cbSize) Parameters Type Name Description System.Byte [] array The input to compute the hash code for. System.Int32 ibStart The offset into the byte array from which to begin using data. System.Int32 cbSize The number of bytes in the byte array to use as data. Overrides System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[], System.Int32, System.Int32) | Improve this Doc HashFinal() When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object. Declaration protected override byte[] HashFinal() Returns Type Description System.Byte [] The computed hash code. Overrides System.Security.Cryptography.HashAlgorithm.HashFinal() | Improve this Doc InitializePolynomial() Initializes the implementation of the polynomial representation details. Declaration protected override void InitializePolynomial() Overrides CyclicRedundancyCheck.InitializePolynomial() Exceptions Type Condition System.InvalidOperationException The Representation property has an invalid value. | Improve this Doc InitializePolynomialLookupTable(Byte, UInt16) Initializes the implementation details of a CyclicRedundancyCheck related polynomial lookup table. Declaration protected override void InitializePolynomialLookupTable(byte currentBit, ushort currentTableIndex) Parameters Type Name Description System.Byte currentBit The current bit ranging from 0 to 7. System.UInt16 currentTableIndex The current index of the associated polynomial LookupTable ranging from 0 to 255. Overrides CyclicRedundancyCheck.InitializePolynomialLookupTable(Byte, UInt16) Remarks This method is - on first run - invoked 8 times per entry in the associated polynomial LookupTable , given a total of 2048 times. Implements System.IDisposable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ObjectConverter.html": {
    "href": "api/core/Cuemon.ObjectConverter.html",
    "title": "Class ObjectConverter | Cuemon .NET Standard",
    "keywords": "Class ObjectConverter This utility class is designed to make System.Object related conversions easier to work with. Inheritance System.Object ObjectConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ObjectConverter Methods | Improve this Doc ChangeType(Object, Type) Returns an object of the specified type and whose value is equivalent to the specified object. Declaration public static object ChangeType(object value, Type conversionType) Parameters Type Name Description System.Object value The object to convert the underlying type. System.Type conversionType The System.Type of object to return. Returns Type Description System.Object An object whose type is conversionType and whose value is equivalent to value . Remarks What differs from the System.Convert.ChangeType(Object, Type) is, that this converter supports generics and enums somewhat automated. | Improve this Doc ChangeType(Object, Type, IFormatProvider) Returns an object of the specified type and whose value is equivalent to the specified object. Declaration public static object ChangeType(object value, Type conversionType, IFormatProvider provider) Parameters Type Name Description System.Object value The object to convert the underlying type. System.Type conversionType The System.Type of object to return. System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description System.Object An object whose type is conversionType and whose value is equivalent to value . Remarks What differs from the System.Convert.ChangeType(Object, Type) is, that this converter supports generics and enums. Failover uses System.ComponentModel.TypeDescriptor . | Improve this Doc FromString(String) Returns a primitive object whose value is equivalent to the specified value . Declaration public static object FromString(string value) Parameters Type Name Description System.String value The string to convert the underlying type. Returns Type Description System.Object An object whose type is primitive (either System.Boolean , System.Int64 or System.Double ) and whose value is equivalent to value . If conversion is unsuccessful, the original value is returned. | Improve this Doc FromString(String, IFormatProvider) Returns a primitive object whose value is equivalent to the specified value . Declaration public static object FromString(string value, IFormatProvider provider) Parameters Type Name Description System.String value The string to convert the underlying type. System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description System.Object An object whose type is primitive (either System.Boolean , System.Int64 or System.Double ) and whose value is equivalent to value . If conversion is unsuccessful, the original value is returned. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.JsonSerializationMvcOptionsSetup.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.JsonSerializationMvcOptionsSetup.html",
    "title": "Class JsonSerializationMvcOptionsSetup | Cuemon .NET Standard",
    "keywords": "Class JsonSerializationMvcOptionsSetup A Microsoft.Extensions.Options.ConfigureOptions<TOptions> implementation which will add the JSON serializer formatters to Microsoft.AspNetCore.Mvc.MvcOptions . Inheritance System.Object Microsoft.Extensions.Options.ConfigureOptions < Microsoft.AspNetCore.Mvc.MvcOptions > JsonSerializationMvcOptionsSetup Implements Microsoft.Extensions.Options.IConfigureOptions < Microsoft.AspNetCore.Mvc.MvcOptions > Inherited Members Microsoft.Extensions.Options.ConfigureOptions<Microsoft.AspNetCore.Mvc.MvcOptions>.Configure(Microsoft.AspNetCore.Mvc.MvcOptions) Microsoft.Extensions.Options.ConfigureOptions<Microsoft.AspNetCore.Mvc.MvcOptions>.Action Namespace : Cuemon.AspNetCore.Mvc.Formatters.Json Assembly : Cuemon.AspNetCore.Mvc.Formatters.Json.dll Syntax public class JsonSerializationMvcOptionsSetup : ConfigureOptions<MvcOptions>, IConfigureOptions<MvcOptions> Constructors | Improve this Doc JsonSerializationMvcOptionsSetup(IOptions<JsonFormatterOptions>) Creates a new JsonSerializationMvcOptionsSetup . Declaration public JsonSerializationMvcOptionsSetup(IOptions<JsonFormatterOptions> formatterOptions) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < JsonFormatterOptions > formatterOptions Implements Microsoft.Extensions.Options.IConfigureOptions<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ModelBinding.DisableModelBindingAttribute.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ModelBinding.DisableModelBindingAttribute.html",
    "title": "Class DisableModelBindingAttribute | Cuemon .NET Standard",
    "keywords": "Class DisableModelBindingAttribute Provides a generic way to disable Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory implementations used for model binding. Inheritance System.Object System.Attribute DisableModelBindingAttribute Implements Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId Namespace : Cuemon.AspNetCore.Mvc.Filters.ModelBinding Assembly : Cuemon.AspNetCore.Mvc.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)] public class DisableModelBindingAttribute : Attribute, IAsyncResourceFilter, IFilterMetadata Remarks This attribute was inspired by this source on GitHub: https://github.com/aspnet/Entropy/blob/rel/1.1.1/samples/Mvc.FileUpload/Filters/DisableFormValueModelBindingAttribute.cs . Constructors | Improve this Doc DisableModelBindingAttribute(Type) Initializes a new instance of the DisableModelBindingAttribute class. Declaration public DisableModelBindingAttribute(Type valueProviderFactoryType) Parameters Type Name Description System.Type valueProviderFactoryType The type that needs to be disabled on class or method level. Exceptions Type Condition System.ArgumentNullException valueProviderFactoryType cannot be null. System.NotSupportedException Only a type that implements the Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory interface is supported. Properties | Improve this Doc ValueProviderFactoryType Gets the type that needs to be disabled on class or method level. Declaration public Type ValueProviderFactoryType { get; } Property Value Type Description System.Type The type that needs to be disabled on class or method level. Methods | Improve this Doc OnResourceExecutionAsync(ResourceExecutingContext, ResourceExecutionDelegate) Called asynchronously before the rest of the pipeline. Declaration public Task OnResourceExecutionAsync(ResourceExecutingContext context, ResourceExecutionDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext . Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate next The Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate . Invoked to execute the next resource filter or the remainder of the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task which will complete when the remainder of the pipeline completes. Implements Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also System.Attribute (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.html",
    "title": "Namespace Cuemon.Serialization.Json | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Classes DynamicContractResolver Provides a factory based way to create and wrap an implementation. DynamicJsonConverter Provides a factory based way to create and wrap an implementation. JsonReaderExtensions Extension methods for the . JsonReaderParser Provides access to factory methods for creating JsonReaderParser<T> instances. JsonReaderParser<T> Provides a way to parse and extract values from a JSON document. JsonReaderResult Specifies a result set of a JSON reader operation. JsonReaderResultExtensions Extension methods for the JsonReaderResult . JsonSerializerSettingsExtensions Extension methods for the . JsonWriterExtensions Extension methods for the . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.JsonWriterExtensions.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.JsonWriterExtensions.html",
    "title": "Class JsonWriterExtensions | Cuemon .NET Standard",
    "keywords": "Class JsonWriterExtensions Extension methods for the . Inheritance System.Object JsonWriterExtensions Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public static class JsonWriterExtensions : object Methods | Improve this Doc WriteObject(JsonWriter, Object, JsonSerializerSettings) Serializes the specified value and writes the JSON structure using the specified writer . Declaration public static void WriteObject(this JsonWriter writer, object value, JsonSerializerSettings settings = null) Parameters Type Name Description JsonWriter writer The used to write the JSON structure. System.Object value The to serialize. JsonSerializerSettings settings The settings to associate with the specified writer . Default is . | Improve this Doc WritePropertyName(JsonWriter, String, Func<Boolean>, Boolean) Writes the property name of a name/value pair of a JSON object. Declaration public static void WritePropertyName(this JsonWriter writer, string name, Func<bool> useCamelCaseFactory, bool escape = false) Parameters Type Name Description JsonWriter writer The used to write the JSON structure. System.String name The name of the property. Func < System.Boolean > useCamelCaseFactory The function delegate that will resolve whether the name will be converted to a camelCase representation ( true ) or a PascalCase representation. System.Boolean escape A flag to indicate whether the text should be escaped when it is written as a JSON property name. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.JsonSerializerSettingsExtensions.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.JsonSerializerSettingsExtensions.html",
    "title": "Class JsonSerializerSettingsExtensions | Cuemon .NET Standard",
    "keywords": "Class JsonSerializerSettingsExtensions Extension methods for the . Inheritance System.Object JsonSerializerSettingsExtensions Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public static class JsonSerializerSettingsExtensions : object Methods | Improve this Doc ApplyToDefaultSettings(JsonSerializerSettings) Applies the specified settings to the function delegate . Declaration public static void ApplyToDefaultSettings(this JsonSerializerSettings settings) Parameters Type Name Description JsonSerializerSettings settings The JSON serializer settings. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.html": {
    "href": "api/core/Cuemon.Web.html",
    "title": "Namespace Cuemon.Web | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Web Assembly : Cuemon.Web.dll Classes FormConverter This utility class is designed to make HTTP request form-data specific System.Collections.Specialized.NameValueCollection related conversions easier to work with. FormUtility This utility class is designed to make HTTP request form-data operations easier to work with. HeadersConverter This utility class is designed to make HTTP request headers specific System.Collections.Specialized.NameValueCollection related conversions easier to work with. HeadersUtility This utility class is designed to make HTTP request headers operations easier to work with. HttpUtility This utility class is a light-weight implementation of the now deprecated HttpUtility class. Was made for backward compatibility in terms of UrlEncode(String, Encoding) and UrlDecode(String, Encoding) . HttpUtilityExtensions This is an extension implementation of the most common methods on the HttpUtility class. QueryStringConverter This utility class is designed to make HTTP request querystring specific System.Collections.Specialized.NameValueCollection related conversions easier to work with. QueryStringUtility This utility class is designed to make HTTP request querystring operations easier to work with. Enums FieldValueFilter Specifies the filter action to perform on either query strings, headers or form data. FieldValueSeparator Specifies a range of key-value seperators. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.Security.html": {
    "href": "api/core/Cuemon.Web.Security.html",
    "title": "Namespace Cuemon.Web.Security | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Web.Security Assembly : Cuemon.Web.dll Classes WebSecurityUtility This utility class is designed to make web related security operations easier to work with. WebSecurityUtilityExtensions This is an extension implementation of the most common methods on the WebSecurityUtility class. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.PartitionCollection-1.html": {
    "href": "api/core/Cuemon.Collections.Generic.PartitionCollection-1.html",
    "title": "Class PartitionCollection<T> | Cuemon .NET Standard",
    "keywords": "Class PartitionCollection<T> Represents an System.Collections.Generic.IEnumerable<T> partitioned data sequence. This class cannot be inherited. Inheritance System.Object PartitionCollection<T> Implements System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public sealed class PartitionCollection<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of the elements of this instance. Constructors | Improve this Doc PartitionCollection(IEnumerable<T>) Initializes a new instance of the PartitionCollection<T> class. Declaration public PartitionCollection(IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence. | Improve this Doc PartitionCollection(IEnumerable<T>, Int32) Initializes a new instance of the PartitionCollection<T> class. Declaration public PartitionCollection(IEnumerable<T> source, int partitionSize) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source of the sequence. System.Int32 partitionSize The number of elements a partition can hold. Properties | Improve this Doc Count Gets the total number of elements in the sequence before partitioning is applied. Declaration public int Count { get; } Property Value Type Description System.Int32 The total number of elements in the sequence before partitioning is applied. | Improve this Doc HasPartitions Gets a value indicating whether this instance has partitions remaining to be iterated. Declaration public bool HasPartitions { get; } Property Value Type Description System.Boolean true if this instance has partitions remaining to be iterated; otherwise, false . | Improve this Doc PartitionSize Gets the number of elements a partition can hold. Declaration public int PartitionSize { get; } Property Value Type Description System.Int32 The number of elements a partition can hold. | Improve this Doc Remaining Gets the number of elements remaining in the partitioned sequence. Declaration public int Remaining { get; } Property Value Type Description System.Int32 The number of elements remaining in the partitioned sequence. Methods | Improve this Doc GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. | Improve this Doc PartitionCount() Gets the total amount of partitions for the elements in this sequence. Declaration public int PartitionCount() Returns Type Description System.Int32 The total amount of partitions for the elements in this sequence. Explicit Interface Implementations | Improve this Doc IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.AuthenticationUtility.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.AuthenticationUtility.html",
    "title": "Class AuthenticationUtility | Cuemon .NET Standard",
    "keywords": "Class AuthenticationUtility Provides a set of generic ways to work with HTTP based authentication. Inheritance System.Object AuthenticationUtility Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public static class AuthenticationUtility Fields | Improve this Doc BasicAuthenticationCredentialSeparator The value of the header credential separator of a HTTP Basic access authentication. Declaration public const char BasicAuthenticationCredentialSeparator = ':' Field Value Type Description System.Char | Improve this Doc DigestAuthenticationCredentialSeparator The value of the header credential separator of a HTTP Digest access authentication. Declaration public const char DigestAuthenticationCredentialSeparator = ',' Field Value Type Description System.Char | Improve this Doc HttpNotAuthorizedStatus The value of the status description associated with HttpNotAuthorizedStatusCode . Declaration public const string HttpNotAuthorizedStatus = \"401 Unauthorized\" Field Value Type Description System.String | Improve this Doc HttpNotAuthorizedStatusCode Equivalent to HTTP status 401. Unauthorized indicates that the requested resource requires authentication. Declaration public const int HttpNotAuthorizedStatusCode = 401 Field Value Type Description System.Int32 | Improve this Doc JwtAuthenticationCredentialSeparator The value of the header credential separator of a HTTP JSON Web Token authentication. Declaration public const char JwtAuthenticationCredentialSeparator = '.' Field Value Type Description System.Char Methods | Improve this Doc Authenticate<T>(HttpContext, Boolean, Func<HttpContext, String, T>, TesterFunc<HttpContext, T, ClaimsPrincipal, Boolean>) Provides a generic way to make authentication requests using the specified context . Declaration public static void Authenticate<T>(HttpContext context, bool requireSecureConnection, Func<HttpContext, string, T> authorizationParser, TesterFunc<HttpContext, T, ClaimsPrincipal, bool> principalParser) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the ASP.NET application. System.Boolean requireSecureConnection When true , the HTTP connection is required to use secure sockets (that is, HTTPS); when false no requirement is enforced. System.Func < Microsoft.AspNetCore.Http.HttpContext , System.String , T> authorizationParser The function delegate that will parse the authorization header of a web request and return the credentials of T . TesterFunc < Microsoft.AspNetCore.Http.HttpContext , T, System.Security.Claims.ClaimsPrincipal , System.Boolean > principalParser The function delegate that will parse the credentials of T returned from authorizationParser and if successful returns a System.Security.Claims.ClaimsPrincipal object. Type Parameters Name Description T The type of the credentials returned from authorizationParser and passed to principalParser . Exceptions Type Condition System.Security.SecurityException Authorized failed for the request. | Improve this Doc TryAuthenticate<T>(HttpContext, Boolean, Func<HttpContext, String, T>, TesterFunc<HttpContext, T, ClaimsPrincipal, Boolean>) Provides a generic way to make authentication requests using the specified context . Declaration public static bool TryAuthenticate<T>(HttpContext context, bool requireSecureConnection, Func<HttpContext, string, T> authorizationParser, TesterFunc<HttpContext, T, ClaimsPrincipal, bool> principalParser) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the ASP.NET application. System.Boolean requireSecureConnection When true , the HTTP connection is required to use secure sockets (that is, HTTPS); when false no requirement is enforced. System.Func < Microsoft.AspNetCore.Http.HttpContext , System.String , T> authorizationParser The function delegate that will parse the authorization header of a web request and return the credentials of T . TesterFunc < Microsoft.AspNetCore.Http.HttpContext , T, System.Security.Claims.ClaimsPrincipal , System.Boolean > principalParser The function delegate that will parse the credentials of T returned from authorizationParser and if successful returns a System.Security.Claims.ClaimsPrincipal object. Returns Type Description System.Boolean true if the specified parameters triggers a successful authentication; otherwise, false . Type Parameters Name Description T The type of the credentials returned from authorizationParser and passed to principalParser . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.html": {
    "href": "api/core/Cuemon.Runtime.html",
    "title": "Namespace Cuemon.Runtime | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Runtime Assembly : Cuemon.Runtime.dll Classes Dependency An abstract class for establishing various methods of a dependency relationship to an object. The implementing class of the Dependency class must monitor the dependency relationships so that when any of them changes, action will automatically be taken. DependencyEventArgs Provides data for dependency related operations. Watcher An abstract class for establishing a watcher, that can monitor and signal changes of a resource by raising the Changed event. WatcherEventArgs Provides data for watcher related operations. Interfaces IDependency Defines a method to control dependency related operations. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.ResourceMatch.html": {
    "href": "api/core/Cuemon.Reflection.ResourceMatch.html",
    "title": "Enum ResourceMatch | Cuemon .NET Standard",
    "keywords": "Enum ResourceMatch Specifies the way of finding and returning an embedded resource. Namespace : Cuemon.Reflection Assembly : Cuemon.Core.dll Syntax public enum ResourceMatch Fields Name Description ContainsExtension Specifies a partial match on the file extension contained within the file name of the embedded resource. ContainsName Specifies a partial match on the file name of the embedded resource. Extension Specifies an exact match on the file extension contained within the file name of the embedded resource. Name Specifies an exact match on the file name of the embedded resource. Extension Methods ByteConverterExtensions.ToByteArray<ResourceMatch>() ConverterExtensions.ParseWith<ResourceMatch, TResult>(Func<ResourceMatch, TResult>) ConverterExtensions.ParseWith<ResourceMatch, T, TResult>(Func<ResourceMatch, T, TResult>, T) ConverterExtensions.ParseWith<ResourceMatch, T1, T2, TResult>(Func<ResourceMatch, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<ResourceMatch, T1, T2, T3, TResult>(Func<ResourceMatch, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<ResourceMatch, T1, T2, T3, T4, TResult>(Func<ResourceMatch, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<ResourceMatch, T1, T2, T3, T4, T5, TResult>(Func<ResourceMatch, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<ResourceMatch, T1, T2, T3, T4, T5, T6, TResult>(Func<ResourceMatch, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<ResourceMatch, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<ResourceMatch, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<ResourceMatch, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<ResourceMatch, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<ResourceMatch, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<ResourceMatch, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<ResourceMatch>() DelegateUtilityExtensions.DynamicWrap<ResourceMatch>() TweakerExtensions.Adjust<ResourceMatch>(Func<ResourceMatch, ResourceMatch>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<ResourceMatch>() WrapperExtensions.UseWrapper<ResourceMatch>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<ResourceMatch>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<ResourceMatch>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.ReflectionUtilityExtensions.html": {
    "href": "api/core/Cuemon.Reflection.ReflectionUtilityExtensions.html",
    "title": "Class ReflectionUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class ReflectionUtilityExtensions This is an extension implementation of the most common methods on the ReflectionUtility class. Inheritance System.Object ReflectionUtilityExtensions Namespace : Cuemon.Reflection Assembly : Cuemon.Reflection.dll Syntax public static class ReflectionUtilityExtensions Methods | Improve this Doc GetAssemblyTypes(Assembly) Gets the types contained within the specified assembly . Declaration public static IEnumerable<Type> GetAssemblyTypes(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The System.Reflection.Assembly to search the types from. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > A sequence of all System.Type elements from the specified assembly . | Improve this Doc GetAssemblyTypes(Assembly, String) Gets the types contained within the specified assembly . Declaration public static IEnumerable<Type> GetAssemblyTypes(this Assembly assembly, string namespaceFilter) Parameters Type Name Description System.Reflection.Assembly assembly The System.Reflection.Assembly to search the types from. System.String namespaceFilter The namespace filter to apply on the types in the assembly . Returns Type Description System.Collections.Generic.IEnumerable < System.Type > A sequence of System.Type elements, matching the applied filter, from the specified assembly . | Improve this Doc GetAssemblyTypes(Assembly, String, Type) Gets the types contained within the specified assembly . Declaration public static IEnumerable<Type> GetAssemblyTypes(this Assembly assembly, string namespaceFilter, Type typeFilter) Parameters Type Name Description System.Reflection.Assembly assembly The System.Reflection.Assembly to search the types from. System.String namespaceFilter The namespace filter to apply on the types in the assembly . System.Type typeFilter The type filter to apply on the types in the assembly . Returns Type Description System.Collections.Generic.IEnumerable < System.Type > A sequence of System.Type elements, matching the applied filters, from the specified assembly . | Improve this Doc GetEmbeddedResource(Type, String) Loads the embedded resource from the associated System.Reflection.Assembly of the specified System.Type . Declaration public static Stream GetEmbeddedResource(this Type source, string name) Parameters Type Name Description System.Type source The source type to load the resource from. System.String name The case-sensitive name of the resource being requested. Returns Type Description System.IO.Stream A System.IO.Stream representing the loaded resource; null if no resources were specified during compilation, or if the resource is not visible to the caller. | Improve this Doc GetEmbeddedResource(Type, String, ResourceMatch) Loads the embedded resource from the associated System.Reflection.Assembly of the specified System.Type . Declaration public static Stream GetEmbeddedResource(this Type source, string name, ResourceMatch match) Parameters Type Name Description System.Type source The source type to load the resource from. System.String name The case-sensitive name of the resource being requested. ResourceMatch match The match ruleset to apply. Returns Type Description System.IO.Stream A System.IO.Stream representing the loaded resource; null if no resources were specified during compilation, or if the resource is not visible to the caller. | Improve this Doc GetEmbeddedResources(Type, String, ResourceMatch) Loads the embedded resources from the associated System.Reflection.Assembly of the specified System.Type following the ResourceMatch ruleset of match . Declaration public static IEnumerable<Stream> GetEmbeddedResources(this Type source, string name, ResourceMatch match) Parameters Type Name Description System.Type source The source type to load the resource from. System.String name The name of the resource being requested. ResourceMatch match The match ruleset to apply. Returns Type Description System.Collections.Generic.IEnumerable < System.IO.Stream > A System.IO.Stream representing the loaded resources; null if no resources were specified during compilation, or if the resource is not visible to the caller. | Improve this Doc GetPropertyAttributes<TDecoration>(Type) Gets a sequence of the specified TDecoration attribute, narrowed to property attribute decorations. Declaration public static IDictionary<PropertyInfo, TDecoration[]> GetPropertyAttributes<TDecoration>(this Type source) where TDecoration : Attribute Parameters Type Name Description System.Type source The source type to locate TDecoration attributes in. Returns Type Description System.Collections.Generic.IDictionary < System.Reflection.PropertyInfo , TDecoration[]> An System.Collections.Generic.IEnumerable<T> of the specified TDecoration attributes. Type Parameters Name Description TDecoration The type of the attribute to locate in source . Remarks Searches the source using the following System.Reflection.BindingFlags combination: BindingInstancePublicAndPrivateNoneInheritedIncludeStatic . | Improve this Doc GetPropertyAttributes<TDecoration>(Type, BindingFlags) Gets a sequence of the specified TDecoration attribute, narrowed to property attribute decorations. Declaration public static IDictionary<PropertyInfo, TDecoration[]> GetPropertyAttributes<TDecoration>(this Type source, BindingFlags bindings) where TDecoration : Attribute Parameters Type Name Description System.Type source The source type to locate TDecoration attributes in. System.Reflection.BindingFlags bindings A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Collections.Generic.IDictionary < System.Reflection.PropertyInfo , TDecoration[]> An System.Collections.Generic.IEnumerable<T> of the specified TDecoration attributes. Type Parameters Name Description TDecoration The type of the attribute to locate in source . | Improve this Doc IsAutoProperty(PropertyInfo) Determines whether the specified property is considered an automatic property implementation. Declaration public static bool IsAutoProperty(this PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property The property to check for automatic property implementation. Returns Type Description System.Boolean true if the specified property is considered an automatic property implementation; otherwise, false . Exceptions Type Condition System.ArgumentNullException property is null. | Improve this Doc ParseMethodParameters(Type, String, Object[]) Parses and returns a collection of key/value pairs representing the specified methodName . Declaration public static IDictionary<string, object> ParseMethodParameters(this Type source, string methodName, params object[] methodParameters) Parameters Type Name Description System.Type source The source to locate the specified methodName in. System.String methodName The name of the method to parse on source . System.Object [] methodParameters A variable number of values passed to the methodName on this instance. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > A collection of key/value pairs representing the specified methodName . Remarks This method will parse the specified methodName for parameter names and tie them with methodParameters . Exceptions Type Condition System.ArgumentNullException This exception is thrown if methodName is null, if source is null or if methodParameters is null and method has resolved parameters. ArgumentEmptyException This exception is thrown if methodName is empty. System.ArgumentException This exception is thrown if either of the following is true: the size of methodParameters does not match the resolved parameters size of methodName , the type of methodParameters does not match the resolved parameters type of methodName . | Improve this Doc ParseMethodParameters(Type, String, Type[], Object[]) Parses and returns a collection of key/value pairs representing the specified methodName . Declaration public static IDictionary<string, object> ParseMethodParameters(this Type source, string methodName, Type[] methodSignature, params object[] methodParameters) Parameters Type Name Description System.Type source The source to locate the specified methodName in. System.String methodName The name of the method to parse on source . System.Type [] methodSignature An array of System.Type objects representing the number, order, and type of the parameters for the method to get. System.Object [] methodParameters A variable number of values passed to the methodName on this instance. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > A collection of key/value pairs representing the specified methodName . Remarks This method will parse the specified methodName for parameter names and tie them with methodParameters . Exceptions Type Condition System.ArgumentNullException This exception is thrown if methodName is null, if source is null or if methodParameters is null and method has resolved parameters. ArgumentEmptyException This exception is thrown if methodName is empty. System.ArgumentException This exception is thrown if either of the following is true: the size of methodParameters does not match the resolved parameters size of methodName , the type of methodParameters does not match the resolved parameters type of methodName . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.NetWatcher.html": {
    "href": "api/core/Cuemon.Net.NetWatcher.html",
    "title": "Class NetWatcher | Cuemon .NET Standard",
    "keywords": "Class NetWatcher A Watcher implementation, that can monitor and signal changes of one or more URI locations by raising the Changed event. Inheritance System.Object Watcher NetWatcher Implements System.IDisposable Inherited Members Watcher.Changed Watcher.UtcLastModified Watcher.UtcLastSignaled Watcher.DueTime Watcher.Period Watcher.DueTimeOnChanged Watcher.ChangeSignaling(TimeSpan) Watcher.ChangeSignaling(TimeSpan, TimeSpan) Watcher.SetUtcLastModified(DateTime) Watcher.OnChangedRaised() Watcher.OnChangedRaised(WatcherEventArgs) Watcher.Dispose(Boolean) Watcher.Dispose() Namespace : Cuemon.Net Assembly : Cuemon.Net.dll Syntax public sealed class NetWatcher : Watcher, IDisposable Constructors | Improve this Doc NetWatcher(Uri) Initializes a new instance of the NetWatcher class. Declaration public NetWatcher(Uri requestUri) Parameters Type Name Description System.Uri requestUri The request URI to monitor for changes. Remarks Monitors the provided requestUri for changes in an interval of two minutes, using the last modified timestamp of the ressource. | Improve this Doc NetWatcher(Uri, Boolean) Initializes a new instance of the NetWatcher class. Declaration public NetWatcher(Uri requestUri, bool checkResponseData) Parameters Type Name Description System.Uri requestUri The request URI to monitor for changes. System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. Remarks Monitors the provided requestUri for changes in an interval of two minutes, determined by checkResponseData . | Improve this Doc NetWatcher(Uri, TimeSpan) Initializes a new instance of the NetWatcher class. Declaration public NetWatcher(Uri requestUri, TimeSpan period) Parameters Type Name Description System.Uri requestUri The request URI to monitor for changes. System.TimeSpan period The time interval between periodic signaling for changes of provided requestUri . Remarks Monitors the provided requestUri for changes in an interval specified by period , using the last modified time stamp of the resource. | Improve this Doc NetWatcher(Uri, TimeSpan, Boolean) Initializes a new instance of the NetWatcher class. Declaration public NetWatcher(Uri requestUri, TimeSpan period, bool checkResponseData) Parameters Type Name Description System.Uri requestUri The request URI to monitor for changes. System.TimeSpan period The time interval between periodic signaling for changes of provided requestUri . System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. Remarks Monitors the provided requestUri for changes in an interval specified by period , determined by checkResponseData . The signaling is default delayed 15 seconds before first invoke. | Improve this Doc NetWatcher(Uri, TimeSpan, TimeSpan, Boolean) Initializes a new instance of the NetWatcher class. Declaration public NetWatcher(Uri requestUri, TimeSpan dueTime, TimeSpan period, bool checkResponseData) Parameters Type Name Description System.Uri requestUri The request URI to monitor for changes. System.TimeSpan dueTime The amount of time to delay before the associated Watcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling for changes of provided requestUri . System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. Remarks Monitors the provided requestUri for changes in an interval specified by period , determined by checkResponseData . Properties | Improve this Doc CheckResponseData Gets a value indicating whether to perform a MD5 hash-check of the response data from the RequestUri . Declaration public bool CheckResponseData { get; } Property Value Type Description System.Boolean true to perform a MD5 hash-check of the response data from the RequestUri ; otherwise, false . | Improve this Doc RequestUri Gets the associated request URI of this NetWatcher . Declaration public Uri RequestUri { get; } Property Value Type Description System.Uri The associated request URI of this NetWatcher . | Improve this Doc Scheme Gets the UriScheme of this NetWatcher . Declaration public UriScheme Scheme { get; } Property Value Type Description UriScheme An UriScheme of this NetWatcher . Methods | Improve this Doc HandleSignaling() Handles the signaling of this NetWatcher . Declaration protected override void HandleSignaling() Overrides Watcher.HandleSignaling() Implements System.IDisposable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.NetDependency.html": {
    "href": "api/core/Cuemon.Net.NetDependency.html",
    "title": "Class NetDependency | Cuemon .NET Standard",
    "keywords": "Class NetDependency This NetDependency class will monitor any changes occurred to a Uniform Resource Identifier while notifying subscribing objects. Inheritance System.Object Dependency NetDependency Implements IDependency Inherited Members Dependency.DependencyChanged Dependency.UtcLastModified Dependency.Create<TResult>() Dependency.Create<T, TResult>(T) Dependency.Create<T1, T2, TResult>(T1, T2) Dependency.Create<T1, T2, T3, TResult>(T1, T2, T3) Dependency.Create<T1, T2, T3, T4, TResult>(T1, T2, T3, T4) Dependency.Create<T1, T2, T3, T4, T5, TResult>(T1, T2, T3, T4, T5) Dependency.SetUtcLastModified(DateTime) Dependency.OnDependencyChangedRaised(DependencyEventArgs) Namespace : Cuemon.Net Assembly : Cuemon.Net.dll Syntax public sealed class NetDependency : Dependency, IDependency Constructors | Improve this Doc NetDependency(Boolean, String[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(bool checkResponseData, params string[] values) Parameters Type Name Description System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.String [] values An array of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. The checkResponseData is useful, when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(Boolean, TimeSpan, String[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(bool checkResponseData, TimeSpan period, params string[] values) Parameters Type Name Description System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.String [] values An array of URI string locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The checkResponseData is useful when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(Boolean, TimeSpan, TimeSpan, String[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(bool checkResponseData, TimeSpan dueTime, TimeSpan period, params string[] values) Parameters Type Name Description System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.TimeSpan dueTime The amount of time to delay before the associated NetWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.String [] values An array of URI string locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The checkResponseData is useful when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(Boolean, TimeSpan, TimeSpan, Uri[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(bool checkResponseData, TimeSpan dueTime, TimeSpan period, params Uri[] values) Parameters Type Name Description System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.TimeSpan dueTime The amount of time to delay before the associated NetWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.Uri [] values An array of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The checkResponseData is useful when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(Boolean, TimeSpan, Uri[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(bool checkResponseData, TimeSpan period, params Uri[] values) Parameters Type Name Description System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.Uri [] values An array of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The checkResponseData is useful when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(Boolean, Uri[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(bool checkResponseData, params Uri[] values) Parameters Type Name Description System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.Uri [] values An array of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. The checkResponseData is useful, when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(IEnumerable<String>) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<string> values) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values An System.Collections.Generic.IEnumerable<T> of URI string locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. | Improve this Doc NetDependency(IEnumerable<String>, Boolean) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<string> values, bool checkResponseData) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values An System.Collections.Generic.IEnumerable<T> of URI string locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. The checkResponseData is useful, when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(IEnumerable<String>, Boolean, TimeSpan) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<string> values, bool checkResponseData, TimeSpan period) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. Remarks The checkResponseData is useful when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(IEnumerable<String>, Boolean, TimeSpan, TimeSpan) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<string> values, bool checkResponseData, TimeSpan dueTime, TimeSpan period) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.TimeSpan dueTime The amount of time to delay before the associated NetWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. Remarks The checkResponseData is useful when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(IEnumerable<String>, TimeSpan) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<string> values, TimeSpan period) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. | Improve this Doc NetDependency(IEnumerable<String>, TimeSpan, TimeSpan) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<string> values, TimeSpan dueTime, TimeSpan period) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.TimeSpan dueTime The amount of time to delay before the associated NetWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. | Improve this Doc NetDependency(IEnumerable<Uri>) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<Uri> values) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Uri > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. | Improve this Doc NetDependency(IEnumerable<Uri>, Boolean) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<Uri> values, bool checkResponseData) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Uri > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. The checkResponseData is useful, when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(IEnumerable<Uri>, Boolean, TimeSpan) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<Uri> values, bool checkResponseData, TimeSpan period) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Uri > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. Remarks The signaling is default delayed 15 seconds before first invoke. The checkResponseData is useful when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(IEnumerable<Uri>, Boolean, TimeSpan, TimeSpan) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<Uri> values, bool checkResponseData, TimeSpan dueTime, TimeSpan period) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Uri > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.Boolean checkResponseData if set to true , a MD5 hash check of the response data is used to determine a change state of the resource; false to check only for the last modification of the resource. System.TimeSpan dueTime The amount of time to delay before the associated NetWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. Remarks The checkResponseData is useful when the web server you are probing does not contain the Last-Modified header. | Improve this Doc NetDependency(IEnumerable<Uri>, TimeSpan) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<Uri> values, TimeSpan period) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Uri > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. Remarks The signaling is default delayed 15 seconds before first invoke. | Improve this Doc NetDependency(IEnumerable<Uri>, TimeSpan, TimeSpan) Initializes a new instance of the NetDependency class. Declaration public NetDependency(IEnumerable<Uri> values, TimeSpan dueTime, TimeSpan period) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Uri > values An System.Collections.Generic.IEnumerable<T> of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. System.TimeSpan dueTime The amount of time to delay before the associated NetWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. | Improve this Doc NetDependency(String) Initializes a new instance of the NetDependency class. Declaration public NetDependency(string value) Parameters Type Name Description System.String value The URI string to monitor for changes. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. | Improve this Doc NetDependency(String[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(params string[] values) Parameters Type Name Description System.String [] values An array of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. | Improve this Doc NetDependency(TimeSpan, String[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(TimeSpan period, params string[] values) Parameters Type Name Description System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.String [] values An array of URI string locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. | Improve this Doc NetDependency(TimeSpan, TimeSpan, String[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(TimeSpan dueTime, TimeSpan period, params string[] values) Parameters Type Name Description System.TimeSpan dueTime The amount of time to delay before the associated NetWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.String [] values An array of URI string locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. | Improve this Doc NetDependency(TimeSpan, TimeSpan, Uri[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(TimeSpan dueTime, TimeSpan period, params Uri[] values) Parameters Type Name Description System.TimeSpan dueTime The amount of time to delay before the associated NetWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.Uri [] values An array of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. | Improve this Doc NetDependency(TimeSpan, Uri[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(TimeSpan period, params Uri[] values) Parameters Type Name Description System.TimeSpan period The time interval between periodic signaling to the specified values by the associated NetWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.Uri [] values An array of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. | Improve this Doc NetDependency(Uri) Initializes a new instance of the NetDependency class. Declaration public NetDependency(Uri value) Parameters Type Name Description System.Uri value The URI to monitor for changes. Remarks The signaling is default delayed 15 seconds before first invoke. | Improve this Doc NetDependency(Uri[]) Initializes a new instance of the NetDependency class. Declaration public NetDependency(params Uri[] values) Parameters Type Name Description System.Uri [] values An array of URI locations that this NetDependency will monitor. When any of these resources changes, this NetDependency will notify any subscribing objects of the change. Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. Properties | Improve this Doc HasChanged Gets a value indicating whether the Dependency object has changed. Declaration public override bool HasChanged { get; } Property Value Type Description System.Boolean true if the Dependency object has changed; otherwise, false . Overrides Dependency.HasChanged Methods | Improve this Doc Start() Starts and performs the necessary dependency tasks of this instance. Declaration public override void Start() Overrides Dependency.Start() Exceptions Type Condition System.ArgumentException The provided Uri does not have a valid scheme attached. Allowed schemes for now is File, FTP or HTTP.;uris Implements IDependency Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.LatencyException.html": {
    "href": "api/core/Cuemon.LatencyException.html",
    "title": "Class LatencyException | Cuemon .NET Standard",
    "keywords": "Class LatencyException The exception that is thrown when a latency related operation was taking to long to complete. Inheritance System.Object System.Exception LatencyException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class LatencyException : Exception Constructors | Improve this Doc LatencyException() Initializes a new instance of the LatencyException class. Declaration public LatencyException() | Improve this Doc LatencyException(String) Initializes a new instance of the LatencyException class. Declaration public LatencyException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc LatencyException(String, Exception) Initializes a new instance of the LatencyException class. Declaration public LatencyException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) ExceptionUtilityExtensions.Refine(Exception, MethodBase, Object[]) ExceptionUtilityExtensions.Refine(Exception, MethodDescriptor, Object[]) ExceptionUtilityExtensions.ParseException<TResult>(Exception) ExceptionUtilityExtensions.Flatten(Exception) ExceptionUtilityExtensions.Flatten(Exception, Type) StringConverterExtensions.ToEncodedString(Exception, Boolean) StringConverterExtensions.ToEncodedString(Exception, Boolean, Encoding) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IWrapper-1.html": {
    "href": "api/core/Cuemon.IWrapper-1.html",
    "title": "Interface IWrapper<T> | Cuemon .NET Standard",
    "keywords": "Interface IWrapper<T> Provides a generic way to wrap an object instance of T inside another object. Inherited Members IData.Data Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public interface IWrapper<out T> : IData Type Parameters Name Description T The type of the object instance to wrap inside another object. Properties | Improve this Doc HasMemberReference Gets a value indicating whether this instance has a member reference. Declaration bool HasMemberReference { get; } Property Value Type Description System.Boolean true if this instance has a member reference; otherwise, false . | Improve this Doc Instance Gets the instance of the IWrapper<T> object. Declaration T Instance { get; } Property Value Type Description T The instance of the IWrapper<T> object. | Improve this Doc InstanceType Gets the type of the Instance . Declaration Type InstanceType { get; } Property Value Type Description System.Type The type of the Instance . | Improve this Doc MemberReference Gets the member from where Instance was referenced. Declaration MemberInfo MemberReference { get; set; } Property Value Type Description System.Reflection.MemberInfo The member from where Instance was referenced. Methods | Improve this Doc InstanceAs<TResult>() Returns a value that is equivalent to the instance of the node that this hierarchical structure represents. Declaration TResult InstanceAs<TResult>() Returns Type Description TResult A value that is equivalent to the instance of the node that this hierarchical structure represents. Type Parameters Name Description TResult The type of the return value. | Improve this Doc InstanceAs<TResult>(IFormatProvider) Returns a value that is equivalent to the instance of the node that this hierarchical structure represents. Declaration TResult InstanceAs<TResult>(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description TResult A value that is equivalent to the instance of the node that this hierarchical structure represents. Type Parameters Name Description TResult The type of the return value. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.CacheValidatorOptions.html": {
    "href": "api/core/Cuemon.Integrity.CacheValidatorOptions.html",
    "title": "Class CacheValidatorOptions | Cuemon .NET Standard",
    "keywords": "Class CacheValidatorOptions Specifies options that is related to CacheValidator operations. Inheritance System.Object CacheValidatorOptions Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public class CacheValidatorOptions Constructors | Improve this Doc CacheValidatorOptions() Initializes a new instance of the CacheValidatorOptions class. Declaration public CacheValidatorOptions() Remarks The following table shows the initial property values for an instance of CacheValidatorOptions . Property Initial Value AlgorithmType MD5 Method Default Properties | Improve this Doc AlgorithmType Gets or sets the hash algorithm to use for the checksum computation. Declaration public HashAlgorithmType AlgorithmType { get; set; } Property Value Type Description HashAlgorithmType The hash algorithm to use for the checksum computation. | Improve this Doc Method Gets an enumeration value of ChecksumMethod indicating how a checksum is generated. Declaration public ChecksumMethod Method { get; set; } Property Value Type Description ChecksumMethod One of the enumeration values of ChecksumMethod that indicates how a checksum is generated. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StringConverter.html": {
    "href": "api/core/Cuemon.StringConverter.html",
    "title": "Class StringConverter | Cuemon .NET Standard",
    "keywords": "Class StringConverter This utility class is designed to make System.String related conversions easier to work with. Inheritance System.Object StringConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class StringConverter Methods | Improve this Doc FromBytes(Byte[], Action<EncodingOptions>) Converts the specified value to a string using the provided preferred encoding. Declaration public static string FromBytes(byte[] value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.Byte [] value The byte array to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A System.String containing the results of decoding the specified sequence of bytes. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc FromChars(IEnumerable<Char>) Converts the specified value to its equivalent System.String representation. Declaration public static string FromChars(IEnumerable<char> value) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Char > value The System.Char sequence to convert. Returns Type Description System.String A System.String equivalent to the specified value . | Improve this Doc FromException(Exception) Renders the exception to a human readable System.String . Declaration public static string FromException(Exception exception) Parameters Type Name Description System.Exception exception The System.Exception to render human readable. Returns Type Description System.String A human readable System.String variant of the specified exception . Remarks The rendered exception defaults to using an instance of System.Text.Encoding.Unicode unless specified otherwise. | Improve this Doc FromException(Exception, Encoding) Renders the exception to a human readable System.String . Declaration public static string FromException(Exception exception, Encoding encoding) Parameters Type Name Description System.Exception exception The System.Exception to render human readable. System.Text.Encoding encoding The encoding to use when rendering the exception . Returns Type Description System.String A human readable System.String variant of the specified exception . | Improve this Doc FromException(Exception, Encoding, Boolean) Renders the exception to a human readable System.String . Declaration public static string FromException(Exception exception, Encoding encoding, bool includeStackTrace) Parameters Type Name Description System.Exception exception The System.Exception to render human readable. System.Text.Encoding encoding The encoding to use when rendering the exception . System.Boolean includeStackTrace if set to true the stack trace of the exception is included in the rendered result. Returns Type Description System.String A human readable System.String variant of the specified exception . | Improve this Doc FromHexadecimal(String, Action<EncodingOptions>) Converts the specified hexadecimal hexadecimalValue to its equivalent System.String representation. Declaration public static string FromHexadecimal(string hexadecimalValue, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String hexadecimalValue The hexadecimal string to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A System.String representation of the hexadecimal characters in hexadecimalValue . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . Exceptions Type Condition System.ArgumentNullException hexadecimalValue is null. | Improve this Doc FromObject(Object) Returns a System.String that represents the specified instance . Declaration public static string FromObject(object instance) Parameters Type Name Description System.Object instance The instance to represent. Returns Type Description System.String A System.String that represents the specified instance . Remarks When determining the representation of the specified instance , these rules applies: 1: if the System.Object.ToString() method has been overridden, any further processing is skipped 2: any public properties having index parameters is skipped 3: any public properties is appended to the result if System.Object.ToString() has not been overridden. Note: do not call this method from an overridden ToString(..) method as a stackoverflow exception will occur. | Improve this Doc FromObject(Object, Boolean) Returns a System.String that represents the specified instance . Declaration public static string FromObject(object instance, bool bypassOverrideCheck) Parameters Type Name Description System.Object instance The instance to represent. System.Boolean bypassOverrideCheck Specify true to bypass the check for if a ToString() method is overridden; otherwise, false to use default behavior, where an overridden method will return without further processing. Returns Type Description System.String A System.String that represents the specified instance . Remarks When determining the representation of the specified instance , these rules applies: 1: if the System.Object.ToString() method has been overridden, any further processing is skipped 2: any public properties having index parameters is skipped 3: any public properties is appended to the result if System.Object.ToString() has not been overridden. Note: do not call this method from an overridden ToString(..) method without setting bypassOverrideCheck to true ; otherwise a stackoverflow exception will occur. | Improve this Doc FromObject(Object, Boolean, IFormatProvider) Returns a System.String that represents the specified instance . Declaration public static string FromObject(object instance, bool bypassOverrideCheck, IFormatProvider provider) Parameters Type Name Description System.Object instance The instance to represent. System.Boolean bypassOverrideCheck Specify true to bypass the check for if a ToString() method is overriden; otherwise, false to use default behaviour, where an overriden method will return without further processing. System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description System.String A System.String that represents the specified instance . Remarks When determining the representation of the specified instance , these rules applies: 1: if the System.Object.ToString() method has been overridden, any further processing is skipped 2: any public properties having index parameters is skipped 3: any public properties is appended to the result if System.Object.ToString() has not been overridden. Note: do not call this method from an overridden ToString(..) method without setting bypassOverrideCheck to true ; otherwise a stackoverflow exception will occur. | Improve this Doc FromObject(Object, Boolean, IFormatProvider, String) Returns a System.String that represents the specified instance . Declaration public static string FromObject(object instance, bool bypassOverrideCheck, IFormatProvider provider, string delimiter) Parameters Type Name Description System.Object instance The instance to represent. System.Boolean bypassOverrideCheck Specify true to bypass the check for if a ToString() method is overriden; otherwise, false to use default behaviour, where an overriden method will return without further processing. System.IFormatProvider provider An object that supplies culture-specific formatting information. System.String delimiter The delimiter specification for when representing public properties of instance . Returns Type Description System.String A System.String that represents the specified instance . Remarks When determining the representation of the specified instance , these rules applies: 1: if the System.Object.ToString() method has been overridden, any further processing is skipped 2: any public properties having index parameters is skipped 3: any public properties is appended to the result if System.Object.ToString() has not been overridden. Note: do not call this method from an overridden ToString(..) method without setting bypassOverrideCheck to true ; otherwise a stackoverflow exception will occur. | Improve this Doc FromObject(Object, Boolean, IFormatProvider, String, Func<PropertyInfo, Object, IFormatProvider, String>) Returns a System.String that represents the specified instance . Declaration public static string FromObject(object instance, bool bypassOverrideCheck, IFormatProvider provider, string delimiter, Func<PropertyInfo, object, IFormatProvider, string> propertyConverter) Parameters Type Name Description System.Object instance The instance to represent. System.Boolean bypassOverrideCheck Specify true to bypass the check for if a ToString() method is overriden; otherwise, false to use default behaviour, where an overriden method will return without further processing. System.IFormatProvider provider An object that supplies culture-specific formatting information. System.String delimiter The delimiter specification for when representing public properties of instance . System.Func < System.Reflection.PropertyInfo , System.Object , System.IFormatProvider , System.String > propertyConverter The function delegate that convert System.Reflection.PropertyInfo objects to human-readable content. Returns Type Description System.String A System.String that represents the specified instance . Remarks When determining the representation of the specified instance , these rules applies: 1: if the System.Object.ToString() method has been overridden, any further processing is skipped 2: any public properties having index parameters is skipped 3: any public properties is appended to the result if System.Object.ToString() has not been overridden. Note: do not call this method from an overridden ToString(..) method without setting bypassOverrideCheck to true ; otherwise a stackoverflow exception will occur. | Improve this Doc FromObject(Object, Boolean, IFormatProvider, String, Func<PropertyInfo, Object, IFormatProvider, String>, Func<Type, BindingFlags, IEnumerable<PropertyInfo>>, BindingFlags) Returns a System.String that represents the specified instance . Declaration public static string FromObject(object instance, bool bypassOverrideCheck, IFormatProvider provider, string delimiter, Func<PropertyInfo, object, IFormatProvider, string> propertyConverter, Func<Type, BindingFlags, IEnumerable<PropertyInfo>> propertiesReader, BindingFlags propertiesReaderBindingAttr) Parameters Type Name Description System.Object instance The instance to represent. System.Boolean bypassOverrideCheck Specify true to bypass the check for if a ToString() method is overriden; otherwise, false to use default behaviour, where an overriden method will return without further processing. System.IFormatProvider provider An object that supplies culture-specific formatting information. System.String delimiter The delimiter specification for when representing public properties of instance . System.Func < System.Reflection.PropertyInfo , System.Object , System.IFormatProvider , System.String > propertyConverter The function delegate that convert System.Reflection.PropertyInfo objects to human-readable content. System.Func < System.Type , System.Reflection.BindingFlags , System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo >> propertiesReader The function delegate that read System.Reflection.PropertyInfo objects from the underlying System.Type of instance . System.Reflection.BindingFlags propertiesReaderBindingAttr A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search for System.Reflection.PropertyInfo objects in the function delegate propertiesReader is conducted. Returns Type Description System.String A System.String that represents the specified instance . Remarks When determining the representation of the specified instance , these rules applies: 1: if the System.Object.ToString() method has been overridden, any further processing is skipped 2: any public properties having index parameters is skipped 3: any public properties is appended to the result if System.Object.ToString() has not been overridden. Note: do not call this method from an overridden ToString(..) method without setting bypassOverrideCheck to true ; otherwise a stackoverflow exception will occur. | Improve this Doc FromPascalCasing(String, String) Converts the specified pascal-case representation value to a human readable string. Declaration public static string FromPascalCasing(string value, string delimiter = \" \") Parameters Type Name Description System.String value The System.String to convert. System.String delimiter The delimiter to use when converting PascalCasing to a human readable string. Default is space ( ). Returns Type Description System.String A human readable string from the specified pascal-case representation value . | Improve this Doc FromStream(Stream, Action<EncodingOptions>) Converts the specified value to a string using the provided preferred encoding. Declaration public static string FromStream(Stream value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A System.String containing the decoded result of the specified value . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc FromStream(Stream, Action<EncodingOptions>, Boolean) Converts the specified value to a string using the provided preferred encoding. Declaration public static string FromStream(Stream value, Action<EncodingOptions> setup, bool leaveStreamOpen) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. System.Boolean leaveStreamOpen if true , the System.IO.Stream object is being left open; otherwise it is being closed and disposed. Returns Type Description System.String A System.String containing the decoded result of the specified value . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc FromType(Type) Converts the name of the source with the intend to be understood by humans. Declaration public static string FromType(Type source) Parameters Type Name Description System.Type source The type to sanitize the name from. Returns Type Description System.String A sanitized System.String representation of source . Remarks Only the simple name of the source is returned, not the fully qualified name. | Improve this Doc FromType(Type, Boolean) Converts the name of the source with the intend to be understood by humans. Declaration public static string FromType(Type source, bool fullName) Parameters Type Name Description System.Type source The type to sanitize the name from. System.Boolean fullName Specify true to use the fully qualified name of the source ; otherwise, false for the simple name of source . Returns Type Description System.String A sanitized System.String representation of source . | Improve this Doc FromType(Type, Boolean, Boolean) Converts the name of the source with the intend to be understood by humans. Declaration public static string FromType(Type source, bool fullName, bool excludeGenericArguments) Parameters Type Name Description System.Type source The type to sanitize the name from. System.Boolean fullName Specify true to use the fully qualified name of the source ; otherwise, false for the simple name of source . System.Boolean excludeGenericArguments Specify true to exclude generic arguments from the result; otherwise false to include generic arguments should the source be a generic type. Returns Type Description System.String A sanitized System.String representation of source . | Improve this Doc FromUriScheme(UriScheme) Converts the specified string representation of an URI scheme to its UriScheme equivalent. Declaration public static string FromUriScheme(UriScheme uriScheme) Parameters Type Name Description UriScheme uriScheme A string containing an URI scheme to convert. Returns Type Description System.String An UriScheme equivalent to the specified uriScheme or Undefined if a conversion is not possible. | Improve this Doc ToBinary(Byte[]) Converts the specified value to its equivalent binary representation. Declaration public static string ToBinary(byte[] value) Parameters Type Name Description System.Byte [] value The byte array to be converted. Returns Type Description System.String A binary System.String representation of the elements in value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc ToCamelCasing(String) Converts the specified value to a camel-case representation, using culture-independent casing rules. Declaration public static string ToCamelCasing(string value) Parameters Type Name Description System.String value The System.String value to convert. Returns Type Description System.String A camel-case representation of the specified System.String value. | Improve this Doc ToDelimitedString<T>(IEnumerable<T>) Converts the specified source to a string of comma delimited values. Declaration public static string ToDelimitedString<T>(IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source A collection of values to be converted. Returns Type Description System.String A System.String of comma delimited values. Type Parameters Name Description T The type of the source to convert. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>, String) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource>(IEnumerable<TSource> source, string delimiter) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of elements to be converted. System.String delimiter The delimiter specification. Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource>(IEnumerable<TSource> source, string delimiter, Func<TSource, string> converter) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of elements to be converted. System.String delimiter The delimiter specification. System.Func <TSource, System.String > converter The function delegate that converts TSource to a string representation once per iteration. Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource>(IEnumerable<TSource> source, string delimiter, string format) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of elements to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource>(IEnumerable<TSource> source, string delimiter, string format, Func<TSource, string> converter) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of elements to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, System.String > converter The function delegate that converts TSource to a string representation once per iteration. Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. | Improve this Doc ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T>(IEnumerable<TSource> source, string delimiter, Func<TSource, T, string> converter, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T arg The parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T The type of the parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T>(IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T, string> converter, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T arg The parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T The type of the parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource> source, string delimiter, Func<TSource, T1, T2, string> converter, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T1, T2, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T1, T2, string> converter, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T1, T2, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource> source, string delimiter, Func<TSource, T1, T2, T3, string> converter, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T1, T2, T3, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T1, T2, T3, string> converter, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T1, T2, T3, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource> source, string delimiter, Func<TSource, T1, T2, T3, T4, string> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T1, T2, T3, T4, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T1, T2, T3, T4, string> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T1, T2, T3, T4, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource> source, string delimiter, Func<TSource, T1, T2, T3, T4, T5, string> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T1, T2, T3, T4, T5, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T1, T2, T3, T4, T5, string> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T1, T2, T3, T4, T5, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . | Improve this Doc ToEnumerable(IEnumerable<Char>) Converts the specified value to its equivalent System.String sequence. Declaration public static IEnumerable<string> ToEnumerable(IEnumerable<char> value) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Char > value The value to convert into a sequence. Returns Type Description System.Collections.Generic.IEnumerable < System.String > A System.String sequence equivalent to the specified value . | Improve this Doc ToHexadecimal(Byte[]) Converts the specified value to its equivalent hexadecimal representation. Declaration public static string ToHexadecimal(byte[] value) Parameters Type Name Description System.Byte [] value The byte array to be converted. Returns Type Description System.String A hexadecimal System.String representation of the elements in value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc ToHexadecimal(String, Action<EncodingOptions>) Converts the specified value to its equivalent hexadecimal representation. Declaration public static string ToHexadecimal(string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The string to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A hexadecimal System.String representation of the characters in value . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc ToMorseCode(String) Converts the specified value to an international Morse code representation. Declaration public static string ToMorseCode(string value) Parameters Type Name Description System.String value The System.String value to convert. Returns Type Description System.String An international Morse code representation of the specified System.String value. Remarks Any characters not supported by the international Morse code specifications is excluded from the result. | Improve this Doc ToMorseCode(String, Boolean) Converts the specified value to an international Morse code representation. Declaration public static string ToMorseCode(string value, bool includeUnsupportedCharacters) Parameters Type Name Description System.String value The System.String value to convert. System.Boolean includeUnsupportedCharacters if set to true characters not supported by the internal Morse code is left intact in the result for a general impression. Returns Type Description System.String An international Morse code representation of the specified value parameter. | Improve this Doc ToPascalCasing(String) Converts the specified value to a pascal-case representation, using culture-independent casing rules. Declaration public static string ToPascalCasing(string value) Parameters Type Name Description System.String value The System.String value to convert. Returns Type Description System.String A pascal-case representation of the specified System.String value. | Improve this Doc ToProtocolRelativeUri(Uri) Converts the specified value of an System.Uri to its equivalent protocol-relative System.String . Declaration public static string ToProtocolRelativeUri(Uri value) Parameters Type Name Description System.Uri value The System.Uri to be converted. Returns Type Description System.String A System.String that is a protocol-relative equivalent to value . | Improve this Doc ToProtocolRelativeUri(Uri, String) Converts the specified value of an System.Uri to its equivalent protocol-relative System.String . Declaration public static string ToProtocolRelativeUri(Uri value, string relativeReference) Parameters Type Name Description System.Uri value The System.Uri to be converted. System.String relativeReference The relative reference to prefix the result with. Default is NetworkPathReference . Returns Type Description System.String A System.String that is a protocol-relative equivalent to value . | Improve this Doc ToUrlEncodedBase64(Byte[]) Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL. Declaration public static string ToUrlEncodedBase64(byte[] value) Parameters Type Name Description System.Byte [] value The byte array to encode. Returns Type Description System.String The string containing the encoded token if the byte array length is greater than one; otherwise, an empty string (\"\"). Remarks Source: http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-08#appendix-C (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.StreamHashOptions.html": {
    "href": "api/core/Cuemon.Security.Cryptography.StreamHashOptions.html",
    "title": "Class StreamHashOptions | Cuemon .NET Standard",
    "keywords": "Class StreamHashOptions Specifies options that is related to System.Security.Cryptography.HashAlgorithm operations. This class cannot be inherited. Inheritance System.Object HashOptions StreamHashOptions Inherited Members HashOptions.AlgorithmType Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public sealed class StreamHashOptions : HashOptions Constructors | Improve this Doc StreamHashOptions() Initializes a new instance of the StreamHashOptions class. Declaration public StreamHashOptions() Remarks The following table shows the initial property values for an instance of StreamHashOptions . Property Initial Value AlgorithmType MD5 LeaveStreamOpen false Properties | Improve this Doc LeaveStreamOpen Gets or sets a value indicating whether the System.IO.Stream is being left open or to have it being closed and disposed. Declaration public bool LeaveStreamOpen { get; set; } Property Value Type Description System.Boolean true if the System.IO.Stream is being left open; otherwise, false to have it being closed and disposed of. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also HashOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.PolynomialRepresentation.html": {
    "href": "api/core/Cuemon.Security.Cryptography.PolynomialRepresentation.html",
    "title": "Enum PolynomialRepresentation | Cuemon .NET Standard",
    "keywords": "Enum PolynomialRepresentation Defines the common ways to express a CRC generator polynomial representation. Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public enum PolynomialRepresentation Remarks For more information regarding these representations, please refer to these Wikipedia articles: Mathematics of CRC - http://en.wikipedia.org/wiki/Mathematics_of_CRC#Polynomial_representations Cyclic redundancy check - http://en.wikipedia.org/wiki/Cyclic_redundancy_check#Designing_CRC_polynomials Fields Name Description Normal The most-significant byte (MSB) first of a CRC polynomial representation. Reversed The least-significant byte (LSB) first of a CRC polynomial representation. ReversedReciprocal The Koopman notation of a CRC polynomial representation. Extension Methods ByteConverterExtensions.ToByteArray<PolynomialRepresentation>() ConverterExtensions.ParseWith<PolynomialRepresentation, TResult>(Func<PolynomialRepresentation, TResult>) ConverterExtensions.ParseWith<PolynomialRepresentation, T, TResult>(Func<PolynomialRepresentation, T, TResult>, T) ConverterExtensions.ParseWith<PolynomialRepresentation, T1, T2, TResult>(Func<PolynomialRepresentation, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<PolynomialRepresentation, T1, T2, T3, TResult>(Func<PolynomialRepresentation, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<PolynomialRepresentation, T1, T2, T3, T4, TResult>(Func<PolynomialRepresentation, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<PolynomialRepresentation, T1, T2, T3, T4, T5, TResult>(Func<PolynomialRepresentation, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<PolynomialRepresentation, T1, T2, T3, T4, T5, T6, TResult>(Func<PolynomialRepresentation, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<PolynomialRepresentation, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<PolynomialRepresentation, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<PolynomialRepresentation, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<PolynomialRepresentation, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<PolynomialRepresentation, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<PolynomialRepresentation, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<PolynomialRepresentation>() DelegateUtilityExtensions.DynamicWrap<PolynomialRepresentation>() TweakerExtensions.Adjust<PolynomialRepresentation>(Func<PolynomialRepresentation, PolynomialRepresentation>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<PolynomialRepresentation>() WrapperExtensions.UseWrapper<PolynomialRepresentation>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<PolynomialRepresentation>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<PolynomialRepresentation>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.KeyedHashOptions.html": {
    "href": "api/core/Cuemon.Security.Cryptography.KeyedHashOptions.html",
    "title": "Class KeyedHashOptions | Cuemon .NET Standard",
    "keywords": "Class KeyedHashOptions Specifies options that is related to System.Security.Cryptography.KeyedHashAlgorithm operations. Inheritance System.Object KeyedHashOptions StreamKeyedHashOptions StringKeyedHashOptions Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public class KeyedHashOptions Constructors | Improve this Doc KeyedHashOptions() Initializes a new instance of the KeyedHashOptions class. Declaration public KeyedHashOptions() Remarks The following table shows the initial property values for an instance of KeyedHashOptions . Property Initial Value AlgorithmType SHA1 Properties | Improve this Doc AlgorithmType Gets or sets the hash algorithm to use for the computation. Declaration public HmacAlgorithmType AlgorithmType { get; set; } Property Value Type Description HmacAlgorithmType The hash algorithm to use for the computation. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.QueryBuilder.html": {
    "href": "api/core/Cuemon.Data.QueryBuilder.html",
    "title": "Class QueryBuilder | Cuemon .NET Standard",
    "keywords": "Class QueryBuilder An abstract class for building T-SQL statements from table and columns definitions. Inheritance System.Object QueryBuilder SqlQueryBuilder Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public abstract class QueryBuilder Constructors | Improve this Doc QueryBuilder() Initializes a new instance of the QueryBuilder class. Declaration protected QueryBuilder() | Improve this Doc QueryBuilder(String, IDictionary<String, String>) Initializes a new instance of the QueryBuilder class. Declaration protected QueryBuilder(string tableName, IDictionary<string, string> keyColumns) Parameters Type Name Description System.String tableName The name of the table or view. System.Collections.Generic.IDictionary < System.String , System.String > keyColumns The key columns to be used in this QueryBuilder instance. | Improve this Doc QueryBuilder(String, IDictionary<String, String>, IDictionary<String, String>) Initializes a new instance of the QueryBuilder class. Declaration protected QueryBuilder(string tableName, IDictionary<string, string> keyColumns, IDictionary<string, string> columns) Parameters Type Name Description System.String tableName The name of the table or view. System.Collections.Generic.IDictionary < System.String , System.String > keyColumns The key columns to be used in this QueryBuilder instance. System.Collections.Generic.IDictionary < System.String , System.String > columns The none-key columns to be used in this QueryBuilder instance. Properties | Improve this Doc Columns Gets the none-key columns to be used in the QueryBuilder instance. Declaration public IDictionary<string, string> Columns { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > The none-key columns to be used in the QueryBuilder instance. | Improve this Doc EnableDirtyReads Gets or sets a value indicating whether the data source should try to prevent locking from readonly queries. Declaration public bool EnableDirtyReads { get; set; } Property Value Type Description System.Boolean true if the data source should try to prevent locking from readonly queries; otherwise, false . | Improve this Doc EnableReadLimit Gets or sets a value indicating whether a query is restricted in how many records ( ReadLimit ) can be retrieved from a repository. Default is false. Declaration public bool EnableReadLimit { get; set; } Property Value Type Description System.Boolean true if a query is restricted in how many records ( ReadLimit ) can be retrieved from a repository; otherwise, false . | Improve this Doc EnableTableAndColumnEncapsulation Gets or sets a value indicating whether an encapsulation should be committed automatically on table and column names. Declaration public bool EnableTableAndColumnEncapsulation { get; set; } Property Value Type Description System.Boolean true if an encapsulation should be committed automatically on table and column names; otherwise, false . | Improve this Doc KeyColumns Gets the key columns to be used in the QueryBuilder instance. Declaration public IDictionary<string, string> KeyColumns { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > The key columns to be used in the QueryBuilder instance. | Improve this Doc ReadLimit Gets or sets a value limiting the maximum amount of records that can be retreived from a repository. Default is 1000. Declaration public int ReadLimit { get; set; } Property Value Type Description System.Int32 The maximum amount of records that can be retreived from a repository. | Improve this Doc TableName Gets or sets the name of the table or view. Declaration public string TableName { get; set; } Property Value Type Description System.String The name of the table or view. Methods | Improve this Doc Append(String) Appends the specified query fragment to the end of this instance. Declaration protected void Append(string queryFragment) Parameters Type Name Description System.String queryFragment The query fragment to append. | Improve this Doc Append(String, Object[]) Appends a formatted query fragment, which contains zero or more format specifications, to the end of this instance. Each format specification is replaced by the string representation of a corresponding object argument. Declaration protected void Append(string queryFragment, params object[] args) Parameters Type Name Description System.String queryFragment The query fragment to append. System.Object [] args An array of objects to format. | Improve this Doc GetQuery(QueryType) Create and returns the builded query from the specified QueryType . Declaration public string GetQuery(QueryType queryType) Parameters Type Name Description QueryType queryType Type of the query to create. Returns Type Description System.String The builded T-SQL query. | Improve this Doc GetQuery(QueryType, String) Create and returns the builded query from the specified QueryType . Declaration public abstract string GetQuery(QueryType queryType, string tableName) Parameters Type Name Description QueryType queryType Type of the query to create. System.String tableName The name of the table or view. Overrides the class wide tableName. Returns Type Description System.String | Improve this Doc ToString() Returns a System.String that represents the current System.Object . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current System.Object . Overrides System.Object.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataCommand.html": {
    "href": "api/core/Cuemon.Data.DataCommand.html",
    "title": "Class DataCommand | Cuemon .NET Standard",
    "keywords": "Class DataCommand Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database. Inheritance System.Object DataCommand Implements IDataCommand Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public class DataCommand : IDataCommand Constructors | Improve this Doc DataCommand() Initializes a new instance of the DataCommand class. Declaration public DataCommand() | Improve this Doc DataCommand(String) Initializes a new instance of the DataCommand class. Declaration public DataCommand(string text) Parameters Type Name Description System.String text The command text to execute. | Improve this Doc DataCommand(String, CommandType) Initializes a new instance of the DataCommand class. Declaration public DataCommand(string text, CommandType type) Parameters Type Name Description System.String text The command text to execute. System.Data.CommandType type The command type value to execute. | Improve this Doc DataCommand(String, CommandType, Object[]) Initializes a new instance of the DataCommand class. Declaration public DataCommand(string textFormat, CommandType type, params object[] args) Parameters Type Name Description System.String textFormat The command text to execute as a composite format string (see Remarks). System.Data.CommandType type The command type value to execute. System.Object [] args An object array that contains zero or more objects to format. Remarks For more information regarding the textFormat , have a look here: http://msdn.microsoft.com/en-us/library/txafckwd(v=vs.80).aspx . | Improve this Doc DataCommand(String, CommandType, TimeSpan) Initializes a new instance of the DataCommand class. Declaration public DataCommand(string text, CommandType type, TimeSpan timeout) Parameters Type Name Description System.String text The command text to execute. System.Data.CommandType type The command type value to execute. System.TimeSpan timeout The timeout for the command to execute. | Improve this Doc DataCommand(String, CommandType, TimeSpan, Object[]) Initializes a new instance of the DataCommand class. Declaration public DataCommand(string textFormat, CommandType type, TimeSpan timeout, params object[] args) Parameters Type Name Description System.String textFormat The command text to execute as a composite format string (see Remarks). System.Data.CommandType type The command type value to execute. System.TimeSpan timeout The timeout for the command to execute. System.Object [] args An object array that contains zero or more objects to format. Remarks For more information regarding the textFormat , have a look here: http://msdn.microsoft.com/en-us/library/txafckwd(v=vs.80).aspx . | Improve this Doc DataCommand(String, Object[]) Initializes a new instance of the DataCommand class. Declaration public DataCommand(string textFormat, params object[] args) Parameters Type Name Description System.String textFormat The command text to execute as a composite format string (see Remarks). System.Object [] args An object array that contains zero or more objects to format. Remarks For more information regarding the textFormat , have a look here: http://msdn.microsoft.com/en-us/library/txafckwd(v=vs.80).aspx . | Improve this Doc DataCommand(String, TimeSpan) Initializes a new instance of the DataCommand class. Declaration public DataCommand(string text, TimeSpan timeout) Parameters Type Name Description System.String text The command text to execute. System.TimeSpan timeout The timeout for the command to execute. | Improve this Doc DataCommand(String, TimeSpan, Object[]) Initializes a new instance of the DataCommand class. Declaration public DataCommand(string textFormat, TimeSpan timeout, params object[] args) Parameters Type Name Description System.String textFormat The command text to execute as a composite format string (see Remarks). System.TimeSpan timeout The timeout for the command to execute. System.Object [] args An object array that contains zero or more objects to format. Remarks For more information regarding the textFormat , have a look here: http://msdn.microsoft.com/en-us/library/txafckwd(v=vs.80).aspx . Properties | Improve this Doc DefaultTimeout Gets or sets the default wait time before terminating the attempt to execute a command and generating an error. Declaration public static TimeSpan DefaultTimeout { get; set; } Property Value Type Description System.TimeSpan The System.TimeSpan to wait for the command to execute. Default value is 1 minute and 30 seconds. | Improve this Doc Text Gets or sets the command text to execute. Declaration public string Text { get; set; } Property Value Type Description System.String The command text to execute. | Improve this Doc Timeout Gets or sets the wait time before terminating the attempt to execute a command and generating an error. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description System.TimeSpan The timespan to wait for the command to execute. Default value is 1 minute and 30 seconds. | Improve this Doc Type Gets or sets the command type value to execute. Declaration public CommandType Type { get; set; } Property Value Type Description System.Data.CommandType The command type value to exceute. Default type value is Text. Implements IDataCommand Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataAdapterException.html": {
    "href": "api/core/Cuemon.Data.DataAdapterException.html",
    "title": "Class DataAdapterException | Cuemon .NET Standard",
    "keywords": "Class DataAdapterException The exception that is thrown when a DataAdapter operation is in an invalid state. Inheritance System.Object System.Exception DataAdapterException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public class DataAdapterException : Exception Constructors | Improve this Doc DataAdapterException() Initializes a new instance of the DataAdapterException class. Declaration public DataAdapterException() | Improve this Doc DataAdapterException(String) Initializes a new instance of the DataAdapterException class. Declaration public DataAdapterException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc DataAdapterException(String, Exception) Initializes a new instance of the DataAdapterException class. Declaration public DataAdapterException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) ExceptionUtilityExtensions.Refine(Exception, MethodBase, Object[]) ExceptionUtilityExtensions.Refine(Exception, MethodDescriptor, Object[]) ExceptionUtilityExtensions.ParseException<TResult>(Exception) ExceptionUtilityExtensions.Flatten(Exception) ExceptionUtilityExtensions.Flatten(Exception, Type) StringConverterExtensions.ToEncodedString(Exception, Boolean) StringConverterExtensions.ToEncodedString(Exception, Boolean, Encoding) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Specialized.html": {
    "href": "api/core/Cuemon.Collections.Specialized.html",
    "title": "Namespace Cuemon.Collections.Specialized | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Collections.Specialized Assembly : Cuemon.Collections.Specialized.dll Classes NameValueCollectionConverter This utility class is designed to make System.Collections.Specialized.NameValueCollection related conversions easier to work with. NameValueCollectionConverterExtensions This is an extension implementation of the NameValueCollectionConverter class. NameValueCollectionUtility This utility class provides a set of concrete static methods for supporting the EnumerableUtility . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-14.html": {
    "href": "api/core/Cuemon.Template-14.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Represents a Template with fourteen generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Arg13 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Arg12 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . T13 The type of the thirteenth parameter of this Template . T14 The type of the fourteenth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . T13 arg13 The value of the thirteenth parameter of this Template . T14 arg14 The value of the fourteenth parameter of this Template . Properties | Improve this Doc Arg14 Gets or sets the fourteenth parameter of this instance. Declaration public T14 Arg14 { get; set; } Property Value Type Description T14 The fourteenth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-13.html": {
    "href": "api/core/Cuemon.Template-13.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Represents a Template with thirteen generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Arg12 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . T13 The type of the thirteenth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . T13 arg13 The value of the thirteenth parameter of this Template . Properties | Improve this Doc Arg13 Gets or sets the thirteenth parameter of this instance. Declaration public T13 Arg13 { get; set; } Property Value Type Description T13 The thirteenth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-12.html": {
    "href": "api/core/Cuemon.Template-12.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Represents a Template with twelve generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . Properties | Improve this Doc Arg12 Gets or sets the twelfth parameter of this instance. Declaration public T12 Arg12 { get; set; } Property Value Type Description T12 The twelfth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Formatters.Formatter-1.html": {
    "href": "api/core/Cuemon.Serialization.Formatters.Formatter-1.html",
    "title": "Class Formatter<TFormat> | Cuemon .NET Standard",
    "keywords": "Class Formatter<TFormat> An abstract class that supports serialization and deserialization of an object, in a given format. Inheritance System.Object Formatter<TFormat> XmlFormatter Namespace : Cuemon.Serialization.Formatters Assembly : Cuemon.Serialization.dll Syntax public abstract class Formatter<TFormat> Type Parameters Name Description TFormat The type of format which serialization and deserialization is invoked. Constructors | Improve this Doc Formatter() Initializes a new instance of the Formatter<TFormat> class. Declaration protected Formatter() Methods | Improve this Doc Deserialize(TFormat, Type) Deserializes the specified value of TFormat into an object of objectType . Declaration public abstract object Deserialize(TFormat value, Type objectType) Parameters Type Name Description TFormat value The object from which to deserialize the object graph. System.Type objectType The type of the deserialized object. Returns Type Description System.Object An object of objectType . | Improve this Doc Deserialize<T>(TFormat) Deserializes the specified value of TFormat into an object of T . Declaration public T Deserialize<T>(TFormat value) Parameters Type Name Description TFormat value The object from which to deserialize the object graph. Returns Type Description T An object of T . Type Parameters Name Description T The type of the object to return. | Improve this Doc Serialize(Object) Serializes the specified source to an object of TFormat . Declaration public TFormat Serialize(object source) Parameters Type Name Description System.Object source The object to serialize to a given format. Returns Type Description TFormat An object of the serialized source . | Improve this Doc Serialize(Object, Type) Serializes the object of this instance to an object of TFormat . Declaration public abstract TFormat Serialize(object source, Type objectType) Parameters Type Name Description System.Object source The object to serialize to a given format. System.Type objectType The type of the object to serialize. Returns Type Description TFormat An object of the serialized source . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DateTimeUtilityExtensions.html": {
    "href": "api/core/Cuemon.DateTimeUtilityExtensions.html",
    "title": "Class DateTimeUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class DateTimeUtilityExtensions This is an extension implementation of the most common methods on the DateTimeUtility class. Inheritance System.Object DateTimeUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DateTimeUtilityExtensions Methods | Improve this Doc Ceiling(DateTime, Double, TimeUnit) Returns a System.DateTime value that is rounded towards positive infinity. Declaration public static DateTime Ceiling(this DateTime value, double interval, TimeUnit timeUnit) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.Double interval The System.Double value that in combination with timeUnit specifies the rounding of value . TimeUnit timeUnit One of the enumeration values that specifies the time unit of interval . Returns Type Description System.DateTime A System.DateTime value that is rounded towards positive infinity. Exceptions Type Condition System.ArgumentOutOfRangeException interval is 0. | Improve this Doc Ceiling(DateTime, TimeSpan) Returns a System.DateTime value that is rounded towards positive infinity. Declaration public static DateTime Ceiling(this DateTime value, TimeSpan interval) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.TimeSpan interval The System.TimeSpan value that specifies the rounding of value . Returns Type Description System.DateTime A System.DateTime value that is rounded towards positive infinity. | Improve this Doc Floor(DateTime, Double, TimeUnit) Returns a System.DateTime value that is rounded towards negative infinity. Declaration public static DateTime Floor(this DateTime value, double interval, TimeUnit timeUnit) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.Double interval The System.Double value that in combination with timeUnit specifies the rounding of value . TimeUnit timeUnit One of the enumeration values that specifies the time unit of interval . Returns Type Description System.DateTime A System.DateTime value that is rounded towards negative infinity. Exceptions Type Condition System.ArgumentOutOfRangeException interval is 0. | Improve this Doc Floor(DateTime, TimeSpan) Returns a System.DateTime value that is rounded towards negative infinity. Declaration public static DateTime Floor(this DateTime value, TimeSpan interval) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.TimeSpan interval The System.TimeSpan value that specifies the rounding of value . Returns Type Description System.DateTime A System.DateTime value that is rounded towards negative infinity. | Improve this Doc Round(DateTime, Double, TimeUnit, VerticalDirection) Returns a System.DateTime value that is rounded either towards negative infinity or positive infinity. Declaration public static DateTime Round(this DateTime value, double interval, TimeUnit timeUnit, VerticalDirection direction) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.Double interval The System.Double value that in combination with timeUnit specifies the rounding of value . TimeUnit timeUnit One of the enumeration values that specifies the time unit of interval . VerticalDirection direction One of the enumeration values that specifies the direction of the rounding. Returns Type Description System.DateTime A System.DateTime value that is rounded either towards negative infinity or positive infinity. Exceptions Type Condition System.ArgumentOutOfRangeException direction is an invalid enumeration value. System.ArgumentOutOfRangeException interval is System.TimeSpan.Zero . | Improve this Doc Round(DateTime, TimeSpan, VerticalDirection) Returns a System.DateTime value that is rounded either towards negative infinity or positive infinity. Declaration public static DateTime Round(this DateTime value, TimeSpan interval, VerticalDirection direction) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.TimeSpan interval The System.TimeSpan value that specifies the rounding of value . VerticalDirection direction One of the enumeration values that specifies the direction of the rounding. Returns Type Description System.DateTime A System.DateTime value that is rounded either towards negative infinity or positive infinity. Exceptions Type Condition System.ArgumentOutOfRangeException direction is an invalid enumeration value. System.ArgumentOutOfRangeException interval is System.TimeSpan.Zero . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.QueryType.html": {
    "href": "api/core/Cuemon.Data.QueryType.html",
    "title": "Enum QueryType | Cuemon .NET Standard",
    "keywords": "Enum QueryType Identifies the type of data operation performed by a query against a data source. Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public enum QueryType Fields Name Description Delete Indicates that a query is used for a data operation that deletes data. Exists Indicates that a query is specifically used for a lookup on whether a data record exists. Insert Indicates that a query is used for a data operation that inserts data. Select Indicates that a query is used for a data operation that retrieves data. Update Indicates that a query is used for a data operation that updates data. Extension Methods ByteConverterExtensions.ToByteArray<QueryType>() ConverterExtensions.ParseWith<QueryType, TResult>(Func<QueryType, TResult>) ConverterExtensions.ParseWith<QueryType, T, TResult>(Func<QueryType, T, TResult>, T) ConverterExtensions.ParseWith<QueryType, T1, T2, TResult>(Func<QueryType, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<QueryType, T1, T2, T3, TResult>(Func<QueryType, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<QueryType, T1, T2, T3, T4, TResult>(Func<QueryType, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<QueryType, T1, T2, T3, T4, T5, TResult>(Func<QueryType, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<QueryType, T1, T2, T3, T4, T5, T6, TResult>(Func<QueryType, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<QueryType, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<QueryType, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<QueryType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<QueryType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<QueryType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<QueryType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<QueryType>() DelegateUtilityExtensions.DynamicWrap<QueryType>() TweakerExtensions.Adjust<QueryType>(Func<QueryType, QueryType>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<QueryType>() WrapperExtensions.UseWrapper<QueryType>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<QueryType>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<QueryType>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Text.html": {
    "href": "api/core/Cuemon.Text.html",
    "title": "Namespace Cuemon.Text | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Text Assembly : Cuemon.Core.dll Classes EncodingConverter This utility class is designed to make System.Text.Encoding conversions easier to work with. EncodingExtensions Extension methods for the System.Text.Encoding class. EncodingOptions Specifies options that is related to Encoding operations. EncodingUtility This utility class is designed to make System.Text.Encoding operations easier to work with. FallbackEncodingOptions Specifies options that is related to System.Text.Encoding operations. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Text.FallbackEncodingOptions.html": {
    "href": "api/core/Cuemon.Text.FallbackEncodingOptions.html",
    "title": "Class FallbackEncodingOptions | Cuemon .NET Standard",
    "keywords": "Class FallbackEncodingOptions Specifies options that is related to System.Text.Encoding operations. Inheritance System.Object EncodingOptions FallbackEncodingOptions Inherited Members EncodingOptions.DefaultPreambleSequence EncodingOptions.DefaultEncoding EncodingOptions.Preamble EncodingOptions.Encoding EncodingOptions.DetectEncoding(Stream) EncodingOptions.DetectEncoding(Byte[]) Namespace : Cuemon.Text Assembly : Cuemon.Core.dll Syntax public class FallbackEncodingOptions : EncodingOptions Constructors | Improve this Doc FallbackEncodingOptions() Initializes a new instance of the FallbackEncodingOptions class. Declaration public FallbackEncodingOptions() Remarks The following table shows the initial property values for an instance of FallbackEncodingOptions . Property Initial Value EncoderFallback EncoderFallback.ExceptionFallback DecoderFallback DecoderFallback.ExceptionFallback Properties | Improve this Doc DecoderFallback Gets or sets the object that provides an error-handling procedure when a byte sequence cannot be decoded. Declaration public DecoderFallback DecoderFallback { get; set; } Property Value Type Description System.Text.DecoderFallback The object that provides an error-handling procedure when a byte sequence cannot be decoded. | Improve this Doc EncoderFallback Gets or sets the object that provides an error-handling procedure when a character cannot be encoded. Declaration public EncoderFallback EncoderFallback { get; set; } Property Value Type Description System.Text.EncoderFallback The object that provides an error-handling procedure when a character cannot be encoded. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also EncodingOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.Compression.CompressionUtility.html": {
    "href": "api/core/Cuemon.IO.Compression.CompressionUtility.html",
    "title": "Class CompressionUtility | Cuemon .NET Standard",
    "keywords": "Class CompressionUtility This utility class is designed to make System.IO.Stream related compression operations easier to work with. Inheritance System.Object CompressionUtility Namespace : Cuemon.IO.Compression Assembly : Cuemon.IO.dll Syntax public static class CompressionUtility Methods | Improve this Doc CompressStream(Stream) Compresses the source stream using the Deflate algorithm. Declaration public static Stream CompressStream(Stream source) Parameters Type Name Description System.IO.Stream source The source stream to compress. Returns Type Description System.IO.Stream A compressed System.IO.Stream of the source . | Improve this Doc CompressStream(Stream, CompressionType) Compresses the source stream using the specified compressionType algorithm. Declaration public static Stream CompressStream(Stream source, CompressionType compressionType) Parameters Type Name Description System.IO.Stream source The source stream to compress. CompressionType compressionType The compression algorithm to use for the compression. Returns Type Description System.IO.Stream A compressed System.IO.Stream of the source . | Improve this Doc CompressStream(Stream, CompressionType, Int32) Compresses the source stream using the specified compressionType algorithm. Declaration public static Stream CompressStream(Stream source, CompressionType compressionType, int bufferSize) Parameters Type Name Description System.IO.Stream source The source stream to compress. CompressionType compressionType The compression algorithm to use for the compression. System.Int32 bufferSize The size of the buffer. This value must be greater than zero. The default size is 2048. Returns Type Description System.IO.Stream A compressed System.IO.Stream of the source . | Improve this Doc DecompressStream(Stream) Decompresses the source stream using the Deflate algorithm. Declaration public static Stream DecompressStream(Stream source) Parameters Type Name Description System.IO.Stream source The source stream to decompress. Returns Type Description System.IO.Stream A decompressed System.IO.Stream of the source . | Improve this Doc DecompressStream(Stream, CompressionType) Decompresses the source stream using the specified compressionType algorithm. Declaration public static Stream DecompressStream(Stream source, CompressionType compressionType) Parameters Type Name Description System.IO.Stream source The source stream to decompress. CompressionType compressionType The compression algorithm to use for the decompression. Returns Type Description System.IO.Stream A decompressed System.IO.Stream of the source . | Improve this Doc DecompressStream(Stream, CompressionType, Int32) Decompresses the source stream using the specified compressionType algorithm. Declaration public static Stream DecompressStream(Stream source, CompressionType compressionType, int bufferSize) Parameters Type Name Description System.IO.Stream source The source stream to decompress. CompressionType compressionType The compression algorithm to use for the decompression. System.Int32 bufferSize The size of the buffer. This value must be greater than zero. The default size is 2048. Returns Type Description System.IO.Stream A decompressed System.IO.Stream of the source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.Compression.CompressionType.html": {
    "href": "api/core/Cuemon.IO.Compression.CompressionType.html",
    "title": "Enum CompressionType | Cuemon .NET Standard",
    "keywords": "Enum CompressionType Specifies the algorithm used for compression. Namespace : Cuemon.IO.Compression Assembly : Cuemon.IO.dll Syntax public enum CompressionType Fields Name Description Deflate A fast and efficient compression using a combination of the LZ77 algorithm and Huffman coding. GZip A slower but otherwise identical compression to the Deflate with cyclic redundancy check value for data corruption detection. Extension Methods ByteConverterExtensions.ToByteArray<CompressionType>() ConverterExtensions.ParseWith<CompressionType, TResult>(Func<CompressionType, TResult>) ConverterExtensions.ParseWith<CompressionType, T, TResult>(Func<CompressionType, T, TResult>, T) ConverterExtensions.ParseWith<CompressionType, T1, T2, TResult>(Func<CompressionType, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<CompressionType, T1, T2, T3, TResult>(Func<CompressionType, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<CompressionType, T1, T2, T3, T4, TResult>(Func<CompressionType, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<CompressionType, T1, T2, T3, T4, T5, TResult>(Func<CompressionType, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<CompressionType, T1, T2, T3, T4, T5, T6, TResult>(Func<CompressionType, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<CompressionType, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<CompressionType, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<CompressionType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<CompressionType, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<CompressionType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<CompressionType, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<CompressionType>() DelegateUtilityExtensions.DynamicWrap<CompressionType>() TweakerExtensions.Adjust<CompressionType>(Func<CompressionType, CompressionType>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<CompressionType>() WrapperExtensions.UseWrapper<CompressionType>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<CompressionType>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<CompressionType>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlWriterUtility.html": {
    "href": "api/core/Cuemon.Xml.XmlWriterUtility.html",
    "title": "Class XmlWriterUtility | Cuemon .NET Standard",
    "keywords": "Class XmlWriterUtility This utility class is designed to make System.Xml.XmlWriter related operations easier to work with. Inheritance System.Object XmlWriterUtility Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlWriterUtility Methods | Improve this Doc Copy(XmlReader, Action<XmlCopyOptions>) Copies everything from the specified reader and returns the result as an XML stream. Declaration public static Stream Copy(XmlReader reader, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding an exact copy of the source reader . Exceptions Type Condition System.ArgumentNullException reader is null. | Improve this Doc Copy(XmlReader, Action<XmlWriter, XmlReader>, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy(XmlReader reader, Action<XmlWriter, XmlReader> copier, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader > copier The delegate that will create an in-memory copy of reader as a XML stream. System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Remarks This method uses a default implementation of System.Xml.XmlWriterSettings as specified by CreateSettings(Action<XmlWriterSettings>) . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T>(XmlReader, Action<XmlWriter, XmlReader, T>, T, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T>(XmlReader reader, Action<XmlWriter, XmlReader, T> copier, T arg, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T> copier The delegate that will create an in-memory copy of reader as a XML stream. T arg The parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T The type of the parameter of the delegate copier . Remarks This method uses a default implementation of System.Xml.XmlWriterSettings as specified by CreateSettings(Action<XmlWriterSettings>) . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T1, T2>(XmlReader, Action<XmlWriter, XmlReader, T1, T2>, T1, T2, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T1, T2>(XmlReader reader, Action<XmlWriter, XmlReader, T1, T2> copier, T1 arg1, T2 arg2, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T1, T2> copier The delegate that will create an in-memory copy of reader as a XML stream. T1 arg1 The first parameter of the delegate copier . T2 arg2 The second parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T1 The type of the first parameter of the delegate copier . T2 The type of the second parameter of the delegate copier . Remarks This method uses a default implementation of System.Xml.XmlWriterSettings as specified by CreateSettings(Action<XmlWriterSettings>) . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T1, T2, T3>(XmlReader, Action<XmlWriter, XmlReader, T1, T2, T3>, T1, T2, T3, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T1, T2, T3>(XmlReader reader, Action<XmlWriter, XmlReader, T1, T2, T3> copier, T1 arg1, T2 arg2, T3 arg3, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T1, T2, T3> copier The delegate that will create an in-memory copy of reader as a XML stream. T1 arg1 The first parameter of the delegate copier . T2 arg2 The second parameter of the delegate copier . T3 arg3 The third parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T1 The type of the first parameter of the delegate copier . T2 The type of the second parameter of the delegate copier . T3 The type of the third parameter of the delegate copier . Remarks This method uses a default implementation of System.Xml.XmlWriterSettings as specified by CreateSettings(Action<XmlWriterSettings>) . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T1, T2, T3, T4>(XmlReader, Action<XmlWriter, XmlReader, T1, T2, T3, T4>, T1, T2, T3, T4, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T1, T2, T3, T4>(XmlReader reader, Action<XmlWriter, XmlReader, T1, T2, T3, T4> copier, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T1, T2, T3, T4> copier The delegate that will create an in-memory copy of reader as a XML stream. T1 arg1 The first parameter of the delegate copier . T2 arg2 The second parameter of the delegate copier . T3 arg3 The third parameter of the delegate copier . T4 arg4 The fourth parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T1 The type of the first parameter of the delegate copier . T2 The type of the second parameter of the delegate copier . T3 The type of the third parameter of the delegate copier . T4 The type of the fourth parameter of the delegate copier . Remarks This method uses a default implementation of System.Xml.XmlWriterSettings as specified by CreateSettings(Action<XmlWriterSettings>) . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc Copy<T1, T2, T3, T4, T5>(XmlReader, Action<XmlWriter, XmlReader, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5, Action<XmlCopyOptions>) Copies the specified reader using the specified delegate copier and returns the result as an XML stream. Declaration public static Stream Copy<T1, T2, T3, T4, T5>(XmlReader reader, Action<XmlWriter, XmlReader, T1, T2, T3, T4, T5> copier, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<XmlCopyOptions> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. System.Action < System.Xml.XmlWriter , System.Xml.XmlReader , T1, T2, T3, T4, T5> copier The delegate that will create an in-memory copy of reader as a XML stream. T1 arg1 The first parameter of the delegate copier . T2 arg2 The second parameter of the delegate copier . T3 arg3 The third parameter of the delegate copier . T4 arg4 The fourth parameter of the delegate copier . T5 arg5 The fifth parameter of the delegate copier . System.Action < XmlCopyOptions > setup The XmlCopyOptions which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML copied by the delegate copier from the source reader . Type Parameters Name Description T1 The type of the first parameter of the delegate copier . T2 The type of the second parameter of the delegate copier . T3 The type of the third parameter of the delegate copier . T4 The type of the fourth parameter of the delegate copier . T5 The type of the fifth parameter of the delegate copier . Remarks This method uses a default implementation of System.Xml.XmlWriterSettings as specified by CreateSettings(Action<XmlWriterSettings>) . Exceptions Type Condition System.ArgumentNullException reader is null - or - copier is null. | Improve this Doc CreateSettings(Action<XmlWriterSettings>) Specifies a set of features to support the System.Xml.XmlWriter object. Declaration public static XmlWriterSettings CreateSettings(Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriterSettings > setup Returns Type Description System.Xml.XmlWriterSettings A System.Xml.XmlWriterSettings instance that specifies a set of features to support the System.Xml.XmlWriter object. Remarks The following table shows the overridden initial property values for an instance of System.Xml.XmlWriterSettings . The initial property values can be viewed here: https://msdn.microsoft.com/EN-US/library/536k980t(v=VS.110,d=hv.2).aspx Property Initial Value System.Xml.XmlWriterSettings.IndentChars Tab | Improve this Doc CreateXml(Action<XmlWriter>, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml(Action<XmlWriter> writer, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter > writer The delegate that will create an in-memory XML stream. System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . | Improve this Doc CreateXml<T>(Action<XmlWriter, T>, T, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T>(Action<XmlWriter, T> writer, T arg, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T> writer The delegate that will create an in-memory XML stream. T arg The parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T The type of the parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<XmlWriter, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<XmlWriter, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . T7 arg7 The seventh parameter of the delegate writer . T8 arg8 The eighth parameter of the delegate writer . T9 arg9 The ninth parameter of the delegate writer . T10 arg10 The tenth parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . T7 The type of the seventh parameter of the delegate writer . T8 The type of the eighth parameter of the delegate writer . T9 The type of the ninth parameter of the delegate writer . T10 The type of the tenth parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2>(Action<XmlWriter, T1, T2>, T1, T2, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2>(Action<XmlWriter, T1, T2> writer, T1 arg1, T2 arg2, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2, T3>(Action<XmlWriter, T1, T2, T3>, T1, T2, T3, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2, T3>(Action<XmlWriter, T1, T2, T3> writer, T1 arg1, T2 arg2, T3 arg3, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2, T3> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2, T3, T4>(Action<XmlWriter, T1, T2, T3, T4>, T1, T2, T3, T4, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2, T3, T4>(Action<XmlWriter, T1, T2, T3, T4> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2, T3, T4> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2, T3, T4, T5>(Action<XmlWriter, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2, T3, T4, T5>(Action<XmlWriter, T1, T2, T3, T4, T5> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2, T3, T4, T5> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2, T3, T4, T5, T6>(Action<XmlWriter, T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2, T3, T4, T5, T6>(Action<XmlWriter, T1, T2, T3, T4, T5, T6> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2, T3, T4, T5, T6> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2, T3, T4, T5, T6, T7>(Action<XmlWriter, T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2, T3, T4, T5, T6, T7>(Action<XmlWriter, T1, T2, T3, T4, T5, T6, T7> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2, T3, T4, T5, T6, T7> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . T7 arg7 The seventh parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . T7 The type of the seventh parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2, T3, T4, T5, T6, T7, T8>(Action<XmlWriter, T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2, T3, T4, T5, T6, T7, T8>(Action<XmlWriter, T1, T2, T3, T4, T5, T6, T7, T8> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2, T3, T4, T5, T6, T7, T8> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . T7 arg7 The seventh parameter of the delegate writer . T8 arg8 The eighth parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . T7 The type of the seventh parameter of the delegate writer . T8 The type of the eighth parameter of the delegate writer . | Improve this Doc CreateXml<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<XmlWriter, T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Action<XmlWriterSettings>) Creates and returns a XML stream by the specified delegate writer . Declaration public static Stream CreateXml<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<XmlWriter, T1, T2, T3, T4, T5, T6, T7, T8, T9> writer, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlWriter , T1, T2, T3, T4, T5, T6, T7, T8, T9> writer The delegate that will create an in-memory XML stream. T1 arg1 The first parameter of the delegate writer . T2 arg2 The second parameter of the delegate writer . T3 arg3 The third parameter of the delegate writer . T4 arg4 The fourth parameter of the delegate writer . T5 arg5 The fifth parameter of the delegate writer . T6 arg6 The sixth parameter of the delegate writer . T7 arg7 The seventh parameter of the delegate writer . T8 arg8 The eighth parameter of the delegate writer . T9 arg9 The ninth parameter of the delegate writer . System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.IO.Stream A System.IO.Stream holding the XML created by the delegate writer . Type Parameters Name Description T1 The type of the first parameter of the delegate writer . T2 The type of the second parameter of the delegate writer . T3 The type of the third parameter of the delegate writer . T4 The type of the fourth parameter of the delegate writer . T5 The type of the fifth parameter of the delegate writer . T6 The type of the sixth parameter of the delegate writer . T7 The type of the seventh parameter of the delegate writer . T8 The type of the eighth parameter of the delegate writer . T9 The type of the ninth parameter of the delegate writer . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.SqlClient.SqlQueryBuilder.html": {
    "href": "api/core/Cuemon.Data.SqlClient.SqlQueryBuilder.html",
    "title": "Class SqlQueryBuilder | Cuemon .NET Standard",
    "keywords": "Class SqlQueryBuilder A Microsoft SQL implementation of the QueryBuilder class. Inheritance System.Object QueryBuilder SqlQueryBuilder Inherited Members QueryBuilder.ReadLimit QueryBuilder.EnableReadLimit QueryBuilder.EnableTableAndColumnEncapsulation QueryBuilder.EnableDirtyReads QueryBuilder.TableName QueryBuilder.Columns QueryBuilder.KeyColumns QueryBuilder.GetQuery(QueryType) QueryBuilder.Append(String) QueryBuilder.Append(String, Object[]) QueryBuilder.ToString() Namespace : Cuemon.Data.SqlClient Assembly : Cuemon.Data.dll Syntax public class SqlQueryBuilder : QueryBuilder Constructors | Improve this Doc SqlQueryBuilder() Initializes a new instance of the SqlQueryBuilder class. Declaration public SqlQueryBuilder() | Improve this Doc SqlQueryBuilder(String, IDictionary<String, String>) Initializes a new instance of the SqlQueryBuilder class. Declaration public SqlQueryBuilder(string tableName, IDictionary<string, string> keyColumns) Parameters Type Name Description System.String tableName The name of the table or view. System.Collections.Generic.IDictionary < System.String , System.String > keyColumns The key columns to be used in this SqlQueryBuilder instance. | Improve this Doc SqlQueryBuilder(String, IDictionary<String, String>, IDictionary<String, String>) Initializes a new instance of the SqlQueryBuilder class. Declaration public SqlQueryBuilder(string tableName, IDictionary<string, string> keyColumns, IDictionary<string, string> columns) Parameters Type Name Description System.String tableName The name of the table or view. System.Collections.Generic.IDictionary < System.String , System.String > keyColumns The key columns to be used in this SqlQueryBuilder instance. System.Collections.Generic.IDictionary < System.String , System.String > columns The none-key columns to be used in this SqlQueryBuilder instance. Methods | Improve this Doc GetQuery(QueryType, String) Create and returns the builded query from the specified QueryType . Declaration public override string GetQuery(QueryType queryType, string tableName) Parameters Type Name Description QueryType queryType Type of the query to create. System.String tableName The name of the table or view. Overrides the class wide tableName. Returns Type Description System.String Overrides QueryBuilder.GetQuery(QueryType, String) Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ContentTimeBasedOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ContentTimeBasedOptions.html",
    "title": "Class ContentTimeBasedOptions | Cuemon .NET Standard",
    "keywords": "Class ContentTimeBasedOptions Specifies options that is related to the ContentTimeBasedObjectResult<T> . Inheritance System.Object ContentTimeBasedOptions Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class ContentTimeBasedOptions Constructors | Improve this Doc ContentTimeBasedOptions() Initializes a new instance of the ContentTimeBasedOptions class. Declaration public ContentTimeBasedOptions() Properties | Improve this Doc IsWeak Gets or sets a value indicating whether this instance has a weak validation. Declaration public bool IsWeak { get; set; } Property Value Type Description System.Boolean true if this instance has a weak validation; otherwise, false . | Improve this Doc Modified Gets or sets the modified date-time value of an object. Declaration public DateTime? Modified { get; set; } Property Value Type Description System.Nullable < System.DateTime > The modified date-time value of an object. Methods | Improve this Doc GetValidation(Byte[]) Gets the strength of the checksum validation. Declaration public ChecksumStrength GetValidation(byte[] checksum) Parameters Type Name Description System.Byte [] checksum The checksum to determine the strength of. Returns Type Description ChecksumStrength One of the ChecksumStrength values. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.HeadersConverter.html": {
    "href": "api/core/Cuemon.Web.HeadersConverter.html",
    "title": "Class HeadersConverter | Cuemon .NET Standard",
    "keywords": "Class HeadersConverter This utility class is designed to make HTTP request headers specific System.Collections.Specialized.NameValueCollection related conversions easier to work with. Inheritance System.Object HeadersConverter Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public static class HeadersConverter Methods | Improve this Doc FromDictionary(IDictionary<String, String[]>) Converts the specified headers into its System.String equivalent. Declaration public static string FromDictionary(IDictionary<string, string[]> headers) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String []> headers The request-header values to convert. Returns Type Description System.String A System.String equivalent to the values in the headers . | Improve this Doc FromNameValueCollection(NameValueCollection) Converts the specified headers into its System.String equivalent. Declaration public static string FromNameValueCollection(NameValueCollection headers) Parameters Type Name Description System.Collections.Specialized.NameValueCollection headers The request-header values to convert. Returns Type Description System.String A System.String equivalent to the values in the headers . | Improve this Doc FromString(String) Converts the specified headers into its System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection FromString(string headers) Parameters Type Name Description System.String headers The request-header values to convert. Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the values in the headers . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.FormUtility.html": {
    "href": "api/core/Cuemon.Web.FormUtility.html",
    "title": "Class FormUtility | Cuemon .NET Standard",
    "keywords": "Class FormUtility This utility class is designed to make HTTP request form-data operations easier to work with. Inheritance System.Object FormUtility Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public static class FormUtility Methods | Improve this Doc Combine(NameValueCollection[]) Combines the specified form-data values into one System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection Combine(params NameValueCollection[] values) Parameters Type Name Description System.Collections.Specialized.NameValueCollection [] values A variable number of form-data values . Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the combined form-data values . | Improve this Doc Combine(String[]) Combines the specified form-data values into one System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection Combine(params string[] values) Parameters Type Name Description System.String [] values A variable number of form-data values . Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the combined form-data values . | Improve this Doc Remove(NameValueCollection, String[]) Sanitizes the form so that all keys (with matching values) is removed. Declaration public static NameValueCollection Remove(NameValueCollection form, params string[] keys) Parameters Type Name Description System.Collections.Specialized.NameValueCollection form The form-data values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection form-data equivalent of form . | Improve this Doc Remove(String, String[]) Sanitizes the form so that all keys (with matching values) is removed. Declaration public static NameValueCollection Remove(string form, params string[] keys) Parameters Type Name Description System.String form The form-data values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection form-data equivalent of form . | Improve this Doc RemoveDublets(NameValueCollection, String[]) Sanitizes the form so that all keys is assured only the latest value applied. Declaration public static NameValueCollection RemoveDublets(NameValueCollection form, params string[] keys) Parameters Type Name Description System.Collections.Specialized.NameValueCollection form The form-data values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection form-data equivalent of form . | Improve this Doc RemoveDublets(String, String[]) Sanitizes the form so that all keys is assured only the latest value applied. Declaration public static NameValueCollection RemoveDublets(string form, params string[] keys) Parameters Type Name Description System.String form The form-data values to sanitize. System.String [] keys The keys to use in the sanitation process. Returns Type Description System.Collections.Specialized.NameValueCollection A sanitized System.Collections.Specialized.NameValueCollection form-data equivalent of form . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.FormConverter.html": {
    "href": "api/core/Cuemon.Web.FormConverter.html",
    "title": "Class FormConverter | Cuemon .NET Standard",
    "keywords": "Class FormConverter This utility class is designed to make HTTP request form-data specific System.Collections.Specialized.NameValueCollection related conversions easier to work with. Inheritance System.Object FormConverter Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public static class FormConverter Methods | Improve this Doc FromDictionary(IDictionary<String, String[]>) Converts the specified form into its System.String equivalent. Declaration public static string FromDictionary(IDictionary<string, string[]> form) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String []> form The form-data values to convert. Returns Type Description System.String A System.String equivalent to the values in the form . | Improve this Doc FromNameValueCollection(NameValueCollection) Converts the specified form into its System.String equivalent. Declaration public static string FromNameValueCollection(NameValueCollection form) Parameters Type Name Description System.Collections.Specialized.NameValueCollection form The form-data values to convert. Returns Type Description System.String A System.String equivalent to the values in the form . | Improve this Doc FromString(String) Converts the specified form into its System.Collections.Specialized.NameValueCollection equivalent. Declaration public static NameValueCollection FromString(string form) Parameters Type Name Description System.String form The form-data values to convert. Returns Type Description System.Collections.Specialized.NameValueCollection A System.Collections.Specialized.NameValueCollection equivalent to the values in the form . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-4.html": {
    "href": "api/core/Cuemon.Template-4.html",
    "title": "Class Template<T1, T2, T3, T4> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4> Represents a Template with four generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template<T1, T2, T3, T4> Template<T1, T2, T3, T4, T5> Inherited Members Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4> : Template<T1, T2, T3> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4) Initializes a new instance of the Template<T1, T2, T3, T4> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . Properties | Improve this Doc Arg4 Gets or sets the fourth parameter of this instance. Declaration public T4 Arg4 { get; set; } Property Value Type Description T4 The fourth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-3.html": {
    "href": "api/core/Cuemon.Template-3.html",
    "title": "Class Template<T1, T2, T3> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3> Represents a Template with three generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template<T1, T2, T3> Template<T1, T2, T3, T4> Inherited Members Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3> : Template<T1, T2> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3) Initializes a new instance of the Template<T1, T2, T3> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . Properties | Improve this Doc Arg3 Gets or sets the third parameter of this instance. Declaration public T3 Arg3 { get; set; } Property Value Type Description T3 The third parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-20.html": {
    "href": "api/core/Cuemon.Template-20.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Represents a Template with twenty generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Arg19 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Arg18 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Arg17 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Arg16 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Arg15 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Arg14 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Arg13 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Arg12 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . T13 The type of the thirteenth parameter of this Template . T14 The type of the fourteenth parameter of this Template . T15 The type of the fifteenth parameter of this Template . T16 The type of the sixteenth parameter of this Template . T17 The type of the seventeenth parameter of this Template . T18 The type of the eighteenth parameter of this Template . T19 The type of the nineteenth parameter of this Template . T20 The type of the twentieth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19, T20 arg20) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . T13 arg13 The value of the thirteenth parameter of this Template . T14 arg14 The value of the fourteenth parameter of this Template . T15 arg15 The value of the fifteenth parameter of this Template . T16 arg16 The value of the sixteenth parameter of this Template . T17 arg17 The value of the seventeenth parameter of this Template . T18 arg18 The value of the eighteenth parameter of this Template . T19 arg19 The value of the nineteenth parameter of this Template . T20 arg20 The value of the twentieth parameter of this Template . Properties | Improve this Doc Arg20 Gets or sets the twentieth parameter of this instance. Declaration public T20 Arg20 { get; set; } Property Value Type Description T20 The twentieth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-2.html": {
    "href": "api/core/Cuemon.Template-2.html",
    "title": "Class Template<T1, T2> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2> Represents a Template with two generic values. Inheritance System.Object Template Template <T1> Template<T1, T2> Template<T1, T2, T3> Inherited Members Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2> : Template<T1> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2) Initializes a new instance of the Template<T1, T2> class. Declaration public Template(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . Properties | Improve this Doc Arg2 Gets or sets the second parameter of this instance. Declaration public T2 Arg2 { get; set; } Property Value Type Description T2 The second parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Web.JsonWebToken.html": {
    "href": "api/core/Cuemon.Security.Web.JsonWebToken.html",
    "title": "Class JsonWebToken | Cuemon .NET Standard",
    "keywords": "Class JsonWebToken Represents a simple implementation of JSON Web Token that is based on the standard RFC 7519 method for communicating claims securely between two parties. This class cannot be inherited. Inheritance System.Object JsonWebToken Namespace : Cuemon.Security.Web Assembly : Cuemon.Security.dll Syntax public sealed class JsonWebToken Constructors | Improve this Doc JsonWebToken(JsonWebTokenHeader, JsonWebTokenPayload) Initializes a new instance of the JsonWebToken class that is . Declaration public JsonWebToken(JsonWebTokenHeader header, JsonWebTokenPayload payload) Parameters Type Name Description JsonWebTokenHeader header The first part of the JSON Web Token; the header information. JsonWebTokenPayload payload The second part of the JSON Web Token; the payload information. | Improve this Doc JsonWebToken(JsonWebTokenHeader, JsonWebTokenPayload, Byte[]) Initializes a new instance of the JsonWebToken class. Declaration public JsonWebToken(JsonWebTokenHeader header, JsonWebTokenPayload payload, byte[] secret) Parameters Type Name Description JsonWebTokenHeader header The first part of the JSON Web Token; the header information. JsonWebTokenPayload payload The second part of the JSON Web Token; the payload information. System.Byte [] secret The optional secret that is used in the last part of the JSON Web Token; the signature. | Improve this Doc JsonWebToken(String, String, JsonWebTokenHashAlgorithm, Byte[]) Initializes a new instance of the JsonWebToken class. Declaration public JsonWebToken(string base64UrlEncodedHeader, string base64UrlEncodedPayload, JsonWebTokenHashAlgorithm algorithm, byte[] secret) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. System.String base64UrlEncodedPayload The payload information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. JsonWebTokenHashAlgorithm algorithm The JsonWebTokenHashAlgorithm to use when signing the JSON Web Token. System.Byte [] secret The secret that is used when signing the JSON Web Token. Properties | Improve this Doc Algorithm Gets the JsonWebTokenHashAlgorithm of this JWT. Declaration public JsonWebTokenHashAlgorithm Algorithm { get; } Property Value Type Description JsonWebTokenHashAlgorithm The JsonWebTokenHashAlgorithm of this JWT. | Improve this Doc Base64UrlEncodedHeader Gets the header information of this JWT. Declaration public string Base64UrlEncodedHeader { get; } Property Value Type Description System.String The header information of this JWT. | Improve this Doc Base64UrlEncodedPayload Gets the payload information of this JWT. Declaration public string Base64UrlEncodedPayload { get; } Property Value Type Description System.String The payload information of this JWT. | Improve this Doc Secret Gets the secret (if any) of this JWT. Declaration public byte[] Secret { get; } Property Value Type Description System.Byte [] The secret (if any) of this JWT. Methods | Improve this Doc ComputeSignature() Computes the signature of the JSON Web Token. Declaration public string ComputeSignature() Returns Type Description System.String A System.String that represent the signature of a JSON Web Token. | Improve this Doc ComputeSignature(String) Computes the signature of the JSON Web Token. Declaration public string ComputeSignature(string base64UrlEncodedHeader) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. Returns Type Description System.String A System.String that represent the signature of a JSON Web Token. | Improve this Doc ComputeSignature(String, String) Computes the signature of the JSON Web Token. Declaration public string ComputeSignature(string base64UrlEncodedHeader, string base64UrlEncodedPayload) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. System.String base64UrlEncodedPayload The payload information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. Returns Type Description System.String A System.String that represent the signature of a JSON Web Token. | Improve this Doc ComputeSignature(String, String, JsonWebTokenHashAlgorithm) Computes the signature of the JSON Web Token. Declaration public string ComputeSignature(string base64UrlEncodedHeader, string base64UrlEncodedPayload, JsonWebTokenHashAlgorithm algorithm) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. System.String base64UrlEncodedPayload The payload information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. JsonWebTokenHashAlgorithm algorithm The JsonWebTokenHashAlgorithm to use when signing the JSON Web Token. Returns Type Description System.String A System.String that represent the signature of a JSON Web Token. | Improve this Doc ComputeSignature(String, String, JsonWebTokenHashAlgorithm, Byte[]) Computes the signature of the JSON Web Token. Declaration public string ComputeSignature(string base64UrlEncodedHeader, string base64UrlEncodedPayload, JsonWebTokenHashAlgorithm algorithm, byte[] secret) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. System.String base64UrlEncodedPayload The payload information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. JsonWebTokenHashAlgorithm algorithm The JsonWebTokenHashAlgorithm to use when signing the JSON Web Token. System.Byte [] secret The secret that is used when signing the JSON Web Token. Returns Type Description System.String A System.String that represent the signature of a JSON Web Token. | Improve this Doc Tokenize() Assemble the specified Base64UrlEncodedHeader and Base64UrlEncodedPayload to represent the first and second part of the JSON Web Token. Declaration public string Tokenize() Returns Type Description System.String A System.String that represent a partial JSON Web Token that does not include the signature information. | Improve this Doc Tokenize(String, String) Assemble the specified base64UrlEncodedHeader and base64UrlEncodedPayload to represent the first and second part of the JSON Web Token. Declaration public string Tokenize(string base64UrlEncodedHeader, string base64UrlEncodedPayload) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. System.String base64UrlEncodedPayload The payload information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. Returns Type Description System.String A System.String that represent a partial JSON Web Token that does not include the signature information. | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Remarks Calling this method provides the actual JSON Web Token. | Improve this Doc ToString(String) Returns a System.String that represents this instance. Declaration public string ToString(string base64UrlEncodedHeader) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. Returns Type Description System.String A System.String that represents this instance. | Improve this Doc ToString(String, String) Returns a System.String that represents this instance. Declaration public string ToString(string base64UrlEncodedHeader, string base64UrlEncodedPayload) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. System.String base64UrlEncodedPayload The payload information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. Returns Type Description System.String A System.String that represents this instance. | Improve this Doc ToString(String, String, JsonWebTokenHashAlgorithm) Returns a System.String that represents this instance. Declaration public string ToString(string base64UrlEncodedHeader, string base64UrlEncodedPayload, JsonWebTokenHashAlgorithm algorithm) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. System.String base64UrlEncodedPayload The payload information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. JsonWebTokenHashAlgorithm algorithm The JsonWebTokenHashAlgorithm to use when signing the JSON Web Token. Returns Type Description System.String A System.String that represents this instance. | Improve this Doc ToString(String, String, JsonWebTokenHashAlgorithm, Byte[]) Returns a System.String that represents this instance. Declaration public string ToString(string base64UrlEncodedHeader, string base64UrlEncodedPayload, JsonWebTokenHashAlgorithm algorithm, byte[] secret) Parameters Type Name Description System.String base64UrlEncodedHeader The header information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. System.String base64UrlEncodedPayload The payload information of the JSON Web Token; encoded as a Base64 structure usable for transmission on the URL. JsonWebTokenHashAlgorithm algorithm The JsonWebTokenHashAlgorithm to use when signing the JSON Web Token. System.Byte [] secret The secret that is used when signing the JSON Web Token. Returns Type Description System.String A System.String that represents this instance. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DateSpan.html": {
    "href": "api/core/Cuemon.DateSpan.html",
    "title": "Struct DateSpan | Cuemon .NET Standard",
    "keywords": "Struct DateSpan Represents a System.DateTime interval between two System.DateTime values. Implements System.IEquatable < DateSpan > Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public struct DateSpan : IEquatable<DateSpan> Constructors | Improve this Doc DateSpan(DateTime) Initializes a new instance of the DateSpan structure with a default System.DateTime value set to System.DateTime.Today . Declaration public DateSpan(DateTime start) Parameters Type Name Description System.DateTime start A System.DateTime value for the DateSpan calculation. | Improve this Doc DateSpan(DateTime, DateTime) Initializes a new instance of the DateSpan structure with a default Cuemon.DateSpan.Calendar value from the System.Globalization.CultureInfo.InvariantCulture class. Declaration public DateSpan(DateTime start, DateTime end) Parameters Type Name Description System.DateTime start A System.DateTime value for the DateSpan calculation. System.DateTime end A System.DateTime value for the DateSpan calculation. | Improve this Doc DateSpan(DateTime, DateTime, Calendar) Initializes a new instance of the DateSpan structure. Declaration public DateSpan(DateTime start, DateTime end, Calendar calendar) Parameters Type Name Description System.DateTime start A System.DateTime value for the DateSpan calculation. System.DateTime end A System.DateTime value for the DateSpan calculation. System.Globalization.Calendar calendar The Cuemon.DateSpan.Calendar that applies to this DateSpan . Properties | Improve this Doc Days Gets the number of days represented by the current DateSpan structure. Declaration public int Days { get; } Property Value Type Description System.Int32 The number of days represented by the current DateSpan structure. | Improve this Doc Hours Gets the number of hours represented by the current DateSpan structure. Declaration public int Hours { get; } Property Value Type Description System.Int32 The number of hours represented by the current DateSpan structure. | Improve this Doc Milliseconds Gets the number of milliseconds represented by the current DateSpan structure. Declaration public int Milliseconds { get; } Property Value Type Description System.Int32 The number of milliseconds represented by the current DateSpan structure. | Improve this Doc Minutes Gets the number of minutes represented by the current DateSpan structure. Declaration public int Minutes { get; } Property Value Type Description System.Int32 The number of minutes represented by the current DateSpan structure. | Improve this Doc Months Gets the number of months represented by the current DateSpan structure. Declaration public int Months { get; } Property Value Type Description System.Int32 The number of months represented by the current DateSpan structure. | Improve this Doc Seconds Gets the number of seconds represented by the current DateSpan structure. Declaration public int Seconds { get; } Property Value Type Description System.Int32 The number of seconds represented by the current DateSpan structure. | Improve this Doc Ticks Gets the number of ticks represented by the current DateSpan structure. Declaration public long Ticks { get; } Property Value Type Description System.Int64 The number of ticks represented by the current DateSpan structure. | Improve this Doc TotalDays Gets the total number of days represented by the current DateSpan structure. Declaration public int TotalDays { get; } Property Value Type Description System.Int32 The total number of days represented by the current DateSpan structure. | Improve this Doc TotalHours Gets the total number of hours represented by the current DateSpan structure. Declaration public long TotalHours { get; } Property Value Type Description System.Int64 The total number of hours represented by the current DateSpan structure. | Improve this Doc TotalMilliseconds Gets the total number of milliseconds represented by the current DateSpan structure. Declaration public long TotalMilliseconds { get; } Property Value Type Description System.Int64 The total number of milliseconds represented by the current DateSpan structure. | Improve this Doc TotalMinutes Gets the total number of minutes represented by the current DateSpan structure. Declaration public long TotalMinutes { get; } Property Value Type Description System.Int64 The total number of minutes represented by the current DateSpan structure. | Improve this Doc TotalMonths Gets the total number of months represented by the current DateSpan structure. Declaration public int TotalMonths { get; } Property Value Type Description System.Int32 The total number of months represented by the current DateSpan structure. | Improve this Doc TotalSeconds Gets the total number of seconds represented by the current DateSpan structure. Declaration public long TotalSeconds { get; } Property Value Type Description System.Int64 The total number of seconds represented by the current DateSpan structure. | Improve this Doc Years Gets the number of years represented by the current DateSpan structure. Declaration public int Years { get; } Property Value Type Description System.Int32 The number of years represented by the current DateSpan structure. Methods | Improve this Doc Equals(DateSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DateSpan other) Parameters Type Name Description DateSpan other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc GetWeeks() Calculates the number of weeks represented by the current DateSpan structure. Declaration public int GetWeeks() Returns Type Description System.Int32 Calculates the number of weeks represented by the current DateSpan structure. | Improve this Doc Parse(String) Constructs a new DateSpan object from a date and time interval specified in a string. Declaration public static DateSpan Parse(string start) Parameters Type Name Description System.String start A string that specifies the starting date and time value for the DateSpan interval. Returns Type Description DateSpan A DateSpan that corresponds to start and System.DateTime.Today for the last part of the interval. | Improve this Doc Parse(String, String) Constructs a new DateSpan object from a date and time interval specified in a string. Declaration public static DateSpan Parse(string start, string end) Parameters Type Name Description System.String start A string that specifies the starting date and time value for the DateSpan interval. System.String end A string that specifies the ending date and time value for the DateSpan interval. Returns Type Description DateSpan A DateSpan that corresponds to start and end of the interval. | Improve this Doc Parse(String, String, CultureInfo) Constructs a new DateSpan object from a date and time interval specified in a string. Declaration public static DateSpan Parse(string start, string end, CultureInfo culture) Parameters Type Name Description System.String start A string that specifies the starting date and time value for the DateSpan interval. System.String end A string that specifies the ending date and time value for the DateSpan interval. System.Globalization.CultureInfo culture A System.Globalization.CultureInfo to resolve a Cuemon.DateSpan.Calendar object from. Returns Type Description DateSpan A DateSpan that corresponds to start and end of the interval. | Improve this Doc ToString() Converts the value of the current DateSpan object to its equivalent string representation. Declaration public override string ToString() Returns Type Description System.String The System.String representation of the current DateSpan value. Overrides System.ValueType.ToString() Remarks The returned string has the following format: y*:MM:dd:hh:mm:ss.f*, where y* is the actual calculated years and f* is the actual calculated milliseconds. Operators | Improve this Doc Equality(DateSpan, DateSpan) Indicates whether two DateSpan instances are equal. Declaration public static bool operator ==(DateSpan dateSpan1, DateSpan dateSpan2) Parameters Type Name Description DateSpan dateSpan1 The first date interval to compare. DateSpan dateSpan2 The second date interval to compare. Returns Type Description System.Boolean true if the values of dateSpan1 and dateSpan2 are equal; otherwise, false. | Improve this Doc Inequality(DateSpan, DateSpan) Indicates whether two DateSpan instances are not equal. Declaration public static bool operator !=(DateSpan dateSpan1, DateSpan dateSpan2) Parameters Type Name Description DateSpan dateSpan1 The first date interval to compare. DateSpan dateSpan2 The second date interval to compare. Returns Type Description System.Boolean true if the values of dateSpan1 and dateSpan2 are not equal; otherwise, false. Implements System.IEquatable<T> Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.InOperator-1.html": {
    "href": "api/core/Cuemon.Data.InOperator-1.html",
    "title": "Class InOperator<T> | Cuemon .NET Standard",
    "keywords": "Class InOperator<T> Provides a safe way to include a Transact-SQL WHERE clause with an IN operator. Inheritance System.Object InOperator<T> SqlInOperator<T> Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public abstract class InOperator<T> Type Parameters Name Description T The type of the data in the IN operation of the WHERE clause. Constructors | Improve this Doc InOperator(T[]) Initializes a new instance of the InOperator<T> class. Declaration protected InOperator(params T[] expressions) Parameters Type Name Description T[] expressions The expressions to test for a match in the IN operator of the WHERE clause. | Improve this Doc InOperator(IEnumerable<T>) Initializes a new instance of the InOperator<T> class. Declaration protected InOperator(IEnumerable<T> expressions) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> expressions The expressions to test for a match in the IN operator of the WHERE clause. Properties | Improve this Doc Arguments Gets the arguments for the IN operator. Declaration public string Arguments { get; } Property Value Type Description System.String The arguments for the IN operator. Remarks Default format of the arguments is @param0, @param1, @param2, etc. and is controlled by the ArgumentsSelector(T, Int32) method. | Improve this Doc ParameterName Gets the name of the parameter that will be concatenated with index of both ArgumentsSelector(T, Int32) and ParametersSelector(T, Int32) . Declaration protected string ParameterName { get; } Property Value Type Description System.String The name of the parameter that will be concatenated with index . | Improve this Doc Parameters Gets the parameters for the IN operator. Declaration public DbParameter[] Parameters { get; } Property Value Type Description System.Data.Common.DbParameter [] The parameters for the IN operator. Methods | Improve this Doc ArgumentsSelector(T, Int32) A callback method that is responsible for the values passed to the Arguments property. Declaration protected virtual string ArgumentsSelector(T expression, int index) Parameters Type Name Description T expression An expression to test for a match in the IN operator. System.Int32 index The index of the expression . Returns Type Description System.String A System.String representing the argument of the expression . Remarks Default is @param{index}. | Improve this Doc ParametersSelector(T, Int32) A callback method that is responsible for the values passed to the Parameters property. Declaration protected abstract DbParameter ParametersSelector(T expression, int index) Parameters Type Name Description T expression An expression to test for a match in the IN operator. System.Int32 index The index of the expression . Returns Type Description System.Data.Common.DbParameter An System.Data.Common.DbParameter representing the value of the expression . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.IDataConnection.html": {
    "href": "api/core/Cuemon.Data.IDataConnection.html",
    "title": "Interface IDataConnection | Cuemon .NET Standard",
    "keywords": "Interface IDataConnection Represents a connection to a data source. Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public interface IDataConnection Properties | Improve this Doc Address Gets or sets the server address of the connection. Declaration string Address { get; set; } Property Value Type Description System.String The server address of the connection. | Improve this Doc NetworkLibrary Gets or sets the network library of the connection. Declaration string NetworkLibrary { get; set; } Property Value Type Description System.String The network library of the connection. | Improve this Doc Password Gets or sets the password of the connection. Declaration string Password { get; set; } Property Value Type Description System.String The password of the connection. | Improve this Doc Timeout Gets or sets the time to wait while trying to establish a connection before terminating the attempt and generating an error. Declaration TimeSpan Timeout { get; set; } Property Value Type Description System.TimeSpan The timespan to wait for a connection to open. The default value is 10 seconds. | Improve this Doc UserId Gets or sets the user id of the connection. Declaration string UserId { get; set; } Property Value Type Description System.String The user id of the connection. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataDependency.html": {
    "href": "api/core/Cuemon.Data.DataDependency.html",
    "title": "Class DataDependency | Cuemon .NET Standard",
    "keywords": "Class DataDependency This DataDependency class will monitor any changes occurred to an underlying data source while notifying subscribing objects. Inheritance System.Object Dependency DataDependency Implements IDependency Inherited Members Dependency.DependencyChanged Dependency.UtcLastModified Dependency.Create<TResult>() Dependency.Create<T, TResult>(T) Dependency.Create<T1, T2, TResult>(T1, T2) Dependency.Create<T1, T2, T3, TResult>(T1, T2, T3) Dependency.Create<T1, T2, T3, T4, TResult>(T1, T2, T3, T4) Dependency.Create<T1, T2, T3, T4, T5, TResult>(T1, T2, T3, T4, T5) Dependency.SetUtcLastModified(DateTime) Dependency.OnDependencyChangedRaised(DependencyEventArgs) Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class DataDependency : Dependency, IDependency Constructors | Improve this Doc DataDependency(DataManager, IDataCommand, DbParameter[]) Initializes a new instance of the DataDependency class. Declaration public DataDependency(DataManager manager, IDataCommand command, params DbParameter[] parameters) Parameters Type Name Description DataManager manager The DataManager to be used for the underlying data operations. IDataCommand command The IDataCommand to execute and monitor for changes. System.Data.Common.DbParameter [] parameters An optional sequence of System.Data.Common.DbParameter to use with the associated command . Remarks The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. | Improve this Doc DataDependency(DataManager, IDataCommand, TimeSpan, DbParameter[]) Initializes a new instance of the DataDependency class. Declaration public DataDependency(DataManager manager, IDataCommand command, TimeSpan period, params DbParameter[] parameters) Parameters Type Name Description DataManager manager The DataManager to be used for the underlying data operations. IDataCommand command The IDataCommand to execute and monitor for changes. System.TimeSpan period The time interval between periodic signaling for changes to the specified command by the associated DataWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.Data.Common.DbParameter [] parameters An optional sequence of System.Data.Common.DbParameter to use with the associated command . Remarks The signaling is default delayed 15 seconds before first invoke. | Improve this Doc DataDependency(DataManager, IDataCommand, TimeSpan, TimeSpan, DbParameter[]) Initializes a new instance of the DataDependency class. Declaration public DataDependency(DataManager manager, IDataCommand command, TimeSpan dueTime, TimeSpan period, params DbParameter[] parameters) Parameters Type Name Description DataManager manager The DataManager to be used for the underlying data operations. IDataCommand command The IDataCommand to execute and monitor for changes. System.TimeSpan dueTime The amount of time to delay before the associated DataWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling for changes to the specified command by the associated DataWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.Data.Common.DbParameter [] parameters An optional sequence of System.Data.Common.DbParameter to use with the associated command . | Improve this Doc DataDependency(DataManager, IDataCommand, TimeSpan, TimeSpan, TimeSpan, DbParameter[]) Initializes a new instance of the DataDependency class. Declaration public DataDependency(DataManager manager, IDataCommand command, TimeSpan dueTime, TimeSpan period, TimeSpan dueTimeOnChanged, params DbParameter[] parameters) Parameters Type Name Description DataManager manager The DataManager to be used for the underlying data operations. IDataCommand command The IDataCommand to execute and monitor for changes. System.TimeSpan dueTime The amount of time to delay before the associated DataWatcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling for changes to the specified command by the associated DataWatcher . Specify negative one (-1) milliseconds to disable periodic signaling. System.TimeSpan dueTimeOnChanged The amount of time to postpone a Changed event. Specify zero (0) to disable postponing. System.Data.Common.DbParameter [] parameters An optional sequence of System.Data.Common.DbParameter to use with the associated command . Properties | Improve this Doc HasChanged Gets a value indicating whether the Dependency object has changed. Declaration public override bool HasChanged { get; } Property Value Type Description System.Boolean true if the Dependency object has changed; otherwise, false . Overrides Dependency.HasChanged Methods | Improve this Doc Start() Starts and performs the necessary dependency tasks of this instance. Declaration public override void Start() Overrides Dependency.Start() Implements IDependency Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataConnection.html": {
    "href": "api/core/Cuemon.Data.DataConnection.html",
    "title": "Class DataConnection | Cuemon .NET Standard",
    "keywords": "Class DataConnection Represents a connection to a database. Inheritance System.Object System.Data.Common.DbConnection DataConnection Implements System.Data.IDbConnection System.IDisposable IDataConnection Inherited Members System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel) System.Data.Common.DbConnection.BeginTransaction() System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel) System.Data.Common.DbConnection.CreateCommand() System.Data.Common.DbConnection.CreateDbCommand() System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs) System.Data.Common.DbConnection.OpenAsync() System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken) System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction() System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel) System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand() System.Data.Common.DbConnection.Dispose() System.Data.Common.DbConnection.Dispose(System.Boolean) System.Data.Common.DbConnection.DataSource System.Data.Common.DbConnection.ServerVersion System.Data.Common.DbConnection.StateChange Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public abstract class DataConnection : DbConnection, IDbConnection, IDisposable, IDataConnection Constructors | Improve this Doc DataConnection() Initializes a new instance of the DataConnection class. Declaration protected DataConnection() | Improve this Doc DataConnection(String) Initializes a new instance of the DataConnection class. Declaration protected DataConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string used to establish the connection. | Improve this Doc DataConnection(String, String, String, String, String) Initializes a new instance of the DataConnection class. Declaration protected DataConnection(string database, string address, string userId, string password, string networkLibrary) Parameters Type Name Description System.String database The database of the connection. System.String address The address of the connection. System.String userId The user id of the connection. System.String password The password of the connection. System.String networkLibrary The network library of the connection. | Improve this Doc DataConnection(String, String, String, String, String, TimeSpan) Initializes a new instance of the DataConnection class. Declaration protected DataConnection(string database, string address, string userId, string password, string networkLibrary, TimeSpan timeout) Parameters Type Name Description System.String database The database of the connection. System.String address The address of the connection. System.String userId The user id of the connection. System.String password The password of the connection. System.String networkLibrary The network library of the connection. System.TimeSpan timeout The timespan to wait of the connection to open. Properties | Improve this Doc Address Gets or sets the server address of the connection. Declaration public string Address { get; set; } Property Value Type Description System.String The server address of the connection. | Improve this Doc ConnectionString Gets or sets the string used to open the connection. Declaration public override string ConnectionString { get; set; } Property Value Type Description System.String Overrides System.Data.Common.DbConnection.ConnectionString | Improve this Doc ConnectionTimeout Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error. Preserved for backward compatibility. Declaration public override int ConnectionTimeout { get; } Property Value Type Description System.Int32 The time (in seconds) to wait for a connection to open. The value is taken from the Timeout value, and is default 10 seconds. Overrides System.Data.Common.DbConnection.ConnectionTimeout | Improve this Doc Database Gets or sets the database of the connection. Declaration public override string Database { get; } Property Value Type Description System.String The database of the connection. Overrides System.Data.Common.DbConnection.Database | Improve this Doc NetworkLibrary Gets or sets the network library of the connection. Declaration public string NetworkLibrary { get; set; } Property Value Type Description System.String The network library of the connection. | Improve this Doc Password Gets or sets the password of the connection. Declaration public string Password { get; set; } Property Value Type Description System.String The password of the connection. | Improve this Doc State Gets the current state of the connection. Declaration public abstract override ConnectionState State { get; } Property Value Type Description System.Data.ConnectionState Overrides System.Data.Common.DbConnection.State | Improve this Doc Timeout Gets or sets the time to wait while trying to establish a connection before terminating the attempt and generating an error. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description System.TimeSpan The timespan to wait for a connection to open. The default value is 10 seconds. | Improve this Doc UserId Gets or sets the user id of the connection. Declaration public string UserId { get; set; } Property Value Type Description System.String The user id of the connection. Methods | Improve this Doc ChangeDatabase(String) Changes the current database for an open Connection object. Declaration public abstract override void ChangeDatabase(string databaseName) Parameters Type Name Description System.String databaseName The name of the database to use in place of the current database. Overrides System.Data.Common.DbConnection.ChangeDatabase(System.String) | Improve this Doc Close() Closes the connection to the database. Declaration public abstract override void Close() Overrides System.Data.Common.DbConnection.Close() | Improve this Doc GetConnectionString(DbConnection) Renders a connection string from objects with the implemented IDataConnection interface. Declaration public static string GetConnectionString(DbConnection dataConnection) Parameters Type Name Description System.Data.Common.DbConnection dataConnection The data connection interface. Returns Type Description System.String A connection string. | Improve this Doc Open() Opens a database connection with the settings specified by the ConnectionString property of the provider-specific Connection object. Declaration public abstract override void Open() Overrides System.Data.Common.DbConnection.Open() | Improve this Doc ToString() Renders the properties of this class to a connection string (if no \"manuel\" connectionString has been specified). If ConfigurationElement has been set, values are derived from this object. Declaration public override string ToString() Returns Type Description System.String A connection string. Overrides System.Object.ToString() Implements System.Data.IDbConnection System.IDisposable IDataConnection Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ContentBasedOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ContentBasedOptions.html",
    "title": "Class ContentBasedOptions | Cuemon .NET Standard",
    "keywords": "Class ContentBasedOptions Specifies options that is related to the ContentBasedObjectResult<T> . Inheritance System.Object ContentBasedOptions Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class ContentBasedOptions Constructors | Improve this Doc ContentBasedOptions() Initializes a new instance of the ContentBasedOptions class. Declaration public ContentBasedOptions() Remarks The following table shows the initial property values for an instance of ContentBasedOptions . Property Initial Value IsWeak false Properties | Improve this Doc IsWeak Gets or sets a value indicating whether this instance has a weak validation. Declaration public bool IsWeak { get; set; } Property Value Type Description System.Boolean true if this instance has a weak validation; otherwise, false . Methods | Improve this Doc GetValidation(Byte[]) Gets the strength of the checksum validation. Declaration public ChecksumStrength GetValidation(byte[] checksum) Parameters Type Name Description System.Byte [] checksum The checksum to determine the strength of. Returns Type Description ChecksumStrength One of the ChecksumStrength values. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlUtilityExtensions.html": {
    "href": "api/core/Cuemon.Xml.XmlUtilityExtensions.html",
    "title": "Class XmlUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlUtilityExtensions Extension methods for the XmlUtility class. Inheritance System.Object XmlUtilityExtensions Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlUtilityExtensions Methods | Improve this Doc EscapeXml(String) Escapes the given XML System.String . Declaration public static string EscapeXml(this string value) Parameters Type Name Description System.String value The XML System.String to escape. Returns Type Description System.String The input value with an escaped equivalent. | Improve this Doc RemoveXmlNamespaceDeclarations(Stream) Remove the XML namespace declarations from the specified System.IO.Stream value . Declaration public static Stream RemoveXmlNamespaceDeclarations(this Stream value) Parameters Type Name Description System.IO.Stream value An XML System.IO.Stream to purge namespace declarations from. Returns Type Description System.IO.Stream A System.IO.Stream object representing the specified value but with no namespace declarations. | Improve this Doc RemoveXmlNamespaceDeclarations(Stream, Boolean) Remove the XML namespace declarations from the specified System.IO.Stream value . Declaration public static Stream RemoveXmlNamespaceDeclarations(this Stream value, bool omitXmlDeclaration) Parameters Type Name Description System.IO.Stream value An XML System.IO.Stream to purge namespace declarations from. System.Boolean omitXmlDeclaration if set to true omit the XML declaration; otherwise false . The default is false. Returns Type Description System.IO.Stream A System.IO.Stream object representing the specified value but with no namespace declarations. | Improve this Doc RemoveXmlNamespaceDeclarations(Stream, Boolean, Encoding) Remove the XML namespace declarations from the specified System.IO.Stream value . Declaration public static Stream RemoveXmlNamespaceDeclarations(this Stream value, bool omitXmlDeclaration, Encoding encoding) Parameters Type Name Description System.IO.Stream value An XML System.IO.Stream to purge namespace declarations from. System.Boolean omitXmlDeclaration if set to true omit the XML declaration; otherwise false . The default is false. System.Text.Encoding encoding The text encoding to use. Returns Type Description System.IO.Stream A System.IO.Stream object representing the specified value but with no namespace declarations. | Improve this Doc SanitizeElementName(String) Sanitizes the elementName for any invalid characters. Declaration public static string SanitizeElementName(this string elementName) Parameters Type Name Description System.String elementName The name of the XML element to sanitize. Returns Type Description System.String A sanitized System.String of elementName . Remarks Sanitation rules are as follows: Names can contain letters, numbers, and these 4 characters: _ | : | . | - Names cannot start with a number or punctuation character Names cannot contain spaces | Improve this Doc SanitizeElementText(String) Sanitizes the text for any invalid characters. Declaration public static string SanitizeElementText(this string text) Parameters Type Name Description System.String text The content of an XML element to sanitize. Returns Type Description System.String A sanitized System.String of text . Remarks The text is sanitized for characters less or equal to a Unicode value of U+0019 (except U+0009, U+0010, U+0013). | Improve this Doc SanitizeElementText(String, Boolean) Sanitizes the text for any invalid characters. Declaration public static string SanitizeElementText(this string text, bool cdataSection) Parameters Type Name Description System.String text The content of an XML element to sanitize. System.Boolean cdataSection if set to true supplemental CDATA-section rules is applied to text . Returns Type Description System.String A sanitized System.String of text . Remarks Sanitation rules are as follows: The text cannot contain characters less or equal to a Unicode value of U+0019 (except U+0009, U+0010, U+0013) The text cannot contain the string \"]]<\" if cdataSection is true . | Improve this Doc UnescapeXml(String) Unescapes the given XML System.String . Declaration public static string UnescapeXml(this string value) Parameters Type Name Description System.String value The XML System.String to unescape. Returns Type Description System.String The input value with an unescaped equivalent. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlUtility.html": {
    "href": "api/core/Cuemon.Xml.XmlUtility.html",
    "title": "Class XmlUtility | Cuemon .NET Standard",
    "keywords": "Class XmlUtility This utility class is designed to make XML operations easier to work with. Inheritance System.Object XmlUtility Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlUtility Methods | Improve this Doc Escape(String) Escapes the given XML System.String . Declaration public static string Escape(string value) Parameters Type Name Description System.String value The XML System.String to escape. Returns Type Description System.String The input value with an escaped equivalent. | Improve this Doc RemoveNamespaceDeclarations(Stream) Remove the namespace declarations from the specified System.IO.Stream value . Declaration public static Stream RemoveNamespaceDeclarations(Stream value) Parameters Type Name Description System.IO.Stream value An XML System.IO.Stream to purge namespace declarations from. Returns Type Description System.IO.Stream A System.IO.Stream object representing the specified value but with no namespace declarations. | Improve this Doc RemoveNamespaceDeclarations(Stream, Boolean) Remove the namespace declarations from the specified System.IO.Stream value . Declaration public static Stream RemoveNamespaceDeclarations(Stream value, bool omitXmlDeclaration) Parameters Type Name Description System.IO.Stream value An XML System.IO.Stream to purge namespace declarations from. System.Boolean omitXmlDeclaration if set to true omit the XML declaration; otherwise false . The default is false. Returns Type Description System.IO.Stream A System.IO.Stream object representing the specified value but with no namespace declarations. | Improve this Doc RemoveNamespaceDeclarations(Stream, Boolean, Encoding) Remove the namespace declarations from the specified System.IO.Stream value . Declaration public static Stream RemoveNamespaceDeclarations(Stream value, bool omitXmlDeclaration, Encoding encoding) Parameters Type Name Description System.IO.Stream value An XML System.IO.Stream to purge namespace declarations from. System.Boolean omitXmlDeclaration if set to true omit the XML declaration; otherwise false . The default is false. System.Text.Encoding encoding The text encoding to use. Returns Type Description System.IO.Stream A System.IO.Stream object representing the specified value but with no namespace declarations. | Improve this Doc SanitizeElementName(String) Sanitizes the elementName for any invalid characters. Declaration public static string SanitizeElementName(string elementName) Parameters Type Name Description System.String elementName The name of the XML element to sanitize. Returns Type Description System.String A sanitized System.String of elementName . Remarks Sanitation rules are as follows: Names can contain letters, numbers, and these 4 characters: _ | : | . | - Names cannot start with a number or punctuation character Names cannot contain spaces | Improve this Doc SanitizeElementText(String) Sanitizes the text for any invalid characters. Declaration public static string SanitizeElementText(string text) Parameters Type Name Description System.String text The content of an XML element to sanitize. Returns Type Description System.String A sanitized System.String of text . Remarks The text is sanitized for characters less or equal to a Unicode value of U+0019 (except U+0009, U+0010, U+0013). | Improve this Doc SanitizeElementText(String, Boolean) Sanitizes the text for any invalid characters. Declaration public static string SanitizeElementText(string text, bool cdataSection) Parameters Type Name Description System.String text The content of an XML element to sanitize. System.Boolean cdataSection if set to true supplemental CDATA-section rules is applied to text . Returns Type Description System.String A sanitized System.String of text . Remarks Sanitation rules are as follows: The text cannot contain characters less or equal to a Unicode value of U+0019 (except U+0009, U+0010, U+0013) The text cannot contain the string \"]]<\" if cdataSection is true . | Improve this Doc Unescape(String) Unescapes the given XML System.String . Declaration public static string Unescape(string value) Parameters Type Name Description System.String value The XML System.String to unescape. Returns Type Description System.String The input value with an unescaped equivalent. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlReaderUtilityExtensions.html": {
    "href": "api/core/Cuemon.Xml.XmlReaderUtilityExtensions.html",
    "title": "Class XmlReaderUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlReaderUtilityExtensions Extension methods for the XmlReaderUtility class. Inheritance System.Object XmlReaderUtilityExtensions Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlReaderUtilityExtensions Methods | Improve this Doc Chunk(XmlReader) Creates and returns a chunked sequence of System.Xml.XmlReader objects with a maximum of 128 XML node elements located on a depth of 1. Declaration public static IEnumerable<XmlReader> Chunk(this XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data to chunk into smaller System.Xml.XmlReader objects for a batch run or similar. Returns Type Description System.Collections.Generic.IEnumerable < System.Xml.XmlReader > An sequence of System.Xml.XmlReader objects that contains no more than 128 XML node elements from the reader object. | Improve this Doc Chunk(XmlReader, Int32, Action<XmlWriterSettings>) Creates and returns a chunked sequence of System.Xml.XmlReader objects with a maximum of the specified size of XML node elements located on a depth of 1. Declaration public static IEnumerable<XmlReader> Chunk(this XmlReader reader, int size, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data to chunk into smaller System.Xml.XmlReader objects for a batch run or similar. System.Int32 size The amount of XML node elements allowed per System.Xml.XmlReader object. Default is 128 XML node element. System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.Collections.Generic.IEnumerable < System.Xml.XmlReader > An sequence of System.Xml.XmlReader objects that contains no more than the specified size of XML node elements from the reader object. Exceptions Type Condition System.ArgumentNullException reader is null. System.ArgumentException The System.Xml.XmlReader.Read() method of the reader object has already been called. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TypeCodeConverterExtensions.html": {
    "href": "api/core/Cuemon.TypeCodeConverterExtensions.html",
    "title": "Class TypeCodeConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class TypeCodeConverterExtensions This is an extension implementation of the most common methods on the TypeCodeConverter class. Inheritance System.Object TypeCodeConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TypeCodeConverterExtensions Methods | Improve this Doc AsCode(Type) Gets the underlying type code of the specified type . Declaration public static TypeCode AsCode(this Type type) Parameters Type Name Description System.Type type The type whose underlying System.TypeCode to get. Returns Type Description System.TypeCode The code of the underlying type, or Empty if type is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.XmlWriterExtensions.html": {
    "href": "api/core/Cuemon.Serialization.Xml.XmlWriterExtensions.html",
    "title": "Class XmlWriterExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlWriterExtensions Extension methods for the System.Xml.XmlWriter . Inheritance System.Object XmlWriterExtensions Namespace : Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Syntax public static class XmlWriterExtensions Methods | Improve this Doc WriteEncapsulatingElementIfNotNull<T>(XmlWriter, T, XmlQualifiedEntity, Action<XmlWriter, T>) Writes the specified value with the delegate nodeWriter . If elementName is not null, then the delegate nodeWriter is called from within an encapsulating Start- and End-element. Declaration public static void WriteEncapsulatingElementIfNotNull<T>(this XmlWriter writer, T value, XmlQualifiedEntity elementName, Action<XmlWriter, T> nodeWriter) Parameters Type Name Description System.Xml.XmlWriter writer The writer used in the serialization process. T value The object to serialize. XmlQualifiedEntity elementName The optional fully qualified name of the element. System.Action < System.Xml.XmlWriter , T> nodeWriter The delegate node writer. Type Parameters Name Description T The type of the object to serialize. | Improve this Doc WriteObject(XmlWriter, Object, Type, XmlSerializerSettings) Serializes the specified value into an XML format. Declaration public static void WriteObject(this XmlWriter writer, object value, Type objectType, XmlSerializerSettings settings = null) Parameters Type Name Description System.Xml.XmlWriter writer The writer used in the serialization process. System.Object value The object to serialize. System.Type objectType The type of the object to serialize. XmlSerializerSettings settings The settings to be applied to the serialization. | Improve this Doc WriteObject<T>(XmlWriter, T, XmlSerializerSettings) Serializes the specified value into an XML format. Declaration public static void WriteObject<T>(this XmlWriter writer, T value, XmlSerializerSettings settings = null) Parameters Type Name Description System.Xml.XmlWriter writer The writer used in the serialization process. T value The object to serialize. XmlSerializerSettings settings The settings to be applied to the serialization. Type Parameters Name Description T The type of the object to serialize. | Improve this Doc WriteStartElement(XmlWriter, XmlQualifiedEntity) Writes the specified start tag and associates it with the given elementName . Declaration public static void WriteStartElement(this XmlWriter writer, XmlQualifiedEntity elementName) Parameters Type Name Description System.Xml.XmlWriter writer The writer used in the serialization process. XmlQualifiedEntity elementName The fully qualified name of the element. | Improve this Doc WriteXmlRootElement<T>(XmlWriter, T, Action<XmlWriter, T, XmlQualifiedEntity>, XmlQualifiedEntity) Writes the XML root element to an existing writer . Declaration public static void WriteXmlRootElement<T>(this XmlWriter writer, T value, Action<XmlWriter, T, XmlQualifiedEntity> treeWriter, XmlQualifiedEntity rootEntity = null) Parameters Type Name Description System.Xml.XmlWriter writer The writer used in the serialization process. T value The object to serialize. System.Action < System.Xml.XmlWriter , T, XmlQualifiedEntity > treeWriter The delegate used to write the XML hierarchy. XmlQualifiedEntity rootEntity The optional XmlQualifiedEntity that will provide the name of the root element. Type Parameters Name Description T The type of the object to serialize. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.HmacUtility.html": {
    "href": "api/core/Cuemon.Security.Cryptography.HmacUtility.html",
    "title": "Class HmacUtility | Cuemon .NET Standard",
    "keywords": "Class HmacUtility This utility class is designed to make HMAC (Hash-based Message Authentication Code) System.Security.Cryptography.KeyedHashAlgorithm operations easier to work with. Inheritance System.Object HmacUtility Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public static class HmacUtility Methods | Improve this Doc ComputeKeyedHash(Byte[], Byte[], Action<KeyedHashOptions>) Computes a keyed-hash value of the specified value . Declaration public static HashResult ComputeKeyedHash(byte[] value, byte[] sharedKey, Action<KeyedHashOptions> setup = null) Parameters Type Name Description System.Byte [] value The System.Byte array to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < KeyedHashOptions > setup The KeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified value . | Improve this Doc ComputeKeyedHash(Stream, Byte[], Action<StreamKeyedHashOptions>) Computes a keyed-hash value of the specified value . Declaration public static HashResult ComputeKeyedHash(Stream value, byte[] sharedKey, Action<StreamKeyedHashOptions> setup = null) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < StreamKeyedHashOptions > setup The StreamKeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified value . | Improve this Doc ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) Computes a keyed-hash value of the specified value . Declaration public static HashResult ComputeKeyedHash(object value, byte[] sharedKey, Action<KeyedHashOptions> setup = null) Parameters Type Name Description System.Object value The object to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < KeyedHashOptions > setup The KeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified value . | Improve this Doc ComputeKeyedHash(Object[], Byte[], Action<KeyedHashOptions>) Combines a sequence of objects into one object, and computes a keyed-hash value of the specified values . Declaration public static HashResult ComputeKeyedHash(object[] values, byte[] sharedKey, Action<KeyedHashOptions> setup = null) Parameters Type Name Description System.Object [] values The objects to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < KeyedHashOptions > setup The KeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified values . | Improve this Doc ComputeKeyedHash(String, Byte[], Action<StringKeyedHashOptions>) Computes a keyed-hash value of the specified value . Declaration public static HashResult ComputeKeyedHash(string value, byte[] sharedKey, Action<StringKeyedHashOptions> setup = null) Parameters Type Name Description System.String value The System.String value to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < StringKeyedHashOptions > setup The StringKeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of the specified value . | Improve this Doc ComputeKeyedHash(String[], Byte[], Action<StringKeyedHashOptions>) Computes a keyed-hash value of the specified values . Declaration public static HashResult ComputeKeyedHash(string[] values, byte[] sharedKey, Action<StringKeyedHashOptions> setup = null) Parameters Type Name Description System.String [] values The System.String array to compute a hash code for. System.Byte [] sharedKey The secret key for the hashed encryption. The key can be any length, but it is strongly recommended to use a size of either 64 bytes (for SHA1 and SHA256 ) or 128 bytes (for SHA384 and SHA512 ). System.Action < StringKeyedHashOptions > setup The StringKeyedHashOptions which need to be configured. Returns Type Description HashResult A HashResult containing the computed keyed-hash value of values . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.Serialization.XmlQualifiedEntity.html": {
    "href": "api/core/Cuemon.Xml.Serialization.XmlQualifiedEntity.html",
    "title": "Class XmlQualifiedEntity | Cuemon .NET Standard",
    "keywords": "Class XmlQualifiedEntity A class designed to help assure qualified names in XML serializations. Inheritance System.Object XmlQualifiedEntity Namespace : Cuemon.Xml.Serialization Assembly : Cuemon.Xml.dll Syntax public sealed class XmlQualifiedEntity Constructors | Improve this Doc XmlQualifiedEntity(String) Initializes a new instance of the XmlQualifiedEntity class. Declaration public XmlQualifiedEntity(string localName) Parameters Type Name Description System.String localName The local name of the entity. | Improve this Doc XmlQualifiedEntity(String, String) Initializes a new instance of the XmlQualifiedEntity class. Declaration public XmlQualifiedEntity(string localName, string ns) Parameters Type Name Description System.String localName The local name of the entity. System.String ns The namespace URI to associate with the entity. | Improve this Doc XmlQualifiedEntity(String, String, String) Initializes a new instance of the XmlQualifiedEntity class. Declaration public XmlQualifiedEntity(string prefix, string localName, string ns) Parameters Type Name Description System.String prefix The namespace prefix of the entity. System.String localName The local name of the entity. System.String ns The namespace URI to associate with the entity. | Improve this Doc XmlQualifiedEntity(XmlAnyElementAttribute) Initializes a new instance of the XmlQualifiedEntity class. Declaration public XmlQualifiedEntity(XmlAnyElementAttribute attribute) Parameters Type Name Description System.Xml.Serialization.XmlAnyElementAttribute attribute The XML related attribute to extract qualified name information about. | Improve this Doc XmlQualifiedEntity(XmlAttributeAttribute) Initializes a new instance of the XmlQualifiedEntity class. Declaration public XmlQualifiedEntity(XmlAttributeAttribute attribute) Parameters Type Name Description System.Xml.Serialization.XmlAttributeAttribute attribute The XML related attribute to extract qualified name information about. | Improve this Doc XmlQualifiedEntity(XmlElementAttribute) Initializes a new instance of the XmlQualifiedEntity class. Declaration public XmlQualifiedEntity(XmlElementAttribute attribute) Parameters Type Name Description System.Xml.Serialization.XmlElementAttribute attribute The XML related attribute to extract qualified name information about. | Improve this Doc XmlQualifiedEntity(XmlRootAttribute) Initializes a new instance of the XmlQualifiedEntity class. Declaration public XmlQualifiedEntity(XmlRootAttribute attribute) Parameters Type Name Description System.Xml.Serialization.XmlRootAttribute attribute The XML related attribute to extract qualified name information about. Properties | Improve this Doc LocalName Gets the local name of the entity. Declaration public string LocalName { get; } Property Value Type Description System.String The local name of the entity. | Improve this Doc Namespace Gets the namespace URI to associate with the entity. Declaration public string Namespace { get; } Property Value Type Description System.String The namespace URI to associate with the entity. | Improve this Doc Prefix Gets the namespace prefix of the entity. Declaration public string Prefix { get; } Property Value Type Description System.String The namespace prefix of the entity. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.Serialization.SerializableOrder.html": {
    "href": "api/core/Cuemon.Xml.Serialization.SerializableOrder.html",
    "title": "Enum SerializableOrder | Cuemon .NET Standard",
    "keywords": "Enum SerializableOrder Specifies the order of additional serialization information. Namespace : Cuemon.Xml.Serialization Assembly : Cuemon.Xml.dll Syntax public enum SerializableOrder Fields Name Description Append The new serialization operation is applied after the original serialization. Prepend The new serialization operation is applied before the original serialization. Extension Methods ByteConverterExtensions.ToByteArray<SerializableOrder>() ConverterExtensions.ParseWith<SerializableOrder, TResult>(Func<SerializableOrder, TResult>) ConverterExtensions.ParseWith<SerializableOrder, T, TResult>(Func<SerializableOrder, T, TResult>, T) ConverterExtensions.ParseWith<SerializableOrder, T1, T2, TResult>(Func<SerializableOrder, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<SerializableOrder, T1, T2, T3, TResult>(Func<SerializableOrder, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<SerializableOrder, T1, T2, T3, T4, TResult>(Func<SerializableOrder, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<SerializableOrder, T1, T2, T3, T4, T5, TResult>(Func<SerializableOrder, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<SerializableOrder, T1, T2, T3, T4, T5, T6, TResult>(Func<SerializableOrder, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<SerializableOrder, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<SerializableOrder, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<SerializableOrder, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<SerializableOrder, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<SerializableOrder, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<SerializableOrder, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<SerializableOrder>() DelegateUtilityExtensions.DynamicWrap<SerializableOrder>() TweakerExtensions.Adjust<SerializableOrder>(Func<SerializableOrder, SerializableOrder>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<SerializableOrder>() WrapperExtensions.UseWrapper<SerializableOrder>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<SerializableOrder>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<SerializableOrder>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.Linq.html": {
    "href": "api/core/Cuemon.Xml.Linq.html",
    "title": "Namespace Cuemon.Xml.Linq | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Xml.Linq Assembly : Cuemon.Xml.dll Classes XElementExtensions Extension methods for the System.Xml.Linq.XElement . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TimeSpanExtensions.html": {
    "href": "api/core/Cuemon.TimeSpanExtensions.html",
    "title": "Class TimeSpanExtensions | Cuemon .NET Standard",
    "keywords": "Class TimeSpanExtensions Extension methods for the System.TimeSpan structure. Inheritance System.Object TimeSpanExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TimeSpanExtensions Fields | Improve this Doc TicksPerMicrosecond Represents the number of ticks in 1 microsecond. This field is constant. Declaration public const double TicksPerMicrosecond = 10 Field Value Type Description System.Double | Improve this Doc TicksPerNanosecond Represents the number of ticks in 1 nanosecond. This field is constant. Declaration public const double TicksPerNanosecond = 0.01 Field Value Type Description System.Double Methods | Improve this Doc GetMicroseconds(TimeSpan) Gets the microseconds of the time interval represented by the specified System.TimeSpan structure. Declaration public static int GetMicroseconds(this TimeSpan ts) Parameters Type Name Description System.TimeSpan ts The System.TimeSpan to extend with a microseconds component. Returns Type Description System.Int32 The millisecond component by the specified System.TimeSpan structure. The return value ranges from -999 through 999. | Improve this Doc GetNanoseconds(TimeSpan) Gets the nanoseconds of the time interval represented by the specified System.TimeSpan structure. Declaration public static int GetNanoseconds(this TimeSpan ts) Parameters Type Name Description System.TimeSpan ts The System.TimeSpan to extend with a nanoseconds component. Returns Type Description System.Int32 The nanoseconds component by the specified System.TimeSpan structure. The return value ranges from -999 through 999. | Improve this Doc GetTotalMicroseconds(TimeSpan) Gets the total number of microseconds represented by the specified System.TimeSpan structure. Declaration public static double GetTotalMicroseconds(this TimeSpan ts) Parameters Type Name Description System.TimeSpan ts The System.TimeSpan to extend. Returns Type Description System.Double The total number of microseconds represented by the specified System.TimeSpan structure. | Improve this Doc GetTotalNanoseconds(TimeSpan) Gets the total number of nanoseconds represented by the specified System.TimeSpan structure. Declaration public static double GetTotalNanoseconds(this TimeSpan ts) Parameters Type Name Description System.TimeSpan ts The System.TimeSpan to extend. Returns Type Description System.Double The total number of nanoseconds represented by the specified System.TimeSpan structure. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TimeSpanConverterExtensions.html": {
    "href": "api/core/Cuemon.TimeSpanConverterExtensions.html",
    "title": "Class TimeSpanConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class TimeSpanConverterExtensions This is an extension implementation of the TimeSpanConverter class. Inheritance System.Object TimeSpanConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TimeSpanConverterExtensions Methods | Improve this Doc ToTimeSpan(Double, TimeUnit) Converts the specified value to its equivalent System.TimeSpan representation. Declaration public static TimeSpan ToTimeSpan(this double value, TimeUnit timeUnit) Parameters Type Name Description System.Double value The value to be converted. TimeUnit timeUnit One of the enumeration values that specifies the outcome of the conversion. Returns Type Description System.TimeSpan A System.TimeSpan that corresponds to value from timeUnit . Exceptions Type Condition System.OverflowException The value paired with timeUnit is outside its valid range. System.ArgumentOutOfRangeException timeUnit was outside its valid range. | Improve this Doc ToTimeSpan(String, TimeUnit) Converts the specified value to its equivalent System.TimeSpan representation. Declaration public static TimeSpan ToTimeSpan(this string value, TimeUnit timeUnit) Parameters Type Name Description System.String value The string to be converted. TimeUnit timeUnit One of the enumeration values that specifies the outcome of the conversion. Returns Type Description System.TimeSpan A System.TimeSpan that corresponds to value from timeUnit . Exceptions Type Condition System.ArgumentNullException value is null. System.OverflowException The value paired with timeUnit is outside its valid range. System.ArgumentOutOfRangeException timeUnit was outside its valid range. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TimeSpanConverter.html": {
    "href": "api/core/Cuemon.TimeSpanConverter.html",
    "title": "Class TimeSpanConverter | Cuemon .NET Standard",
    "keywords": "Class TimeSpanConverter This utility class is designed to make System.TimeSpan related conversions easier to work with. Inheritance System.Object TimeSpanConverter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TimeSpanConverter Methods | Improve this Doc FromDouble(Double, TimeUnit) Converts the specified value to its equivalent System.TimeSpan representation. Declaration public static TimeSpan FromDouble(double value, TimeUnit timeUnit) Parameters Type Name Description System.Double value The value to be converted. TimeUnit timeUnit One of the enumeration values that specifies the outcome of the conversion. Returns Type Description System.TimeSpan A System.TimeSpan that corresponds to value from timeUnit . Exceptions Type Condition System.OverflowException The value paired with timeUnit is outside its valid range. System.ArgumentOutOfRangeException timeUnit was outside its valid range. | Improve this Doc FromString(String, TimeUnit) Converts the specified value to its equivalent System.TimeSpan representation. Declaration public static TimeSpan FromString(string value, TimeUnit timeUnit) Parameters Type Name Description System.String value The string to be converted. TimeUnit timeUnit One of the enumeration values that specifies the outcome of the conversion. Returns Type Description System.TimeSpan A System.TimeSpan that corresponds to value from timeUnit . Exceptions Type Condition System.ArgumentNullException value is null. System.OverflowException The value paired with timeUnit is outside its valid range. System.ArgumentOutOfRangeException timeUnit was outside its valid range. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-11.html": {
    "href": "api/core/Cuemon.TesterFunc-11.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. T9 arg9 The ninth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. T9 The type of the ninth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ByteConverterExtensions.html": {
    "href": "api/core/Cuemon.ByteConverterExtensions.html",
    "title": "Class ByteConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class ByteConverterExtensions This is an extension implementation of the ByteConverter class. Inheritance System.Object ByteConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ByteConverterExtensions Methods | Improve this Doc FromUrlEncodedBase64(String) Decodes a URL string token to its equivalent byte array using base 64 digits. Declaration public static byte[] FromUrlEncodedBase64(this string value) Parameters Type Name Description System.String value The URL string token to decode. Returns Type Description System.Byte [] The byte array containing the decoded URL string token. | Improve this Doc ToByteArray(Stream) Converts the specified value to a byte array always starting from position 0 (when supported). Declaration public static byte[] ToByteArray(this Stream value) Parameters Type Name Description System.IO.Stream value The System.IO.Stream value to be converted. Returns Type Description System.Byte [] A byte array containing the data from the stream. | Improve this Doc ToByteArray(Stream, Boolean) Converts the specified value to a byte array. Declaration public static byte[] ToByteArray(this Stream value, bool leaveStreamOpen) Parameters Type Name Description System.IO.Stream value The System.IO.Stream value to be converted. System.Boolean leaveStreamOpen if true , the System.IO.Stream object is being left open; otherwise it is being closed and disposed. Returns Type Description System.Byte [] A byte array containing the data from the stream. | Improve this Doc ToByteArray(String) Converts the specified value to a byte array using DefaultEncoding for the encoding and DefaultPreambleSequence for any preamble sequences. Declaration public static byte[] ToByteArray(this string value) Parameters Type Name Description System.String value The string to be converted. Returns Type Description System.Byte [] A byte array containing the results of encoding the specified set of characters. | Improve this Doc ToByteArray(String, Action<EncodingOptions>) Converts the specified value to a byte array using the provided preferred encoding. Declaration public static byte[] ToByteArray(this string value, Action<EncodingOptions> setup) Parameters Type Name Description System.String value The string to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.Byte [] A byte array containing the results of encoding the specified set of characters. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc ToByteArray<T>(T) Converts the specified value to an array of bytes. Declaration public static byte[] ToByteArray<T>(this T value) where T : struct, IConvertible Parameters Type Name Description T value The System.IConvertible value to convert. Returns Type Description System.Byte [] An array of bytes equivalent to the data of the value . Type Parameters Name Description T Exceptions Type Condition System.ArgumentOutOfRangeException value is outside the range of allowed types. Allowed types are: System.Boolean , System.Char , System.Double , System.Int16 , System.Int32 , System.UInt16 , System.UInt32 and System.UInt64 . | Improve this Doc ToByteArray<T>(IEnumerable<T>) Converts the specified sequence of values to an array of bytes. Declaration public static byte[] ToByteArray<T>(this IEnumerable<T> values) where T : struct, IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable <T> values A sequence of System.IConvertible values to convert. Returns Type Description System.Byte [] An array of bytes equivalent to the sequence of the values . Type Parameters Name Description T Exceptions Type Condition System.ArgumentOutOfRangeException values is outside the range of allowed types. Allowed types are: System.Boolean , System.Char , System.Double , System.Int16 , System.Int32 , System.UInt16 , System.UInt32 and System.UInt64 . System.ArgumentNullException values is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.XmlSerializationInputFormatter.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.XmlSerializationInputFormatter.html",
    "title": "Class XmlSerializationInputFormatter | Cuemon .NET Standard",
    "keywords": "Class XmlSerializationInputFormatter This class handles deserialization of JSON to objects using XmlFormatter . Inheritance System.Object Microsoft.AspNetCore.Mvc.Formatters.InputFormatter Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter XmlSerializationInputFormatter Implements Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider Inherited Members Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.UTF8EncodingWithoutBOM Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.UTF16EncodingLittleEndian Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.SelectCharacterEncoding(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.SupportedEncodings Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType(System.Type) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType(System.Type) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes(System.String, System.Type) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes Namespace : Cuemon.AspNetCore.Mvc.Formatters.Xml Assembly : Cuemon.AspNetCore.Mvc.Formatters.Xml.dll Syntax public class XmlSerializationInputFormatter : TextInputFormatter, IInputFormatter, IApiRequestFormatMetadataProvider Constructors | Improve this Doc XmlSerializationInputFormatter(XmlFormatterOptions) Initializes a new instance of the XmlSerializationInputFormatter class. Declaration public XmlSerializationInputFormatter(XmlFormatterOptions formatterOptions) Parameters Type Name Description XmlFormatterOptions formatterOptions Methods | Improve this Doc ReadRequestBodyAsync(InputFormatterContext, Encoding) Reads an object from the request body. Declaration public override Task<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext context The Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext . System.Text.Encoding encoding The System.Text.Encoding used to read the request body. Returns Type Description System.Threading.Tasks.Task < InputFormatterResult > A System.Threading.Tasks.Task that on completion deserializes the request body. Overrides Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, System.Text.Encoding) Implements Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.XmlMvcCoreBuilderExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Xml.XmlMvcCoreBuilderExtensions.html",
    "title": "Class XmlMvcCoreBuilderExtensions | Cuemon .NET Standard",
    "keywords": "Class XmlMvcCoreBuilderExtensions Extension methods for adding XML formatters to MVC. Inheritance System.Object XmlMvcCoreBuilderExtensions Namespace : Cuemon.AspNetCore.Mvc.Formatters.Xml Assembly : Cuemon.AspNetCore.Mvc.Formatters.Xml.dll Syntax public static class XmlMvcCoreBuilderExtensions Methods | Improve this Doc AddXmlFormatterOptions(IMvcBuilder, Action<XmlFormatterOptions>) Adds configuration of XmlFormatterOptions for the application. Declaration public static IMvcBuilder AddXmlFormatterOptions(this IMvcBuilder builder, Action<XmlFormatterOptions> setup) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IMvcBuilder builder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . System.Action < XmlFormatterOptions > setup The XmlFormatterOptions which need to be configured. Returns Type Description Microsoft.Extensions.DependencyInjection.IMvcBuilder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . | Improve this Doc AddXmlFormatterOptions(IMvcCoreBuilder, Action<XmlFormatterOptions>) Adds configuration of XmlFormatterOptions for the application. Declaration public static IMvcCoreBuilder AddXmlFormatterOptions(this IMvcCoreBuilder builder, Action<XmlFormatterOptions> setup) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . System.Action < XmlFormatterOptions > setup The XmlFormatterOptions which need to be configured. Returns Type Description Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . | Improve this Doc AddXmlSerializationFormatters(IMvcBuilder) Adds the XML Serializer formatters to MVC. Declaration public static IMvcBuilder AddXmlSerializationFormatters(this IMvcBuilder builder) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IMvcBuilder builder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . Returns Type Description Microsoft.Extensions.DependencyInjection.IMvcBuilder The Microsoft.Extensions.DependencyInjection.IMvcBuilder . | Improve this Doc AddXmlSerializationFormatters(IMvcCoreBuilder) Adds the XML Serializer formatters to MVC. Declaration public static IMvcCoreBuilder AddXmlSerializationFormatters(this IMvcCoreBuilder builder) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder The Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder . Returns Type Description Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder The Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Filters.Diagnostics | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Filters.Diagnostics Assembly : Cuemon.AspNetCore.Mvc.dll Classes FaultDescriptorFilter A filter that, after an action has faulted, provides developer friendly information about an System.Exception along with a correct System.Net.HttpStatusCode . FaultDescriptorOptions Specifies options that is related to FaultDescriptorFilter operations. HttpRequestEvidence Provides detailed information about a given Microsoft.AspNetCore.Http.HttpRequest . TimeMeasureAttribute Represents an attribute that is used to mark an action method for time measure profiling. TimeMeasuringFilter A filter that performs time measure profiling of an action method. TimeMeasuringOptions Configuration options for TimeMeasuringFilter . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.TimeMeasuringOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.TimeMeasuringOptions.html",
    "title": "Class TimeMeasuringOptions | Cuemon .NET Standard",
    "keywords": "Class TimeMeasuringOptions Configuration options for TimeMeasuringFilter . Inheritance System.Object ProfilerOptions TimeMeasureOptions TimeMeasuringOptions Inherited Members TimeMeasureOptions.TimeMeasureCompletedThreshold TimeMeasureOptions.DefaultTimeMeasureCompletedThreshold ProfilerOptions.MethodDescriptor ProfilerOptions.RuntimeParameters Namespace : Cuemon.AspNetCore.Mvc.Filters.Diagnostics Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class TimeMeasuringOptions : TimeMeasureOptions Constructors | Improve this Doc TimeMeasuringOptions() Initializes a new instance of the TimeMeasuringOptions class. Declaration public TimeMeasuringOptions() Remarks The following table shows the initial property values for an instance of TimeMeasureOptions . Property Initial Value TimeMeasureCompletedThreshold System.TimeSpan.Zero HeaderName X-Action-Profiler SuppressHeaderPredicate _ => false Properties | Improve this Doc HeaderName Gets or sets the name of the time-measured HTTP header. Declaration public string HeaderName { get; set; } Property Value Type Description System.String The name of the time-measured HTTP header. | Improve this Doc SuppressHeaderPredicate Gets or sets the predicate that can suppress the time-measured HTTP header. Declaration public Func<IHostingEnvironment, bool> SuppressHeaderPredicate { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Hosting.IHostingEnvironment , System.Boolean > The function delegate that can determine if the time-measured HTTP header should be suppressed. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also TimeMeasureOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpLastModifiedHeaderOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpLastModifiedHeaderOptions.html",
    "title": "Class HttpLastModifiedHeaderOptions | Cuemon .NET Standard",
    "keywords": "Class HttpLastModifiedHeaderOptions Specifies options that is related to the HttpLastModifiedHeader . Inheritance System.Object HttpLastModifiedHeaderOptions Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class HttpLastModifiedHeaderOptions Constructors | Improve this Doc HttpLastModifiedHeaderOptions() Initializes a new instance of the HttpLastModifiedHeaderOptions class. Declaration public HttpLastModifiedHeaderOptions() Remarks The following table shows the initial property values for an instance of HttpEntityTagHeaderOptions . Property Initial Value LastModifiedProvider (timestamp, context) => { context.Response.SetLastModifiedHeaderInformation(context.Request, timestamp.Modified ?? timestamp.Created); }; Properties | Improve this Doc HasLastModifiedProvider Gets a value indicating whether this instance has an LastModifiedProvider . Declaration public bool HasLastModifiedProvider { get; } Property Value Type Description System.Boolean true if this instance has an LastModifiedProvider ; otherwise, false . | Improve this Doc LastModifiedProvider Gets or sets the delegate that is invoked when a result of a Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext is an Microsoft.AspNetCore.Mvc.ObjectResult and the value is an ICacheableTimestamp implementation. Declaration public Action<ICacheableTimestamp, HttpContext> LastModifiedProvider { get; set; } Property Value Type Description System.Action < ICacheableTimestamp , Microsoft.AspNetCore.Http.HttpContext > The delegate that provides an HTTP Last-Modified header. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also HttpCacheableFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ContentBasedObjectResult-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ContentBasedObjectResult-1.html",
    "title": "Class ContentBasedObjectResult<T> | Cuemon .NET Standard",
    "keywords": "Class ContentBasedObjectResult<T> Provides a content based object result that is processed by an HTTP ETag filter implementation. Inheritance System.Object Configurable < ContentBasedOptions > CacheableObjectResult <T, ContentBasedOptions > ContentBasedObjectResult<T> Implements IConfigurable < ContentBasedOptions > ICacheableObjectResult ICacheableIntegrity Inherited Members CacheableObjectResult<T, ContentBasedOptions>.Value Configurable<ContentBasedOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class ContentBasedObjectResult<T> : CacheableObjectResult<T, ContentBasedOptions>, IConfigurable<ContentBasedOptions>, ICacheableObjectResult, ICacheableIntegrity Type Parameters Name Description T The type of the object to make cacheable. Properties | Improve this Doc Checksum Gets a ChecksumResult that represents the integrity of this instance. Declaration public ChecksumResult Checksum { get; } Property Value Type Description ChecksumResult The checksum that represents the integrity of this instance. | Improve this Doc HasChecksum Gets a value indicating whether this instance has a Checksum representation. Declaration public bool HasChecksum { get; } Property Value Type Description System.Boolean true if this instance has a Checksum representation; otherwise, false . | Improve this Doc Validation Gets the validation strength of the integrity of this instance. Declaration public ChecksumStrength Validation { get; } Property Value Type Description ChecksumStrength The validation strength of the integrity of this instance. Implements IConfigurable<TOptions> ICacheableObjectResult ICacheableIntegrity Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also CacheableObjectResult <T, TOptions> ICacheableIntegrity HttpEntityTagHeader HttpCacheableFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.DynamicCacheBusting.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.DynamicCacheBusting.html",
    "title": "Class DynamicCacheBusting | Cuemon .NET Standard",
    "keywords": "Class DynamicCacheBusting Provides cache-busting capabilities on a duration based interval. This class cannot be inherited. Inheritance System.Object CacheBusting DynamicCacheBusting Implements ICacheBusting IConfigurable < DynamicCacheBustingOptions > Namespace : Cuemon.AspNetCore.Mvc.Configuration Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public sealed class DynamicCacheBusting : CacheBusting, ICacheBusting, IConfigurable<DynamicCacheBustingOptions> Constructors | Improve this Doc DynamicCacheBusting(IOptions<DynamicCacheBustingOptions>) Initializes a new instance of the DynamicCacheBusting class. Declaration public DynamicCacheBusting(IOptions<DynamicCacheBustingOptions> setup) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < DynamicCacheBustingOptions > setup The DynamicCacheBustingOptions which need to be configured. Properties | Improve this Doc Options Gets the configured options of this instance. Declaration public DynamicCacheBustingOptions Options { get; } Property Value Type Description DynamicCacheBustingOptions The configured options of this instance. | Improve this Doc UtcChanged Gets the UTC timestamp from when the Version was last changed. Declaration public DateTime UtcChanged { get; } Property Value Type Description System.DateTime The UTC timestamp from when the Version was last changed. | Improve this Doc Version Gets the version to be a part of the link you need cache-busting compatible. Declaration public override string Version { get; } Property Value Type Description System.String The version to be a part of the link you need cache-busting compatible. Overrides CacheBusting.Version Implements ICacheBusting IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also CacheBusting (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TypeUtilityExtensions.html": {
    "href": "api/core/Cuemon.TypeUtilityExtensions.html",
    "title": "Class TypeUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class TypeUtilityExtensions This is an extension implementation of the most common methods on the TypeUtility class. Inheritance System.Object TypeUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TypeUtilityExtensions Methods | Improve this Doc Is<T>(Object) Determines whether the specified source is of T . Declaration public static bool Is<T>(this object source) Parameters Type Name Description System.Object source The object to compare with T . Returns Type Description System.Boolean true if the specified source is of T ; otherwise, false . Type Parameters Name Description T The type to compare with source . | Improve this Doc IsNot<T>(Object) Determines whether the specified source is not of T . Declaration public static bool IsNot<T>(this object source) Parameters Type Name Description System.Object source The object to compare with T . Returns Type Description System.Boolean true if the specified source is not of T ; otherwise, false . Type Parameters Name Description T The type to compare with source . | Improve this Doc IsNullable<T>(T) Determines whether the specified source is a nullable System.ValueType . Declaration public static bool IsNullable<T>(this T source) Parameters Type Name Description T source The source type to check for nullable System.ValueType . Returns Type Description System.Boolean true if the specified source is nullable; otherwise, false . Type Parameters Name Description T The type of the source of T . | Improve this Doc IsNullable<T>(Nullable<T>) Determines whether the specified source is a nullable System.ValueType . Declaration public static bool IsNullable<T>(this T? source) where T : struct Parameters Type Name Description System.Nullable <T> source The source type to check for nullable System.ValueType . Returns Type Description System.Boolean true if the specified source is nullable; otherwise, false . Type Parameters Name Description T The type of the source of T . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TypeUtility.html": {
    "href": "api/core/Cuemon.TypeUtility.html",
    "title": "Class TypeUtility | Cuemon .NET Standard",
    "keywords": "Class TypeUtility This utility class is designed to make System.Type operations easier to work with. Inheritance System.Object TypeUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TypeUtility Methods | Improve this Doc ContainsAttributeType(Object, Boolean, Type[]) Determines whether the specified source object contains one or more of the specified attribute target types. Declaration public static bool ContainsAttributeType(object source, bool inherit, params Type[] targets) Parameters Type Name Description System.Object source The source object to match against. System.Boolean inherit true to search the source inheritance chain to find the attributes; otherwise, false . System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified source object contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc ContainsAttributeType(Object, Type[]) Determines whether the specified source object contains one or more of the specified attribute target types. Declaration public static bool ContainsAttributeType(object source, params Type[] targets) Parameters Type Name Description System.Object source The source object to match against. System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified source object contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc ContainsAttributeType(MemberInfo, Boolean, Type[]) Determines whether the specified source type contains one or more of the specified attribute target types. Declaration public static bool ContainsAttributeType(MemberInfo source, bool inherit, params Type[] targets) Parameters Type Name Description System.Reflection.MemberInfo source The member to match against. System.Boolean inherit true to search the source inheritance chain to find the attributes; otherwise, false . System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified member contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc ContainsAttributeType(MemberInfo, Type[]) Determines whether the specified source type contains one or more of the specified attribute target types. Declaration public static bool ContainsAttributeType(MemberInfo source, params Type[] targets) Parameters Type Name Description System.Reflection.MemberInfo source The member to match against. System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified member contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc ContainsAttributeType(Type, Boolean, Type[]) Determines whether the specified source type contains one or more of the specified attribute target types. Declaration public static bool ContainsAttributeType(Type source, bool inherit, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Boolean inherit true to search the source inheritance chain to find the attributes; otherwise, false . System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified source type contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc ContainsAttributeType(Type, Type[]) Determines whether the specified source type contains one or more of the specified attribute target types. Declaration public static bool ContainsAttributeType(Type source, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified source type contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc ContainsInterface(Object, Boolean, Type[]) Determines whether the specified source contains one or more of the target types specified. Declaration public static bool ContainsInterface(object source, bool inherit, params Type[] targets) Parameters Type Name Description System.Object source The source object to match against. System.Boolean inherit Specifies whether to search this member's inheritance chain to find the interfaces. System.Type [] targets The target interface types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the target types specified; otherwise, false . | Improve this Doc ContainsInterface(Object, Type[]) Determines whether the specified source contains one or more of the target types specified throughout this member's inheritance chain. Declaration public static bool ContainsInterface(object source, params Type[] targets) Parameters Type Name Description System.Object source The source object to match against. System.Type [] targets The target interface types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the target types specified throughout this member's inheritance chain; otherwise, false . | Improve this Doc ContainsInterface(Type, Boolean, Type[]) Determines whether the specified source contains one or more of the target types specified. Declaration public static bool ContainsInterface(Type source, bool inherit, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Boolean inherit Specifies whether to search this member's inheritance chain to find the interfaces. System.Type [] targets The target interface types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the target types specified; otherwise, false . | Improve this Doc ContainsInterface(Type, Type[]) Determines whether the specified source contains one or more of the target types specified throughout this member's inheritance chain. Declaration public static bool ContainsInterface(Type source, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Type [] targets The target interface types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the target types specified throughout this member's inheritance chain; otherwise, false . | Improve this Doc ContainsType(Object, Boolean, Type[]) Determines whether the specified source/collection of source object(s) contains one or more of the specified target types. Declaration public static bool ContainsType(object source, bool treatSourceAsEnumerable, params Type[] targets) Parameters Type Name Description System.Object source The source object to match against. System.Boolean treatSourceAsEnumerable if set to true the source object is cast as an System.Collections.IEnumerable object, and the actual matching is now done against the source objects within the collection against the target types specified. System.Type [] targets The target types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the specified target types; otherwise, false . | Improve this Doc ContainsType(Object, Type[]) Determines whether the specified source contains one or more of the specified target types. Declaration public static bool ContainsType(object source, params Type[] targets) Parameters Type Name Description System.Object source The source object to match against. System.Type [] targets The target types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the specified target types; otherwise, false . | Improve this Doc ContainsType(Type, Type[]) Determines whether the specified source type contains one or more of the specified target types. Declaration public static bool ContainsType(Type source, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Type [] targets The target types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the specified target types; otherwise, false . | Improve this Doc GetAncestorAndDescendantsOrSelfTypes(Type) Gets a sorted (base-to-derived) sequence of ancestor-and-descendant-or-self types from the source . Declaration public static IEnumerable<Type> GetAncestorAndDescendantsOrSelfTypes(Type source) Parameters Type Name Description System.Type source The source type to locate ancestor-and-descendant-or-self types from. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the ancestor-and-descendant-or-self types from the source . | Improve this Doc GetAncestorAndDescendantsOrSelfTypes(Type, Assembly[]) Gets a sorted (base-to-derived) sequence of ancestor-and-descendant-or-self types from the source . Declaration public static IEnumerable<Type> GetAncestorAndDescendantsOrSelfTypes(Type source, params Assembly[] assemblies) Parameters Type Name Description System.Type source The source type to locate ancestor-and-descendant-or-self types from. System.Reflection.Assembly [] assemblies The assemblies to search for the source . Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the ancestor-and-descendant-or-self types from the source . | Improve this Doc GetAncestorOrSelf(Type, Type) Gets the ancestor-or-self System.Type from the specified source . Declaration public static Type GetAncestorOrSelf(Type source, Type sourceBaseLimit) Parameters Type Name Description System.Type source The source type to traverse. System.Type sourceBaseLimit The base limit of source . Returns Type Description System.Type The ancestor-or-self type from the specified source that is derived or equal to sourceBaseLimit . Exceptions Type Condition System.ArgumentNullException source - or - sourceBaseLimit is null. | Improve this Doc GetAncestorOrSelfTypes(Type) Gets a sequence of ancestor-or-self types from the source . Declaration public static IEnumerable<Type> GetAncestorOrSelfTypes(Type source) Parameters Type Name Description System.Type source The source type to locate ancestor-or-self types from. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the ancestor-or-self types from the source . | Improve this Doc GetDefaultValue(Type) Gets the default value of the specified type . Declaration public static object GetDefaultValue(Type type) Parameters Type Name Description System.Type type The System.Type to retrieve its default value from. Returns Type Description System.Object The default value of type . | Improve this Doc GetDescendantOrSelfTypes(Type) Gets a sequence of derived types from the source an it's associated System.Reflection.Assembly . Declaration public static IEnumerable<Type> GetDescendantOrSelfTypes(Type source) Parameters Type Name Description System.Type source The source type to locate derived types from. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the derived types from the source . | Improve this Doc GetDescendantOrSelfTypes(Type, Assembly[]) Gets a sequence of derived types from the source . Declaration public static IEnumerable<Type> GetDescendantOrSelfTypes(Type source, params Assembly[] assemblies) Parameters Type Name Description System.Type source The source type to locate derived types from. System.Reflection.Assembly [] assemblies The assemblies to search for the source . Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the derived types from the source . | Improve this Doc Is<T>(Object) Determines whether the specified source is of T . Declaration public static bool Is<T>(object source) Parameters Type Name Description System.Object source The object to compare with T . Returns Type Description System.Boolean true if the specified source is of T ; otherwise, false . Type Parameters Name Description T The type to compare with source . | Improve this Doc IsAnonymousMethod(Type) Determines whether the specified source is an anonymous method (be that in a form of a delegate or lambda expression). Declaration public static bool IsAnonymousMethod(Type source) Parameters Type Name Description System.Type source The System.Type to determine is an anonymous method. Returns Type Description System.Boolean true if the specified source is an anonymous method; otherwise, false . | Improve this Doc IsComparable(Type) Determines whether the specified source implements either System.IComparable or System.IComparable<T> . Declaration public static bool IsComparable(Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.IComparable or System.IComparable<T> . Returns Type Description System.Boolean true if the specified source implements either System.IComparable or System.IComparable<T> ; otherwise, false . | Improve this Doc IsComparer(Type) Determines whether the specified source implements either System.Collections.IComparer or System.Collections.Generic.IComparer<T> . Declaration public static bool IsComparer(Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.IComparer or System.Collections.Generic.IComparer<T> . Returns Type Description System.Boolean true if the specified source implements either System.Collections.IComparer or System.Collections.Generic.IComparer<T> ; otherwise, false . | Improve this Doc IsComplex(Type[]) Determines whether the specified sources , as a whole, is determined a complex System.Type . Declaration public static bool IsComplex(params Type[] sources) Parameters Type Name Description System.Type [] sources The System.Type (or types) to determine complexity for. Returns Type Description System.Boolean true if specified sources , as a whole, is a complex System.Type ; otherwise, false . Exceptions Type Condition System.ArgumentNullException sources is null. | Improve this Doc IsDictionary(Type) Determines whether the specified source implements either System.Collections.IDictionary , System.Collections.Generic.IDictionary<TKey, TValue> or System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> . Declaration public static bool IsDictionary(Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.IDictionary , System.Collections.Generic.IDictionary<TKey, TValue> or System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> Returns Type Description System.Boolean true if the specified source implements either System.Collections.IDictionary , System.Collections.Generic.IDictionary<TKey, TValue> or System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> ; otherwise, false . | Improve this Doc IsEnumerable(Type) Determines whether the specified source implements either System.Collections.IEnumerable or System.Collections.Generic.IEnumerable<T> . Declaration public static bool IsEnumerable(Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.IEnumerable or System.Collections.Generic.IEnumerable<T> . Returns Type Description System.Boolean true if the specified source implements either System.Collections.IEnumerable or System.Collections.Generic.IEnumerable<T> ; otherwise, false . | Improve this Doc IsEqualityComparer(Type) Determines whether the specified source implements either System.Collections.IEqualityComparer or System.Collections.Generic.IEqualityComparer<T> . Declaration public static bool IsEqualityComparer(Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.IEqualityComparer or System.Collections.Generic.IEqualityComparer<T> . Returns Type Description System.Boolean true if the specified source implements either System.Collections.IEqualityComparer or System.Collections.Generic.IEqualityComparer<T> ; otherwise, false . | Improve this Doc IsKeyValuePair(Type) Determines whether the specified source implements either System.Collections.DictionaryEntry or System.Collections.Generic.KeyValuePair<TKey,TValue> . Declaration public static bool IsKeyValuePair(Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.DictionaryEntry or System.Collections.Generic.KeyValuePair<TKey,TValue> . Returns Type Description System.Boolean true if the specified source implements either System.Collections.DictionaryEntry or System.Collections.Generic.KeyValuePair<TKey,TValue> .; otherwise, false . | Improve this Doc IsNot<T>(Object) Determines whether the specified source is not of T . Declaration public static bool IsNot<T>(object source) Parameters Type Name Description System.Object source The object to compare with T . Returns Type Description System.Boolean true if the specified source is not of T ; otherwise, false . Type Parameters Name Description T The type to compare with source . | Improve this Doc IsNullable(Type) Determines whether the specified source is a nullable System.ValueType . Declaration public static bool IsNullable(Type source) Parameters Type Name Description System.Type source The source type to check for nullable System.ValueType . Returns Type Description System.Boolean true if the specified source is nullable; otherwise, false . | Improve this Doc IsNullable<T>(T) Determines whether the specified source is a nullable System.ValueType . Declaration public static bool IsNullable<T>(T source) Parameters Type Name Description T source The source type to check for nullable System.ValueType . Returns Type Description System.Boolean true if the specified source is nullable; otherwise, false . Type Parameters Name Description T The type of the source of T . | Improve this Doc IsNullable<T>(Nullable<T>) Determines whether the specified source is a nullable System.ValueType . Declaration public static bool IsNullable<T>(T? source) where T : struct Parameters Type Name Description System.Nullable <T> source The source type to check for nullable System.ValueType . Returns Type Description System.Boolean true if the specified source is nullable; otherwise, false . Type Parameters Name Description T The type of the source of T . | Improve this Doc IsWithDefaultConstructor(Type) Determines whether the specified source has a default constructor. Declaration public static bool IsWithDefaultConstructor(Type source) Parameters Type Name Description System.Type source The System.Type to determine is with default constructor. Returns Type Description System.Boolean true if the specified source has a default constructor; otherwise, false . | Improve this Doc IsWithoutDefaultConstructor(Type) Determines whether the specified source does not have a default constructor. Declaration public static bool IsWithoutDefaultConstructor(Type source) Parameters Type Name Description System.Type source The System.Type to determine is without a default constructor. Returns Type Description System.Boolean true if the specified source does not have a default constructor; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TypeExtensions.html": {
    "href": "api/core/Cuemon.TypeExtensions.html",
    "title": "Class TypeExtensions | Cuemon .NET Standard",
    "keywords": "Class TypeExtensions Extension methods for the System.Type . Inheritance System.Object TypeExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TypeExtensions Methods | Improve this Doc GetAncestorsAndDescendantsAndSelf(Type) Gets a sorted (base-to-derived) sequence of ancestor-and-descendant-or-self types from the source . Declaration public static IEnumerable<Type> GetAncestorsAndDescendantsAndSelf(this Type source) Parameters Type Name Description System.Type source The source type to locate ancestor-and-descendant-or-self types from. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the ancestor-and-descendant-or-self types from the source . | Improve this Doc GetAncestorsAndDescendantsAndSelf(Type, Assembly[]) Gets a sorted (base-to-derived) sequence of ancestor-and-descendant-or-self types from the source . Declaration public static IEnumerable<Type> GetAncestorsAndDescendantsAndSelf(this Type source, params Assembly[] assemblies) Parameters Type Name Description System.Type source The source type to locate ancestor-and-descendant-or-self types from. System.Reflection.Assembly [] assemblies The assemblies to search for the source . Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the ancestor-and-descendant-or-self types from the source . | Improve this Doc GetAncestorsAndSelf(Type) Gets a sequence of ancestor-or-self types from the source . Declaration public static IEnumerable<Type> GetAncestorsAndSelf(this Type source) Parameters Type Name Description System.Type source The source type to locate ancestor-or-self types from. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the ancestor-or-self types from the source . | Improve this Doc GetAncestorsAndSelf(Type, Type) Gets the ancestor-or-self System.Type from the specified source . Declaration public static Type GetAncestorsAndSelf(this Type source, Type sourceBaseLimit) Parameters Type Name Description System.Type source The source type to traverse. System.Type sourceBaseLimit The base limit of source . Returns Type Description System.Type The ancestor-or-self type from the specified source that is derived or equal to sourceBaseLimit . Exceptions Type Condition System.ArgumentNullException source - or - sourceBaseLimit is null. | Improve this Doc GetDefaultValue(Type) Gets the default value of the specified type . Declaration public static object GetDefaultValue(this Type type) Parameters Type Name Description System.Type type The System.Type to retrieve its default value from. Returns Type Description System.Object The default value of type . | Improve this Doc GetDescendantsAndSelf(Type) Gets a sequence of derived types from the source an it's associated System.Reflection.Assembly . Declaration public static IEnumerable<Type> GetDescendantsAndSelf(this Type source) Parameters Type Name Description System.Type source The source type to locate derived types from. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the derived types from the source . | Improve this Doc GetDescendantsAndSelf(Type, Assembly[]) Gets a sequence of derived types from the source . Declaration public static IEnumerable<Type> GetDescendantsAndSelf(this Type source, params Assembly[] assemblies) Parameters Type Name Description System.Type source The source type to locate derived types from. System.Reflection.Assembly [] assemblies The assemblies to search for the source . Returns Type Description System.Collections.Generic.IEnumerable < System.Type > An System.Collections.Generic.IEnumerable<T> holding the derived types from the source . | Improve this Doc HasAttributes(Type, Boolean, Type[]) Determines whether the specified source type contains one or more of the specified attribute target types. Declaration public static bool HasAttributes(this Type source, bool inherit, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Boolean inherit true to search the source inheritance chain to find the attributes; otherwise, false . System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified source type contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc HasAttributes(Type, Type[]) Determines whether the specified source type contains one or more of the specified attribute target types. Declaration public static bool HasAttributes(this Type source, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified source type contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc HasInterfaces(Type, Boolean, Type[]) Determines whether the specified source contains one or more of the target types specified. Declaration public static bool HasInterfaces(this Type source, bool inherit, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Boolean inherit Specifies whether to search this member's inheritance chain to find the interfaces. System.Type [] targets The target interface types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the target types specified; otherwise, false . | Improve this Doc HasInterfaces(Type, Type[]) Determines whether the specified source contains one or more of the target types specified throughout this member's inheritance chain. Declaration public static bool HasInterfaces(this Type source, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Type [] targets The target interface types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the target types specified throughout this member's inheritance chain; otherwise, false . | Improve this Doc HasTypes(Type, Type[]) Determines whether the specified source type contains one or more of the specified target types. Declaration public static bool HasTypes(this Type source, params Type[] targets) Parameters Type Name Description System.Type source The source type to match against. System.Type [] targets The target types to be matched against. Returns Type Description System.Boolean true if the specified source contains one or more of the specified target types; otherwise, false . | Improve this Doc IsAnonymousMethod(Type) Determines whether the specified source is an anonymous method (be that in a form of a delegate or lambda expression). Declaration public static bool IsAnonymousMethod(this Type source) Parameters Type Name Description System.Type source The System.Type to determine is an anonymous method. Returns Type Description System.Boolean true if the specified source is an anonymous method; otherwise, false . | Improve this Doc IsComparable(Type) Determines whether the specified source implements either System.IComparable or System.IComparable<T> . Declaration public static bool IsComparable(this Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.IComparable or System.IComparable<T> . Returns Type Description System.Boolean true if the specified source implements either System.IComparable or System.IComparable<T> ; otherwise, false . | Improve this Doc IsComparer(Type) Determines whether the specified source implements either System.Collections.IComparer or System.Collections.Generic.IComparer<T> . Declaration public static bool IsComparer(this Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.IComparer or System.Collections.Generic.IComparer<T> . Returns Type Description System.Boolean true if the specified source implements either System.Collections.IComparer or System.Collections.Generic.IComparer<T> ; otherwise, false . | Improve this Doc IsComplex(Type) Determines whether the specified source is a complex System.Type . Declaration public static bool IsComplex(this Type source) Parameters Type Name Description System.Type source The System.Type to determine complexity for. Returns Type Description System.Boolean true if specified source is a complex System.Type ; otherwise, false . Exceptions Type Condition System.ArgumentNullException source is null. | Improve this Doc IsDictionary(Type) Determines whether the specified source implements either System.Collections.IDictionary , System.Collections.Generic.IDictionary<TKey, TValue> or System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> . Declaration public static bool IsDictionary(this Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.IDictionary , System.Collections.Generic.IDictionary<TKey, TValue> or System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> Returns Type Description System.Boolean true if the specified source implements either System.Collections.IDictionary , System.Collections.Generic.IDictionary<TKey, TValue> or System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> ; otherwise, false . | Improve this Doc IsEnumerable(Type) Determines whether the specified source implements either System.Collections.IEnumerable or System.Collections.Generic.IEnumerable<T> . Declaration public static bool IsEnumerable(this Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.IEnumerable or System.Collections.Generic.IEnumerable<T> . Returns Type Description System.Boolean true if the specified source implements either System.Collections.IEnumerable or System.Collections.Generic.IEnumerable<T> ; otherwise, false . | Improve this Doc IsEqualityComparer(Type) Determines whether the specified source implements either System.Collections.IEqualityComparer or System.Collections.Generic.IEqualityComparer<T> . Declaration public static bool IsEqualityComparer(this Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.IEqualityComparer or System.Collections.Generic.IEqualityComparer<T> . Returns Type Description System.Boolean true if the specified source implements either System.Collections.IEqualityComparer or System.Collections.Generic.IEqualityComparer<T> ; otherwise, false . | Improve this Doc IsKeyValuePair(Type) Determines whether the specified source implements either System.Collections.DictionaryEntry or System.Collections.Generic.KeyValuePair<TKey,TValue> . Declaration public static bool IsKeyValuePair(this Type source) Parameters Type Name Description System.Type source The source type to check for implements of either System.Collections.DictionaryEntry or System.Collections.Generic.KeyValuePair<TKey,TValue> . Returns Type Description System.Boolean true if the specified source implements either System.Collections.DictionaryEntry or System.Collections.Generic.KeyValuePair<TKey,TValue> .; otherwise, false . | Improve this Doc IsNullable(Type) Determines whether the specified source is a nullable System.ValueType . Declaration public static bool IsNullable(this Type source) Parameters Type Name Description System.Type source The source type to check for nullable System.ValueType . Returns Type Description System.Boolean true if the specified source is nullable; otherwise, false . | Improve this Doc ToFullNameIncludingAssemblyName(Type) Converts the System.Type to its equivalent string representation. Declaration public static string ToFullNameIncludingAssemblyName(this Type type) Parameters Type Name Description System.Type type The System.Type to extend. Returns Type Description System.String A string that contains the fully qualified name of the type, including its namespace, comma delimited with the simple name of the assembly. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TaskFuncFactory-2.html": {
    "href": "api/core/Cuemon.TaskFuncFactory-2.html",
    "title": "Class TaskFuncFactory<TTuple, TResult> | Cuemon .NET Standard",
    "keywords": "Class TaskFuncFactory<TTuple, TResult> Provides an easy way of invoking an System.Func<TResult> function delegate regardless of the amount of parameters provided. Inheritance System.Object TemplateFactory <TTuple> TaskFuncFactory<TTuple, TResult> Inherited Members TemplateFactory<TTuple>.GenericArguments TemplateFactory<TTuple>.HasDelegate TemplateFactory<TTuple>.DelegateInfo TemplateFactory<TTuple>.ToString() TemplateFactory<TTuple>.ThrowIfNoValidDelegate(Boolean) Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public sealed class TaskFuncFactory<TTuple, TResult> : TemplateFactory<TTuple> where TTuple : Template Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . TResult The type of the return value of the function delegate Cuemon.TaskFuncFactory`2.Method . Constructors | Improve this Doc TaskFuncFactory(Func<TTuple, Task<TResult>>, TTuple) Initializes a new instance of the TaskFuncFactory<TTuple, TResult> class. Declaration public TaskFuncFactory(Func<TTuple, Task<TResult>> method, TTuple tuple) Parameters Type Name Description System.Func <TTuple, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. TTuple tuple The n-tuple argument of method . Methods | Improve this Doc Clone() Creates a shallow copy of the current TaskFuncFactory<TTuple, TResult> object. Declaration public TaskFuncFactory<TTuple, TResult> Clone() Returns Type Description TaskFuncFactory <TTuple, TResult> A new TaskFuncFactory<TTuple, TResult> that is a copy of this instance. Remarks When thread safety is required this is the method to invoke. | Improve this Doc ExecuteMethodAsync() Executes the function delegate associated with this instance. Declaration public Task<TResult> ExecuteMethodAsync() Returns Type Description System.Threading.Tasks.Task <TResult> The result of the the function delegate associated with this instance. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TaskActionFactory.html": {
    "href": "api/core/Cuemon.TaskActionFactory.html",
    "title": "Class TaskActionFactory | Cuemon .NET Standard",
    "keywords": "Class TaskActionFactory Provides access to factory methods for creating TaskActionFactory<TTuple> instances that encapsulate a System.Threading.Tasks.Task based function delegate with a variable amount of generic arguments. Inheritance System.Object TaskActionFactory Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TaskActionFactory Methods | Improve this Doc Create(Func<Task>) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method . Declaration public static TaskActionFactory<Template> Create(Func<Task> method) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. Returns Type Description TaskActionFactory < Template > An instance of TaskActionFactory<TTuple> object initialized with the specified method . | Improve this Doc Create<T>(Func<T, Task>, T) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and one generic argument. Declaration public static TaskActionFactory<Template<T>> Create<T>(Func<T, Task> method, T arg) Parameters Type Name Description System.Func <T, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T arg The parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and one generic argument. Type Parameters Name Description T The type of the parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and ten generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and ten generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and eleven generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and eleven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and twelfth generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and twelfth generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and thirteen generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . T13 arg13 The thirteenth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and thirteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . T13 The type of the thirteenth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and fourteen generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . T13 arg13 The thirteenth parameter of the delegate method . T14 arg14 The fourteenth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and fourteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . T13 The type of the thirteenth parameter of the delegate method . T14 The type of the fourteenth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and fifteen generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . T13 arg13 The thirteenth parameter of the delegate method . T14 arg14 The fourteenth parameter of the delegate method . T15 arg15 The fifteenth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and fifteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . T13 The type of the thirteenth parameter of the delegate method . T14 The type of the fourteenth parameter of the delegate method . T15 The type of the fifteenth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and sixteen generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . T11 arg11 The eleventh parameter of the delegate method . T12 arg12 The twelfth parameter of the delegate method . T13 arg13 The thirteenth parameter of the delegate method . T14 arg14 The fourteenth parameter of the delegate method . T15 arg15 The fifteenth parameter of the delegate method . T16 arg16 The sixteenth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and sixteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . T11 The type of the eleventh parameter of the delegate method . T12 The type of the twelfth parameter of the delegate method . T13 The type of the thirteenth parameter of the delegate method . T14 The type of the fourteenth parameter of the delegate method . T15 The type of the fifteenth parameter of the delegate method . T16 The type of the sixteenth parameter of the delegate method . | Improve this Doc Create<T1, T2>(Func<T1, T2, Task>, T1, T2) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and two generic arguments. Declaration public static TaskActionFactory<Template<T1, T2>> Create<T1, T2>(Func<T1, T2, Task> method, T1 arg1, T2 arg2) Parameters Type Name Description System.Func <T1, T2, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and two generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . | Improve this Doc Create<T1, T2, T3>(Func<T1, T2, T3, Task>, T1, T2, T3) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and three generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3>> Create<T1, T2, T3>(Func<T1, T2, T3, Task> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Func <T1, T2, T3, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and three generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task>, T1, T2, T3, T4) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and four generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4>> Create<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Func <T1, T2, T3, T4, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and four generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Task>, T1, T2, T3, T4, T5) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and five generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5>> Create<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and five generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Task>, T1, T2, T3, T4, T5, T6) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and six generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6>> Create<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and six generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Task>, T1, T2, T3, T4, T5, T6, T7) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and seven generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7>> Create<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and seven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task>, T1, T2, T3, T4, T5, T6, T7, T8) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and eight generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8>> Create<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and eight generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Creates a new TaskActionFactory<TTuple> instance encapsulating the specified method and nine generic arguments. Declaration public static TaskActionFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . Returns Type Description TaskActionFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9>> An instance of TaskActionFactory<TTuple> object initialized with the specified method and nine generic arguments. Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TaskActionFactory-1.html": {
    "href": "api/core/Cuemon.TaskActionFactory-1.html",
    "title": "Class TaskActionFactory<TTuple> | Cuemon .NET Standard",
    "keywords": "Class TaskActionFactory<TTuple> Provides an easy way of invoking an System.Action delegate regardless of the amount of parameters provided. Inheritance System.Object TemplateFactory <TTuple> TaskActionFactory<TTuple> Inherited Members TemplateFactory<TTuple>.GenericArguments TemplateFactory<TTuple>.HasDelegate TemplateFactory<TTuple>.DelegateInfo TemplateFactory<TTuple>.ToString() TemplateFactory<TTuple>.ThrowIfNoValidDelegate(Boolean) Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public sealed class TaskActionFactory<TTuple> : TemplateFactory<TTuple> where TTuple : Template Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . Constructors | Improve this Doc TaskActionFactory(Func<TTuple, Task>, TTuple) Initializes a new instance of the TaskActionFactory class. Declaration public TaskActionFactory(Func<TTuple, Task> method, TTuple tuple) Parameters Type Name Description System.Func <TTuple, System.Threading.Tasks.Task > method The System.Threading.Tasks.Task based function delegate to invoke. TTuple tuple The n-tuple argument of method . Methods | Improve this Doc Clone() Creates a shallow copy of the current TaskActionFactory<TTuple> object. Declaration public TaskActionFactory<TTuple> Clone() Returns Type Description TaskActionFactory <TTuple> A new TaskActionFactory<TTuple> that is a copy of this instance. Remarks When thread safety is required this is the method to invoke. | Improve this Doc ExecuteMethodAsync() Executes the delegate associated with this instance. Declaration public Task ExecuteMethodAsync() Returns Type Description System.Threading.Tasks.Task Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StructUtilityExtensions.html": {
    "href": "api/core/Cuemon.StructUtilityExtensions.html",
    "title": "Class StructUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class StructUtilityExtensions This is an extension implementation of the most common methods on the StructUtility class. Inheritance System.Object StructUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class StructUtilityExtensions Methods | Improve this Doc GetHashCode32<T>(IEnumerable<T>) Computes a suitable hash code from the specified sequence of convertibles . Declaration public static int GetHashCode32<T>(this IEnumerable<T> convertibles) where T : struct, IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable <T> convertibles A sequence of structs implementing the System.IConvertible interface. Returns Type Description System.Int32 A 32-bit signed integer that is the hash code of convertibles . Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException convertibles is null. | Improve this Doc GetHashCode64<T>(IEnumerable<T>) Computes a suitable hash code from the specified sequence of convertibles . Declaration public static long GetHashCode64<T>(this IEnumerable<T> convertibles) where T : struct, IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable <T> convertibles A sequence of structs implementing the System.IConvertible interface. Returns Type Description System.Int64 A 64-bit signed integer that is the hash code of convertibles . Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException convertibles is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.XmlConvert.html": {
    "href": "api/core/Cuemon.Serialization.Xml.XmlConvert.html",
    "title": "Class XmlConvert | Cuemon .NET Standard",
    "keywords": "Class XmlConvert Provides methods for converting between .NET types and XML types. Inheritance System.Object XmlConvert Namespace : Cuemon.Serialization.Xml Assembly : Cuemon.Serialization.Xml.dll Syntax public static class XmlConvert Properties | Improve this Doc DefaultSettings Gets or sets a function delegate that creates default XmlSerializerSettings . Declaration public static Func<XmlSerializerSettings> DefaultSettings { get; set; } Property Value Type Description System.Func < XmlSerializerSettings > The function delegate which provides default settings for XmlConvert implementations. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Threading.Tasks.TaskExtensions.html": {
    "href": "api/core/Cuemon.Threading.Tasks.TaskExtensions.html",
    "title": "Class TaskExtensions | Cuemon .NET Standard",
    "keywords": "Class TaskExtensions Extension methods for the System.Threading.Tasks.Task . Inheritance System.Object TaskExtensions Namespace : Cuemon.Threading.Tasks Assembly : Cuemon.Core.dll Syntax public static class TaskExtensions Methods | Improve this Doc ContinueWithCapturedContext(Task) Configures an awaiter to marshal the continuation back to the captured synchronization context. Declaration public static ConfiguredTaskAwaitable ContinueWithCapturedContext(this Task t) Parameters Type Name Description System.Threading.Tasks.Task t The System.Threading.Tasks.Task to extend. Returns Type Description System.Runtime.CompilerServices.ConfiguredTaskAwaitable An object used to await this task. | Improve this Doc ContinueWithCapturedContext<TResult>(Task<TResult>) Configures an awaiter to marshal the continuation back to the captured synchronization context. Declaration public static ConfiguredTaskAwaitable<TResult> ContinueWithCapturedContext<TResult>(this Task<TResult> t) Parameters Type Name Description System.Threading.Tasks.Task <TResult> t The System.Threading.Tasks.Task to extend. Returns Type Description System.Runtime.CompilerServices.ConfiguredTaskAwaitable <TResult> An object used to await this task. Type Parameters Name Description TResult The type of the result produced by this System.Threading.Tasks.Task<TResult> . | Improve this Doc ContinueWithSuppressedContext(Task) Configures an awaiter to suppress capturing a synchronization context back to the continuation. Declaration public static ConfiguredTaskAwaitable ContinueWithSuppressedContext(this Task t) Parameters Type Name Description System.Threading.Tasks.Task t The System.Threading.Tasks.Task to extend. Returns Type Description System.Runtime.CompilerServices.ConfiguredTaskAwaitable An object used to await this task. | Improve this Doc ContinueWithSuppressedContext<TResult>(Task<TResult>) Configures an awaiter to suppress capturing a synchronization context back to the continuation. Declaration public static ConfiguredTaskAwaitable<TResult> ContinueWithSuppressedContext<TResult>(this Task<TResult> t) Parameters Type Name Description System.Threading.Tasks.Task <TResult> t The System.Threading.Tasks.Task to extend. Returns Type Description System.Runtime.CompilerServices.ConfiguredTaskAwaitable <TResult> An object used to await this task. Type Parameters Name Description TResult The type of the result produced by this System.Threading.Tasks.Task<TResult> . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-8.html": {
    "href": "api/core/Cuemon.Template-8.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8> Represents a Template with eight generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template<T1, T2, T3, T4, T5, T6, T7, T8> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8> : Template<T1, T2, T3, T4, T5, T6, T7> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . Properties | Improve this Doc Arg8 Gets or sets the eighth parameter of this instance. Declaration public T8 Arg8 { get; set; } Property Value Type Description T8 The eighth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-7.html": {
    "href": "api/core/Cuemon.Template-7.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7> Represents a Template with seven generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template<T1, T2, T3, T4, T5, T6, T7> Template<T1, T2, T3, T4, T5, T6, T7, T8> Inherited Members Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7> : Template<T1, T2, T3, T4, T5, T6> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . Properties | Improve this Doc Arg7 Gets or sets the seventh parameter of this instance. Declaration public T7 Arg7 { get; set; } Property Value Type Description T7 The seventh parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-6.html": {
    "href": "api/core/Cuemon.Template-6.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6> Represents a Template with six generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template<T1, T2, T3, T4, T5, T6> Template<T1, T2, T3, T4, T5, T6, T7> Inherited Members Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6> : Template<T1, T2, T3, T4, T5> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . Properties | Improve this Doc Arg6 Gets or sets the sixth parameter of this instance. Declaration public T6 Arg6 { get; set; } Property Value Type Description T6 The sixth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-5.html": {
    "href": "api/core/Cuemon.Template-5.html",
    "title": "Class Template<T1, T2, T3, T4, T5> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5> Represents a Template with five generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template<T1, T2, T3, T4, T5> Template<T1, T2, T3, T4, T5, T6> Inherited Members Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5> : Template<T1, T2, T3, T4> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5) Initializes a new instance of the Template<T1, T2, T3, T4, T5> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . Properties | Improve this Doc Arg5 Gets or sets the fifth parameter of this instance. Declaration public T5 Arg5 { get; set; } Property Value Type Description T5 The fifth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.Converters.XmlConverter.html": {
    "href": "api/core/Cuemon.Serialization.Xml.Converters.XmlConverter.html",
    "title": "Class XmlConverter | Cuemon .NET Standard",
    "keywords": "Class XmlConverter Converts an object to and from XML. Inheritance System.Object XmlConverter DefaultXmlConverter Namespace : Cuemon.Serialization.Xml.Converters Assembly : Cuemon.Serialization.Xml.dll Syntax public abstract class XmlConverter Properties | Improve this Doc CanRead Gets a value indicating whether this XmlConverter can XML. Declaration public virtual bool CanRead { get; } Property Value Type Description System.Boolean true if this XmlConverter can read XML; otherwise, false . | Improve this Doc CanWrite Gets a value indicating whether this XmlConverter can write XML. Declaration public virtual bool CanWrite { get; } Property Value Type Description System.Boolean true if this XmlConverter can write XML; otherwise, false . Methods | Improve this Doc CanConvert(Type) Determines whether this instance can convert the specified object type. Declaration public abstract bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType The System.Type of the object. Returns Type Description System.Boolean true if this instance can convert the specified object type; otherwise, false . | Improve this Doc ReadXml(XmlReader, Type) Reads the XML representation of the objectType . Declaration public abstract object ReadXml(XmlReader reader, Type objectType) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader to read from. System.Type objectType The System.Type of the object. Returns Type Description System.Object An object of objectType . | Improve this Doc WriteXml(XmlWriter, Object, XmlQualifiedEntity) Writes the XML representation of the value . Declaration public abstract void WriteXml(XmlWriter writer, object value, XmlQualifiedEntity elementName = null) Parameters Type Name Description System.Xml.XmlWriter writer The System.Xml.XmlWriter to write to. System.Object value The object to serialize. XmlQualifiedEntity elementName The element name to encapsulate around value . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.Converters.DefaultXmlConverter.html": {
    "href": "api/core/Cuemon.Serialization.Xml.Converters.DefaultXmlConverter.html",
    "title": "Class DefaultXmlConverter | Cuemon .NET Standard",
    "keywords": "Class DefaultXmlConverter Provides a default way to convert objects to and from XML. Inheritance System.Object XmlConverter DefaultXmlConverter Inherited Members XmlConverter.CanRead XmlConverter.CanWrite Namespace : Cuemon.Serialization.Xml.Converters Assembly : Cuemon.Serialization.Xml.dll Syntax public sealed class DefaultXmlConverter : XmlConverter Constructors | Improve this Doc DefaultXmlConverter(XmlQualifiedEntity, IList<XmlConverter>) Initializes a new instance of the DefaultXmlConverter class. Declaration public DefaultXmlConverter(XmlQualifiedEntity rootName, IList<XmlConverter> converters) Parameters Type Name Description XmlQualifiedEntity rootName System.Collections.Generic.IList < XmlConverter > converters Methods | Improve this Doc CanConvert(Type) Determines whether this instance can convert the specified object type. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType The System.Type of the object. Returns Type Description System.Boolean true if this instance can convert the specified object type; otherwise, false . Overrides XmlConverter.CanConvert(Type) | Improve this Doc ReadXml(XmlReader, Type) Generates an object from its XML representation. Declaration public override object ReadXml(XmlReader reader, Type objectType) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader stream from which the object is deserialized. System.Type objectType The System.Type of the object to generate. Returns Type Description System.Object The generated (deserialized) object. Overrides XmlConverter.ReadXml(XmlReader, Type) | Improve this Doc WriteXml(XmlWriter, Object, XmlQualifiedEntity) Converts an object into its XML representation. Declaration public override void WriteXml(XmlWriter writer, object value, XmlQualifiedEntity elementName = null) Parameters Type Name Description System.Xml.XmlWriter writer The System.Xml.XmlWriter stream to which the object is serialized. System.Object value The object to convert. XmlQualifiedEntity elementName The element name to encapsulate around value . Overrides XmlConverter.WriteXml(XmlWriter, Object, XmlQualifiedEntity) Exceptions Type Condition System.InvalidOperationException There is an error in the XML document. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Formatters.html": {
    "href": "api/core/Cuemon.Serialization.Formatters.html",
    "title": "Namespace Cuemon.Serialization.Formatters | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Serialization.Formatters Assembly : Cuemon.Serialization.dll Classes Formatter<TFormat> An abstract class that supports serialization and deserialization of an object, in a given format. FormatterExtensions Extension methods for Formatter<TFormat> related operations. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.ViewDataDictionaryExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.ViewDataDictionaryExtensions.html",
    "title": "Class ViewDataDictionaryExtensions | Cuemon .NET Standard",
    "keywords": "Class ViewDataDictionaryExtensions Extension methods for the Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary class. Experimental. Inheritance System.Object ViewDataDictionaryExtensions Namespace : Cuemon.AspNetCore.Mvc Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public static class ViewDataDictionaryExtensions Methods | Improve this Doc AddBreadcrumbs<T>(ViewDataDictionary, Controller, T, Func<T, IEnumerable<String>>) Adds a sequence of Breadcrumb objects to the specified viewData . Declaration public static void AddBreadcrumbs<T>(this ViewDataDictionary viewData, Controller controller, T model, Func<T, IEnumerable<string>> initializer) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData The Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary to extend. Microsoft.AspNetCore.Mvc.Controller controller The controller to resolve all public methods with Microsoft.AspNetCore.Mvc.IActionResult as return type from. T model The model to retrieve custom breadcrumb labels from. System.Func <T, System.Collections.Generic.IEnumerable < System.String >> initializer The function delegate that will initialize labels from the spcified model . Type Parameters Name Description T The type of the model to retrieve breadcrumb labels from. | Improve this Doc GetBreadcrumbs(ViewDataDictionary, IRazorPage) Gets a sequence of Breadcrumb objects from the specified viewData . Declaration public static IEnumerable<Breadcrumb> GetBreadcrumbs(this ViewDataDictionary viewData, IRazorPage razor) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData The Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary to extend. Microsoft.AspNetCore.Mvc.Razor.IRazorPage razor The razor page from where the breadcrumbs will be rendered. Returns Type Description System.Collections.Generic.IEnumerable < Breadcrumb > An System.Collections.Generic.IEnumerable<T> sequence of Breadcrumb objects (if any). (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.JsonSerializationOutputFormatter.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.JsonSerializationOutputFormatter.html",
    "title": "Class JsonSerializationOutputFormatter | Cuemon .NET Standard",
    "keywords": "Class JsonSerializationOutputFormatter This class handles serialization of objects to JSON using JsonFormatter . Inheritance System.Object Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter JsonSerializationOutputFormatter Implements Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider Inherited Members Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.SelectCharacterEncoding(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.SupportedEncodings Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.CanWriteType(System.Type) Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.GetSupportedContentTypes(System.String, System.Type) Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext) Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.WriteResponseHeaders(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.SupportedMediaTypes Namespace : Cuemon.AspNetCore.Mvc.Formatters.Json Assembly : Cuemon.AspNetCore.Mvc.Formatters.Json.dll Syntax public class JsonSerializationOutputFormatter : TextOutputFormatter, IOutputFormatter, IApiResponseTypeMetadataProvider Constructors | Improve this Doc JsonSerializationOutputFormatter(JsonFormatterOptions) Initializes a new instance of the JsonSerializationOutputFormatter class. Declaration public JsonSerializationOutputFormatter(JsonFormatterOptions formatterOptions) Parameters Type Name Description JsonFormatterOptions formatterOptions Methods | Improve this Doc WriteResponseBodyAsync(OutputFormatterWriteContext, Encoding) Write response body as an asynchronous operation. Declaration public override Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext context The formatter context associated with the call. System.Text.Encoding selectedEncoding The System.Text.Encoding that should be used to write the response. Returns Type Description System.Threading.Tasks.Task A task which can write the response body. Overrides Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.Text.Encoding) Implements Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ModelBinding.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ModelBinding.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Filters.ModelBinding | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Filters.ModelBinding Assembly : Cuemon.AspNetCore.Mvc.dll Classes DisableModelBindingAttribute Provides a generic way to disable Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory implementations used for model binding. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ICacheableObjectResult.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.ICacheableObjectResult.html",
    "title": "Interface ICacheableObjectResult | Cuemon .NET Standard",
    "keywords": "Interface ICacheableObjectResult An interface for providing hints to an implementor that an object is cacheable. Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public interface ICacheableObjectResult Properties | Improve this Doc Value Gets or sets the value of the cacheable object. Declaration object Value { get; set; } Property Value Type Description System.Object The value of the cacheable object. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also ICacheableTimestamp ICacheableIntegrity ICacheableEntity (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.TimeMeasureProfiler-1.html": {
    "href": "api/core/Cuemon.Diagnostics.TimeMeasureProfiler-1.html",
    "title": "Class TimeMeasureProfiler<TResult> | Cuemon .NET Standard",
    "keywords": "Class TimeMeasureProfiler<TResult> Represents a profiler that is optimized for time measuring operations that provides a return value. This class cannot be inherited. Inheritance System.Object Profiler TimeMeasureProfiler TimeMeasureProfiler<TResult> Inherited Members TimeMeasureProfiler.Elapsed TimeMeasureProfiler.IsRunning TimeMeasureProfiler.ToString() Profiler.Member Profiler.Data Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public sealed class TimeMeasureProfiler<TResult> : TimeMeasureProfiler Type Parameters Name Description TResult The type of the return value. Properties | Improve this Doc Result Gets or sets the result of a time measuring operation that returned a value. Declaration public TResult Result { get; set; } Property Value Type Description TResult The result of a time measuring operation that returned a value. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also TimeMeasureProfiler (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DateTimeExtensions.html": {
    "href": "api/core/Cuemon.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | Cuemon .NET Standard",
    "keywords": "Class DateTimeExtensions This is an extensions implementation of the System.DateTime structure using methods already found in the Microsoft .NET Framework. Inheritance System.Object DateTimeExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DateTimeExtensions Methods | Improve this Doc IsTimeOfDayAfternoon(DateTime) Determines whether the specified dt is within Afternoon . Declaration public static bool IsTimeOfDayAfternoon(this DateTime dt) Parameters Type Name Description System.DateTime dt The System.DateTime to compare. Returns Type Description System.Boolean true if dt is within Afternoon ; otherwise false . | Improve this Doc IsTimeOfDayEvening(DateTime) Determines whether the specified dt is within Evening . Declaration public static bool IsTimeOfDayEvening(this DateTime dt) Parameters Type Name Description System.DateTime dt The System.DateTime to compare. Returns Type Description System.Boolean true if dt is within Evening ; otherwise false . | Improve this Doc IsTimeOfDayForenoon(DateTime) Determines whether the specified dt is within Forenoon . Declaration public static bool IsTimeOfDayForenoon(this DateTime dt) Parameters Type Name Description System.DateTime dt The System.DateTime to compare. Returns Type Description System.Boolean true if dt is within Forenoon ; otherwise false . | Improve this Doc IsTimeOfDayMorning(DateTime) Determines whether the specified dt is within Morning . Declaration public static bool IsTimeOfDayMorning(this DateTime dt) Parameters Type Name Description System.DateTime dt The System.DateTime to compare. Returns Type Description System.Boolean true if dt is within Morning ; otherwise false . | Improve this Doc IsTimeOfDayNight(DateTime) Determines whether the specified dt is within Night . Declaration public static bool IsTimeOfDayNight(this DateTime dt) Parameters Type Name Description System.DateTime dt The System.DateTime to compare. Returns Type Description System.Boolean true if dt is within Night ; otherwise false . | Improve this Doc IsWithinRange(DateTime, TimeRange) Determines whether the specified dt is within range . Declaration public static bool IsWithinRange(this DateTime dt, TimeRange range) Parameters Type Name Description System.DateTime dt The System.DateTime to compare. TimeRange range The TimeRange of dt . Returns Type Description System.Boolean true if dt is within the specified range ; otherwise false . | Improve this Doc IsWithinRange(DateTime, DateTime, DateTime) Determines whether the specified dt is within range of min and max . Declaration public static bool IsWithinRange(this DateTime dt, DateTime min, DateTime max) Parameters Type Name Description System.DateTime dt The System.DateTime to compare. System.DateTime min The minimum value of dt . System.DateTime max The maximum value of dt . Returns Type Description System.Boolean true if dt is within the specified range of min and max ; otherwise false . | Improve this Doc ToDefaultKind(DateTime) Converts the specified value to a representation that is not specified as either local time or UTC. Declaration public static DateTime ToDefaultKind(this DateTime value) Parameters Type Name Description System.DateTime value The value to convert. Returns Type Description System.DateTime A new System.DateTime value initialized to System.DateTimeKind.Unspecified that has the same number of ticks as the object represented by the value parameter. | Improve this Doc ToLocalKind(DateTime) Converts the specified value to a local time representation. Declaration public static DateTime ToLocalKind(this DateTime value) Parameters Type Name Description System.DateTime value The value to convert. Returns Type Description System.DateTime A new System.DateTime value initialized to System.DateTimeKind.Local that has the same number of ticks as the object represented by the value parameter. | Improve this Doc ToUtcKind(DateTime) Converts the specified value to a Coordinated Universal Time (UTC) representation. Declaration public static DateTime ToUtcKind(this DateTime value) Parameters Type Name Description System.DateTime value The value to convert. Returns Type Description System.DateTime A new System.DateTime value initialized to System.DateTimeKind.Utc that has the same number of ticks as the object represented by the value parameter. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DateTimeConverterExtensions.html": {
    "href": "api/core/Cuemon.DateTimeConverterExtensions.html",
    "title": "Class DateTimeConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class DateTimeConverterExtensions This is an extension implementation of the DateTimeConverter class. Inheritance System.Object DateTimeConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DateTimeConverterExtensions Methods | Improve this Doc FromEpochTime(Double) Converts the specified Epoc time value to an equivalent System.DateTime representation. Declaration public static DateTime FromEpochTime(this double value) Parameters Type Name Description System.Double value The System.Double value to be converted. Returns Type Description System.DateTime A System.DateTime value that is equivalent to value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.IDataCommand.html": {
    "href": "api/core/Cuemon.Data.IDataCommand.html",
    "title": "Interface IDataCommand | Cuemon .NET Standard",
    "keywords": "Interface IDataCommand Represents a statement that is executed while an open connection to a data source exists. Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public interface IDataCommand Properties | Improve this Doc Text Gets or sets the command text to execute. Declaration string Text { get; set; } Property Value Type Description System.String The command text to execute. | Improve this Doc Timeout Gets or sets the wait time before terminating the attempt to execute a command and generating an error. Declaration TimeSpan Timeout { get; set; } Property Value Type Description System.TimeSpan The timespan to wait for the command to execute. | Improve this Doc Type Gets or sets the command type value to execute. Declaration CommandType Type { get; set; } Property Value Type Description System.Data.CommandType The command type value to execute. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.html": {
    "href": "api/core/Cuemon.Security.html",
    "title": "Namespace Cuemon.Security | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Security Assembly : Cuemon.Security.dll Classes Obfuscator Provides methods for obfuscation of documents for reduced readability and size. ObfuscatorMapping A simple container for the original value of an obfuscated entry as well as the obfuscated value. This is used for reversing an obfuscated document to its original value. SecureXmlObfuscator Provides methods for secure obfuscation (based on AES) of the otherwise similar class XmlObfuscator . SecurityToken Represents a simple security token schematic. SecurityTokenSettings Specifies a set of features to support on the SecurityToken object created by the Create(SecurityTokenSettings) method. SecurityUtility This utility class is designed to make security operations easier to work with. XmlObfuscator Provides methods for obfuscation and size reduction of human readable XML documents. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpLastModifiedHeader.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpLastModifiedHeader.html",
    "title": "Class HttpLastModifiedHeader | Cuemon .NET Standard",
    "keywords": "Class HttpLastModifiedHeader A filter that applies a HTTP Last-Modified header. Inheritance System.Object HttpLastModifiedHeader Implements IConfigurable < HttpLastModifiedHeaderOptions > ICacheableAsyncResultFilter Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class HttpLastModifiedHeader : IConfigurable<HttpLastModifiedHeaderOptions>, ICacheableAsyncResultFilter Constructors | Improve this Doc HttpLastModifiedHeader(Action<HttpLastModifiedHeaderOptions>) Initializes a new instance of the HttpLastModifiedHeader class. Declaration public HttpLastModifiedHeader(Action<HttpLastModifiedHeaderOptions> setup) Parameters Type Name Description System.Action < HttpLastModifiedHeaderOptions > setup The HttpLastModifiedHeaderOptions which need to be configured. Properties | Improve this Doc Options Gets the configured options of this instance. Declaration public HttpLastModifiedHeaderOptions Options { get; } Property Value Type Description HttpLastModifiedHeaderOptions The configured options of this instance. Methods | Improve this Doc OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) Called asynchronously before the action result. Declaration public Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext . Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate next The Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate . Invoked to execute the next result filter or the result itself. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion indicates the filter has executed. Implements IConfigurable<TOptions> ICacheableAsyncResultFilter Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.CacheableAsyncResultFilterListExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.CacheableAsyncResultFilterListExtensions.html",
    "title": "Class CacheableAsyncResultFilterListExtensions | Cuemon .NET Standard",
    "keywords": "Class CacheableAsyncResultFilterListExtensions Extension methods for the System.Collections.Generic.IList<T> interface. Inheritance System.Object CacheableAsyncResultFilterListExtensions Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public static class CacheableAsyncResultFilterListExtensions Methods | Improve this Doc AddEntityTagHeader(IList<ICacheableAsyncResultFilter>, Action<HttpEntityTagHeaderOptions>) Adds an HttpEntityTagHeader filter to the list. Declaration public static void AddEntityTagHeader(this IList<ICacheableAsyncResultFilter> filters, Action<HttpEntityTagHeaderOptions> setup = null) Parameters Type Name Description System.Collections.Generic.IList < ICacheableAsyncResultFilter > filters The list of cache related HTTP filters. System.Action < HttpEntityTagHeaderOptions > setup The HttpEntityTagHeaderOptions which need to be configured. | Improve this Doc AddFilter<T, TOptions>(IList<ICacheableAsyncResultFilter>, Action<TOptions>) Adds a HTTP related filter to the list. Declaration public static void AddFilter<T, TOptions>(this IList<ICacheableAsyncResultFilter> filters, Action<TOptions> setup) where T : ICacheableAsyncResultFilter where TOptions : class, new() Parameters Type Name Description System.Collections.Generic.IList < ICacheableAsyncResultFilter > filters The list of cache related HTTP head filters. System.Action <TOptions> setup The System.Action<T> which need to be configured. Type Parameters Name Description T The type of the ICacheableAsyncResultFilter . TOptions The type of delegate setup to configure T . | Improve this Doc AddLastModifiedHeader(IList<ICacheableAsyncResultFilter>, Action<HttpLastModifiedHeaderOptions>) Adds an HttpLastModifiedHeader filter to the list. Declaration public static void AddLastModifiedHeader(this IList<ICacheableAsyncResultFilter> filters, Action<HttpLastModifiedHeaderOptions> setup = null) Parameters Type Name Description System.Collections.Generic.IList < ICacheableAsyncResultFilter > filters The list of cache related HTTP filters. System.Action < HttpLastModifiedHeaderOptions > setup The HttpLastModifiedHeaderOptions which need to be configured. | Improve this Doc InsertFilter<T, TOptions>(IList<ICacheableAsyncResultFilter>, Int32, Action<TOptions>) Inserts a HTTP related filter to the list at the specified index . Declaration public static void InsertFilter<T, TOptions>(this IList<ICacheableAsyncResultFilter> filters, int index, Action<TOptions> setup) where T : ICacheableAsyncResultFilter where TOptions : class, new() Parameters Type Name Description System.Collections.Generic.IList < ICacheableAsyncResultFilter > filters The list of cache related HTTP head filters. System.Int32 index The zero-based index at which a HTTP related filter should be inserted. System.Action <TOptions> setup The System.Action<T> which need to be configured. Type Parameters Name Description T The type of the ICacheableAsyncResultFilter . TOptions The type of delegate setup to configure T . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.CacheBusting.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.CacheBusting.html",
    "title": "Class CacheBusting | Cuemon .NET Standard",
    "keywords": "Class CacheBusting Represents a way to provide cache-busting capabilities. Inheritance System.Object CacheBusting AssemblyCacheBusting DynamicCacheBusting Implements ICacheBusting Namespace : Cuemon.AspNetCore.Mvc.Configuration Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public abstract class CacheBusting : ICacheBusting Properties | Improve this Doc Version Gets the version to be a part of the link you need cache-busting compatible. Declaration public abstract string Version { get; } Property Value Type Description System.String The version to be a part of the link you need cache-busting compatible. Implements ICacheBusting Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DoubleConverterExtensions.html": {
    "href": "api/core/Cuemon.DoubleConverterExtensions.html",
    "title": "Class DoubleConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class DoubleConverterExtensions This is an extension implementation of the DoubleConverter class. Inheritance System.Object DoubleConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DoubleConverterExtensions Methods | Improve this Doc ToEpochTime(DateTime) Converts the specified value to an equivalent Epoc time representation. Declaration public static double ToEpochTime(this DateTime value) Parameters Type Name Description System.DateTime value The System.DateTime value to be converted. Returns Type Description System.Double A System.Double value that is equivalent to value . Remarks This implementation converts the value to an UTC representation ONLY if the System.DateTime.Kind eqauls System.DateTimeKind.Local . | Improve this Doc ToEpochTime(DateTime, Func<DateTime, DateTime>) Converts the specified value to an equivalent Epoc time representation. Declaration public static double ToEpochTime(this DateTime value, Func<DateTime, DateTime> utcConverter) Parameters Type Name Description System.DateTime value The System.DateTime value to be converted. System.Func < System.DateTime , System.DateTime > utcConverter The function delegate that will convert the given value to its UTC equivalent. Returns Type Description System.Double A System.Double value that is equivalent to value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DateTimeUtility.html": {
    "href": "api/core/Cuemon.DateTimeUtility.html",
    "title": "Class DateTimeUtility | Cuemon .NET Standard",
    "keywords": "Class DateTimeUtility This utility class is designed to make System.DateTime operations easier to work with. Inheritance System.Object DateTimeUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class DateTimeUtility Methods | Improve this Doc Ceiling(DateTime, Double, TimeUnit) Returns a System.DateTime value that is rounded towards positive infinity. Declaration public static DateTime Ceiling(DateTime value, double interval, TimeUnit timeUnit) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.Double interval The System.Double value that in combination with timeUnit specifies the rounding of value . TimeUnit timeUnit One of the enumeration values that specifies the time unit of interval . Returns Type Description System.DateTime A System.DateTime value that is rounded towards positive infinity. Exceptions Type Condition System.ArgumentOutOfRangeException interval is 0. | Improve this Doc Ceiling(DateTime, TimeSpan) Returns a System.DateTime value that is rounded towards positive infinity. Declaration public static DateTime Ceiling(DateTime value, TimeSpan interval) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.TimeSpan interval The System.TimeSpan value that specifies the rounding of value . Returns Type Description System.DateTime A System.DateTime value that is rounded towards positive infinity. | Improve this Doc Floor(DateTime, Double, TimeUnit) Returns a System.DateTime value that is rounded towards negative infinity. Declaration public static DateTime Floor(DateTime value, double interval, TimeUnit timeUnit) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.Double interval The System.Double value that in combination with timeUnit specifies the rounding of value . TimeUnit timeUnit One of the enumeration values that specifies the time unit of interval . Returns Type Description System.DateTime A System.DateTime value that is rounded towards negative infinity. Exceptions Type Condition System.ArgumentOutOfRangeException interval is 0. | Improve this Doc Floor(DateTime, TimeSpan) Returns a System.DateTime value that is rounded towards negative infinity. Declaration public static DateTime Floor(DateTime value, TimeSpan interval) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.TimeSpan interval The System.TimeSpan value that specifies the rounding of value . Returns Type Description System.DateTime A System.DateTime value that is rounded towards negative infinity. | Improve this Doc Round(DateTime, Double, TimeUnit, VerticalDirection) Returns a System.DateTime value that is rounded either towards negative infinity or positive infinity. Declaration public static DateTime Round(DateTime value, double interval, TimeUnit timeUnit, VerticalDirection direction) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.Double interval The System.Double value that in combination with timeUnit specifies the rounding of value . TimeUnit timeUnit One of the enumeration values that specifies the time unit of interval . VerticalDirection direction One of the enumeration values that specifies the direction of the rounding. Returns Type Description System.DateTime A System.DateTime value that is rounded either towards negative infinity or positive infinity. Exceptions Type Condition System.ArgumentOutOfRangeException direction is an invalid enumeration value. System.ArgumentOutOfRangeException interval is System.TimeSpan.Zero . | Improve this Doc Round(DateTime, TimeSpan, VerticalDirection) Returns a System.DateTime value that is rounded either towards negative infinity or positive infinity. Declaration public static DateTime Round(DateTime value, TimeSpan interval, VerticalDirection direction) Parameters Type Name Description System.DateTime value A System.DateTime value to be rounded. System.TimeSpan interval The System.TimeSpan value that specifies the rounding of value . VerticalDirection direction One of the enumeration values that specifies the direction of the rounding. Returns Type Description System.DateTime A System.DateTime value that is rounded either towards negative infinity or positive infinity. Exceptions Type Condition System.ArgumentOutOfRangeException direction is an invalid enumeration value. System.ArgumentOutOfRangeException interval is System.TimeSpan.Zero . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DateTimeFormatPattern.html": {
    "href": "api/core/Cuemon.DateTimeFormatPattern.html",
    "title": "Enum DateTimeFormatPattern | Cuemon .NET Standard",
    "keywords": "Enum DateTimeFormatPattern Defines the default pattern to use when formatting date- and time values. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum DateTimeFormatPattern Fields Name Description LongDate Displays a date using the long-date format. LongDateTime Displays a date using the long-date format in conjunction with the long-time format. LongTime Displays a time using the long-time format. ShortDate Displays a date using the short-date format. ShortDateTime Displays a date using the short-date format in conjunction with the short-time format. ShortTime Displays a time using the short-time format. Extension Methods ByteConverterExtensions.ToByteArray<DateTimeFormatPattern>() ConverterExtensions.ParseWith<DateTimeFormatPattern, TResult>(Func<DateTimeFormatPattern, TResult>) ConverterExtensions.ParseWith<DateTimeFormatPattern, T, TResult>(Func<DateTimeFormatPattern, T, TResult>, T) ConverterExtensions.ParseWith<DateTimeFormatPattern, T1, T2, TResult>(Func<DateTimeFormatPattern, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<DateTimeFormatPattern, T1, T2, T3, TResult>(Func<DateTimeFormatPattern, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<DateTimeFormatPattern, T1, T2, T3, T4, TResult>(Func<DateTimeFormatPattern, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<DateTimeFormatPattern, T1, T2, T3, T4, T5, TResult>(Func<DateTimeFormatPattern, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<DateTimeFormatPattern, T1, T2, T3, T4, T5, T6, TResult>(Func<DateTimeFormatPattern, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<DateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<DateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<DateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<DateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<DateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<DateTimeFormatPattern, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<DateTimeFormatPattern>() DelegateUtilityExtensions.DynamicWrap<DateTimeFormatPattern>() TweakerExtensions.Adjust<DateTimeFormatPattern>(Func<DateTimeFormatPattern, DateTimeFormatPattern>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<DateTimeFormatPattern>() WrapperExtensions.UseWrapper<DateTimeFormatPattern>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<DateTimeFormatPattern>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<DateTimeFormatPattern>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.QueryFormat.html": {
    "href": "api/core/Cuemon.Data.QueryFormat.html",
    "title": "Enum QueryFormat | Cuemon .NET Standard",
    "keywords": "Enum QueryFormat Identifies the format for a query fragment. Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public enum QueryFormat Fields Name Description Delimited Indicates that the query fragment should be in the format; value, value, value. DelimitedSquareBracket Indicates that the query fragment should be in the format; [value], [value], [value]. DelimitedString Indicates that the query fragment should be in the format; 'value', 'value', 'value'. Extension Methods ByteConverterExtensions.ToByteArray<QueryFormat>() ConverterExtensions.ParseWith<QueryFormat, TResult>(Func<QueryFormat, TResult>) ConverterExtensions.ParseWith<QueryFormat, T, TResult>(Func<QueryFormat, T, TResult>, T) ConverterExtensions.ParseWith<QueryFormat, T1, T2, TResult>(Func<QueryFormat, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<QueryFormat, T1, T2, T3, TResult>(Func<QueryFormat, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<QueryFormat, T1, T2, T3, T4, TResult>(Func<QueryFormat, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<QueryFormat, T1, T2, T3, T4, T5, TResult>(Func<QueryFormat, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<QueryFormat, T1, T2, T3, T4, T5, T6, TResult>(Func<QueryFormat, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<QueryFormat, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<QueryFormat, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<QueryFormat, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<QueryFormat, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<QueryFormat, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<QueryFormat, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<QueryFormat>() DelegateUtilityExtensions.DynamicWrap<QueryFormat>() TweakerExtensions.Adjust<QueryFormat>(Func<QueryFormat, QueryFormat>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<QueryFormat>() WrapperExtensions.UseWrapper<QueryFormat>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<QueryFormat>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<QueryFormat>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Wrapper-1.html": {
    "href": "api/core/Cuemon.Wrapper-1.html",
    "title": "Class Wrapper<T> | Cuemon .NET Standard",
    "keywords": "Class Wrapper<T> Provides a way to wrap an object of type T . Inheritance System.Object Wrapper<T> Hierarchy<T> XmlWrapper Implements IWrapper <T> IData Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Wrapper<T> : IWrapper<T>, IData Type Parameters Name Description T The type of the object to wrap. Constructors | Improve this Doc Wrapper() Initializes a new instance of the Wrapper<T> class. Declaration protected Wrapper() | Improve this Doc Wrapper(T, MemberInfo) Initializes a new instance of the Wrapper<T> class. Declaration public Wrapper(T instance, MemberInfo memberReference = null) Parameters Type Name Description T instance The instance that this wrapper object represents. System.Reflection.MemberInfo memberReference The member from where instance was referenced. Properties | Improve this Doc Data Gets a collection of key/value pairs that provide additional user-defined information about this wrapper object. Declaration public virtual IDictionary<string, object> Data { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > An object that implements the System.Collections.Generic.IDictionary<TKey, TValue> interface and contains a collection of user-defined key/value pairs. | Improve this Doc HasMemberReference Gets a value indicating whether this instance has a member reference. Declaration public virtual bool HasMemberReference { get; } Property Value Type Description System.Boolean true if this instance has a member reference; otherwise, false . | Improve this Doc Instance Gets the object that this wrapper represents. Declaration public virtual T Instance { get; protected set; } Property Value Type Description T The object that this wrapper represents. | Improve this Doc InstanceType Gets the type of the object that this wrapper represents. Declaration public virtual Type InstanceType { get; protected set; } Property Value Type Description System.Type The type of the that this wrapper represents. | Improve this Doc MemberReference Gets the member from where Instance was referenced. Declaration public virtual MemberInfo MemberReference { get; set; } Property Value Type Description System.Reflection.MemberInfo The member from where Instance was referenced. Methods | Improve this Doc InstanceAs<TResult>() Returns a value that is equivalent to the instance of the object that this wrapper represents. Declaration public TResult InstanceAs<TResult>() Returns Type Description TResult A value that is equivalent to the instance of the object that this wrapper represents. Type Parameters Name Description TResult The type of the return value. Exceptions Type Condition System.InvalidCastException The conversion is not supported - or - Instance does not implement the System.IConvertible interface. System.FormatException Instance is not in a format for T recognized by System.Globalization.CultureInfo.InvariantCulture . System.OverflowException Instance represents a number that is out of the range of T . | Improve this Doc InstanceAs<TResult>(IFormatProvider) Returns a value that is equivalent to the instance of the object that this wrapper represents. Declaration public TResult InstanceAs<TResult>(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description TResult A value that is equivalent to the instance of the object that this wrapper represents. Type Parameters Name Description TResult The type of the return value. Exceptions Type Condition System.InvalidCastException The conversion is not supported - or - Instance does not implement the System.IConvertible interface. System.FormatException Instance is not in a format for T recognized by provider . System.OverflowException Instance represents a number that is out of the range of T . Implements IWrapper<T> IData Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Threading.html": {
    "href": "api/core/Cuemon.Threading.html",
    "title": "Namespace Cuemon.Threading | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Threading Assembly : Cuemon.Core.dll Classes AsyncOptions Specifies options that is related to asynchronous operations. ParallelTasks Provides ways to encapsulate and re-use existing code while adding support for parallel loops and regions. ThreadPoolUtility Provide ways to work more efficient with System.Threading.Tasks.TaskFactory.StartNew(Action) related tasks. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Threading.ThreadPoolUtility.html": {
    "href": "api/core/Cuemon.Threading.ThreadPoolUtility.html",
    "title": "Class ThreadPoolUtility | Cuemon .NET Standard",
    "keywords": "Class ThreadPoolUtility Provide ways to work more efficient with System.Threading.Tasks.TaskFactory.StartNew(Action) related tasks. Inheritance System.Object ThreadPoolUtility Namespace : Cuemon.Threading Assembly : Cuemon.Threading.dll Syntax public static class ThreadPoolUtility Methods | Improve this Doc QueueWork(Action) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork(Action method) Parameters Type Name Description System.Action method The delegate that is being invoked when a thread pool thread becomes available. Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T>(Action<T>, T) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T>(Action<T> method, T arg) Parameters Type Name Description System.Action <T> method The delegate that is being invoked when a thread pool thread becomes available. T arg The parameter of the delegate method . Type Parameters Name Description T The type of the parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . T10 arg10 The tenth parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . T10 The type of the tenth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2>(Action<T1, T2>, T1, T2) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2>(Action<T1, T2> method, T1 arg1, T2 arg2) Parameters Type Name Description System.Action <T1, T2> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2, T3>(Action<T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Action <T1, T2, T3> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2, T3, T4>(Action<T1, T2, T3, T4>, T1, T2, T3, T4) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2, T3, T4>(Action<T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Action <T1, T2, T3, T4> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6, T7) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2, T3, T4, T5, T6, T7, T8>(Action<T1, T2, T3, T4, T5, T6, T7, T8>, T1, T2, T3, T4, T5, T6, T7, T8) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2, T3, T4, T5, T6, T7, T8>(Action<T1, T2, T3, T4, T5, T6, T7, T8> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. | Improve this Doc QueueWork<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Queues the specified method for execution. The method executes when a thread pool thread becomes available. Declaration public static void QueueWork<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7, T8, T9> method The delegate that is being invoked when a thread pool thread becomes available. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . T6 arg6 The sixth parameter of the delegate method . T7 arg7 The seventh parameter of the delegate method . T8 arg8 The eighth parameter of the delegate method . T9 arg9 The ninth parameter of the delegate method . Type Parameters Name Description T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . T6 The type of the sixth parameter of the delegate method . T7 The type of the seventh parameter of the delegate method . T8 The type of the eighth parameter of the delegate method . T9 The type of the ninth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Threading.Tasks.html": {
    "href": "api/core/Cuemon.Threading.Tasks.html",
    "title": "Namespace Cuemon.Threading.Tasks | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Threading.Tasks Assembly : Cuemon.Core.dll Classes TaskExtensions Extension methods for the System.Threading.Tasks.Task . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-14.html": {
    "href": "api/core/Cuemon.TesterFunc-14.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. T9 arg9 The ninth parameter of the method that this function delegate encapsulates. T10 arg10 The tenth parameter of the method that this function delegate encapsulates. T11 arg11 The eleventh parameter of the method that this function delegate encapsulates. T12 arg12 The twelfth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. T9 The type of the ninth parameter of the method that this function delegate encapsulates. T10 The type of the tenth parameter of the method that this function delegate encapsulates. T11 The type of the eleventh parameter of the method that this function delegate encapsulates. T12 The type of the twelfth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.Formatters.XmlFormatterOptions.html": {
    "href": "api/core/Cuemon.Serialization.Xml.Formatters.XmlFormatterOptions.html",
    "title": "Class XmlFormatterOptions | Cuemon .NET Standard",
    "keywords": "Class XmlFormatterOptions Specifies options that is related to XmlFormatter operations. Inheritance System.Object XmlFormatterOptions Namespace : Cuemon.Serialization.Xml.Formatters Assembly : Cuemon.Serialization.Xml.dll Syntax public class XmlFormatterOptions Constructors | Improve this Doc XmlFormatterOptions() Initializes a new instance of the XmlFormatterOptions class. Declaration public XmlFormatterOptions() Remarks The following table shows the initial property values for an instance of XmlFormatterOptions . Property Initial Value Settings XmlSerializerSettings SynchronizeWithXmlConvert true IncludeExceptionStackTrace false Properties | Improve this Doc IncludeExceptionStackTrace Gets or sets a value indicating whether the stack of an exception is included in the converter that handles exceptions. Declaration public bool IncludeExceptionStackTrace { get; set; } Property Value Type Description System.Boolean true if the stack of an exception is included in the converter that handles exceptions; otherwise, false . | Improve this Doc Settings Gets or sets the settings to support the XmlFormatter . Declaration public XmlSerializerSettings Settings { get; } Property Value Type Description XmlSerializerSettings A XmlSerializerSettings instance that specifies a set of features to support the XmlFormatter object. | Improve this Doc SynchronizeWithXmlConvert Gets or sets a value indicating whether Settings should be synchronized on DefaultSettings . Declaration public bool SynchronizeWithXmlConvert { get; set; } Property Value Type Description System.Boolean true if Settings should be synchronized on DefaultSettings ; otherwise, false . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-19.html": {
    "href": "api/core/Cuemon.Template-19.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Represents a Template with nineteen generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Arg18 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Arg17 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Arg16 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Arg15 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Arg14 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Arg13 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Arg12 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . T13 The type of the thirteenth parameter of this Template . T14 The type of the fourteenth parameter of this Template . T15 The type of the fifteenth parameter of this Template . T16 The type of the sixteenth parameter of this Template . T17 The type of the seventeenth parameter of this Template . T18 The type of the eighteenth parameter of this Template . T19 The type of the nineteenth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . T13 arg13 The value of the thirteenth parameter of this Template . T14 arg14 The value of the fourteenth parameter of this Template . T15 arg15 The value of the fifteenth parameter of this Template . T16 arg16 The value of the sixteenth parameter of this Template . T17 arg17 The value of the seventeenth parameter of this Template . T18 arg18 The value of the eighteenth parameter of this Template . T19 arg19 The value of the nineteenth parameter of this Template . Properties | Improve this Doc Arg19 Gets or sets the nineteenth parameter of this instance. Declaration public T19 Arg19 { get; set; } Property Value Type Description T19 The nineteenth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.Serialization.XmlWrapper.html": {
    "href": "api/core/Cuemon.Xml.Serialization.XmlWrapper.html",
    "title": "Class XmlWrapper | Cuemon .NET Standard",
    "keywords": "Class XmlWrapper Provide ways to override the default XML serialization. Inheritance System.Object Wrapper < System.Object > XmlWrapper Implements IWrapper < System.Object > IData Inherited Members Wrapper<Object>.Instance Wrapper<Object>.InstanceAs<TResult>() Wrapper<Object>.InstanceAs<TResult>(IFormatProvider) Namespace : Cuemon.Xml.Serialization Assembly : Cuemon.Xml.dll Syntax public abstract class XmlWrapper : Wrapper<object>, IWrapper<object>, IData Constructors | Improve this Doc XmlWrapper(Object) Initializes a new instance of the XmlWrapper class. Declaration protected XmlWrapper(object instance) Parameters Type Name Description System.Object instance The instance to override normal serialization naming logic. Properties | Improve this Doc Data Gets a collection of key/value pairs that provide additional user-defined information about this wrapper object. Declaration public override IDictionary<string, object> Data { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > An object that implements the System.Collections.Generic.IDictionary<TKey, TValue> interface and contains a collection of user-defined key/value pairs. Overrides Cuemon.Wrapper<System.Object>.Data | Improve this Doc HasMemberReference Gets a value indicating whether this instance has a member reference. Declaration public override bool HasMemberReference { get; } Property Value Type Description System.Boolean true if this instance has a member reference; otherwise, false . Overrides Cuemon.Wrapper<System.Object>.HasMemberReference | Improve this Doc InstanceName Gets or sets the name of the instance used in XML serialization. Overrides normal serialization logic. Declaration public abstract XmlQualifiedEntity InstanceName { get; set; } Property Value Type Description XmlQualifiedEntity The name of the instance used in XML serialization. | Improve this Doc InstanceType Gets the type of the object that this wrapper represents. Declaration public override Type InstanceType { get; protected set; } Property Value Type Description System.Type The type of the that this wrapper represents. Overrides Cuemon.Wrapper<System.Object>.InstanceType | Improve this Doc MemberReference Gets the member from where Instance was referenced. Declaration public override MemberInfo MemberReference { get; set; } Property Value Type Description System.Reflection.MemberInfo The member from where Instance was referenced. Overrides Cuemon.Wrapper<System.Object>.MemberReference Implements IWrapper<T> IData Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.EnumerableUtilityExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.EnumerableUtilityExtensions.html",
    "title": "Class EnumerableUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class EnumerableUtilityExtensions This is an extension implementation of the most common methods on the EnumerableUtility class. Inheritance System.Object EnumerableUtilityExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class EnumerableUtilityExtensions Methods | Improve this Doc Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) Determines whether a sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer<T> . Declaration public static bool Contains<TSource>(this IEnumerable<TSource> source, TSource value, Func<TSource, TSource, bool> condition) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence in which to locate a value. TSource value The value to locate in the sequence. System.Func <TSource, TSource, System.Boolean > condition The function delegate that will compare values from the source sequence with value . Returns Type Description System.Boolean true if the source sequence contains an element that has the specified value; otherwise, false . Type Parameters Name Description TSource The type of the System.Collections.Generic.IEnumerable<T> of . | Improve this Doc FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) Retrieves all the elements that match the conditions defined by the specified predicate. Declaration public static IEnumerable<TSource> FindAll<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> match) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, System.Boolean > match The function delegate that defines the conditions of the elements to search for. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the delegate match . T2 arg2 The second parameter of the delegate match . T3 arg3 The third parameter of the delegate match . T4 arg4 The fourth parameter of the delegate match . T5 arg5 The fifth parameter of the delegate match . T6 arg6 The sixth parameter of the delegate match . T7 arg7 The seventh parameter of the delegate match . T8 arg8 The eighth parameter of the delegate match . T9 arg9 The ninth parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the delegate match . T2 The type of the second parameter of the delegate match . T3 The type of the third parameter of the delegate match . T4 The type of the fourth parameter of the delegate match . T5 The type of the fifth parameter of the delegate match . T6 The type of the sixth parameter of the delegate match . T7 The type of the seventh parameter of the delegate match . T8 The type of the eighth parameter of the delegate match . T9 The type of the ninth parameter of the delegate match . | Improve this Doc FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T, bool> match, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T arg The first parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T The type of the first parameter of the delegate match . | Improve this Doc FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2>(this IEnumerable<TSource> source, Func<TSource, T1, T2, bool> match, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the delegate match . T2 arg2 The second parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the delegate match . T2 The type of the second parameter of the delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, bool> match, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the delegate match . T2 arg2 The second parameter of the delegate match . T3 arg3 The third parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the delegate match . T2 The type of the second parameter of the delegate match . T3 The type of the third parameter of the delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the delegate match . T2 arg2 The second parameter of the delegate match . T3 arg3 The third parameter of the delegate match . T4 arg4 The fourth parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the delegate match . T2 The type of the second parameter of the delegate match . T3 The type of the third parameter of the delegate match . T4 The type of the fourth parameter of the delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the delegate match . T2 arg2 The second parameter of the delegate match . T3 arg3 The third parameter of the delegate match . T4 arg4 The fourth parameter of the delegate match . T5 arg5 The fifth parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the delegate match . T2 The type of the second parameter of the delegate match . T3 The type of the third parameter of the delegate match . T4 The type of the fourth parameter of the delegate match . T5 The type of the fifth parameter of the delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5, T6>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, T6, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the delegate match . T2 arg2 The second parameter of the delegate match . T3 arg3 The third parameter of the delegate match . T4 arg4 The fourth parameter of the delegate match . T5 arg5 The fifth parameter of the delegate match . T6 arg6 The sixth parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the delegate match . T2 The type of the second parameter of the delegate match . T3 The type of the third parameter of the delegate match . T4 The type of the fourth parameter of the delegate match . T5 The type of the fifth parameter of the delegate match . T6 The type of the sixth parameter of the delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the delegate match . T2 arg2 The second parameter of the delegate match . T3 arg3 The third parameter of the delegate match . T4 arg4 The fourth parameter of the delegate match . T5 arg5 The fifth parameter of the delegate match . T6 arg6 The sixth parameter of the delegate match . T7 arg7 The seventh parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the delegate match . T2 The type of the second parameter of the delegate match . T3 The type of the third parameter of the delegate match . T4 The type of the fourth parameter of the delegate match . T5 The type of the fifth parameter of the delegate match . T6 The type of the sixth parameter of the delegate match . T7 The type of the seventh parameter of the delegate match . | Improve this Doc FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) Retrieves all the elements that match the conditions defined by the specified function delegate. Declaration public static IEnumerable<TSource> FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, bool> match, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, System.Boolean > match The function delegate that defines the conditions of the elements to search for. T1 arg1 The first parameter of the delegate match . T2 arg2 The second parameter of the delegate match . T3 arg3 The third parameter of the delegate match . T4 arg4 The fourth parameter of the delegate match . T5 arg5 The fifth parameter of the delegate match . T6 arg6 The sixth parameter of the delegate match . T7 arg7 The seventh parameter of the delegate match . T8 arg8 The eighth parameter of the delegate match . Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the delegate match . T2 The type of the second parameter of the delegate match . T3 The type of the third parameter of the delegate match . T4 The type of the fourth parameter of the delegate match . T5 The type of the fifth parameter of the delegate match . T6 The type of the sixth parameter of the delegate match . T7 The type of the seventh parameter of the delegate match . T8 The type of the eighth parameter of the delegate match . | Improve this Doc RandomOrDefault<TSource>(IEnumerable<TSource>) Returns a random element of a sequence of elements, or a default value if no element is found. Declaration public static TSource RandomOrDefault<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> to return a random element of. Returns Type Description TSource default(TSource) if source is empty; otherwise, a random element of source . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) Returns a random element of a sequence of elements, or a default value if no element is found. Declaration public static TSource RandomOrDefault<TSource>(this IEnumerable<TSource> source, Func<IEnumerable<TSource>, TSource> randomizer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> to return a random element of. System.Func < System.Collections.Generic.IEnumerable <TSource>, TSource> randomizer The function delegate that will select a random element of source . Returns Type Description TSource default(TSource) if source is empty; otherwise, a random element of source . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource>(this IEnumerable<TSource> source, Func<IEnumerable<TSource>, TSource> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, TSource> selector The function delegate that defines the condition of the element to retrieve. Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. | Improve this Doc SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T>(this IEnumerable<TSource> source, Func<IEnumerable<TSource>, T, TSource> selector, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T, TSource> selector The function delegate that defines the condition of the element to retrieve. T arg The parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T The type of the parameter of the function delegate selector . | Improve this Doc SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T1, T2>(this IEnumerable<TSource> source, Func<IEnumerable<TSource>, T1, T2, TSource> selector, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T1, T2, TSource> selector The function delegate that defines the condition of the element to retrieve. T1 arg1 The first parameter of the function delegate selector . T2 arg2 The second parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate selector . T2 The type of the second parameter of the function delegate selector . | Improve this Doc SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T1, T2, T3>(this IEnumerable<TSource> source, Func<IEnumerable<TSource>, T1, T2, T3, TSource> selector, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T1, T2, T3, TSource> selector The function delegate that defines the condition of the element to retrieve. T1 arg1 The first parameter of the function delegate selector . T2 arg2 The second parameter of the function delegate selector . T3 arg3 The third parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate selector . T2 The type of the second parameter of the function delegate selector . T3 The type of the third parameter of the function delegate selector . | Improve this Doc SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T1, T2, T3, T4>(this IEnumerable<TSource> source, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource> selector, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T1, T2, T3, T4, TSource> selector The function delegate that defines the condition of the element to retrieve. T1 arg1 The first parameter of the function delegate selector . T2 arg2 The second parameter of the function delegate selector . T3 arg3 The third parameter of the function delegate selector . T4 arg4 The fourth parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate selector . T2 The type of the second parameter of the function delegate selector . T3 The type of the third parameter of the function delegate selector . T4 The type of the fourth parameter of the function delegate selector . | Improve this Doc SelectOne<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, T5, TSource>, T1, T2, T3, T4, T5) Retrieves the element that matches the conditions defined by the specified selector . Declaration public static TSource SelectOne<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource> source, Func<IEnumerable<TSource>, T1, T2, T3, T4, T5, TSource> selector, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to search. System.Func < System.Collections.Generic.IEnumerable <TSource>, T1, T2, T3, T4, T5, TSource> selector The function delegate that defines the condition of the element to retrieve. T1 arg1 The first parameter of the function delegate selector . T2 arg2 The second parameter of the function delegate selector . T3 arg3 The third parameter of the function delegate selector . T4 arg4 The fourth parameter of the function delegate selector . T5 arg5 The fifth parameter of the function delegate selector . Returns Type Description TSource A TSource element that matched the conditions defined by the specified selector . Type Parameters Name Description TSource The type of the elements of the sequence. T1 The type of the first parameter of the function delegate selector . T2 The type of the second parameter of the function delegate selector . T3 The type of the third parameter of the function delegate selector . T4 The type of the fourth parameter of the function delegate selector . T5 The type of the fifth parameter of the function delegate selector . | Improve this Doc Yield<TSource>(TSource) Returns an System.Collections.Generic.IEnumerable<T> sequence with the specified source as the only element. Declaration public static IEnumerable<TSource> Yield<TSource>(this TSource source) Parameters Type Name Description TSource source The value to yield into an System.Collections.Generic.IEnumerable<T> sequence. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence with the specified source as the only element. Type Parameters Name Description TSource The type of source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpCacheableFilter.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpCacheableFilter.html",
    "title": "Class HttpCacheableFilter | Cuemon .NET Standard",
    "keywords": "Class HttpCacheableFilter A filter that will invoke filters implementing the ICacheableObjectResult interface. Inheritance System.Object Configurable < HttpCacheableOptions > ConfigurableAsyncResultFilter < HttpCacheableOptions > HttpCacheableFilter Implements IConfigurable < HttpCacheableOptions > Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members Configurable<HttpCacheableOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class HttpCacheableFilter : ConfigurableAsyncResultFilter<HttpCacheableOptions>, IConfigurable<HttpCacheableOptions>, IAsyncResultFilter, IFilterMetadata Constructors | Improve this Doc HttpCacheableFilter(IOptions<HttpCacheableOptions>) Initializes a new instance of the HttpCacheableFilter class. Declaration public HttpCacheableFilter(IOptions<HttpCacheableOptions> setup) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < HttpCacheableOptions > setup The HttpCacheableOptions which need to be configured. Methods | Improve this Doc OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) Called asynchronously before the action result. Declaration public override Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext . Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate next The Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate . Invoked to execute the next result filter or the result itself. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion indicates the filter has executed. Overrides Cuemon.AspNetCore.Mvc.Filters.ConfigurableAsyncResultFilter<Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpCacheableOptions>.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate) Implements IConfigurable<TOptions> Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also ConfigurableAsyncResultFilter <TOptions> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.Configuration | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.Configuration Assembly : Cuemon.AspNetCore.Mvc.dll Classes AssemblyCacheBusting Provides cache-busting capabilities from an Assembly. This class cannot be inherited. AssemblyCacheBustingOptions Specifies options that is related to AssemblyCacheBustingOptions operations. CacheBusting Represents a way to provide cache-busting capabilities. CacheBustingOptions Specifies options that is related to CacheBusting operations. DynamicCacheBusting Provides cache-busting capabilities on a duration based interval. This class cannot be inherited. DynamicCacheBustingOptions Specifies options that is related to DynamicCacheBustingOptions operations. Interfaces ICacheBusting An interface to provide cache-busting capabilities. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.ApplicationBuilderExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions | Cuemon .NET Standard",
    "keywords": "Class ApplicationBuilderExtensions Extension methods for the Microsoft.AspNetCore.Builder.IApplicationBuilder interface. Inheritance System.Object ApplicationBuilderExtensions Namespace : Cuemon.AspNetCore.Mvc Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public static class ApplicationBuilderExtensions Methods | Improve this Doc UseWhen(IApplicationBuilder, Boolean, Action<IApplicationBuilder>) Conditionally creates a branch in the request pipeline that is rejoined to the main pipeline. Declaration public static IApplicationBuilder UseWhen(this IApplicationBuilder app, bool condition, Action<IApplicationBuilder> configurator) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder app The Microsoft.AspNetCore.Builder.IApplicationBuilder instance. System.Boolean condition if set to true , the configurator is invoked. System.Action < Microsoft.AspNetCore.Builder.IApplicationBuilder > configurator The delegate to invoke when condition evaluates true . Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder The Microsoft.AspNetCore.Builder.IApplicationBuilder instance. | Improve this Doc UseWhen(IApplicationBuilder, Func<HttpContext, Boolean>, Action<IApplicationBuilder>) Conditionally creates a branch in the request pipeline that is rejoined to the main pipeline. Declaration public static IApplicationBuilder UseWhen(this IApplicationBuilder app, Func<HttpContext, bool> condition, Action<IApplicationBuilder> configurator) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder app The Microsoft.AspNetCore.Builder.IApplicationBuilder instance. System.Func < Microsoft.AspNetCore.Http.HttpContext , System.Boolean > condition The condition. System.Action < Microsoft.AspNetCore.Builder.IApplicationBuilder > configurator The configuration. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder The Microsoft.AspNetCore.Builder.IApplicationBuilder instance. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Integrity.CacheValidatorExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Integrity.CacheValidatorExtensions.html",
    "title": "Class CacheValidatorExtensions | Cuemon .NET Standard",
    "keywords": "Class CacheValidatorExtensions Extension methods for the CacheValidator class. Inheritance System.Object CacheValidatorExtensions Namespace : Cuemon.AspNetCore.Integrity Assembly : Cuemon.AspNetCore.dll Syntax public static class CacheValidatorExtensions Methods | Improve this Doc ToEntityTag(CacheValidator) Creates an Microsoft.Net.Http.Headers.EntityTagHeaderValue from the specified validator . Declaration public static EntityTagHeaderValue ToEntityTag(this CacheValidator validator) Parameters Type Name Description CacheValidator validator The validator to extend. Returns Type Description Microsoft.Net.Http.Headers.EntityTagHeaderValue An Microsoft.Net.Http.Headers.EntityTagHeaderValue that is initiated with a hexadecimal representation of Checksum and a value that indicates if the tag is weak. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.HostingEnvironmentMiddleware.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.HostingEnvironmentMiddleware.html",
    "title": "Class HostingEnvironmentMiddleware | Cuemon .NET Standard",
    "keywords": "Class HostingEnvironmentMiddleware Provides a hosting environment middleware implementation for ASP.NET Core. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore < HostingEnvironmentOptions > ConfigurableMiddleware < Microsoft.Extensions.Hosting.IHostingEnvironment , HostingEnvironmentOptions > HostingEnvironmentMiddleware Implements IConfigurable < HostingEnvironmentOptions > Inherited Members ConfigurableMiddleware<IHostingEnvironment, HostingEnvironmentOptions>.InvokeAsync(HttpContext, IHostingEnvironment) ConfigurableMiddlewareCore<HostingEnvironmentOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public class HostingEnvironmentMiddleware : ConfigurableMiddleware<IHostingEnvironment, HostingEnvironmentOptions>, IConfigurable<HostingEnvironmentOptions> Constructors | Improve this Doc HostingEnvironmentMiddleware(RequestDelegate, IOptions<HostingEnvironmentOptions>) Initializes a new instance of the HostingEnvironmentMiddleware class. Declaration public HostingEnvironmentMiddleware(RequestDelegate next, IOptions<HostingEnvironmentOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions < HostingEnvironmentOptions > setup The HostingEnvironmentOptions which need to be configured. | Improve this Doc HostingEnvironmentMiddleware(RequestDelegate, Action<HostingEnvironmentOptions>) Initializes a new instance of the HostingEnvironmentMiddleware class. Declaration public HostingEnvironmentMiddleware(RequestDelegate next, Action<HostingEnvironmentOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action < HostingEnvironmentOptions > setup The HostingEnvironmentOptions which need to be configured. Methods | Improve this Doc InvokeAsync(HttpContext, IHostingEnvironment) Executes the HostingEnvironmentMiddleware . Declaration public override Task InvokeAsync(HttpContext context, IHostingEnvironment he) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. Microsoft.Extensions.Hosting.IHostingEnvironment he The dependency injected Microsoft.Extensions.Hosting.IHostingEnvironment of InvokeAsync(HttpContext, IHostingEnvironment) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Overrides Cuemon.AspNetCore.ConfigurableMiddleware<Microsoft.Extensions.Hosting.IHostingEnvironment, Cuemon.AspNetCore.HostingEnvironmentOptions>.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.Extensions.Hosting.IHostingEnvironment) Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IHierarchy-1.html": {
    "href": "api/core/Cuemon.IHierarchy-1.html",
    "title": "Interface IHierarchy<T> | Cuemon .NET Standard",
    "keywords": "Interface IHierarchy<T> Provides a generic way to expose a node of a hierarchical structure, including the node object of type T . Inherited Members IWrapper<T>.Instance IWrapper<T>.InstanceType IWrapper<T>.MemberReference IWrapper<T>.HasMemberReference IWrapper<T>.InstanceAs<TResult>() IWrapper<T>.InstanceAs<TResult>(IFormatProvider) IData.Data Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public interface IHierarchy<T> : IWrapper<T>, IData Type Parameters Name Description T The type of the node represented in the hierarchical structure. Properties | Improve this Doc Depth Gets the current depth of the node in the hierarchical structure. Declaration int Depth { get; } Property Value Type Description System.Int32 The current depth of the node in the hierarchical structure. | Improve this Doc HasChildren Indicates whether the current node has any child nodes. Declaration bool HasChildren { get; } Property Value Type Description System.Boolean true if the current node has any child nodes; otherwise, false . | Improve this Doc HasParent Indicates whether the current node has a parent node. Declaration bool HasParent { get; } Property Value Type Description System.Boolean true if the current node has a parent node; otherwise, false . | Improve this Doc Index Gets the zero-based index of the current node that this hierarchical structure represents. Declaration int Index { get; } Property Value Type Description System.Int32 The zero-based index of the current node that this hierarchical structure represents. | Improve this Doc Item[Int32] Gets the node at the specified index. Declaration IHierarchy<T> this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description IHierarchy <T> The node at the specified index. Methods | Improve this Doc Add(T) Adds the specified instance to a node in the hierarchical structure representation. Declaration IHierarchy<T> Add(T instance) Parameters Type Name Description T instance The instance to a node in the hierarchical structure represents. Returns Type Description IHierarchy <T> A reference to the newly added hierarchical node. | Improve this Doc Add(T, MemberInfo) Adds the specified instance to a node in the hierarchical structure representation. Declaration IHierarchy<T> Add(T instance, MemberInfo member) Parameters Type Name Description T instance The instance to a node in the hierarchical structure represents. System.Reflection.MemberInfo member The member from where instance was referenced. Returns Type Description IHierarchy <T> A reference to the newly added hierarchical node. | Improve this Doc GetChildren() Gets an System.Collections.Generic.IEnumerable<T> sequence that represents all the child nodes of the current hierarchical node. Declaration IEnumerable<IHierarchy<T>> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable < IHierarchy <T>> An System.Collections.Generic.IEnumerable<T> sequence that represents all the child nodes of the current hierarchical node. | Improve this Doc GetParent() Gets the parent node of the current node in the hierarchical structure. Declaration IHierarchy<T> GetParent() Returns Type Description IHierarchy <T> The parent node of the current node in the hierarchical structure. | Improve this Doc GetPath() Gets the hierarchical path of the node in the hierarchical structure. Declaration string GetPath() Returns Type Description System.String A System.String that identifies the hierarchical path relative to the current node. | Improve this Doc GetPath(Func<IHierarchy<T>, String>) Gets the hierarchical path of the node in the hierarchical structure. Declaration string GetPath(Func<IHierarchy<T>, string> pathResolver) Parameters Type Name Description System.Func < IHierarchy <T>, System.String > pathResolver The function delegate that resolves the hierarchical path of the node in the hierarchical structure. Returns Type Description System.String A System.String that identifies the hierarchical path relative to the current node. | Improve this Doc Replace(T) Allows for the instance on the current node to be replaced with a new instance . Declaration void Replace(T instance) Parameters Type Name Description T instance The new instance to replace the original with. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) HierarchyExtensions.FindFirstInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.FindSingleInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.FindInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.FindFirst<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.FindSingle<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.Find<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) HierarchyExtensions.Replace<T>(IHierarchy<T>, Action<IHierarchy<T>, T>) HierarchyExtensions.Root<T>(IHierarchy<T>) HierarchyExtensions.AncestorsAndSelf<T>(IHierarchy<T>) HierarchyExtensions.DescendantsAndSelf<T>(IHierarchy<T>) HierarchyExtensions.SiblingsAndSelf<T>(IHierarchy<T>) HierarchyExtensions.SiblingsAndSelfAt<T>(IHierarchy<T>, Int32) HierarchyExtensions.NodeAt<T>(IHierarchy<T>, Int32) HierarchyExtensions.FlattenAll<T>(IHierarchy<T>) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.ProfilerOptions.html": {
    "href": "api/core/Cuemon.Diagnostics.ProfilerOptions.html",
    "title": "Class ProfilerOptions | Cuemon .NET Standard",
    "keywords": "Class ProfilerOptions Specifies options that is related to Profiler operations. Inheritance System.Object ProfilerOptions TimeMeasureOptions Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public class ProfilerOptions Constructors | Improve this Doc ProfilerOptions() Initializes a new instance of the ProfilerOptions class. Declaration protected ProfilerOptions() Remarks The following table shows the initial property values for an instance of ProfilerOptions . Property Initial Value MethodDescriptor null RuntimeParameters null Properties | Improve this Doc MethodDescriptor Gets or sets the callback function delegate that resolves a MethodDescriptor . Declaration public Func<MethodDescriptor> MethodDescriptor { get; set; } Property Value Type Description System.Func < MethodDescriptor > The callback function delegate that resolves a MethodDescriptor . | Improve this Doc RuntimeParameters Gets or sets an System.Object array that represents runtime values. Declaration public object[] RuntimeParameters { get; set; } Property Value Type Description System.Object [] An System.Object array that represents runtime values. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.Profiler.html": {
    "href": "api/core/Cuemon.Diagnostics.Profiler.html",
    "title": "Class Profiler | Cuemon .NET Standard",
    "keywords": "Class Profiler Represents a base class for profiler related operations. Inheritance System.Object Profiler TimeMeasureProfiler Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public abstract class Profiler Constructors | Improve this Doc Profiler() Initializes a new instance of the Profiler class. Declaration protected Profiler() Properties | Improve this Doc Data Gets or sets the data associated with the Member being profiled. Declaration public IDictionary<string, object> Data { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > The data associated with the Member being profiled. | Improve this Doc Member Gets or sets the information about the member being profiled. Declaration public string Member { get; set; } Property Value Type Description System.String The information about the member being profiled. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.DataPair.html": {
    "href": "api/core/Cuemon.DataPair.html",
    "title": "Class DataPair | Cuemon .NET Standard",
    "keywords": "Class DataPair Represents a generic way to provide information about arbitrary data. Inheritance System.Object DataPair DataPair<T> Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class DataPair Constructors | Improve this Doc DataPair(String, Object, Type) Initializes a new instance of the DataPair class. Declaration public DataPair(string name, object value, Type typeOf) Parameters Type Name Description System.String name The name of the data pair. System.Object value The value of the data pair. System.Type typeOf The type of the data pair. Properties | Improve this Doc HasValue Gets a value indicating whether Value is not null. Declaration public bool HasValue { get; } Property Value Type Description System.Boolean true if Value is not null; otherwise, false . | Improve this Doc Name Gets the name of the data pair. Declaration public string Name { get; } Property Value Type Description System.String The name of the data pair. | Improve this Doc Type Gets the type of the data pair value. Declaration public Type Type { get; protected set; } Property Value Type Description System.Type The type of the data pair value. | Improve this Doc Value Gets the value of the data pair. Declaration public object Value { get; } Property Value Type Description System.Object The value of the data pair. Methods | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.AssemblyUtilityExtensions.html": {
    "href": "api/core/Cuemon.Reflection.AssemblyUtilityExtensions.html",
    "title": "Class AssemblyUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class AssemblyUtilityExtensions This is an extension implementation of the most common methods on the AssemblyUtility class. Inheritance System.Object AssemblyUtilityExtensions Namespace : Cuemon.Reflection Assembly : Cuemon.Reflection.dll Syntax public static class AssemblyUtilityExtensions Methods | Improve this Doc GetAssemblyVersion(Assembly) Returns a System.Version that represents the version number of the specified assembly . Declaration public static Version GetAssemblyVersion(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to resolve a System.Version from. Returns Type Description System.Version A System.Version that represents the version number of the specified assembly . | Improve this Doc GetFileVersion(Assembly) Returns a System.Version that represents the file version number of the specified assembly . Declaration public static Version GetFileVersion(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to resolve a System.Version from. Returns Type Description System.Version A System.Version that represents the file version number of the specified assembly . Exceptions Type Condition System.ArgumentNullException assembly is null. | Improve this Doc GetProductVersion(Assembly) Returns a System.Version that represents the version of the product this assembly is distributed with. Declaration public static Version GetProductVersion(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to resolve a System.Version from. Returns Type Description System.Version A System.Version that represents the version of the product this assembly is distributed with. Exceptions Type Condition System.ArgumentNullException assembly is null. | Improve this Doc IsDebugBuild(Assembly) Determines whether the specified assembly is a debug build. Declaration public static bool IsDebugBuild(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to parse and determine whether it is a debug build or not. Returns Type Description System.Boolean true if the specified assembly is a debug build; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.html": {
    "href": "api/core/Cuemon.Integrity.html",
    "title": "Namespace Cuemon.Integrity | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Integrity Assembly : Cuemon.Core.dll Classes CacheValidator Provides a way to represent cacheable data-centric content that can be validated by cache-aware applications. CacheValidatorExtensions This is an extension implementation of the most common methods on the CacheValidator class. CacheValidatorOptions Specifies options that is related to CacheValidator operations. ChecksumBuilder Provides a way to fluently represent checksum values of arbitrary data. ChecksumBuilderExtensions Extension methods for the ChecksumBuilder . ChecksumBuilderOptions Specifies options that is related to ChecksumBuilder operations. ChecksumResult Represents the result of a computed checksum operation. Interfaces ICacheableEntity An interface that represents both the timestamp and data integrity that is normally associated with a data-set. ICacheableIntegrity An interface that represents the data integrity that is normally associated with a data-set. ICacheableTimestamp An interface that represents the timestamp that is normally associated with a data-set. Enums ChecksumMethod Specifies ways for a checksum to be computed. ChecksumStrength Specifies the validation strength of a cache checksum. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ICacheableTimestamp.html": {
    "href": "api/core/Cuemon.Integrity.ICacheableTimestamp.html",
    "title": "Interface ICacheableTimestamp | Cuemon .NET Standard",
    "keywords": "Interface ICacheableTimestamp An interface that represents the timestamp that is normally associated with a data-set. Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public interface ICacheableTimestamp Properties | Improve this Doc Created Gets a System.DateTime value from when data this instance represents was first created, expressed as the Coordinated Universal Time (UTC). Declaration DateTime Created { get; } Property Value Type Description System.DateTime The timestamp from when data this instance represents was first created. | Improve this Doc Modified Gets a System.DateTime value from when data this instance represents was last modified, expressed as the Coordinated Universal Time (UTC). Declaration DateTime? Modified { get; } Property Value Type Description System.Nullable < System.DateTime > The timestamp from when data this instance represents was last modified. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ICacheableIntegrity.html": {
    "href": "api/core/Cuemon.Integrity.ICacheableIntegrity.html",
    "title": "Interface ICacheableIntegrity | Cuemon .NET Standard",
    "keywords": "Interface ICacheableIntegrity An interface that represents the data integrity that is normally associated with a data-set. Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public interface ICacheableIntegrity Properties | Improve this Doc Checksum Gets a ChecksumResult that represents the integrity of this instance. Declaration ChecksumResult Checksum { get; } Property Value Type Description ChecksumResult The checksum that represents the integrity of this instance. | Improve this Doc HasChecksum Gets a value indicating whether this instance has a Checksum representation. Declaration bool HasChecksum { get; } Property Value Type Description System.Boolean true if this instance has a Checksum representation; otherwise, false . | Improve this Doc Validation Gets the validation strength of the integrity of this instance. Declaration ChecksumStrength Validation { get; } Property Value Type Description ChecksumStrength The validation strength of the integrity of this instance. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Formatters.FormatterExtensions.html": {
    "href": "api/core/Cuemon.Serialization.Formatters.FormatterExtensions.html",
    "title": "Class FormatterExtensions | Cuemon .NET Standard",
    "keywords": "Class FormatterExtensions Extension methods for Formatter<TFormat> related operations. Inheritance System.Object FormatterExtensions Namespace : Cuemon.Serialization.Formatters Assembly : Cuemon.Serialization.dll Syntax public static class FormatterExtensions Methods | Improve this Doc UseCollection(IHierarchy<DataPair>, Type) A formatter implementation that resolves a System.Collections.ICollection . Declaration public static ICollection UseCollection(this IHierarchy<DataPair> hierarchy, Type valueType) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. System.Type valueType The type of the objects in the collection. Returns Type Description System.Collections.ICollection A System.Collections.ICollection of valueType from the specified hierarchy . | Improve this Doc UseConvertibleFormatter(IHierarchy<DataPair>) A formatter implementation that resolves a System.IConvertible . Declaration public static IConvertible UseConvertibleFormatter(this IHierarchy<DataPair> hierarchy) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. Returns Type Description System.IConvertible A System.IConvertible from the specified hierarchy . | Improve this Doc UseDateTimeFormatter(IHierarchy<DataPair>) A formatter implementation that resolves a System.DateTime . Declaration public static DateTime UseDateTimeFormatter(this IHierarchy<DataPair> hierarchy) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. Returns Type Description System.DateTime A System.DateTime from the specified hierarchy . | Improve this Doc UseDecimalFormatter(IHierarchy<DataPair>) A formatter implementation that resolves a System.Decimal . Declaration public static decimal UseDecimalFormatter(this IHierarchy<DataPair> hierarchy) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. Returns Type Description System.Decimal A System.Decimal from the specified hierarchy . | Improve this Doc UseDictionary(IHierarchy<DataPair>, Type[]) A formatter implementation that resolves a System.Collections.IDictionary . Declaration public static IDictionary UseDictionary(this IHierarchy<DataPair> hierarchy, Type[] valueTypes) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. System.Type [] valueTypes The value types that forms a System.Collections.Generic.KeyValuePair<TKey,TValue> . Returns Type Description System.Collections.IDictionary A System.Collections.IDictionary with System.Collections.Generic.KeyValuePair<TKey,TValue> of valueTypes from the specified hierarchy . | Improve this Doc UseGuidFormatter(IHierarchy<DataPair>) A formatter implementation that resolves a System.Guid . Declaration public static Guid UseGuidFormatter(this IHierarchy<DataPair> hierarchy) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. Returns Type Description System.Guid A System.Guid from the specified hierarchy . | Improve this Doc UseStringFormatter(IHierarchy<DataPair>) A formatter implementation that resolves a System.String . Declaration public static string UseStringFormatter(this IHierarchy<DataPair> hierarchy) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. Returns Type Description System.String A System.String from the specified hierarchy . | Improve this Doc UseTimeSpanFormatter(IHierarchy<DataPair>) A formatter implementation that resolves a System.TimeSpan . Declaration public static TimeSpan UseTimeSpanFormatter(this IHierarchy<DataPair> hierarchy) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. Returns Type Description System.TimeSpan A System.TimeSpan from the specified hierarchy . | Improve this Doc UseUriFormatter(IHierarchy<DataPair>) A formatter implementation that resolves a System.Uri . Declaration public static Uri UseUriFormatter(this IHierarchy<DataPair> hierarchy) Parameters Type Name Description IHierarchy < DataPair > hierarchy The hierarchy to parse. Returns Type Description System.Uri A System.Uri from the specified hierarchy . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Serialization.html": {
    "href": "api/core/Cuemon.Runtime.Serialization.html",
    "title": "Namespace Cuemon.Runtime.Serialization | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Runtime.Serialization Assembly : Cuemon.Runtime.dll Classes JsonConverter This utility class is designed to make JSON related conversions easier to work with. JsonInstance Represents a JSON instance from a structural data source. JsonInstanceCollection Represents a list of JSON children from a structural data source. JsonWriter Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing JSON data. XmlJsonInstance Represents a JSON instance from an XML data source. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Serialization.XmlJsonInstance.html": {
    "href": "api/core/Cuemon.Runtime.Serialization.XmlJsonInstance.html",
    "title": "Class XmlJsonInstance | Cuemon .NET Standard",
    "keywords": "Class XmlJsonInstance Represents a JSON instance from an XML data source. Inheritance System.Object JsonInstance XmlJsonInstance Inherited Members JsonInstance.Name JsonInstance.Value JsonInstance.NodeNumber JsonInstance.Instances JsonInstance.Parent JsonInstance.IsPartOfArray() JsonInstance.WriteStartArray() JsonInstance.WriteEndArray() JsonInstance.WriteValueSeperator() Namespace : Cuemon.Runtime.Serialization Assembly : Cuemon.Xml.dll Syntax public sealed class XmlJsonInstance : JsonInstance Constructors | Improve this Doc XmlJsonInstance(String, Object, Int32) Initializes a new instance of the XmlJsonInstance class. Declaration public XmlJsonInstance(string name, object value, int nodeNumber) Parameters Type Name Description System.String name The name of the JSON object. System.Object value The value of the JSON object. System.Int32 nodeNumber The logical node number of the JSON object placement in the originating structural data source. | Improve this Doc XmlJsonInstance(String, Object, Int32, XPathNodeType) Initializes a new instance of the XmlJsonInstance class. Declaration public XmlJsonInstance(string name, object value, int nodeNumber, XPathNodeType nodeType) Parameters Type Name Description System.String name The name of the JSON object. System.Object value The value of the JSON object. System.Int32 nodeNumber The logical node number of the JSON object placement in the originating structural data source. System.Xml.XPath.XPathNodeType nodeType The node type of the XML document to convert into a JSON representation. Properties | Improve this Doc NodeType Gets the originating node type of the XML document. Declaration public XPathNodeType NodeType { get; } Property Value Type Description System.Xml.XPath.XPathNodeType The originating node type of the XML document. Methods | Improve this Doc GetSignature() Computes and returns a MD5 signature of the following properties: Cuemon.IO.JsonInstance.Name , Cuemon.IO.JsonInstance.Value , Cuemon.IO.JsonInstance.NodeNumber and NodeType . Declaration public override string GetSignature() Returns Type Description System.String A MD5 signature of the following properties: Cuemon.IO.JsonInstance.Name , Cuemon.IO.JsonInstance.Value , Cuemon.IO.JsonInstance.NodeNumber and NodeType . Overrides JsonInstance.GetSignature() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Runtime.Serialization.JsonWriter.html": {
    "href": "api/core/Cuemon.Runtime.Serialization.JsonWriter.html",
    "title": "Class JsonWriter | Cuemon .NET Standard",
    "keywords": "Class JsonWriter Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing JSON data. Inheritance System.Object JsonWriter Implements System.IDisposable Namespace : Cuemon.Runtime.Serialization Assembly : Cuemon.Runtime.dll Syntax public abstract class JsonWriter : IDisposable Constructors | Improve this Doc JsonWriter(Stream) Initializes a new instance of the JsonWriter class. Declaration protected JsonWriter(Stream output) Parameters Type Name Description System.IO.Stream output The System.IO.Stream to which you want to write. | Improve this Doc JsonWriter(Stream, Encoding) Initializes a new instance of the JsonWriter class. Declaration protected JsonWriter(Stream output, Encoding encoding) Parameters Type Name Description System.IO.Stream output The System.IO.Stream to which you want to write. System.Text.Encoding encoding The character encoding to use in the generated output . Fields | Improve this Doc BeginArray Represents the begin-array character as defined in RFC 4627. Declaration public static readonly string BeginArray Field Value Type Description System.String | Improve this Doc BeginObject Represents the begin-object character as defined in RFC 4627. Declaration public static readonly string BeginObject Field Value Type Description System.String | Improve this Doc EndArray Represents the end-array character as defined in RFC 4627. Declaration public static readonly string EndArray Field Value Type Description System.String | Improve this Doc EndObject Represents the end-object character as defined in RFC 4627. Declaration public static readonly string EndObject Field Value Type Description System.String | Improve this Doc NameSeperator Represents the name-seperator character as defined in RFC 4627. Declaration public static readonly string NameSeperator Field Value Type Description System.String | Improve this Doc ValueSeperator Represents the value-seperator character as defined in RFC 4627. Declaration public static readonly string ValueSeperator Field Value Type Description System.String Properties | Improve this Doc Encoding Gets the character encoding used by this instance of the JsonWriter . Declaration public Encoding Encoding { get; } Property Value Type Description System.Text.Encoding | Improve this Doc IsDisposed Gets a value indicating whether this instance is disposed. Declaration protected bool IsDisposed { get; } Property Value Type Description System.Boolean true if this instance is disposed; otherwise, false . Methods | Improve this Doc Create(Stream) Creates a new JsonWriter instance using the specified stream. Declaration public static JsonWriter Create(Stream output) Parameters Type Name Description System.IO.Stream output The System.IO.Stream to which you want to write. Returns Type Description JsonWriter An JsonWriter object. | Improve this Doc Create(Stream, Encoding) Creates a new JsonWriter instance using the specified stream. Declaration public static JsonWriter Create(Stream output, Encoding encoding) Parameters Type Name Description System.IO.Stream output The System.IO.Stream to which you want to write. System.Text.Encoding encoding The character encoding to use in the generated output . Returns Type Description JsonWriter An JsonWriter object. | Improve this Doc Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc Flush() Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream. Declaration public void Flush() | Improve this Doc ValidateEncoding(Encoding) Validates the specified encoding according to RFC 4627. Declaration public static void ValidateEncoding(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding The character encoding to validate. Exceptions Type Condition System.ArgumentNullException encoding is null. System.ArgumentOutOfRangeException encoding is not within the allowed range of allowed encoding values. | Improve this Doc WriteComment(String) Writes out a comment / ... / containing the specified text. Declaration public void WriteComment(string text) Parameters Type Name Description System.String text Text to place inside the comment. | Improve this Doc WriteEndArray() Writes the EndArray tag of a JSON array. Declaration public void WriteEndArray() | Improve this Doc WriteEndObject() Writes the EndObject tag of a JSON object. Declaration public void WriteEndObject() | Improve this Doc WriteObject(String) Writes a JSON object with no value associated. Declaration public void WriteObject(string name) Parameters Type Name Description System.String name The name of the JSON object. | Improve this Doc WriteObject(String, Boolean) Writes a boolean JSON object. Declaration public void WriteObject(string name, bool value) Parameters Type Name Description System.String name The name of the JSON object. System.Boolean value The System.Boolean value of the JSON object. | Improve this Doc WriteObject(String, Byte) Writes a numeric JSON object. Declaration public void WriteObject(string name, byte value) Parameters Type Name Description System.String name The name of the JSON object. System.Byte value The System.Byte value of the JSON object. | Improve this Doc WriteObject(String, Byte[]) Writes a base64 encoded string JSON object. Declaration public void WriteObject(string name, byte[] value) Parameters Type Name Description System.String name The name of the JSON object. System.Byte [] value The binary value of the JSON object. | Improve this Doc WriteObject(String, Char) Writes a string JSON object. Declaration public void WriteObject(string name, char value) Parameters Type Name Description System.String name The name of the JSON object. System.Char value The System.Char value of the JSON object. | Improve this Doc WriteObject(String, DateTime) Writes a string JSON object. Declaration public void WriteObject(string name, DateTime value) Parameters Type Name Description System.String name The name of the JSON object. System.DateTime value The System.DateTime value of the JSON object. | Improve this Doc WriteObject(String, Decimal) Writes a numeric JSON object. Declaration public void WriteObject(string name, decimal value) Parameters Type Name Description System.String name The name of the JSON object. System.Decimal value The System.Decimal value of the JSON object. | Improve this Doc WriteObject(String, Double) Writes a numeric JSON object. Declaration public void WriteObject(string name, double value) Parameters Type Name Description System.String name The name of the JSON object. System.Double value The System.Double value of the JSON object. | Improve this Doc WriteObject(String, Guid) Writes a string JSON object. Declaration public void WriteObject(string name, Guid value) Parameters Type Name Description System.String name The name of the JSON object. System.Guid value The System.Guid value of the JSON object. | Improve this Doc WriteObject(String, Int16) Writes a numeric JSON object. Declaration public void WriteObject(string name, short value) Parameters Type Name Description System.String name The name of the JSON object. System.Int16 value The System.Int16 value of the JSON object. | Improve this Doc WriteObject(String, Int32) Writes a string JSON object. Declaration public void WriteObject(string name, int value) Parameters Type Name Description System.String name The name of the JSON object. System.Int32 value The System.Int32 value of the JSON object. | Improve this Doc WriteObject(String, Int64) Writes a numeric JSON object. Declaration public void WriteObject(string name, long value) Parameters Type Name Description System.String name The name of the JSON object. System.Int64 value The System.Int64 value of the JSON object. | Improve this Doc WriteObject(String, Object) Writes a JSON object. Declaration public void WriteObject(string name, object value) Parameters Type Name Description System.String name The name of the JSON object. System.Object value The value of the JSON object. | Improve this Doc WriteObject(String, SByte) Writes a numeric JSON object. Declaration public void WriteObject(string name, sbyte value) Parameters Type Name Description System.String name The name of the JSON object. System.SByte value The System.SByte value of the JSON object. | Improve this Doc WriteObject(String, Single) Writes a numeric JSON object. Declaration public void WriteObject(string name, float value) Parameters Type Name Description System.String name The name of the JSON object. System.Single value The System.Single value of the JSON object. | Improve this Doc WriteObject(String, String) Writes a numeric JSON object. Declaration public void WriteObject(string name, string value) Parameters Type Name Description System.String name The name of the JSON object. System.String value The System.String value of the JSON object. | Improve this Doc WriteObject(String, UInt16) Writes a numeric JSON object. Declaration public void WriteObject(string name, ushort value) Parameters Type Name Description System.String name The name of the JSON object. System.UInt16 value The System.UInt16 value of the JSON object. | Improve this Doc WriteObject(String, UInt32) Writes a numeric JSON object. Declaration public void WriteObject(string name, uint value) Parameters Type Name Description System.String name The name of the JSON object. System.UInt32 value The System.UInt32 value of the JSON object. | Improve this Doc WriteObject(String, UInt64) Writes a numeric JSON object. Declaration public void WriteObject(string name, ulong value) Parameters Type Name Description System.String name The name of the JSON object. System.UInt64 value The System.UInt64 value of the JSON object. | Improve this Doc WriteObjectName(String) Writes the name of a JSON object as defined in RFC 4627. Declaration public void WriteObjectName(string name) Parameters Type Name Description System.String name The name of the JSON object. | Improve this Doc WriteObjectValue(Boolean) Writes the boolean value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(bool value) Parameters Type Name Description System.Boolean value The value of the JSON object. | Improve this Doc WriteObjectValue(Byte) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(byte value) Parameters Type Name Description System.Byte value The value of the JSON object. | Improve this Doc WriteObjectValue(Byte[]) Writes the string value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(byte[] value) Parameters Type Name Description System.Byte [] value The value of the JSON object. Remarks value is converted to a Base64 encoded string. | Improve this Doc WriteObjectValue(Char) Writes the string value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(char value) Parameters Type Name Description System.Char value The value of the JSON object. | Improve this Doc WriteObjectValue(DateTime) Writes the string value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(DateTime value) Parameters Type Name Description System.DateTime value The value of the JSON object. | Improve this Doc WriteObjectValue(Decimal) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(decimal value) Parameters Type Name Description System.Decimal value The value of the JSON object. | Improve this Doc WriteObjectValue(Double) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(double value) Parameters Type Name Description System.Double value The value of the JSON object. | Improve this Doc WriteObjectValue(Guid) Writes the string value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(Guid value) Parameters Type Name Description System.Guid value The value of the JSON object. | Improve this Doc WriteObjectValue(Int16) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(short value) Parameters Type Name Description System.Int16 value The value of the JSON object. | Improve this Doc WriteObjectValue(Int32) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(int value) Parameters Type Name Description System.Int32 value The value of the JSON object. | Improve this Doc WriteObjectValue(Int64) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(long value) Parameters Type Name Description System.Int64 value The value of the JSON object. | Improve this Doc WriteObjectValue(Object) Writes the value of a JSON object. Declaration public void WriteObjectValue(object value) Parameters Type Name Description System.Object value The value of the JSON object. Remarks value is checked and written accordingly by the System.IConvertible interface. | Improve this Doc WriteObjectValue(SByte) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(sbyte value) Parameters Type Name Description System.SByte value The value of the JSON object. | Improve this Doc WriteObjectValue(Single) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(float value) Parameters Type Name Description System.Single value The value of the JSON object. | Improve this Doc WriteObjectValue(String) Writes the string value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(string value) Parameters Type Name Description System.String value The value of the JSON object. | Improve this Doc WriteObjectValue(UInt16) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(ushort value) Parameters Type Name Description System.UInt16 value The value of the JSON object. | Improve this Doc WriteObjectValue(UInt32) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(uint value) Parameters Type Name Description System.UInt32 value The value of the JSON object. | Improve this Doc WriteObjectValue(UInt64) Writes the numeric value of a JSON object as defined in RFC 4627. Declaration public void WriteObjectValue(ulong value) Parameters Type Name Description System.UInt64 value The value of the JSON object. | Improve this Doc WriteRaw(String) Writes the raw JSON manually from a string. Declaration public void WriteRaw(string data) Parameters Type Name Description System.String data String containing the text to write. | Improve this Doc WriteStartArray() Writes the BeginArray tag of a JSON array. Declaration public void WriteStartArray() | Improve this Doc WriteStartObject() Writes the BeginObject tag of a JSON object. Declaration public void WriteStartObject() | Improve this Doc WriteValueSeperator() Writes the ValueSeperator . Declaration public void WriteValueSeperator() Implements System.IDisposable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.SecurityUtility.html": {
    "href": "api/core/Cuemon.Security.SecurityUtility.html",
    "title": "Class SecurityUtility | Cuemon .NET Standard",
    "keywords": "Class SecurityUtility This utility class is designed to make security operations easier to work with. Inheritance System.Object SecurityUtility Namespace : Cuemon.Security Assembly : Cuemon.Security.dll Syntax public static class SecurityUtility Methods | Improve this Doc CreateEncryptedSecurityToken(SecurityToken, Byte[], Byte[]) Creates a security token easily adopted into various services in the format of the ToString() method. The token itself is encrypted using the Encrypt(Byte[], Byte[], Byte[]) method. Declaration public static byte[] CreateEncryptedSecurityToken(SecurityToken token, byte[] securityKey, byte[] securityInitializationVector) Parameters Type Name Description SecurityToken token The SecurityToken to convert and encrypt to a byte[] representation. System.Byte [] securityKey The key to use in the encryption algorithm. System.Byte [] securityInitializationVector The initialization vector (IV) to use in the encryption algorithm. Returns Type Description System.Byte [] A security token easily adopted into various services in the format of the ToString() method. | Improve this Doc CreateEncryptedSecurityToken(SecurityToken, String, String) Creates a security token easily adopted into various services in the format of the ToString() method. The token itself is encrypted using the Encrypt(Byte[], Byte[], Byte[]) Declaration public static byte[] CreateEncryptedSecurityToken(SecurityToken token, string securityKey, string securityInitializationVector) Parameters Type Name Description SecurityToken token The SecurityToken to convert and encrypt to a byte[] representation. System.String securityKey The key to use in the encryption algorithm. System.String securityInitializationVector The initialization vector (IV) to use in the encryption algorithm. Returns Type Description System.Byte [] A security token easily adopted into various services in the format of the ToString() method. | Improve this Doc CreateEncryptedSecurityToken(SecurityToken, String, String, Encoding) Creates a security token easily adopted into various services in the format of the ToString() method. The token itself is encrypted using the Encrypt(Byte[], Byte[], Byte[]) Declaration public static byte[] CreateEncryptedSecurityToken(SecurityToken token, string securityKey, string securityInitializationVector, Encoding encoding) Parameters Type Name Description SecurityToken token The SecurityToken to convert and encrypt to a byte[] representation. System.String securityKey The key to use in the encryption algorithm. System.String securityInitializationVector The initialization vector (IV) to use in the encryption algorithm. System.Text.Encoding encoding The encoding used for the securityKey and securityInitializationVector . Default is System.Text.Encoding.UTF8 . Returns Type Description System.Byte [] A security token easily adopted into various services in the following XML format of the ToString() method. | Improve this Doc CreateEncryptedSecurityToken(SecurityTokenSettings, Byte[], Byte[]) Creates a security token easily adopted into various services in the format of the ToString() method. The token itself is encrypted using the Encrypt(Byte[], Byte[], Byte[]) method. Declaration public static byte[] CreateEncryptedSecurityToken(SecurityTokenSettings settings, byte[] securityKey, byte[] securityInitializationVector) Parameters Type Name Description SecurityTokenSettings settings The to apply to SecurityToken instance. System.Byte [] securityKey The key to use in the encryption algorithm. System.Byte [] securityInitializationVector The initialization vector (IV) to use in the encryption algorithm. Returns Type Description System.Byte [] A security token easily adopted into various services in the format of the ToString() method. | Improve this Doc CreateEncryptedSecurityToken(SecurityTokenSettings, String, String) Creates a security token easily adopted into various services in the format of the ToString() method. The token itself is encrypted using the Encrypt(Byte[], Byte[], Byte[]) Declaration public static byte[] CreateEncryptedSecurityToken(SecurityTokenSettings settings, string securityKey, string securityInitializationVector) Parameters Type Name Description SecurityTokenSettings settings The to apply to SecurityToken instance. System.String securityKey The key to use in the encryption algorithm. System.String securityInitializationVector The initialization vector (IV) to use in the encryption algorithm. Returns Type Description System.Byte [] A security token easily adopted into various services in the format of the ToString() method. | Improve this Doc CreateEncryptedSecurityToken(SecurityTokenSettings, String, String, Encoding) Creates a security token easily adopted into various services in the format of the ToString() method. The token itself is encrypted using the Encrypt(Byte[], Byte[], Byte[]) Declaration public static byte[] CreateEncryptedSecurityToken(SecurityTokenSettings settings, string securityKey, string securityInitializationVector, Encoding encoding) Parameters Type Name Description SecurityTokenSettings settings The to apply to SecurityToken instance. System.String securityKey The key to use in the encryption algorithm. System.String securityInitializationVector The initialization vector (IV) to use in the encryption algorithm. System.Text.Encoding encoding The encoding used for the securityKey and securityInitializationVector . Default is System.Text.Encoding.UTF8 . Returns Type Description System.Byte [] A security token easily adopted into various services in the following XML format of the ToString() method. | Improve this Doc ParseEncryptedSecurityToken(Byte[], Byte[], Byte[]) Creates a SecurityToken instance from the parsed encrypted securityToken . The token itself is decrypted using the Decrypt(Byte[], Byte[], Byte[]) method. Declaration public static SecurityToken ParseEncryptedSecurityToken(byte[] securityToken, byte[] securityKey, byte[] securityInitializationVector) Parameters Type Name Description System.Byte [] securityToken The security token to parse. System.Byte [] securityKey The key to use in the decryption algorithm. System.Byte [] securityInitializationVector The initialization vector (IV) to use in the decryption algorithm. Returns Type Description SecurityToken An instance of the SecurityToken object. | Improve this Doc ParseEncryptedSecurityToken(Byte[], String, String) Creates a SecurityToken instance from the parsed encrypted securityToken . The token itself is decrypted using the Decrypt(Byte[], Byte[], Byte[]) method. Declaration public static SecurityToken ParseEncryptedSecurityToken(byte[] securityToken, string securityKey, string securityInitializationVector) Parameters Type Name Description System.Byte [] securityToken The security token to parse. System.String securityKey The key to use in the decryption algorithm. System.String securityInitializationVector The initialization vector (IV) to use in the decryption algorithm. Returns Type Description SecurityToken An instance of the SecurityToken object. | Improve this Doc ParseEncryptedSecurityToken(Byte[], String, String, Encoding) Creates a SecurityToken instance from the parsed encrypted securityToken . The token itself is decrypted using the Decrypt(Byte[], Byte[], Byte[]) method. Declaration public static SecurityToken ParseEncryptedSecurityToken(byte[] securityToken, string securityKey, string securityInitializationVector, Encoding encoding) Parameters Type Name Description System.Byte [] securityToken The security token to parse. System.String securityKey The key to use in the decryption algorithm. System.String securityInitializationVector The initialization vector (IV) to use in the decryption algorithm. System.Text.Encoding encoding The encoding used for the securityKey and securityInitializationVector . Default is System.Text.Encoding.UTF8 . Returns Type Description SecurityToken An instance of the SecurityToken object. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.SecurityTokenSettings.html": {
    "href": "api/core/Cuemon.Security.SecurityTokenSettings.html",
    "title": "Class SecurityTokenSettings | Cuemon .NET Standard",
    "keywords": "Class SecurityTokenSettings Specifies a set of features to support on the SecurityToken object created by the Create(SecurityTokenSettings) method. Inheritance System.Object SecurityTokenSettings Namespace : Cuemon.Security Assembly : Cuemon.Security.dll Syntax public sealed class SecurityTokenSettings Constructors | Improve this Doc SecurityTokenSettings() Initializes a new instance of the SecurityTokenSettings class. Declaration public SecurityTokenSettings() | Improve this Doc SecurityTokenSettings(TimeSpan) Initializes a new instance of the SecurityToken class. Declaration public SecurityTokenSettings(TimeSpan timeToLive) Parameters Type Name Description System.TimeSpan timeToLive The amount of time this token remains usable. Default is 15 seconds. | Improve this Doc SecurityTokenSettings(TimeSpan, Int32) Initializes a new instance of the SecurityToken class. Declaration public SecurityTokenSettings(TimeSpan timeToLive, int lengthOfToken) Parameters Type Name Description System.TimeSpan timeToLive The amount of time this token remains usable. System.Int32 lengthOfToken The length of the random generated token. Default is 24. | Improve this Doc SecurityTokenSettings(TimeSpan, Int32, String) Initializes a new instance of the SecurityTokenSettings class. Declaration public SecurityTokenSettings(TimeSpan timeToLive, int lengthOfToken, string reference) Parameters Type Name Description System.TimeSpan timeToLive The amount of time this token remains usable. System.Int32 lengthOfToken The length of the random generated token. Default is 24. System.String reference The reference of this token. | Improve this Doc SecurityTokenSettings(TimeSpan, String) Initializes a new instance of the SecurityToken class. Declaration public SecurityTokenSettings(TimeSpan timeToLive, string reference) Parameters Type Name Description System.TimeSpan timeToLive The amount of time this token remains usable. System.String reference The reference of this token. Properties | Improve this Doc LengthOfToken Gets the length of this token. Declaration public int LengthOfToken { get; } Property Value Type Description System.Int32 The length of this token. | Improve this Doc Reference Gets the reference of this token. Declaration public string Reference { get; } Property Value Type Description System.String The reference of this token. | Improve this Doc TimeToLive Gets the amount of time to keep this token alive. Declaration public TimeSpan TimeToLive { get; } Property Value Type Description System.TimeSpan The amount of time to keep this token alive. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataTransferRowCollection.html": {
    "href": "api/core/Cuemon.Data.DataTransferRowCollection.html",
    "title": "Class DataTransferRowCollection | Cuemon .NET Standard",
    "keywords": "Class DataTransferRowCollection Represents a collection of DataTransferRow objects for a table in a database. This class cannot be inherited. Inheritance System.Object DataTransferRowCollection Implements System.Collections.Generic.IEnumerable < DataTransferRow > System.Collections.IEnumerable Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class DataTransferRowCollection : IEnumerable<DataTransferRow>, IEnumerable Properties | Improve this Doc ColumnNames Gets the column names that is present in this DataTransferRow . Declaration public IEnumerable<string> ColumnNames { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > The column names of a table-row in a database. | Improve this Doc Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 The count. | Improve this Doc IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if this instance is read only; otherwise, false . | Improve this Doc Item[Int32] Gets the DataTransferRow at the specified index. Declaration public DataTransferRow this[int index] { get; } Parameters Type Name Description System.Int32 index The zero-based index of the row to return. Property Value Type Description DataTransferRow The specified DataTransferRow . Methods | Improve this Doc Contains(DataTransferRow) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(DataTransferRow item) Parameters Type Name Description DataTransferRow item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. | Improve this Doc GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<DataTransferRow> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < DataTransferRow > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. | Improve this Doc IndexOf(DataTransferRow) Determines the index of a specific item in the System.Collections.Generic.IList<T> . Declaration public int IndexOf(DataTransferRow item) Parameters Type Name Description DataTransferRow item The object to locate in the System.Collections.Generic.IList<T> . Returns Type Description System.Int32 The index of item if found in the list; otherwise, -1. Explicit Interface Implementations | Improve this Doc IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataTransferRow.html": {
    "href": "api/core/Cuemon.Data.DataTransferRow.html",
    "title": "Class DataTransferRow | Cuemon .NET Standard",
    "keywords": "Class DataTransferRow Represents the row of a table in a database. This class cannot be inherited. Inheritance System.Object DataTransferRow Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class DataTransferRow Properties | Improve this Doc Columns Gets the associated columns of this row. Declaration public DataTransferColumnCollection Columns { get; } Property Value Type Description DataTransferColumnCollection The associated columns of this row. | Improve this Doc Item[DataTransferColumn] Gets the value of a DataTransferColumn from the Columns with the specified column . Declaration public object this[DataTransferColumn column] { get; } Parameters Type Name Description DataTransferColumn column The column from which to return the value from. Property Value Type Description System.Object An System.Object that contains the data of the column. | Improve this Doc Item[Int32] Gets the value of a DataTransferColumn from the Columns with the specified index . Declaration public object this[int index] { get; } Parameters Type Name Description System.Int32 index The zero-based index of the column from which to return the value from. Property Value Type Description System.Object An System.Object that contains the data of the column. | Improve this Doc Item[String] Gets the value of a DataTransferColumn from the Columns with the specified name . Declaration public object this[string name] { get; } Parameters Type Name Description System.String name The name of the column from which to return the value from. Property Value Type Description System.Object An System.Object that contains the data of the column. | Improve this Doc Number Gets the row number. Declaration public int Number { get; } Property Value Type Description System.Int32 The row number. Methods | Improve this Doc As<TResult>(DataTransferColumn) Gets the value of a DataTransferColumn from the Columns with the specified column . Declaration public TResult As<TResult>(DataTransferColumn column) Parameters Type Name Description DataTransferColumn column The column from which to return the value from. Returns Type Description TResult The value associated with the column converted to the specified TResult . Type Parameters Name Description TResult The type of the result. | Improve this Doc As<TResult>(Int32) Gets the value of a DataTransferColumn from the Columns with the specified index . Declaration public TResult As<TResult>(int index) Parameters Type Name Description System.Int32 index The zero-based index of the column from which to return the value from. Returns Type Description TResult The value associated with the zero-based index of a column converted to the specified TResult . Type Parameters Name Description TResult The type of the result. | Improve this Doc As<TResult>(String) Gets the value of a DataTransferColumn from the Columns with the specified name . Declaration public TResult As<TResult>(string name) Parameters Type Name Description System.String name The name of the column from which to return the value from. Returns Type Description TResult The value associated with the name of a column converted to the specified TResult . Type Parameters Name Description TResult The type of the result. | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.BulkCopyDataReader.html": {
    "href": "api/core/Cuemon.Data.BulkCopyDataReader.html",
    "title": "Class BulkCopyDataReader | Cuemon .NET Standard",
    "keywords": "Class BulkCopyDataReader Provides a way of copying an existing object implementing the System.Data.Common.DbDataReader interface to a filtered forward-only stream of rows that is mapped for bulk upload. This class cannot be inherited. Inheritance System.Object System.Data.Common.DbDataReader BulkCopyDataReader Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable Inherited Members System.Data.Common.DbDataReader.Dispose() System.Data.Common.DbDataReader.GetData(System.Int32) System.Data.Common.DbDataReader.GetDbDataReader(System.Int32) System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32) System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[]) System.Data.Common.DbDataReader.GetStream(System.Int32) System.Data.Common.DbDataReader.GetTextReader(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.NextResultAsync() System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.ReadAsync() System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32) System.Data.Common.DbDataReader.System.Data.IDataReader.Close() System.Data.Common.DbDataReader.System.Data.IDataReader.GetSchemaTable() System.Data.Common.DbDataReader.VisibleFieldCount Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class BulkCopyDataReader : DbDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable Constructors | Improve this Doc BulkCopyDataReader(DbDataReader, IEnumerable<Mapping>) Initializes a new instance of the BulkCopyDataReader class. Declaration public BulkCopyDataReader(DbDataReader reader, IEnumerable<Mapping> mappings) Parameters Type Name Description System.Data.Common.DbDataReader reader The System.Data.Common.DbDataReader object that contains the data. System.Collections.Generic.IEnumerable < Mapping > mappings A sequence of Mapping elements that specifies the data to be copied. Properties | Improve this Doc Depth Gets a value indicating the depth of nesting for the current row. Declaration public override int Depth { get; } Property Value Type Description System.Int32 The depth of nesting for the current row. Overrides System.Data.Common.DbDataReader.Depth Remarks The outermost table has a depth of zero. | Improve this Doc FieldCount Gets the number of columns in the current row. Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. Overrides System.Data.Common.DbDataReader.FieldCount | Improve this Doc HasRows Gets a value that indicates whether this System.Data.Common.DbDataReader contains one or more rows. Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean true if this instance has rows; otherwise, false . Overrides System.Data.Common.DbDataReader.HasRows | Improve this Doc IsClosed Gets a value indicating whether the data reader is closed. Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean true if this instance is closed; otherwise, false . Overrides System.Data.Common.DbDataReader.IsClosed | Improve this Doc Item[Int32] Gets the column located at the specified index. Declaration public override object this[int i] { get; } Parameters Type Name Description System.Int32 i The zero-based index of the column to get. Property Value Type Description System.Object The column located at the specified index as an System.Object . Overrides System.Data.Common.DbDataReader.Item[System.Int32] | Improve this Doc Item[String] Gets the column with the specified name. Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name The name of the column to find. Property Value Type Description System.Object The column with the specified name as an System.Object . Overrides System.Data.Common.DbDataReader.Item[System.String] | Improve this Doc Mappings Gets the sequence of Mapping elements that specifies the data to be copied. Declaration public IList<Mapping> Mappings { get; } Property Value Type Description System.Collections.Generic.IList < Mapping > The Mapping elements that specifies the data to be copied. | Improve this Doc RecordsAffected Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 The records affected. Overrides System.Data.Common.DbDataReader.RecordsAffected | Improve this Doc RowCount Gets the currently processed row count of this instance. Declaration public int RowCount { get; } Property Value Type Description System.Int32 The currently processed row count of this instance. Remarks This property is incremented when the invoked Read() method returns true . Methods | Improve this Doc Dispose(Boolean) Releases the managed resources used by the System.Data.Common.DbDataReader and optionally releases the unmanaged resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release managed and unmanaged resources; false to release only unmanaged resources. Overrides System.Data.Common.DbDataReader.Dispose(System.Boolean) | Improve this Doc GetBoolean(Int32) Gets the value of the specified column as a Boolean. Declaration public override bool GetBoolean(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.Boolean The value of the column. Overrides System.Data.Common.DbDataReader.GetBoolean(System.Int32) | Improve this Doc GetByte(Int32) Gets the 8-bit unsigned integer value of the specified column. Declaration public override byte GetByte(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.Byte The 8-bit unsigned integer value of the specified column. Overrides System.Data.Common.DbDataReader.GetByte(System.Int32) | Improve this Doc GetBytes(Int32, Int64, Byte[], Int32, Int32) Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i The zero-based column ordinal. System.Int64 fieldOffset The index within the row from which to begin the read operation. System.Byte [] buffer The buffer into which to copy the data. System.Int32 bufferoffset The index with the buffer to which the data will be copied. System.Int32 length The maximum number of characters to read. Returns Type Description System.Int64 The actual number of bytes read. Overrides System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) | Improve this Doc GetChar(Int32) Gets the character value of the specified column. Declaration public override char GetChar(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.Char The character value of the specified column. Overrides System.Data.Common.DbDataReader.GetChar(System.Int32) | Improve this Doc GetChars(Int32, Int64, Char[], Int32, Int32) Reads a stream of characters from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i The zero-based column ordinal. System.Int64 fieldoffset The index within the row from which to begin the read operation. System.Char [] buffer The buffer into which to copy the data. System.Int32 bufferoffset The index with the buffer to which the data will be copied. System.Int32 length The maximum number of characters to read. Returns Type Description System.Int64 The actual number of characters read. Overrides System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) | Improve this Doc GetDataTypeName(Int32) Gets the name of the data type. Declaration public override string GetDataTypeName(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.String System.String. Overrides System.Data.Common.DbDataReader.GetDataTypeName(System.Int32) | Improve this Doc GetDateTime(Int32) Gets the date and time data value of the specified field. Declaration public override DateTime GetDateTime(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.DateTime The date and time data value of the specified field. Overrides System.Data.Common.DbDataReader.GetDateTime(System.Int32) | Improve this Doc GetDecimal(Int32) Gets the fixed-position numeric value of the specified field. Declaration public override decimal GetDecimal(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Decimal The fixed-position numeric value of the specified field. Overrides System.Data.Common.DbDataReader.GetDecimal(System.Int32) | Improve this Doc GetDouble(Int32) Gets the double-precision floating point number of the specified field. Declaration public override double GetDouble(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Double The double-precision floating point number of the specified field. Overrides System.Data.Common.DbDataReader.GetDouble(System.Int32) | Improve this Doc GetEnumerator() Returns an System.Collections.IEnumerator that can be used to iterate through the rows in the data reader. Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator that can be used to iterate through the rows in the data reader. Overrides System.Data.Common.DbDataReader.GetEnumerator() Exceptions Type Condition System.NotImplementedException | Improve this Doc GetFieldType(Int32) Gets the System.Type information corresponding to the type of System.Object that would be returned from System.Data.IDataRecord.GetValue(Int32) . Declaration public override Type GetFieldType(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Type The System.Type information corresponding to the type of System.Object that would be returned from System.Data.IDataRecord.GetValue(Int32) . Overrides System.Data.Common.DbDataReader.GetFieldType(System.Int32) | Improve this Doc GetFloat(Int32) Gets the single-precision floating point number of the specified field. Declaration public override float GetFloat(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Single The single-precision floating point number of the specified field. Overrides System.Data.Common.DbDataReader.GetFloat(System.Int32) | Improve this Doc GetGuid(Int32) Returns the GUID value of the specified field. Declaration public override Guid GetGuid(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Guid The GUID value of the specified field. Overrides System.Data.Common.DbDataReader.GetGuid(System.Int32) | Improve this Doc GetInt16(Int32) Gets the 16-bit signed integer value of the specified field. Declaration public override short GetInt16(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Int16 The 16-bit signed integer value of the specified field. Overrides System.Data.Common.DbDataReader.GetInt16(System.Int32) | Improve this Doc GetInt32(Int32) Gets the 32-bit signed integer value of the specified field. Declaration public override int GetInt32(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Int32 The 32-bit signed integer value of the specified field. Overrides System.Data.Common.DbDataReader.GetInt32(System.Int32) | Improve this Doc GetInt64(Int32) Gets the 64-bit signed integer value of the specified field. Declaration public override long GetInt64(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Int64 The 64-bit signed integer value of the specified field. Overrides System.Data.Common.DbDataReader.GetInt64(System.Int32) | Improve this Doc GetName(Int32) Gets the name for the field to find. Declaration public override string GetName(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.String The name of the field or the empty string (\"\"), if there is no value to return. Overrides System.Data.Common.DbDataReader.GetName(System.Int32) | Improve this Doc GetOrdinal(String) Return the index of the named field. Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name The name of the field to find. Returns Type Description System.Int32 The index of the named field. Overrides System.Data.Common.DbDataReader.GetOrdinal(System.String) Exceptions Type Condition System.ArgumentNullException name is null. System.ArgumentOutOfRangeException name is not a valid column name. | Improve this Doc GetString(Int32) Gets the string value of the specified field. Declaration public override string GetString(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.String The string value of the specified field. Overrides System.Data.Common.DbDataReader.GetString(System.Int32) | Improve this Doc GetValue(Int32) Return the value of the specified field. Declaration public override object GetValue(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Object The System.Object which will contain the field value upon return. Overrides System.Data.Common.DbDataReader.GetValue(System.Int32) | Improve this Doc GetValues(Object[]) Populates an array of objects with the column values of the current record. Declaration public override int GetValues(object[] values) Parameters Type Name Description System.Object [] values An array of System.Object to copy the attribute fields into. Returns Type Description System.Int32 The number of instances of System.Object in the array. Overrides System.Data.Common.DbDataReader.GetValues(System.Object[]) | Improve this Doc IsDBNull(Int32) Return whether the specified field is set to null. Declaration public override bool IsDBNull(int i) Parameters Type Name Description System.Int32 i The index of the field to find. Returns Type Description System.Boolean true if the specified field is set to null; otherwise, false. Overrides System.Data.Common.DbDataReader.IsDBNull(System.Int32) | Improve this Doc NextResult() Advances the reader to the next result when reading the results of a batch of statements. Declaration public override bool NextResult() Returns Type Description System.Boolean true if there are more result sets; otherwise false . Overrides System.Data.Common.DbDataReader.NextResult() | Improve this Doc Read() Advances the System.Data.DbDataReader to the next record. Declaration public override bool Read() Returns Type Description System.Boolean true if there are more rows; otherwise, false . Overrides System.Data.Common.DbDataReader.Read() | Improve this Doc ToString() Returns a System.String that represents the current row of this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current row of this instance. Overrides System.Object.ToString() Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable Extension Methods DataTransferExtensions.ToRows(IDataReader) DataTransferExtensions.ToColumns(IDataReader) ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ConvertibleConverterExtensions.html": {
    "href": "api/core/Cuemon.ConvertibleConverterExtensions.html",
    "title": "Class ConvertibleConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class ConvertibleConverterExtensions This is an extension implementation of the ConvertibleConverter class. Inheritance System.Object ConvertibleConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ConvertibleConverterExtensions Methods | Improve this Doc ToConvertible<T>(Byte[]) Returns an System.IConvertible primitive converted from the specified array value of bytes. Declaration public static T ToConvertible<T>(this byte[] value) where T : struct, IConvertible Parameters Type Name Description System.Byte [] value The value to convert into an System.IConvertible . Returns Type Description T An System.IConvertible primitive formed by n-bytes beginning at 0. Type Parameters Name Description T The type of the expected return value after conversion. Exceptions Type Condition System.ArgumentNullException value is null. TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Boolean , System.Char , System.Double , System.Int16 , System.Int32 , System.UInt16 , System.UInt32 and System.UInt64 . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.html": {
    "href": "api/core/Cuemon.Collections.Generic.html",
    "title": "Namespace Cuemon.Collections.Generic | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Classes ComparisonUtility Provide a generic way to work with System.Comparison<T> related tasks. ConditionalCollection<T> Provides the abstract base class for a generic, conditional collection. DictionaryConverter This utility class is designed to make System.Collections.Generic.IDictionary<TKey, TValue> related conversions easier to work with. DictionaryConverterExtensions This is an extension implementation of the DictionaryConverter class. DictionaryExtensions Extension methods for the System.Collections.Generic.Dictionary<TKey, TValue> . DictionaryUtility This utility class provides a set of concrete static methods for supporting the EnumerableUtility . DictionaryUtilityExtensions This is an extension implementation of the most common methods on the DictionaryUtility class. DynamicComparer Provides a factory based way to create and wrap an System.Collections.Generic.IComparer<T> implementation. DynamicEqualityComparer Provides a factory based way to create and wrap an System.Collections.Generic.IEqualityComparer<T> implementation. EnumerableConverter This utility class is designed to make System.Collections.Generic.IEnumerable<T> related conversions easier to work with. EnumerableConverterExtensions This is an extension implementation of the EnumerableConverter class. EnumerableExtensions Extension methods for the System.Collections.Generic.IEnumerable<T> interface. EnumerableSizeComparer<T> Provides System.Collections.Generic.IEnumerable<T> size comparison. EnumerableUtility This utility class provides a set of static methods for querying objects that implement System.Collections.Generic.IEnumerable<T> . EnumerableUtilityExtensions This is an extension implementation of the most common methods on the EnumerableUtility class. ListUtility This utility class is designed to make System.Collections.Generic.IList<T> related conversions easier to work with. ListUtilityExtensions This is an extension implementation of the most common methods on the ListUtility class. PagedCollection Represents a way of setting default values for the PagedCollection<T> class. PagedCollection<T> Represents an System.Collections.Generic.IEnumerable<T> paged data sequence. PagedCollectionExtensions This is an extension implementation that provides ways to enable paging on System.Collections.Generic.IEnumerable<T> sequences. PagedSettings Specifies a set of features to support on the PagedCollection object. This class cannot be inherited. PartitionCollection<T> Represents an System.Collections.Generic.IEnumerable<T> partitioned data sequence. This class cannot be inherited. PartitionCollectionExtensions This is an extension implementation that provides ways to partition System.Collections.Generic.IEnumerable<T> sequences. ReferenceComparer<T> Provides object hierarchy comparison. Interfaces ISortableTable<TSource> Defines a generic way to perform a table-like sorting operation. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Serialization.Xml.Formatters.html": {
    "href": "api/core/Cuemon.Serialization.Xml.Formatters.html",
    "title": "Namespace Cuemon.Serialization.Xml.Formatters | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Serialization.Xml.Formatters Assembly : Cuemon.Serialization.Xml.dll Classes XmlFormatter Serializes and deserializes an object in XML format. XmlFormatterOptions Specifies options that is related to XmlFormatter operations. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.SecureXmlObfuscator.html": {
    "href": "api/core/Cuemon.Security.SecureXmlObfuscator.html",
    "title": "Class SecureXmlObfuscator | Cuemon .NET Standard",
    "keywords": "Class SecureXmlObfuscator Provides methods for secure obfuscation (based on AES) of the otherwise similar class XmlObfuscator . Inheritance System.Object Obfuscator XmlObfuscator SecureXmlObfuscator Inherited Members XmlObfuscator.InitializePermutationCharacters() XmlObfuscator.Obfuscate(Stream) Obfuscator.CurrentCombinationLength Obfuscator.CurrentPermutationSize Obfuscator.Encoding Obfuscator.PermutationCharacters Obfuscator.Exclusions Obfuscator.Mappings Obfuscator.ComputeHash(String) Obfuscator.GenerateObfuscatedValue() Namespace : Cuemon.Security Assembly : Cuemon.Xml.dll Syntax public sealed class SecureXmlObfuscator : XmlObfuscator Remarks Logic used from the AdvancedEncryptionStandardUtility class. Constructors | Improve this Doc SecureXmlObfuscator(Byte[], Byte[]) Initializes a new instance of the SecureXmlObfuscator class using System.Text.Encoding.UTF8 for the text encoding. Declaration public SecureXmlObfuscator(byte[] key, byte[] initializationVector) Parameters Type Name Description System.Byte [] key The key to use in the encryption algorithm. System.Byte [] initializationVector The initialization vector (IV) to use in the encryption algorithm. | Improve this Doc SecureXmlObfuscator(Byte[], Byte[], IEnumerable<String>) Initializes a new instance of the SecureXmlObfuscator class. Declaration public SecureXmlObfuscator(byte[] key, byte[] initializationVector, IEnumerable<string> exclusions) Parameters Type Name Description System.Byte [] key The key to use in the encryption algorithm. System.Byte [] initializationVector The initialization vector (IV) to use in the encryption algorithm. System.Collections.Generic.IEnumerable < System.String > exclusions A sequence of System.String values used for excluding matching original values in the obfuscation process. | Improve this Doc SecureXmlObfuscator(Byte[], Byte[], Encoding) Initializes a new instance of the SecureXmlObfuscator class using System.Text.Encoding.UTF8 for the text encoding. Declaration public SecureXmlObfuscator(byte[] key, byte[] initializationVector, Encoding encoding) Parameters Type Name Description System.Byte [] key The key to use in the encryption algorithm. System.Byte [] initializationVector The initialization vector (IV) to use in the encryption algorithm. System.Text.Encoding encoding The text encoding to use. | Improve this Doc SecureXmlObfuscator(Byte[], Byte[], Encoding, IEnumerable<String>) Initializes a new instance of the SecureXmlObfuscator class. Declaration public SecureXmlObfuscator(byte[] key, byte[] initializationVector, Encoding encoding, IEnumerable<string> exclusions) Parameters Type Name Description System.Byte [] key The key to use in the encryption algorithm. System.Byte [] initializationVector The initialization vector (IV) to use in the encryption algorithm. System.Text.Encoding encoding The character encoding to use. System.Collections.Generic.IEnumerable < System.String > exclusions A sequence of System.String values used for excluding matching original values in the obfuscation process. Properties | Improve this Doc InitializationVector Gets the initialization vector (IV) for the AES algorithm. Declaration public byte[] InitializationVector { get; } Property Value Type Description System.Byte [] | Improve this Doc Key Gets the secret key for the AES algorithm. Declaration public byte[] Key { get; } Property Value Type Description System.Byte [] Methods | Improve this Doc CreateMapping() Creates and returns a mappable XML document of the original values and the obfuscated values. Declaration public override Stream CreateMapping() Returns Type Description System.IO.Stream A mappable XML document of the original values and the obfuscated values. Overrides XmlObfuscator.CreateMapping() | Improve this Doc Revert(Stream, Stream) Revert the obfuscated XML document of value to its original state by applying the mappable XML document of mapping . Declaration public override Stream Revert(Stream value, Stream mapping) Parameters Type Name Description System.IO.Stream value The obfuscated System.IO.Stream to revert. System.IO.Stream mapping A System.IO.Stream containing mappable values necessary to revert value to its original state. Returns Type Description System.IO.Stream A System.IO.Stream object where the obfuscated XML document has been reverted to its original XML document. Overrides XmlObfuscator.Revert(Stream, Stream) Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.ObfuscatorMapping.html": {
    "href": "api/core/Cuemon.Security.ObfuscatorMapping.html",
    "title": "Class ObfuscatorMapping | Cuemon .NET Standard",
    "keywords": "Class ObfuscatorMapping A simple container for the original value of an obfuscated entry as well as the obfuscated value. This is used for reversing an obfuscated document to its original value. Inheritance System.Object ObfuscatorMapping Namespace : Cuemon.Security Assembly : Cuemon.Security.dll Syntax public sealed class ObfuscatorMapping Constructors | Improve this Doc ObfuscatorMapping(String, String) Initializes a new instance of the ObfuscatorMapping class. Declaration public ObfuscatorMapping(string obfuscated, string original) Parameters Type Name Description System.String obfuscated The obfuscated value of original . System.String original The original value of obfuscated . Properties | Improve this Doc Count Gets the total representation count of this mapping. Declaration public int Count { get; } Property Value Type Description System.Int32 The total representation count of this mapping. | Improve this Doc Obfuscated Gets the obfuscated value of Original . Declaration public string Obfuscated { get; } Property Value Type Description System.String The obfuscated value of Original . | Improve this Doc Original Gets the original value of Obfuscated . Declaration public string Original { get; } Property Value Type Description System.String The original value of Obfuscated . Methods | Improve this Doc IncrementCount() Increments the representation count of this mapping. Declaration public void IncrementCount() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.CyclicRedundancyCheck.html": {
    "href": "api/core/Cuemon.Security.Cryptography.CyclicRedundancyCheck.html",
    "title": "Class CyclicRedundancyCheck | Cuemon .NET Standard",
    "keywords": "Class CyclicRedundancyCheck Represents the abstract class from which all implementations of the CRC hash algorithm inherit. Inheritance System.Object System.Security.Cryptography.HashAlgorithm CyclicRedundancyCheck CyclicRedundancyCheck32 Implements System.IDisposable Inherited Members System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[]) System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32) System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream) System.Security.Cryptography.HashAlgorithm.Dispose() System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean) System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[], System.Int32, System.Int32) System.Security.Cryptography.HashAlgorithm.HashFinal() System.Security.Cryptography.HashAlgorithm.HashSize Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public abstract class CyclicRedundancyCheck : HashAlgorithm, IDisposable Constructors | Improve this Doc CyclicRedundancyCheck() Initializes a new instance of the CyclicRedundancyCheck class. Declaration protected CyclicRedundancyCheck() | Improve this Doc CyclicRedundancyCheck(PolynomialRepresentation) Initializes a new instance of the CyclicRedundancyCheck class. Declaration protected CyclicRedundancyCheck(PolynomialRepresentation representation) Parameters Type Name Description PolynomialRepresentation representation The CRC generator polynomial representation. Properties | Improve this Doc DefaultSeed Gets the CRC default seed value. Declaration public abstract long DefaultSeed { get; } Property Value Type Description System.Int64 The CRC default seed value. | Improve this Doc HashCoreResult Gets or sets the resolved hash result. Declaration protected long HashCoreResult { get; set; } Property Value Type Description System.Int64 The resolved hash result. | Improve this Doc LookupTable Gets the lookup table for the associated CRC implementation. Declaration protected IList<long> LookupTable { get; } Property Value Type Description System.Collections.Generic.IList < System.Int64 > The lookup table for the associated CRC implementation. | Improve this Doc Polynomial Gets the CRC polynomial hexadecimal value equal to CRC implementation and Representation . Declaration public long Polynomial { get; protected set; } Property Value Type Description System.Int64 The CRC polynomial hexadecimal value equal to CRC implementation and Representation . | Improve this Doc Representation Gets the CRC polynomial generator representation. Declaration public PolynomialRepresentation Representation { get; } Property Value Type Description PolynomialRepresentation The CRC polynomial generator representation. Methods | Improve this Doc Initialize() Initializes an implementation of the System.Security.Cryptography.HashAlgorithm class. Declaration public override sealed void Initialize() Overrides System.Security.Cryptography.HashAlgorithm.Initialize() | Improve this Doc InitializePolynomial() Initializes the implementation of the polynomial representation details. Declaration protected abstract void InitializePolynomial() | Improve this Doc InitializePolynomialLookupTable(Byte, UInt16) Initializes the implementation details of a CyclicRedundancyCheck related polynomial lookup table. Declaration protected abstract void InitializePolynomialLookupTable(byte currentBit, ushort currentTableIndex) Parameters Type Name Description System.Byte currentBit The current bit ranging from 0 to 7. System.UInt16 currentTableIndex The current index of the associated polynomial LookupTable ranging from 0 to 255. Remarks This method is - on first run - invoked 8 times per entry in the associated polynomial LookupTable , given a total of 2048 times. Implements System.IDisposable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.html": {
    "href": "api/core/Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.html",
    "title": "Class AdvancedEncryptionStandardUtility | Cuemon .NET Standard",
    "keywords": "Class AdvancedEncryptionStandardUtility This utility class is designed to make System.Security.Cryptography.Aes operations easier to work with. Inheritance System.Object AdvancedEncryptionStandardUtility Namespace : Cuemon.Security.Cryptography Assembly : Cuemon.Security.dll Syntax public static class AdvancedEncryptionStandardUtility Fields | Improve this Doc BlockSize Gets the block size (bits) for the Advanced Encryption Standard (AES) Declaration public static readonly byte BlockSize Field Value Type Description System.Byte Methods | Improve this Doc Decrypt(Byte[], Byte[], Byte[]) Decrypts the specified value from the provided key and initializationVector . Declaration public static byte[] Decrypt(byte[] value, byte[] key, byte[] initializationVector) Parameters Type Name Description System.Byte [] value The value to decrypt. System.Byte [] key The key to use in the decryption algorithm. System.Byte [] initializationVector The initialization vector (IV) to use in the decryption algorithm. Returns Type Description System.Byte [] The decrypted value. | Improve this Doc Encrypt(Byte[], Byte[], Byte[]) Encrypts the specified value from the provided key and initializationVector . Declaration public static byte[] Encrypt(byte[] value, byte[] key, byte[] initializationVector) Parameters Type Name Description System.Byte [] value The value to encrypt. System.Byte [] key The key to use in the encryption algorithm. System.Byte [] initializationVector The initialization vector (IV) to use in the encryption algorithm. Returns Type Description System.Byte [] The encrypted value. | Improve this Doc GenerateInitializationVector() Generates a random 128 bit initialization vector (IV) to be used for the algorithm. Declaration public static byte[] GenerateInitializationVector() Returns Type Description System.Byte [] A random 128 bit generated initialization vector (IV). | Improve this Doc GenerateKey(AdvancedEncryptionStandardKeySize) Generates a random key to be used for the algorithm. Declaration public static byte[] GenerateKey(AdvancedEncryptionStandardKeySize keySize) Parameters Type Name Description AdvancedEncryptionStandardKeySize keySize The size of the key. Returns Type Description System.Byte [] A random generated key with the specified keySize . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.RelationalOperator.html": {
    "href": "api/core/Cuemon.RelationalOperator.html",
    "title": "Enum RelationalOperator | Cuemon .NET Standard",
    "keywords": "Enum RelationalOperator Defines the most common numerical relational operators. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum RelationalOperator Remarks For more information please refer to this Wikipedia article: http://en.wikipedia.org/wiki/Relational_operator#Standard_relational_operators . Fields Name Description Equal A comparison for equality (==). GreaterThan A comparison for greater than (>). GreaterThanOrEqual A comparison for greater than or equal to (>=). LessThan A comparison for less than (<). LessThanOrEqual A comparison for less than or equal to (<=). NotEqual A comparison for inequality (!=). Extension Methods ByteConverterExtensions.ToByteArray<RelationalOperator>() ConverterExtensions.ParseWith<RelationalOperator, TResult>(Func<RelationalOperator, TResult>) ConverterExtensions.ParseWith<RelationalOperator, T, TResult>(Func<RelationalOperator, T, TResult>, T) ConverterExtensions.ParseWith<RelationalOperator, T1, T2, TResult>(Func<RelationalOperator, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<RelationalOperator, T1, T2, T3, TResult>(Func<RelationalOperator, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<RelationalOperator, T1, T2, T3, T4, TResult>(Func<RelationalOperator, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<RelationalOperator, T1, T2, T3, T4, T5, TResult>(Func<RelationalOperator, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<RelationalOperator, T1, T2, T3, T4, T5, T6, TResult>(Func<RelationalOperator, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<RelationalOperator, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<RelationalOperator, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<RelationalOperator, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<RelationalOperator, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<RelationalOperator, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<RelationalOperator, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<RelationalOperator>() DelegateUtilityExtensions.DynamicWrap<RelationalOperator>() TweakerExtensions.Adjust<RelationalOperator>(Func<RelationalOperator, RelationalOperator>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<RelationalOperator>() WrapperExtensions.UseWrapper<RelationalOperator>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<RelationalOperator>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<RelationalOperator>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.html": {
    "href": "api/core/Cuemon.Reflection.html",
    "title": "Namespace Cuemon.Reflection | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Reflection Assembly : Cuemon.Core.dll Classes ActivatorUtility Provide ways to work more efficient with System.Activator related tasks. AssemblyUtility This utility class is designed to make common System.Reflection.Assembly related operations easier to work with. AssemblyUtilityExtensions This is an extension implementation of the most common methods on the AssemblyUtility class. MemberInfoExtensions Extension methods for the System.Reflection.MemberInfo . MethodBaseConverter This utility class is designed to make System.Reflection.MethodBase related conversions easier to work with. MethodBaseConverterExtensions This is an extension implementation of the MethodBaseConverter class. MethodDescriptor Provides information about a method, such as its name, parameters and whether its a property or method. ObjectHierarchyOptions Specifies options that is related to GetObjectHierarchy(Object, Action<ObjectHierarchyOptions>) operations. ParameterSignature Represent the signature of a parameter to a method, property or similar. ReflectionUtility This utility class is designed to make Cuemon.Reflection operations easier to work with. ReflectionUtilityExtensions This is an extension implementation of the most common methods on the ReflectionUtility class. Enums ResourceMatch Specifies the way of finding and returning an embedded resource. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Text.EncodingOptions.html": {
    "href": "api/core/Cuemon.Text.EncodingOptions.html",
    "title": "Class EncodingOptions | Cuemon .NET Standard",
    "keywords": "Class EncodingOptions Specifies options that is related to Encoding operations. Inheritance System.Object EncodingOptions FallbackEncodingOptions Namespace : Cuemon.Text Assembly : Cuemon.Core.dll Syntax public class EncodingOptions Constructors | Improve this Doc EncodingOptions() Initializes a new instance of the EncodingOptions class. Declaration public EncodingOptions() Remarks The following table shows the initial property values for an instance of EncodingOptions . Property Initial Value Preamble DefaultPreambleSequence Encoding DefaultEncoding Properties | Improve this Doc DefaultEncoding Gets or sets the default encoding of EncodingOptions . Default is System.Text.Encoding.UTF8 . Declaration public static Encoding DefaultEncoding { get; set; } Property Value Type Description System.Text.Encoding The default encoding to use in Encoding related operations. Remarks Changing this value should be thought through carefully as it can change the behavior you have come to expect. Consider using local adjustment instead. | Improve this Doc DefaultPreambleSequence Gets or sets the default preamble action of EncodingOptions . Default is Remove . Declaration public static PreambleSequence DefaultPreambleSequence { get; set; } Property Value Type Description PreambleSequence The default preamble action to use in Encoding related operations. Remarks Changing this value should be thought through carefully as it can change the behavior you have come to expect. Consider using local adjustment instead. | Improve this Doc Encoding Gets or sets the encoding for the operation. Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding The encoding for the operation. | Improve this Doc Preamble Gets or sets the action to take in regards to encoding related preamble sequences. Declaration public PreambleSequence Preamble { get; set; } Property Value Type Description PreambleSequence A value that indicates whether to preserve or remove preamble sequences. Methods | Improve this Doc DetectEncoding(Byte[]) Tries to detect an System.Text.Encoding object from the specified value . If unsuccessful, the encoding of this instance is returned. Declaration public Encoding DetectEncoding(byte[] value) Parameters Type Name Description System.Byte [] value The System.Byte array to parse for an System.Text.Encoding . Returns Type Description System.Text.Encoding Either the detected encoding of value or the encoding of this instance. | Improve this Doc DetectEncoding(Stream) Tries to detect an System.Text.Encoding object from the specified value . If unsuccessful, the encoding of this instance is returned. Declaration public Encoding DetectEncoding(Stream value) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to parse for an System.Text.Encoding . Returns Type Description System.Text.Encoding Either the detected encoding of value or the encoding of this instance. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Text.EncodingExtensions.html": {
    "href": "api/core/Cuemon.Text.EncodingExtensions.html",
    "title": "Class EncodingExtensions | Cuemon .NET Standard",
    "keywords": "Class EncodingExtensions Extension methods for the System.Text.Encoding class. Inheritance System.Object EncodingExtensions Namespace : Cuemon.Text Assembly : Cuemon.Core.dll Syntax public static class EncodingExtensions Methods | Improve this Doc ToEncodedString(Encoding, String, Action<FallbackEncodingOptions>) Converts the specified value to its equivalent encoding representation. Declaration public static string ToEncodedString(this Encoding encoding, string value, Action<FallbackEncodingOptions> setup = null) Parameters Type Name Description System.Text.Encoding encoding The encoding to use in the string that is returned. System.String value The value to convert into the specified encoding . System.Action < FallbackEncodingOptions > setup The FallbackEncodingOptions which need to be configured. Returns Type Description System.String A string that is encoded according to the value of encoding . Remarks The inspiration for this method was retrieved @ SO: https://stackoverflow.com/a/135473/175073 . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ICacheableEntity.html": {
    "href": "api/core/Cuemon.Integrity.ICacheableEntity.html",
    "title": "Interface ICacheableEntity | Cuemon .NET Standard",
    "keywords": "Interface ICacheableEntity An interface that represents both the timestamp and data integrity that is normally associated with a data-set. Inherited Members ICacheableTimestamp.Created ICacheableTimestamp.Modified ICacheableIntegrity.Validation ICacheableIntegrity.Checksum ICacheableIntegrity.HasChecksum Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public interface ICacheableEntity : ICacheableTimestamp, ICacheableIntegrity Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also ICacheableTimestamp ICacheableIntegrity (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.EventUtility.html": {
    "href": "api/core/Cuemon.EventUtility.html",
    "title": "Class EventUtility | Cuemon .NET Standard",
    "keywords": "Class EventUtility This utility class is designed to make some event related operations easier to work with. Inheritance System.Object EventUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class EventUtility Methods | Improve this Doc AddEvent<TEventArgs>(EventHandler<TEventArgs>, ref EventHandler<TEventArgs>) A generic helper method for adding an event to a custom backing field backingFieldHandler . Declaration public static void AddEvent<TEventArgs>(EventHandler<TEventArgs> handler, ref EventHandler<TEventArgs> backingFieldHandler) where TEventArgs : EventArgs Parameters Type Name Description System.EventHandler <TEventArgs> handler The method that will handle the event. System.EventHandler <TEventArgs> backingFieldHandler The backing field reference for the handler . Type Parameters Name Description TEventArgs The type of the event data generated by the event. Remarks The methodology is the same as in .NET 4.0. | Improve this Doc Raise<TEventArgs>(EventHandler<TEventArgs>, Object, TEventArgs) A generic helper method method for raising an event. Declaration public static void Raise<TEventArgs>(EventHandler<TEventArgs> handler, object sender, TEventArgs e) where TEventArgs : EventArgs Parameters Type Name Description System.EventHandler <TEventArgs> handler The method that will handle the event. System.Object sender The source of the event. TEventArgs e An System.EventArgs that contains the event data. Type Parameters Name Description TEventArgs The type of the event data generated by the event. | Improve this Doc RemoveEvent<TEventArgs>(EventHandler<TEventArgs>, ref EventHandler<TEventArgs>) A generic helper method for removing an event from a custom backing field backingFieldHandler . Declaration public static void RemoveEvent<TEventArgs>(EventHandler<TEventArgs> handler, ref EventHandler<TEventArgs> backingFieldHandler) where TEventArgs : EventArgs Parameters Type Name Description System.EventHandler <TEventArgs> handler The method that will handle the event. System.EventHandler <TEventArgs> backingFieldHandler The backing field reference for the handler . Type Parameters Name Description TEventArgs The type of the event data generated by the event. Remarks The methodology is the same as in .NET 4.0. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.EnumUtilityExtensions.html": {
    "href": "api/core/Cuemon.EnumUtilityExtensions.html",
    "title": "Class EnumUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class EnumUtilityExtensions This is an extension implementation of the most common methods on the EnumUtility class. Inheritance System.Object EnumUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class EnumUtilityExtensions Methods | Improve this Doc ToEnum<TEnum>(String) Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated TEnum . Declaration public static TEnum ToEnum<TEnum>(this string value) where TEnum : struct, IConvertible Parameters Type Name Description System.String value A string containing the name or value to convert. Returns Type Description TEnum An enum of type TEnum whose value is represented by value . Type Parameters Name Description TEnum The type of the enumeration to convert. Exceptions Type Condition System.ArgumentNullException value is null. TypeArgumentException TEnum does not represents an enumeration. System.ArgumentException value does not represents an enumeration. | Improve this Doc ToEnum<TEnum>(String, Boolean) Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated TEnum . Declaration public static TEnum ToEnum<TEnum>(this string value, bool ignoreCase) where TEnum : struct, IConvertible Parameters Type Name Description System.String value A string containing the name or value to convert. System.Boolean ignoreCase true to ignore case; false to regard case. Returns Type Description TEnum An enum of type TEnum whose value is represented by value . Type Parameters Name Description TEnum The type of the enumeration to convert. Exceptions Type Condition System.ArgumentNullException value is null. TypeArgumentException TEnum does not represents an enumeration. System.ArgumentException value does not represents an enumeration. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.EnumUtility.html": {
    "href": "api/core/Cuemon.EnumUtility.html",
    "title": "Class EnumUtility | Cuemon .NET Standard",
    "keywords": "Class EnumUtility This utility class is designed to make enum related operations easier to work with. Inheritance System.Object EnumUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class EnumUtility Methods | Improve this Doc HasFlag<TEnum>(TEnum, TEnum) Determines whether one or more bit fields are set in the specified source . Declaration public static bool HasFlag<TEnum>(TEnum source, TEnum value) where TEnum : struct, IConvertible Parameters Type Name Description TEnum source The bit field or bit fields to test if set in value . TEnum value An enumeration value. Returns Type Description System.Boolean true if the bit field or bit fields that are set in source are also set in the value ; otherwise, false . Type Parameters Name Description TEnum The type of the enumeration. | Improve this Doc IsStringOf<TEnum>(String) Determines whether the specified value is an equivalent of TEnum . Declaration public static bool IsStringOf<TEnum>(string value) where TEnum : struct, IConvertible Parameters Type Name Description System.String value A string containing the name or value to validate. Returns Type Description System.Boolean true if the value parameter is an equivalent of TEnum ; otherwise, false . Type Parameters Name Description TEnum The type of the enumeration to validate. | Improve this Doc IsStringOf<TEnum>(String, Boolean) Determines whether the specified value is an equivalent of TEnum . Declaration public static bool IsStringOf<TEnum>(string value, bool ignoreCase) where TEnum : struct, IConvertible Parameters Type Name Description System.String value A string containing the name or value to validate. System.Boolean ignoreCase true to ignore case; false to regard case. Returns Type Description System.Boolean true if the value parameter is an equivalent of TEnum ; otherwise, false . Type Parameters Name Description TEnum The type of the enumeration to validate. | Improve this Doc Parse<TEnum>(String) Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated TEnum . Declaration public static TEnum Parse<TEnum>(string value) where TEnum : struct, IConvertible Parameters Type Name Description System.String value A string containing the name or value to convert. Returns Type Description TEnum An enum of type TEnum whose value is represented by value . Type Parameters Name Description TEnum The type of the enumeration to convert. | Improve this Doc Parse<TEnum>(String, Boolean) Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated TEnum . Declaration public static TEnum Parse<TEnum>(string value, bool ignoreCase) where TEnum : struct, IConvertible Parameters Type Name Description System.String value A string containing the name or value to convert. System.Boolean ignoreCase true to ignore case; false to regard case. Returns Type Description TEnum An enum of type TEnum whose value is represented by value . Type Parameters Name Description TEnum The type of the enumeration to convert. Exceptions Type Condition System.ArgumentNullException value is null. TypeArgumentException TEnum does not represents an enumeration. System.ArgumentException value does not represents an enumeration. | Improve this Doc ToEnumerable<TEnum>() Creates an System.Collections.Generic.IEnumerable<T> sequence from the specified TEnum . Declaration public static IEnumerable<KeyValuePair<int, string>> ToEnumerable<TEnum>() where TEnum : struct, IConvertible Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Int32 , System.String >> An System.Collections.Generic.IEnumerable<T> sequence equivalent to TEnum . Type Parameters Name Description TEnum The type of the enumeration. | Improve this Doc ToEnumerable<T, TEnum>() Creates an System.Collections.Generic.IEnumerable<T> sequence from the specified TEnum . Declaration public static IEnumerable<KeyValuePair<T, string>> ToEnumerable<T, TEnum>() where T : struct, IConvertible where TEnum : struct, IConvertible Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <T, System.String >> An System.Collections.Generic.IEnumerable<T> sequence equivalent to TEnum . Type Parameters Name Description T The integral type of the enumeration. TEnum The type of the enumeration. | Improve this Doc TryParse<TEnum>(String, out TEnum) Converts the specified value of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded. Declaration public static bool TryParse<TEnum>(string value, out TEnum result) where TEnum : struct, IConvertible Parameters Type Name Description System.String value A string containing the name or value to convert. TEnum result When this method returns, result contains an object of type TEnum whose value is represented by value if the parse operation succeeds. If the parse operation fails, result contains the default value of the underlying type of TEnum . Returns Type Description System.Boolean true if the value parameter was converted successfully; otherwise, false . Type Parameters Name Description TEnum The type of the enumeration to convert. | Improve this Doc TryParse<TEnum>(String, Boolean, out TEnum) Converts the specified value of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded. Declaration public static bool TryParse<TEnum>(string value, bool ignoreCase, out TEnum result) where TEnum : struct, IConvertible Parameters Type Name Description System.String value A string containing the name or value to convert. System.Boolean ignoreCase true to ignore case; false to regard case. TEnum result When this method returns, result contains an object of type TEnum whose value is represented by value if the parse operation succeeds. If the parse operation fails, result contains the default value of the underlying type of TEnum . Returns Type Description System.Boolean true if the value parameter was converted successfully; otherwise, false . Type Parameters Name Description TEnum The type of the enumeration to convert. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Middleware-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Middleware-1.html",
    "title": "Class Middleware<T> | Cuemon .NET Standard",
    "keywords": "Class Middleware<T> Provides a base-class for middleware implementation in ASP.NET Core with five dependency injected parameters. Inheritance System.Object MiddlewareCore Middleware<T> Inherited Members MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class Middleware<T> : MiddlewareCore Type Parameters Name Description T The type of the dependency injected parameter of InvokeAsync(HttpContext, T) . Constructors | Improve this Doc Middleware(RequestDelegate) Initializes a new instance of the Middleware class. Declaration protected Middleware(RequestDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Methods | Improve this Doc InvokeAsync(HttpContext, T) Executes the Middleware<T> . Declaration public abstract Task InvokeAsync(HttpContext context, T di) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T di The dependency injected parameter of InvokeAsync(HttpContext, T) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also ConfigurableMiddleware <T, TOptions> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Http.HttpRequestExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Http.HttpRequestExtensions.html",
    "title": "Class HttpRequestExtensions | Cuemon .NET Standard",
    "keywords": "Class HttpRequestExtensions Extension methods for the Microsoft.AspNetCore.Http.HttpRequest class. Inheritance System.Object HttpRequestExtensions Namespace : Cuemon.AspNetCore.Http Assembly : Cuemon.AspNetCore.dll Syntax public static class HttpRequestExtensions Methods | Improve this Doc IsClientSideResourceCached(HttpRequest, ChecksumBuilder) Determines whether a cached version of the requested resource is found client-side using the If-None-Match HTTP header. Declaration public static bool IsClientSideResourceCached(this HttpRequest request, ChecksumBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpRequest request An instance of the Microsoft.AspNetCore.Http.HttpRequest object. ChecksumBuilder builder A ChecksumBuilder that represents the integrity of the client. Returns Type Description System.Boolean true if a cached version of the requested content is found client-side; otherwise, false . | Improve this Doc IsClientSideResourceCached(HttpRequest, DateTime) Determines whether a cached version of the requested resource is found client-side using the If-Modified-Since HTTP header. Declaration public static bool IsClientSideResourceCached(this HttpRequest request, DateTime lastModified) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpRequest request An instance of the Microsoft.AspNetCore.Http.HttpRequest object. System.DateTime lastModified A System.DateTime value that represents the modification date of the content. Returns Type Description System.Boolean true if a cached version of the requested content is found client-side; otherwise, false . | Improve this Doc IsGetOrHeadMethod(HttpRequest) Determines whether the specified request is served by either a GET or a HEAD method. Declaration public static bool IsGetOrHeadMethod(this HttpRequest request) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpRequest request An instance of the Microsoft.AspNetCore.Http.HttpRequest object. Returns Type Description System.Boolean true if the specified request is served by either a GET or a HEAD method; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-2.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-2.html",
    "title": "Class ConfigurableMiddleware<T, TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableMiddleware<T, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with a dependency injected parameter. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore <TOptions> ConfigurableMiddleware<T, TOptions> HostingEnvironmentMiddleware Implements IConfigurable <TOptions> Inherited Members ConfigurableMiddlewareCore<TOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class ConfigurableMiddleware<T, TOptions> : ConfigurableMiddlewareCore<TOptions>, IConfigurable<TOptions> where TOptions : class, new() Type Parameters Name Description T The type of the dependency injected parameter of InvokeAsync(HttpContext, T) . TOptions The type of the options to setup. Constructors | Improve this Doc ConfigurableMiddleware(RequestDelegate, IOptions<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, IOptions<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableMiddleware(RequestDelegate, Action<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, Action<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc InvokeAsync(HttpContext, T) Executes the ConfigurableMiddleware<T, TOptions> . Declaration public abstract Task InvokeAsync(HttpContext context, T di) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T di The dependency injected parameter of InvokeAsync(HttpContext, T) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Middleware <T> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticationOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticationOptions.html",
    "title": "Class HmacAuthenticationOptions | Cuemon .NET Standard",
    "keywords": "Class HmacAuthenticationOptions Configuration options for HmacAuthenticationMiddleware . This class cannot be inherited. Inheritance System.Object AuthenticationOptions HmacAuthenticationOptions Inherited Members AuthenticationOptions.RequireSecureConnection AuthenticationOptions.HttpNotAuthorizedBody Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public sealed class HmacAuthenticationOptions : AuthenticationOptions Constructors | Improve this Doc HmacAuthenticationOptions() Initializes a new instance of the HmacAuthenticationOptions class. Declaration public HmacAuthenticationOptions() Properties | Improve this Doc Algorithm Gets or sets the algorithm of the HMAC Authentication. Default is SHA1 . Declaration public HmacAlgorithmType Algorithm { get; set; } Property Value Type Description HmacAlgorithmType The algorithm of the HMAC Authentication. | Improve this Doc AuthenticationScheme Gets the name of the authentication scheme. Default is \"HMAC\". Declaration public string AuthenticationScheme { get; set; } Property Value Type Description System.String The name of the authentication scheme. | Improve this Doc Authenticator Gets or sets the function delegate that will perform the authentication from the specified publicKey . Declaration public HmacAuthenticator Authenticator { get; set; } Property Value Type Description HmacAuthenticator The function delegate that will perform the authentication. | Improve this Doc HmacSigner Gets or sets the function delegate that will sign a message retrieved by MessageDescriptor . Declaration public Func<HmacAuthenticationParameters, byte[]> HmacSigner { get; set; } Property Value Type Description System.Func < HmacAuthenticationParameters , System.Byte []> The function delegate that will sign a message. | Improve this Doc MessageDescriptor Gets or sets the function delegate that provides information about the message to be signed. Declaration public Func<HttpContext, string> MessageDescriptor { get; set; } Property Value Type Description System.Func < Microsoft.AspNetCore.Http.HttpContext , System.String > The function delegate that provides information about the message to be signed. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also AuthenticationOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ChecksumBuilderOptions.html": {
    "href": "api/core/Cuemon.Integrity.ChecksumBuilderOptions.html",
    "title": "Class ChecksumBuilderOptions | Cuemon .NET Standard",
    "keywords": "Class ChecksumBuilderOptions Specifies options that is related to ChecksumBuilder operations. Inheritance System.Object ChecksumBuilderOptions Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public class ChecksumBuilderOptions Constructors | Improve this Doc ChecksumBuilderOptions() Initializes a new instance of the ChecksumBuilderOptions class. Declaration public ChecksumBuilderOptions() Remarks The following table shows the initial property values for an instance of ChecksumBuilderOptions . Property Initial Value AlgorithmType MD5 Properties | Improve this Doc AlgorithmType Gets or sets the hash algorithm to use for the checksum computation. Declaration public HashAlgorithmType AlgorithmType { get; set; } Property Value Type Description HashAlgorithmType The hash algorithm to use for the checksum computation. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.InitializerBuilder-1.html": {
    "href": "api/core/Cuemon.InitializerBuilder-1.html",
    "title": "Class InitializerBuilder<T> | Cuemon .NET Standard",
    "keywords": "Class InitializerBuilder<T> Supports the Initializer for building custom initializers. Inheritance System.Object InitializerBuilder<T> Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class InitializerBuilder<T> where T : class Type Parameters Name Description T The type of object to wrap. Properties | Improve this Doc Instance Gets the initialized instance. Declaration public T Instance { get; } Property Value Type Description T The initialized instance. Methods | Improve this Doc Ignore(Action<T>, Func<Exception, Boolean>) Ignores exceptions thrown by instance T that is specified by the function delegate ignorer . Declaration public InitializerBuilder<T> Ignore(Action<T> initializer, Func<Exception, bool> ignorer) Parameters Type Name Description System.Action <T> initializer The delegate that will continue initializing instance T while ignoring any exceptions specified by ignorer . System.Func < System.Exception , System.Boolean > ignorer The function delegate that will parse thrown exceptions and ignore those specified. Returns Type Description InitializerBuilder <T> A reference to this instance. | Improve this Doc IgnoreAny(Action<T>) Ignores any exceptions that might be thrown by instance T . Declaration public InitializerBuilder<T> IgnoreAny(Action<T> initializer) Parameters Type Name Description System.Action <T> initializer The delegate that will continue initializing instance T while ignoring any exceptions. Returns Type Description InitializerBuilder <T> A reference to this instance. | Improve this Doc IgnoreMissingMethod(Action<T>) Ignores any System.MissingMethodException that might be thrown by instance T . Declaration public InitializerBuilder<T> IgnoreMissingMethod(Action<T> initializer) Parameters Type Name Description System.Action <T> initializer The delegate that will continue initializing instance T while ignoring any System.MissingMethodException . Returns Type Description InitializerBuilder <T> A reference to this instance. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Initializer.html": {
    "href": "api/core/Cuemon.Initializer.html",
    "title": "Class Initializer | Cuemon .NET Standard",
    "keywords": "Class Initializer Provides a generic way to wrap and initialize a class for countless scenarios. Inheritance System.Object Initializer Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Initializer Methods | Improve this Doc Create<T>(T) Creates a new instance of the InitializerBuilder<T> wrapping the specified instance . Declaration public static InitializerBuilder<T> Create<T>(T instance) where T : class Parameters Type Name Description T instance The instance to initialize within a protective wrapping. Returns Type Description InitializerBuilder <T> A new instance of InitializerBuilder<T> with the specified instance wrapped. Type Parameters Name Description T The type of object to wrap. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.FuncFactory-2.html": {
    "href": "api/core/Cuemon.FuncFactory-2.html",
    "title": "Class FuncFactory<TTuple, TResult> | Cuemon .NET Standard",
    "keywords": "Class FuncFactory<TTuple, TResult> Provides an easy way of invoking an System.Func<TResult> function delegate regardless of the amount of parameters provided. Inheritance System.Object TemplateFactory <TTuple> FuncFactory<TTuple, TResult> Inherited Members TemplateFactory<TTuple>.GenericArguments TemplateFactory<TTuple>.HasDelegate TemplateFactory<TTuple>.DelegateInfo TemplateFactory<TTuple>.ToString() TemplateFactory<TTuple>.ThrowIfNoValidDelegate(Boolean) Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public sealed class FuncFactory<TTuple, TResult> : TemplateFactory<TTuple> where TTuple : Template Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . TResult The type of the return value of the function delegate Cuemon.FuncFactory`2.Method . Constructors | Improve this Doc FuncFactory(Func<TTuple, TResult>, TTuple) Initializes a new instance of the FuncFactory<TTuple, TResult> class. Declaration public FuncFactory(Func<TTuple, TResult> method, TTuple tuple) Parameters Type Name Description System.Func <TTuple, TResult> method The function delegate to invoke. TTuple tuple The n-tuple argument of method . Methods | Improve this Doc BeginExecuteMethod(AsyncCallback, Object) Executes the specified delegate asynchronous operation with the specified arguments. Declaration public void BeginExecuteMethod(AsyncCallback callback, object state) Parameters Type Name Description System.AsyncCallback callback The method to be called when the operation has completed. System.Object state An optional object that contains information about the asynchronous operation. | Improve this Doc Clone() Creates a shallow copy of the current FuncFactory<TTuple, TResult> object. Declaration public FuncFactory<TTuple, TResult> Clone() Returns Type Description FuncFactory <TTuple, TResult> A new FuncFactory<TTuple, TResult> that is a copy of this instance. Remarks When thread safety is required this is the method to invoke. | Improve this Doc EndExecuteMethod(IAsyncResult) Retrieves the return value of the asynchronous operation represented by the System.IAsyncResult passed. Declaration public TResult EndExecuteMethod(IAsyncResult result) Parameters Type Name Description System.IAsyncResult result The System.IAsyncResult that represents a specific invoke asynchronous operation, returned when calling BeginExecuteMethod(AsyncCallback, Object) . Returns Type Description TResult The TResult generated by the asynchronous operation. | Improve this Doc ExecuteMethod() Executes the function delegate associated with this instance. Declaration public TResult ExecuteMethod() Returns Type Description TResult The result of the the function delegate associated with this instance. | Improve this Doc ExecuteMethodAsync() Executes the function delegate associated with this instance as an asynchronous operation. Declaration public Task<TResult> ExecuteMethodAsync() Returns Type Description System.Threading.Tasks.Task <TResult> Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Middleware-3.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Middleware-3.html",
    "title": "Class Middleware<T1, T2, T3> | Cuemon .NET Standard",
    "keywords": "Class Middleware<T1, T2, T3> Provides a base-class for middleware implementation in ASP.NET Core with three dependency injected parameters. Inheritance System.Object MiddlewareCore Middleware<T1, T2, T3> Inherited Members MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class Middleware<T1, T2, T3> : MiddlewareCore Type Parameters Name Description T1 The type of the first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . T2 The type of the second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . T3 The type of the third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . Constructors | Improve this Doc Middleware(RequestDelegate) Initializes a new instance of the Middleware class. Declaration protected Middleware(RequestDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Methods | Improve this Doc InvokeAsync(HttpContext, T1, T2, T3) Executes the Middleware<T1, T2, T3> . Declaration public abstract Task InvokeAsync(HttpContext context, T1 di1, T2 di2, T3 di3) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T1 di1 The first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . T2 di2 The second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . T3 di3 The third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also ConfigurableMiddleware <T1, T2, T3, TOptions> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-16.html": {
    "href": "api/core/Cuemon.Template-16.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Represents a Template with sixteen generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Arg15 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Arg14 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Arg13 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Arg12 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . T13 The type of the thirteenth parameter of this Template . T14 The type of the fourteenth parameter of this Template . T15 The type of the fifteenth parameter of this Template . T16 The type of the sixteenth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . T13 arg13 The value of the thirteenth parameter of this Template . T14 arg14 The value of the fourteenth parameter of this Template . T15 arg15 The value of the fifteenth parameter of this Template . T16 arg16 The value of the sixteenth parameter of this Template . Properties | Improve this Doc Arg16 Gets or sets the sixteenth parameter of this instance. Declaration public T16 Arg16 { get; set; } Property Value Type Description T16 The sixteenth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataWatcher.html": {
    "href": "api/core/Cuemon.Data.DataWatcher.html",
    "title": "Class DataWatcher | Cuemon .NET Standard",
    "keywords": "Class DataWatcher A Watcher implementation, that can monitor and signal changes of one or more data locations by raising the Changed event. Inheritance System.Object Watcher DataWatcher Implements System.IDisposable Inherited Members Watcher.Changed Watcher.UtcLastModified Watcher.UtcLastSignaled Watcher.DueTime Watcher.Period Watcher.DueTimeOnChanged Watcher.ChangeSignaling(TimeSpan) Watcher.ChangeSignaling(TimeSpan, TimeSpan) Watcher.SetUtcLastModified(DateTime) Watcher.OnChangedRaised() Watcher.OnChangedRaised(WatcherEventArgs) Watcher.Dispose(Boolean) Watcher.Dispose() Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class DataWatcher : Watcher, IDisposable Constructors | Improve this Doc DataWatcher(DataManager, IDataCommand, DbParameter[]) Initializes a new instance of the DataWatcher class. Declaration public DataWatcher(DataManager manager, IDataCommand command, params DbParameter[] parameters) Parameters Type Name Description DataManager manager The DataManager to be used for the underlying data operations. IDataCommand command The IDataCommand to execute and monitor for changes. System.Data.Common.DbParameter [] parameters An optional sequence of System.Data.Common.DbParameter to use with the associated command . Remarks Monitors the provided command for changes in an interval of two minutes using a MD5 hash check on the query result. The signaling is default delayed 15 seconds before first invoke. | Improve this Doc DataWatcher(DataManager, IDataCommand, TimeSpan, DbParameter[]) Initializes a new instance of the DataWatcher class. Declaration public DataWatcher(DataManager manager, IDataCommand command, TimeSpan period, params DbParameter[] parameters) Parameters Type Name Description DataManager manager The DataManager to be used for the underlying data operations. IDataCommand command The IDataCommand to execute and monitor for changes. System.TimeSpan period The time interval between periodic signaling for changes of the provided command . System.Data.Common.DbParameter [] parameters An optional array of System.Data.Common.DbParameter to use with the associated command . Remarks Monitors the provided command for changes in an interval specified by period using a MD5 hash check on the query result. The signaling is default delayed 15 seconds before first invoke. | Improve this Doc DataWatcher(DataManager, IDataCommand, TimeSpan, TimeSpan, TimeSpan, DbParameter[]) Initializes a new instance of the DataWatcher class. Declaration public DataWatcher(DataManager manager, IDataCommand command, TimeSpan dueTime, TimeSpan period, TimeSpan dueTimeOnChanged, params DbParameter[] parameters) Parameters Type Name Description DataManager manager The DataManager to be used for the underlying data operations. IDataCommand command The IDataCommand to execute and monitor for changes. System.TimeSpan dueTime The amount of time to delay before the associated Watcher starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately. System.TimeSpan period The time interval between periodic signaling for changes of the provided command . System.TimeSpan dueTimeOnChanged The amount of time to postpone a Changed event. Specify zero (0) to disable postponing. System.Data.Common.DbParameter [] parameters An optional array of System.Data.Common.DbParameter to use with the associated command . Remarks Monitors the provided command for changes in an interval specified by period using a MD5 hash check on the query result. Properties | Improve this Doc Command Gets the associated IDataCommand of this DataWatcher . Declaration public IDataCommand Command { get; } Property Value Type Description IDataCommand The associated IDataCommand of this DataWatcher . | Improve this Doc Manager Gets the associated DataManager of this DataWatcher . Declaration public DataManager Manager { get; } Property Value Type Description DataManager The associated DataManager of this DataWatcher . | Improve this Doc Parameters Gets the associated array of System.Data.Common.DbParameter of this DataWatcher . Declaration public DbParameter[] Parameters { get; } Property Value Type Description System.Data.Common.DbParameter [] The associated array of System.Data.Common.DbParameter of this DataWatcher . Methods | Improve this Doc HandleSignaling() Handles the signaling of this DataWatcher . Declaration protected override void HandleSignaling() Overrides Watcher.HandleSignaling() Implements System.IDisposable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.FuncFactory.html": {
    "href": "api/core/Cuemon.FuncFactory.html",
    "title": "Class FuncFactory | Cuemon .NET Standard",
    "keywords": "Class FuncFactory Provides access to factory methods for creating FuncFactory<TTuple, TResult> instances that encapsulate a function delegate with a variable amount of generic arguments. Inheritance System.Object FuncFactory Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class FuncFactory Methods | Improve this Doc Create<TResult>(Func<TResult>) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method . Declaration public static FuncFactory<Template, TResult> Create<TResult>(Func<TResult> method) Parameters Type Name Description System.Func <TResult> method The function delegate to invoke. Returns Type Description FuncFactory < Template , TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method . Type Parameters Name Description TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and nine generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and nine generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and ten generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and ten generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and eleven generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and eleven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and twelfth generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and twelfth generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and thirteen generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . T13 arg13 The thirteenth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and thirteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . T13 The type of the thirteenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and fourteen generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . T13 arg13 The thirteenth parameter of the function delegate method . T14 arg14 The fourteenth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and fourteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . T13 The type of the thirteenth parameter of the function delegate method . T14 The type of the fourteenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and fifteen generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . T13 arg13 The thirteenth parameter of the function delegate method . T14 arg14 The fourteenth parameter of the function delegate method . T15 arg15 The fifteenth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and fifteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . T13 The type of the thirteenth parameter of the function delegate method . T14 The type of the fourteenth parameter of the function delegate method . T15 The type of the fifteenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and sixteen generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . T13 arg13 The thirteenth parameter of the function delegate method . T14 arg14 The fourteenth parameter of the function delegate method . T15 arg15 The fifteenth parameter of the function delegate method . T16 arg16 The sixteenth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and sixteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . T13 The type of the thirteenth parameter of the function delegate method . T14 The type of the fourteenth parameter of the function delegate method . T15 The type of the fifteenth parameter of the function delegate method . T16 The type of the sixteenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T, TResult>(Func<T, TResult>, T) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and one generic argument. Declaration public static FuncFactory<Template<T>, TResult> Create<T, TResult>(Func<T, TResult> method, T arg) Parameters Type Name Description System.Func <T, TResult> method The function delegate to invoke. T arg The parameter of the function delegate method . Returns Type Description FuncFactory < Template <T>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and one generic argument. Type Parameters Name Description T The type of the parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, TResult>(Func<T1, T2, TResult>, T1, T2) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and two generic arguments. Declaration public static FuncFactory<Template<T1, T2>, TResult> Create<T1, T2, TResult>(Func<T1, T2, TResult> method, T1 arg1, T2 arg2) Parameters Type Name Description System.Func <T1, T2, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and two generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>, T1, T2, T3) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and three generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3>, TResult> Create<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Func <T1, T2, T3, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and three generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and four generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4>, TResult> Create<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and four generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and five generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5>, TResult> Create<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and five generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and six generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6>, TResult> Create<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and six generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and seven generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and seven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Creates a new FuncFactory<TTuple, TResult> instance encapsulating the specified method and eight generic arguments. Declaration public static FuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . Returns Type Description FuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8>, TResult> An instance of FuncFactory<TTuple, TResult> object initialized with the specified method and eight generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Invoke<TTuple, TResult>(Func<TTuple, TResult>, TTuple) Invokes the specified delegate method with a n- tuple argument. Declaration public static TResult Invoke<TTuple, TResult>(Func<TTuple, TResult> method, TTuple tuple) where TTuple : Template Parameters Type Name Description System.Func <TTuple, TResult> method The function delegate to invoke. TTuple tuple The n-tuple argument of method . Returns Type Description TResult The result of the the function delegate method . Type Parameters Name Description TTuple The type of the n-tuple representation of a Template . TResult The type of the return value of the function delegate method . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.JsonSerializationInputFormatter.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Formatters.Json.JsonSerializationInputFormatter.html",
    "title": "Class JsonSerializationInputFormatter | Cuemon .NET Standard",
    "keywords": "Class JsonSerializationInputFormatter This class handles deserialization of JSON to objects using JsonFormatter . Inheritance System.Object Microsoft.AspNetCore.Mvc.Formatters.InputFormatter Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter JsonSerializationInputFormatter Implements Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider Inherited Members Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.UTF8EncodingWithoutBOM Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.UTF16EncodingLittleEndian Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.SelectCharacterEncoding(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.SupportedEncodings Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType(System.Type) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType(System.Type) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes(System.String, System.Type) Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes Namespace : Cuemon.AspNetCore.Mvc.Formatters.Json Assembly : Cuemon.AspNetCore.Mvc.Formatters.Json.dll Syntax public class JsonSerializationInputFormatter : TextInputFormatter, IInputFormatter, IApiRequestFormatMetadataProvider Constructors | Improve this Doc JsonSerializationInputFormatter(JsonFormatterOptions) Initializes a new instance of the JsonSerializationInputFormatter class. Declaration public JsonSerializationInputFormatter(JsonFormatterOptions formatterOptions) Parameters Type Name Description JsonFormatterOptions formatterOptions Methods | Improve this Doc ReadRequestBodyAsync(InputFormatterContext, Encoding) Reads an object from the request body. Declaration public override Task<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext context The Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext . System.Text.Encoding encoding The System.Text.Encoding used to read the request body. Returns Type Description System.Threading.Tasks.Task < InputFormatterResult > A System.Threading.Tasks.Task that on completion deserializes the request body. Overrides Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, System.Text.Encoding) Implements Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.BasicAuthenticationOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.BasicAuthenticationOptions.html",
    "title": "Class BasicAuthenticationOptions | Cuemon .NET Standard",
    "keywords": "Class BasicAuthenticationOptions Configuration options for BasicAuthenticationMiddleware . This class cannot be inherited. Inheritance System.Object AuthenticationOptions BasicAuthenticationOptions Inherited Members AuthenticationOptions.RequireSecureConnection AuthenticationOptions.HttpNotAuthorizedBody Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public sealed class BasicAuthenticationOptions : AuthenticationOptions Constructors | Improve this Doc BasicAuthenticationOptions() Initializes a new instance of the BasicAuthenticationOptions class. Declaration public BasicAuthenticationOptions() Properties | Improve this Doc Authenticator Gets or sets the function delegate that will perform the authentication from the specified username and password . Declaration public BasicAuthenticator Authenticator { get; set; } Property Value Type Description BasicAuthenticator The function delegate that will perform the authentication. | Improve this Doc Realm Gets the realm that defines the protection space. Declaration public string Realm { get; set; } Property Value Type Description System.String The realm that defines the protection space. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also AuthenticationOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.DynamicJsonConverter.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.DynamicJsonConverter.html",
    "title": "Class DynamicJsonConverter | Cuemon .NET Standard",
    "keywords": "Class DynamicJsonConverter Provides a factory based way to create and wrap an implementation. Inheritance System.Object DynamicJsonConverter Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public static class DynamicJsonConverter : object Properties | Improve this Doc UseCamelCase Gets a value indicating whether implementations of should use camelCase casing for property names. Declaration public static bool UseCamelCase { get; } Property Value Type Description System.Boolean true if implementations of should use camelCase casing for property names; otherwise, false . Methods | Improve this Doc Create(Type, Action<JsonWriter, Object>, Func<JsonReader, Type, Object>) Creates a dynamic instance of an implementation wrapping through writer and through reader . Declaration public static JsonConverter Create(Type objectType, Action<JsonWriter, object> writer = null, Func<JsonReader, Type, object> reader = null) Parameters Type Name Description Type objectType The type of the object to convert. Action < JsonWriter , System.Object > writer The delegate that converts objectType to its JSON representation. Func < JsonReader , Type , System.Object > reader The delegate that generates objectType from its JSON representation. Returns Type Description JsonConverter An implementation of objectType . | Improve this Doc Create<T>(Action<JsonWriter, T>, Func<JsonReader, Type, T>) Creates a dynamic instance of an implementation wrapping through writer and through reader . Declaration public static JsonConverter Create<T>(Action<JsonWriter, T> writer = null, Func<JsonReader, Type, T> reader = null) Parameters Type Name Description Action < JsonWriter , T> writer The delegate that converts T to its JSON representation. Func < JsonReader , Type , T> reader The delegate that generates T from its JSON representation. Returns Type Description JsonConverter An implementation of T . Type Parameters Name Description T The type to implement an . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.DynamicContractResolver.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.DynamicContractResolver.html",
    "title": "Class DynamicContractResolver | Cuemon .NET Standard",
    "keywords": "Class DynamicContractResolver Provides a factory based way to create and wrap an implementation. Inheritance System.Object DynamicContractResolver Namespace : Cuemon.Serialization.Json Assembly : Cuemon.Serialization.Json.dll Syntax public static class DynamicContractResolver : object Methods | Improve this Doc Create<T>(T, Action<JsonProperty>[]) Creates the specified resolver. Declaration public static IContractResolver Create<T>(T resolver, params Action<JsonProperty>[] jsonPropertyHandlers) where T : IContractResolver Parameters Type Name Description T resolver The instance of an implementation. Action < JsonProperty >[] jsonPropertyHandlers The array of delegates that will handle custom rules of a . Returns Type Description IContractResolver An implementation of T . Type Parameters Name Description T The type that inherits from . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.Converters.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.Converters.html",
    "title": "Namespace Cuemon.Serialization.Json.Converters | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Serialization.Json.Converters Assembly : Cuemon.Serialization.Json.dll Classes JsonConverterCollectionExtensions Extension methods for the . StringFlagsEnumConverter Converts a FlagsEnum to its name string value. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/jsoncore/Cuemon.Serialization.Json.Converters.StringFlagsEnumConverter.html": {
    "href": "api/jsoncore/Cuemon.Serialization.Json.Converters.StringFlagsEnumConverter.html",
    "title": "Class StringFlagsEnumConverter | Cuemon .NET Standard",
    "keywords": "Class StringFlagsEnumConverter Converts a FlagsEnum to its name string value. Inheritance System.Object StringFlagsEnumConverter Namespace : Cuemon.Serialization.Json.Converters Assembly : Cuemon.Serialization.Json.dll Syntax public class StringFlagsEnumConverter : StringEnumConverter Constructors | Improve this Doc StringFlagsEnumConverter() Initializes a new instance of the StringFlagsEnumConverter class. Declaration public StringFlagsEnumConverter() Methods | Improve this Doc ReadJson(JsonReader, Type, Object, JsonSerializer) Reads the JSON representation of the object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader The Newtonsoft.Json.JsonReader to read from. Type objectType Type of the object. System.Object existingValue The existing value of object being read. JsonSerializer serializer The calling serializer. Returns Type Description System.Object The object value. | Improve this Doc WriteJson(JsonWriter, Object, JsonSerializer) Writes the JSON representation of the object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer The Newtonsoft.Json.JsonWriter to write to. System.Object value The value. JsonSerializer serializer The calling serializer. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.FieldValueSeparator.html": {
    "href": "api/core/Cuemon.Web.FieldValueSeparator.html",
    "title": "Enum FieldValueSeparator | Cuemon .NET Standard",
    "keywords": "Enum FieldValueSeparator Specifies a range of key-value seperators. Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public enum FieldValueSeparator Fields Name Description Ampersand An ampersand (&) separator. Semicolon A semicolon (;) separator. Extension Methods ByteConverterExtensions.ToByteArray<FieldValueSeparator>() ConverterExtensions.ParseWith<FieldValueSeparator, TResult>(Func<FieldValueSeparator, TResult>) ConverterExtensions.ParseWith<FieldValueSeparator, T, TResult>(Func<FieldValueSeparator, T, TResult>, T) ConverterExtensions.ParseWith<FieldValueSeparator, T1, T2, TResult>(Func<FieldValueSeparator, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<FieldValueSeparator, T1, T2, T3, TResult>(Func<FieldValueSeparator, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<FieldValueSeparator, T1, T2, T3, T4, TResult>(Func<FieldValueSeparator, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<FieldValueSeparator, T1, T2, T3, T4, T5, TResult>(Func<FieldValueSeparator, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<FieldValueSeparator, T1, T2, T3, T4, T5, T6, TResult>(Func<FieldValueSeparator, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<FieldValueSeparator, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<FieldValueSeparator, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<FieldValueSeparator, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<FieldValueSeparator, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<FieldValueSeparator, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<FieldValueSeparator, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<FieldValueSeparator>() DelegateUtilityExtensions.DynamicWrap<FieldValueSeparator>() TweakerExtensions.Adjust<FieldValueSeparator>(Func<FieldValueSeparator, FieldValueSeparator>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<FieldValueSeparator>() WrapperExtensions.UseWrapper<FieldValueSeparator>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<FieldValueSeparator>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<FieldValueSeparator>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Web.FieldValueFilter.html": {
    "href": "api/core/Cuemon.Web.FieldValueFilter.html",
    "title": "Enum FieldValueFilter | Cuemon .NET Standard",
    "keywords": "Enum FieldValueFilter Specifies the filter action to perform on either query strings, headers or form data. Namespace : Cuemon.Web Assembly : Cuemon.Web.dll Syntax public enum FieldValueFilter Fields Name Description Remove Sanitizes the request so that all keys (with matching values) is removed. RemoveDublets Sanitizes the request so that all keys is assured only the latest value applied. Extension Methods ByteConverterExtensions.ToByteArray<FieldValueFilter>() ConverterExtensions.ParseWith<FieldValueFilter, TResult>(Func<FieldValueFilter, TResult>) ConverterExtensions.ParseWith<FieldValueFilter, T, TResult>(Func<FieldValueFilter, T, TResult>, T) ConverterExtensions.ParseWith<FieldValueFilter, T1, T2, TResult>(Func<FieldValueFilter, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<FieldValueFilter, T1, T2, T3, TResult>(Func<FieldValueFilter, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<FieldValueFilter, T1, T2, T3, T4, TResult>(Func<FieldValueFilter, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<FieldValueFilter, T1, T2, T3, T4, T5, TResult>(Func<FieldValueFilter, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<FieldValueFilter, T1, T2, T3, T4, T5, T6, TResult>(Func<FieldValueFilter, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<FieldValueFilter, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<FieldValueFilter, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<FieldValueFilter, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<FieldValueFilter, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<FieldValueFilter, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<FieldValueFilter, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<FieldValueFilter>() DelegateUtilityExtensions.DynamicWrap<FieldValueFilter>() TweakerExtensions.Adjust<FieldValueFilter>(Func<FieldValueFilter, FieldValueFilter>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<FieldValueFilter>() WrapperExtensions.UseWrapper<FieldValueFilter>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<FieldValueFilter>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<FieldValueFilter>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.VerticalDirection.html": {
    "href": "api/core/Cuemon.VerticalDirection.html",
    "title": "Enum VerticalDirection | Cuemon .NET Standard",
    "keywords": "Enum VerticalDirection Specifies a set of values defining a vertical direction. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum VerticalDirection Fields Name Description Down Indicates a vertical direction of Down. Up Indicates a vertical direction of Up. Extension Methods ByteConverterExtensions.ToByteArray<VerticalDirection>() ConverterExtensions.ParseWith<VerticalDirection, TResult>(Func<VerticalDirection, TResult>) ConverterExtensions.ParseWith<VerticalDirection, T, TResult>(Func<VerticalDirection, T, TResult>, T) ConverterExtensions.ParseWith<VerticalDirection, T1, T2, TResult>(Func<VerticalDirection, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<VerticalDirection, T1, T2, T3, TResult>(Func<VerticalDirection, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<VerticalDirection, T1, T2, T3, T4, TResult>(Func<VerticalDirection, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<VerticalDirection, T1, T2, T3, T4, T5, TResult>(Func<VerticalDirection, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<VerticalDirection, T1, T2, T3, T4, T5, T6, TResult>(Func<VerticalDirection, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<VerticalDirection, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<VerticalDirection, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<VerticalDirection, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<VerticalDirection, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<VerticalDirection, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<VerticalDirection, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<VerticalDirection>() DelegateUtilityExtensions.DynamicWrap<VerticalDirection>() TweakerExtensions.Adjust<VerticalDirection>(Func<VerticalDirection, VerticalDirection>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<VerticalDirection>() WrapperExtensions.UseWrapper<VerticalDirection>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<VerticalDirection>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<VerticalDirection>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.VersionUtility.html": {
    "href": "api/core/Cuemon.VersionUtility.html",
    "title": "Class VersionUtility | Cuemon .NET Standard",
    "keywords": "Class VersionUtility This utility class is designed to make common System.Version related operations easier to work with. Inheritance System.Object VersionUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class VersionUtility Fields | Improve this Doc DefaultValue Represents the default System.Version value of 1.0.0.0. This field is read-only. Declaration public static readonly Version DefaultValue Field Value Type Description System.Version | Improve this Doc MaxValue Represents the maximum System.Version value of 2147483647.2147483647.2147483647.2147483647. This field is read-only. Declaration public static readonly Version MaxValue Field Value Type Description System.Version | Improve this Doc MinValue Represents the minimum System.Version value of 0.0.0.0. This field is read-only. Declaration public static readonly Version MinValue Field Value Type Description System.Version (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-8.html": {
    "href": "api/core/Cuemon.TesterFunc-8.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-7.html": {
    "href": "api/core/Cuemon.TesterFunc-7.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-6.html": {
    "href": "api/core/Cuemon.TesterFunc-6.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, TResult, TSuccess> Encapsulates a method that has four parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-5.html": {
    "href": "api/core/Cuemon.TesterFunc-5.html",
    "title": "Delegate TesterFunc<T1, T2, T3, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, TResult, TSuccess> Encapsulates a method that has three parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StructUtility.html": {
    "href": "api/core/Cuemon.StructUtility.html",
    "title": "Class StructUtility | Cuemon .NET Standard",
    "keywords": "Class StructUtility This utility class is designed to make common struct related operations easier to work with. Inheritance System.Object StructUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class StructUtility Fields | Improve this Doc HashCodeForNullValue A hash code representation for a null value. Declaration public const int HashCodeForNullValue = -1 Field Value Type Description System.Int32 Methods | Improve this Doc GetHashCode32<T>(IEnumerable<T>) Computes a suitable hash code from the specified sequence of convertibles . Declaration public static int GetHashCode32<T>(IEnumerable<T> convertibles) where T : struct, IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable <T> convertibles A sequence of structs implementing the System.IConvertible interface. Returns Type Description System.Int32 A 32-bit signed integer that is the hash code of convertibles . Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException convertibles is null. | Improve this Doc GetHashCode64<T>(IEnumerable<T>) Computes a suitable hash code from the specified sequence of convertibles . Declaration public static long GetHashCode64<T>(IEnumerable<T> convertibles) where T : IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable <T> convertibles A sequence of structs implementing the System.IConvertible interface. Returns Type Description System.Int64 A 64-bit signed integer that is the hash code of convertibles . Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException convertibles is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Text.EncodingConverter.html": {
    "href": "api/core/Cuemon.Text.EncodingConverter.html",
    "title": "Class EncodingConverter | Cuemon .NET Standard",
    "keywords": "Class EncodingConverter This utility class is designed to make System.Text.Encoding conversions easier to work with. Inheritance System.Object EncodingConverter Namespace : Cuemon.Text Assembly : Cuemon.Core.dll Syntax public static class EncodingConverter Methods | Improve this Doc ToAsciiEncodedString(String, Action<EncodingOptions>) Converts the specified value to its equivalent ASCII encoded representation. Declaration public static string ToAsciiEncodedString(string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The value to apply with an ASCII encoding conversion. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A string that is ASCII encoded. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-11.html": {
    "href": "api/core/Cuemon.Template-11.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Represents a Template with eleven generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . Properties | Improve this Doc Arg11 Gets or sets the eleventh parameter of this instance. Declaration public T11 Arg11 { get; set; } Property Value Type Description T11 The eleventh parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-10.html": {
    "href": "api/core/Cuemon.Template-10.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Represents a Template with ten generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . Properties | Improve this Doc Arg10 Gets or sets the tenth parameter of this instance. Declaration public T10 Arg10 { get; set; } Property Value Type Description T10 The tenth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-1.html": {
    "href": "api/core/Cuemon.Template-1.html",
    "title": "Class Template<T1> | Cuemon .NET Standard",
    "keywords": "Class Template<T1> Represents a Template with a single generic value. Inheritance System.Object Template Template<T1> Template<T1, T2> Inherited Members Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1> : Template Type Parameters Name Description T1 The type of the first parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1) Initializes a new instance of the Template<T1> class. Declaration public Template(T1 arg1) Parameters Type Name Description T1 arg1 The value of the parameter of this Template . Properties | Improve this Doc Arg1 Gets or sets the first parameter of this instance. Declaration public T1 Arg1 { get; set; } Property Value Type Description T1 The first parameter of this instance. | Improve this Doc IsEmpty Gets a value indicating whether this Template is empty. Declaration public override bool IsEmpty { get; } Property Value Type Description System.Boolean true if this Template is empty; otherwise, false . Overrides Template.IsEmpty Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Template.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Template.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TaskFuncFactory.html": {
    "href": "api/core/Cuemon.TaskFuncFactory.html",
    "title": "Class TaskFuncFactory | Cuemon .NET Standard",
    "keywords": "Class TaskFuncFactory Provides access to factory methods for creating TaskFuncFactory<TTuple, TResult> instances that encapsulate a System.Threading.Tasks.Task<TResult> based function delegate with a variable amount of generic arguments. Inheritance System.Object TaskFuncFactory Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class TaskFuncFactory Methods | Improve this Doc Create<TResult>(Func<Task<TResult>>) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method . Declaration public static TaskFuncFactory<Template, TResult> Create<TResult>(Func<Task<TResult>> method) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. Returns Type Description TaskFuncFactory < Template , TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method . Type Parameters Name Description TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and nine generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and nine generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and ten generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and ten generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and eleven generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and eleven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and twelfth generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and twelfth generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and thirteen generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . T13 arg13 The thirteenth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and thirteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . T13 The type of the thirteenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and fourteen generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . T13 arg13 The thirteenth parameter of the function delegate method . T14 arg14 The fourteenth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and fourteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . T13 The type of the thirteenth parameter of the function delegate method . T14 The type of the fourteenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and fifteen generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . T13 arg13 The thirteenth parameter of the function delegate method . T14 arg14 The fourteenth parameter of the function delegate method . T15 arg15 The fifteenth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and fifteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . T13 The type of the thirteenth parameter of the function delegate method . T14 The type of the fourteenth parameter of the function delegate method . T15 The type of the fifteenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and sixteen generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . T9 arg9 The ninth parameter of the function delegate method . T10 arg10 The tenth parameter of the function delegate method . T11 arg11 The eleventh parameter of the function delegate method . T12 arg12 The twelfth parameter of the function delegate method . T13 arg13 The thirteenth parameter of the function delegate method . T14 arg14 The fourteenth parameter of the function delegate method . T15 arg15 The fifteenth parameter of the function delegate method . T16 arg16 The sixteenth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and sixteen generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . T9 The type of the ninth parameter of the function delegate method . T10 The type of the tenth parameter of the function delegate method . T11 The type of the eleventh parameter of the function delegate method . T12 The type of the twelfth parameter of the function delegate method . T13 The type of the thirteenth parameter of the function delegate method . T14 The type of the fourteenth parameter of the function delegate method . T15 The type of the fifteenth parameter of the function delegate method . T16 The type of the sixteenth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T, TResult>(Func<T, Task<TResult>>, T) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and one generic argument. Declaration public static TaskFuncFactory<Template<T>, TResult> Create<T, TResult>(Func<T, Task<TResult>> method, T arg) Parameters Type Name Description System.Func <T, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T arg The parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and one generic argument. Type Parameters Name Description T The type of the parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, TResult>(Func<T1, T2, Task<TResult>>, T1, T2) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and two generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2>, TResult> Create<T1, T2, TResult>(Func<T1, T2, Task<TResult>> method, T1 arg1, T2 arg2) Parameters Type Name Description System.Func <T1, T2, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and two generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult>>, T1, T2, T3) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and three generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3>, TResult> Create<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Func <T1, T2, T3, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and three generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>>, T1, T2, T3, T4) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and four generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4>, TResult> Create<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Func <T1, T2, T3, T4, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and four generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, Task<TResult>>, T1, T2, T3, T4, T5) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and five generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5>, TResult> Create<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and five generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, Task<TResult>>, T1, T2, T3, T4, T5, T6) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and six generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6>, TResult> Create<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and six generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and seven generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and seven generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . TResult The type of the return value of the function delegate method . | Improve this Doc Create<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8) Creates a new TaskFuncFactory<TTuple, TResult> instance encapsulating the specified method and eight generic arguments. Declaration public static TaskFuncFactory<Template<T1, T2, T3, T4, T5, T6, T7, T8>, TResult> Create<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, T8, System.Threading.Tasks.Task <TResult>> method The function delegate to invoke. T1 arg1 The first parameter of the function delegate method . T2 arg2 The second parameter of the function delegate method . T3 arg3 The third parameter of the function delegate method . T4 arg4 The fourth parameter of the function delegate method . T5 arg5 The fifth parameter of the function delegate method . T6 arg6 The sixth parameter of the function delegate method . T7 arg7 The seventh parameter of the function delegate method . T8 arg8 The eighth parameter of the function delegate method . Returns Type Description TaskFuncFactory < Template <T1, T2, T3, T4, T5, T6, T7, T8>, TResult> An instance of TaskFuncFactory<TTuple, TResult> object initialized with the specified method and eight generic arguments. Type Parameters Name Description T1 The type of the first parameter of the function delegate method . T2 The type of the second parameter of the function delegate method . T3 The type of the third parameter of the function delegate method . T4 The type of the fourth parameter of the function delegate method . T5 The type of the fifth parameter of the function delegate method . T6 The type of the sixth parameter of the function delegate method . T7 The type of the seventh parameter of the function delegate method . T8 The type of the eighth parameter of the function delegate method . TResult The type of the return value of the function delegate method . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.MethodBaseConverterExtensions.html": {
    "href": "api/core/Cuemon.Reflection.MethodBaseConverterExtensions.html",
    "title": "Class MethodBaseConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class MethodBaseConverterExtensions This is an extension implementation of the MethodBaseConverter class. Inheritance System.Object MethodBaseConverterExtensions Namespace : Cuemon.Reflection Assembly : Cuemon.Core.dll Syntax public static class MethodBaseConverterExtensions Methods | Improve this Doc ToMethodBase(Type, Type[], String, BindingFlags) Converts the specified caller information into an instance of a System.Reflection.MethodBase object. Declaration public static MethodBase ToMethodBase(this Type caller, Type[] types = null, string memberName = \"\", BindingFlags flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.Static) Parameters Type Name Description System.Type caller The System.Type to conduct a search for memberName . System.Type [] types An array of System.Type objects representing the number, order, and type of the parameters for the method to get. System.String memberName The name of the member of caller . System.Reflection.BindingFlags flags A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Reflection.MethodBase An object representing the method that matches the specified requirements, if found; otherwise, null . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.MethodBaseConverter.html": {
    "href": "api/core/Cuemon.Reflection.MethodBaseConverter.html",
    "title": "Class MethodBaseConverter | Cuemon .NET Standard",
    "keywords": "Class MethodBaseConverter This utility class is designed to make System.Reflection.MethodBase related conversions easier to work with. Inheritance System.Object MethodBaseConverter Namespace : Cuemon.Reflection Assembly : Cuemon.Core.dll Syntax public static class MethodBaseConverter Methods | Improve this Doc FromType(Type, Type[], String, BindingFlags) Converts the specified caller information into an instance of a System.Reflection.MethodBase object. Declaration public static MethodBase FromType(Type caller, Type[] types = null, string memberName = \"\", BindingFlags flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.Static) Parameters Type Name Description System.Type caller The System.Type to conduct a search for memberName . System.Type [] types An array of System.Type objects representing the number, order, and type of the parameters for the method to get. System.String memberName The name of the member of caller . System.Reflection.BindingFlags flags A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted. Returns Type Description System.Reflection.MethodBase An object representing the method that matches the specified requirements, if found; otherwise, null . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Reflection.MemberInfoExtensions.html": {
    "href": "api/core/Cuemon.Reflection.MemberInfoExtensions.html",
    "title": "Class MemberInfoExtensions | Cuemon .NET Standard",
    "keywords": "Class MemberInfoExtensions Extension methods for the System.Reflection.MemberInfo . Inheritance System.Object MemberInfoExtensions Namespace : Cuemon.Reflection Assembly : Cuemon.Core.dll Syntax public static class MemberInfoExtensions Methods | Improve this Doc HasAttributes(MemberInfo, Boolean, Type[]) Determines whether the specified source type contains one or more of the specified attribute target types. Declaration public static bool HasAttributes(this MemberInfo source, bool inherit, params Type[] targets) Parameters Type Name Description System.Reflection.MemberInfo source The member to match against. System.Boolean inherit true to search the source inheritance chain to find the attributes; otherwise, false . System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified member contains one or more of the specified attribute target types; otherwise, false . | Improve this Doc HasAttributes(MemberInfo, Type[]) Determines whether the specified source type contains one or more of the specified attribute target types. Declaration public static bool HasAttributes(this MemberInfo source, params Type[] targets) Parameters Type Name Description System.Reflection.MemberInfo source The member to match against. System.Type [] targets The attribute target types to be matched against. Returns Type Description System.Boolean true if the specified member contains one or more of the specified attribute target types; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Specialized.NameValueCollectionUtility.html": {
    "href": "api/core/Cuemon.Collections.Specialized.NameValueCollectionUtility.html",
    "title": "Class NameValueCollectionUtility | Cuemon .NET Standard",
    "keywords": "Class NameValueCollectionUtility This utility class provides a set of concrete static methods for supporting the EnumerableUtility . Inheritance System.Object NameValueCollectionUtility Namespace : Cuemon.Collections.Specialized Assembly : Cuemon.Collections.Specialized.dll Syntax public static class NameValueCollectionUtility Methods | Improve this Doc ContainsKey(NameValueCollection, String) Determines whether the specified c contains an entry with the specified key . Declaration public static bool ContainsKey(NameValueCollection c, string key) Parameters Type Name Description System.Collections.Specialized.NameValueCollection c The System.Collections.Specialized.NameValueCollection to search for key . System.String key The key to locate in c . Returns Type Description System.Boolean true if the specified c contains an entry with the key ; otherwise, false . Remarks This method performs an System.StringComparison.OrdinalIgnoreCase search for key . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.EnumerableExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Cuemon .NET Standard",
    "keywords": "Class EnumerableExtensions Extension methods for the System.Collections.Generic.IEnumerable<T> interface. Inheritance System.Object EnumerableExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class EnumerableExtensions Methods | Improve this Doc Shuffle<T>(IEnumerable<T>) Shuffles the specified source like a deck of cards. Declaration public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The elements to be shuffled in the randomization process. Returns Type Description System.Collections.Generic.IEnumerable <T> A sequence of T with the shuffled source . Type Parameters Name Description T Remarks Fisher–Yates shuffle: https://en.wikipedia.org/wiki/Fisher–Yates_shuffle | Improve this Doc Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) Shuffles the specified source like a deck of cards. Declaration public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source, Func<int, int, int> randomizer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The elements to be shuffled in the randomization process. System.Func < System.Int32 , System.Int32 , System.Int32 > randomizer The function delegate that will handle the randomization of source . Returns Type Description System.Collections.Generic.IEnumerable <T> A sequence of T with the shuffled source . Type Parameters Name Description T Remarks Fisher–Yates shuffle: https://en.wikipedia.org/wiki/Fisher–Yates_shuffle (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.EnumerableConverterExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.EnumerableConverterExtensions.html",
    "title": "Class EnumerableConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class EnumerableConverterExtensions This is an extension implementation of the EnumerableConverter class. Inheritance System.Object EnumerableConverterExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class EnumerableConverterExtensions Methods | Improve this Doc ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . T8 arg8 The eighth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . T8 The type of the eighth parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . T8 arg8 The eighth parameter of the function delegate converter . T9 arg9 The ninth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . T8 The type of the eighth parameter of the function delegate converter . T9 The type of the ninth parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> converter) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T, TResult>(this IEnumerable<TSource> source, Func<TSource, T, TResult> converter, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T arg The parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T The type of the parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T1, T2, TResult>(this IEnumerable<TSource> source, Func<TSource, T1, T2, TResult> converter, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T1, T2, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T1, T2, T3, TResult>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, TResult> converter, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T1, T2, T3, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T1, T2, T3, T4, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T1, T2, T3, T4, T5, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Converts the elements of an System.Collections.Generic.IEnumerable<T> to the specified type. Declaration public static IEnumerable<TResult> ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(this IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> that contains the elements to be cast to type TResult . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that contains each element of the source sequence converted to the specified TResult . Type Parameters Name Description TSource The original source type of the elements of source . T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . TResult The converted result type of the elements of source . | Improve this Doc ToEnumerable<TKey, TValue>(IDictionary<TKey, TValue>) Converts the specified source to its System.Collections.Generic.KeyValuePair<TKey,TValue> equivalent sequence. Declaration public static IEnumerable<KeyValuePair<TKey, TValue>> ToEnumerable<TKey, TValue>(this IDictionary<TKey, TValue> source) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source An System.Collections.Generic.IDictionary<TKey, TValue> to convert into a System.Collections.Generic.KeyValuePair<TKey,TValue> equivalent sequence. Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> A System.Collections.Generic.KeyValuePair<TKey,TValue> equivalent sequence of source . Type Parameters Name Description TKey The System.Type of the key in the resulting System.Collections.Generic.KeyValuePair<TKey,TValue> . TValue The System.Type of the value in the resulting System.Collections.Generic.KeyValuePair<TKey,TValue> . Exceptions Type Condition System.ArgumentNullException source is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ByteUtilityExtensions.html": {
    "href": "api/core/Cuemon.ByteUtilityExtensions.html",
    "title": "Class ByteUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class ByteUtilityExtensions This is an extension implementation of the most common methods on the ByteUtility class. Inheritance System.Object ByteUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ByteUtilityExtensions Methods | Improve this Doc RemovePreamble(Byte[], Encoding) Removes the preamble information (if present) from the specified System.Byte array. Declaration public static byte[] RemovePreamble(this byte[] input, Encoding encoding) Parameters Type Name Description System.Byte [] input The input System.Byte array to process. System.Text.Encoding encoding The encoding to use when determining the preamble to remove. Returns Type Description System.Byte [] A System.Byte array without preamble information. | Improve this Doc RemoveTrailingZeros(Byte[]) Removes trailing zero information (if any) from the specified System.Byte array. Declaration public static byte[] RemoveTrailingZeros(this byte[] input) Parameters Type Name Description System.Byte [] input The input System.Byte array to process. Returns Type Description System.Byte [] A System.Byte array without trailing zeros. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ByteUtility.html": {
    "href": "api/core/Cuemon.ByteUtility.html",
    "title": "Class ByteUtility | Cuemon .NET Standard",
    "keywords": "Class ByteUtility This utility class is designed to make common System.Byte operations easier to work with. Inheritance System.Object ByteUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ByteUtility Methods | Improve this Doc CombineByteArrays(Byte[][]) Combines a variable number of byte arrays into one byte array. Declaration public static byte[] CombineByteArrays(params byte[][] bytes) Parameters Type Name Description System.Byte [][] bytes The byte arrays to combine. Returns Type Description System.Byte [] A variable number of byte arrays combined into one byte array . | Improve this Doc RemovePreamble(Byte[], Encoding) Removes the preamble information (if present) from the specified System.Byte array. Declaration public static byte[] RemovePreamble(byte[] input, Encoding encoding) Parameters Type Name Description System.Byte [] input The input System.Byte array to process. System.Text.Encoding encoding The encoding to use when determining the preamble to remove. Returns Type Description System.Byte [] A System.Byte array without preamble information. | Improve this Doc RemoveTrailingZeros(Byte[]) Removes trailing zero information (if any) from the specified System.Byte array. Declaration public static byte[] RemoveTrailingZeros(byte[] input) Parameters Type Name Description System.Byte [] input The input System.Byte array to process. Returns Type Description System.Byte [] A System.Byte array without trailing zeros. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Rendering.HtmlHelperExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Rendering.HtmlHelperExtensions.html",
    "title": "Class HtmlHelperExtensions | Cuemon .NET Standard",
    "keywords": "Class HtmlHelperExtensions Extension methods for the Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper interface. Inheritance System.Object HtmlHelperExtensions Namespace : Cuemon.AspNetCore.Mvc.Rendering Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public static class HtmlHelperExtensions Methods | Improve this Doc UseWhen(IHtmlHelper, String, String, Action) Invokes the delegate body when the specified action name and controller name is matched in Microsoft.AspNetCore.Mvc.ActionContext.RouteData . Declaration public static void UseWhen(this IHtmlHelper helper, string action, string controller, Action body) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper The Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper to extend. System.String action The action name to match. System.String controller The controller name to match. System.Action body The delegate that, when both action and controller is matched in Microsoft.AspNetCore.Mvc.ActionContext.RouteData , is invoked. | Improve this Doc UseWhen<T>(IHtmlHelper, String, String, Func<T>) Creates a value of T when the specified action name and controller name is matched in Microsoft.AspNetCore.Mvc.ActionContext.RouteData . Declaration public static T UseWhen<T>(this IHtmlHelper helper, string action, string controller, Func<T> result) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper The Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper to extend. System.String action The action name to match. System.String controller The controller name to match. System.Func <T> result The function delegate that, when both action and controller is matched in Microsoft.AspNetCore.Mvc.ActionContext.RouteData , returns T . Returns Type Description T Either the value of the function delegate result or default(T) . Type Parameters Name Description T The type of the value for the matched action method. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.EnumerableConverter.html": {
    "href": "api/core/Cuemon.Collections.Generic.EnumerableConverter.html",
    "title": "Class EnumerableConverter | Cuemon .NET Standard",
    "keywords": "Class EnumerableConverter This utility class is designed to make System.Collections.Generic.IEnumerable<T> related conversions easier to work with. Inheritance System.Object EnumerableConverter Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class EnumerableConverter Methods | Improve this Doc AsArray<TSource>(TSource[]) Converts the specified values to a one-dimensional array of the specified type, with zero-based indexing. Declaration public static TSource[] AsArray<TSource>(params TSource[] values) Parameters Type Name Description TSource[] values The values to create the System.Array from. Returns Type Description TSource[] A one-dimensional System.Array of the specified with a length equal to the values specified. Type Parameters Name Description TSource The type of the array of values . | Improve this Doc FromArray<TSource>(TSource[]) Returns the input typed as System.Collections.Generic.IEnumerable<T> . Declaration public static IEnumerable<TSource> FromArray<TSource>(params TSource[] source) Parameters Type Name Description TSource[] source The array to type as System.Collections.Generic.IEnumerable<T> . Returns Type Description System.Collections.Generic.IEnumerable <TSource> The input source typed as System.Collections.Generic.IEnumerable<T> . Type Parameters Name Description TSource The type of the elements of source . | Improve this Doc FromDictionary<TKey, TValue>(IDictionary<TKey, TValue>) Converts the specified source to its System.Collections.Generic.KeyValuePair<TKey,TValue> equivalent sequence. Declaration public static IEnumerable<KeyValuePair<TKey, TValue>> FromDictionary<TKey, TValue>(IDictionary<TKey, TValue> source) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source An System.Collections.Generic.IDictionary<TKey, TValue> to convert into a System.Collections.Generic.KeyValuePair<TKey,TValue> equivalent sequence. Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> A System.Collections.Generic.KeyValuePair<TKey,TValue> equivalent sequence of source . Type Parameters Name Description TKey The System.Type of the key in the resulting System.Collections.Generic.KeyValuePair<TKey,TValue> . TValue The System.Type of the value in the resulting System.Collections.Generic.KeyValuePair<TKey,TValue> . Exceptions Type Condition System.ArgumentNullException source is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . T8 arg8 The eighth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . T8 The type of the eighth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . T8 arg8 The eighth parameter of the function delegate converter . T9 arg9 The ninth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . T8 The type of the eighth parameter of the function delegate converter . T9 The type of the ninth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, TResult> converter) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T, TResult>(IEnumerable<TSource> source, Func<TSource, T, TResult> converter, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T arg The parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T The type of the parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T1, T2, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, TResult> converter, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T1, T2, T3, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, TResult> converter, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. | Improve this Doc Parse<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) Converts the specified source to a TResult representation using the specified converter . Declaration public static IEnumerable<TResult> Parse<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource> source, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The System.Collections.Generic.IEnumerable<T> source to parse and convert using the function delegate converter . System.Func <TSource, T1, T2, T3, T4, T5, T6, T7, TResult> converter The function delegate that converts TSource to a TResult representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . T6 arg6 The sixth parameter of the function delegate converter . T7 arg7 The seventh parameter of the function delegate converter . Returns Type Description System.Collections.Generic.IEnumerable <TResult> An System.Collections.Generic.IEnumerable<T> that is equivalent to the TSource contained in source . Type Parameters Name Description TSource The type of the source to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . T6 The type of the sixth parameter of the function delegate converter . T7 The type of the seventh parameter of the function delegate converter . TResult The type of the converted result. Exceptions Type Condition System.ArgumentNullException source is null - or - converter is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.DynamicEqualityComparer.html": {
    "href": "api/core/Cuemon.Collections.Generic.DynamicEqualityComparer.html",
    "title": "Class DynamicEqualityComparer | Cuemon .NET Standard",
    "keywords": "Class DynamicEqualityComparer Provides a factory based way to create and wrap an System.Collections.Generic.IEqualityComparer<T> implementation. Inheritance System.Object DynamicEqualityComparer Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class DynamicEqualityComparer Methods | Improve this Doc Create<T>(Func<T, Int32>, Func<T, T, Boolean>) Creates a dynamic instance of an System.Collections.Generic.IEqualityComparer<T> implementation wrapping System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T) through hashCalculator and System.Collections.Generic.IEqualityComparer<T>.Equals(T, T) . through equalityComparer . Declaration public static IEqualityComparer<T> Create<T>(Func<T, int> hashCalculator, Func<T, T, bool> equalityComparer) Parameters Type Name Description System.Func <T, System.Int32 > hashCalculator The function delegate that calculates a hash code of the specified object and is invoked first. System.Func <T, T, System.Boolean > equalityComparer The function delegate that determines whether the specified objects are equal. This delegate is invoked second if qualified. Returns Type Description System.Collections.Generic.IEqualityComparer <T> A dynamic instance of System.Collections.Generic.IEqualityComparer<T> for type T . Type Parameters Name Description T The type of objects to compare. Remarks The function delegate, hashCalculator ( System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T) ), is evaluated with a conditional-AND before the second function delegate, equalityComparer ( System.Collections.Generic.IEqualityComparer<T>.Equals(T, T) ), is ivoked. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.StreamWriterOptions.html": {
    "href": "api/core/Cuemon.IO.StreamWriterOptions.html",
    "title": "Class StreamWriterOptions | Cuemon .NET Standard",
    "keywords": "Class StreamWriterOptions Specifies options that is related to System.IO.StreamWriter operations. This class cannot be inherited. Inheritance System.Object StreamWriterOptions Namespace : Cuemon.IO Assembly : Cuemon.IO.dll Syntax public sealed class StreamWriterOptions Constructors | Improve this Doc StreamWriterOptions() Initializes a new instance of the StreamWriterOptions class. Declaration public StreamWriterOptions() Remarks The following table shows the initial property values for an instance of StreamWriterOptions . Property Initial Value AutoFlush false BufferSize 1024 Encoding System.Text.Encoding.UTF8 FormatProvider System.Globalization.CultureInfo.InvariantCulture NewLine \\r\\n Properties | Improve this Doc AutoFlush Gets or sets a value indicating whether the System.IO.StreamWriter will flush its buffer to the underlying stream after every call to the Write method. Declaration public bool AutoFlush { get; set; } Property Value Type Description System.Boolean true to force System.IO.StreamWriter to flush its buffer; otherwise, false . | Improve this Doc BufferSize Gets or sets the size of the buffer. Declaration public int BufferSize { get; set; } Property Value Type Description System.Int32 The size of the buffer in bytes for the System.IO.StreamWriter . | Improve this Doc Encoding Gets or sets the Encoding in which the output is written by the System.IO.StreamWriter . Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding The Encoding for the System.IO.StreamWriter . | Improve this Doc FormatProvider Gets or sets the culture-specific formatting information used when writing data with the System.IO.StreamWriter . Declaration public IFormatProvider FormatProvider { get; set; } Property Value Type Description System.IFormatProvider An System.IFormatProvider that contains the culture-specific formatting information. The default is System.Globalization.CultureInfo.InvariantCulture . | Improve this Doc NewLine Gets or sets the line terminator string used by the System.IO.StreamWriter . Declaration public string NewLine { get; set; } Property Value Type Description System.String The line terminator string for the System.IO.StreamWriter . Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.HierarchyUtility.html": {
    "href": "api/core/Cuemon.HierarchyUtility.html",
    "title": "Class HierarchyUtility | Cuemon .NET Standard",
    "keywords": "Class HierarchyUtility This utility class is designed to make object hierarchy operations easier to work with. Inheritance System.Object HierarchyUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class HierarchyUtility Methods | Improve this Doc WhileSourceTraversalHasElements<TSource>(TSource, Func<TSource, IEnumerable<TSource>>) Invokes the specified traversal path of source until obstructed by an empty sequence. Declaration public static IEnumerable<TSource> WhileSourceTraversalHasElements<TSource>(TSource source, Func<TSource, IEnumerable<TSource>> traversal) where TSource : class Parameters Type Name Description TSource source The source to travel until the traversal path is obstructed by an empty sequence. System.Func <TSource, System.Collections.Generic.IEnumerable <TSource>> traversal The function delegate that is invoked until the traveled path is obstructed by an empty sequence. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence equal to the traveled path of source . Type Parameters Name Description TSource The type of the source . Exceptions Type Condition System.ArgumentNullException source -or- traversal is null. | Improve this Doc WhileSourceTraversalIsNotNull<TSource>(TSource, Func<TSource, TSource>) Invokes the specified traversal path of source until obstructed by a null value. Declaration public static IEnumerable<TSource> WhileSourceTraversalIsNotNull<TSource>(TSource source, Func<TSource, TSource> traversal) where TSource : class Parameters Type Name Description TSource source The source to travel until the traversal path is obstructed by a null value. System.Func <TSource, TSource> traversal The function delegate that is invoked until the traveled path is obstructed by a null value. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> sequence equal to the traveled path of source . Type Parameters Name Description TSource The type of the source . Exceptions Type Condition System.ArgumentNullException source -or- traversal is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.HierarchySerializer.html": {
    "href": "api/core/Cuemon.HierarchySerializer.html",
    "title": "Class HierarchySerializer | Cuemon .NET Standard",
    "keywords": "Class HierarchySerializer Provides a way to serialize objects to nodes of IHierarchy<T> . Inheritance System.Object HierarchySerializer Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class HierarchySerializer Constructors | Improve this Doc HierarchySerializer(Object, Action<ObjectHierarchyOptions>) Initializes a new instance of the HierarchySerializer class. Declaration public HierarchySerializer(object source, Action<ObjectHierarchyOptions> setup = null) Parameters Type Name Description System.Object source The object to convert to nodes of IHierarchy<T> . System.Action < ObjectHierarchyOptions > setup The ObjectHierarchyOptions which need to be configured. Properties | Improve this Doc Nodes Gets the result of the IHierarchy<T> . Declaration public IHierarchy<object> Nodes { get; } Property Value Type Description IHierarchy < System.Object > The converted nodes of the the by constructor defined source object. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.HierarchyExtensions.html": {
    "href": "api/core/Cuemon.HierarchyExtensions.html",
    "title": "Class HierarchyExtensions | Cuemon .NET Standard",
    "keywords": "Class HierarchyExtensions Extension methods for a hierarchical structure based on IHierarchy<T> . Inheritance System.Object HierarchyExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class HierarchyExtensions Methods | Improve this Doc AncestorsAndSelf<T>(IHierarchy<T>) Gets all ancestors (parent, grandparent, etc.) and self of the specified node in the hierarchical structure. Declaration public static IEnumerable<IHierarchy<T>> AncestorsAndSelf<T>(this IHierarchy<T> node) Parameters Type Name Description IHierarchy <T> node The node that the hierarchical structure represents. Returns Type Description System.Collections.Generic.IEnumerable < IHierarchy <T>> An System.Collections.Generic.IEnumerable<T> sequence equal to ancestors and self of the specified node . Type Parameters Name Description T The type of the instance represented by the specified node in the hierarchical structure. Exceptions Type Condition System.ArgumentNullException node is null. | Improve this Doc DescendantsAndSelf<T>(IHierarchy<T>) Gets all descendants (children, grandchildren, etc.) anf self of the current node in the hierarchical structure. Declaration public static IEnumerable<IHierarchy<T>> DescendantsAndSelf<T>(this IHierarchy<T> node) Parameters Type Name Description IHierarchy <T> node The node that the hierarchical structure represents. Returns Type Description System.Collections.Generic.IEnumerable < IHierarchy <T>> An System.Collections.Generic.IEnumerable<T> sequence equal to the descendants and self of the specified node . Type Parameters Name Description T The type of the instance represented by the specified node in the hierarchical structure. Exceptions Type Condition System.ArgumentNullException node is null. | Improve this Doc Find<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) Retrieves all nodes that match the conditions defined by the function delegate match . Declaration public static IEnumerable<IHierarchy<T>> Find<T>(this IHierarchy<T> node, Func<IHierarchy<T>, bool> match) Parameters Type Name Description IHierarchy <T> node The node to search. System.Func < IHierarchy <T>, System.Boolean > match The function delegate that defines the conditions of the nodes to search for. Returns Type Description System.Collections.Generic.IEnumerable < IHierarchy <T>> An System.Collections.Generic.IEnumerable<T> sequence containing all nodes that match the conditions defined by the specified predicate, if found. Type Parameters Name Description T The type of the instance that this node represents. | Improve this Doc FindFirst<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) Returns the first node that match the conditions defined by the function delegate match , or a default value if no node is found. Declaration public static IHierarchy<T> FindFirst<T>(this IHierarchy<T> node, Func<IHierarchy<T>, bool> match) Parameters Type Name Description IHierarchy <T> node The node to search. System.Func < IHierarchy <T>, System.Boolean > match The function delegate that defines the conditions of the nodes to search for. Returns Type Description IHierarchy <T> An IHierarchy<T> node that match the conditions defined by the function delegate match , or a default value if no node is found. Type Parameters Name Description T The type of the instance that this node represents. | Improve this Doc FindFirstInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) Returns the first node instance that match the conditions defined by the function delegate match , or a default value if no node is found. Declaration public static T FindFirstInstance<T>(this IHierarchy<T> node, Func<IHierarchy<T>, bool> match) Parameters Type Name Description IHierarchy <T> node The node to search. System.Func < IHierarchy <T>, System.Boolean > match The function delegate that defines the conditions of the nodes to search for. Returns Type Description T An Instance that match the conditions defined by the function delegate match , or a default value if no node is found. Type Parameters Name Description T The type of the instance that this node represents. | Improve this Doc FindInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) Retrieves all node instances that match the conditions defined by the function delegate match . Declaration public static IEnumerable<T> FindInstance<T>(this IHierarchy<T> node, Func<IHierarchy<T>, bool> match) Parameters Type Name Description IHierarchy <T> node The node to search. System.Func < IHierarchy <T>, System.Boolean > match The function delegate that defines the conditions of the nodes to search for. Returns Type Description System.Collections.Generic.IEnumerable <T> An System.Collections.Generic.IEnumerable<T> sequence containing all node instances that match the conditions defined by the specified predicate, if found. Type Parameters Name Description T The type of the instance that this node represents. | Improve this Doc FindSingle<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) Returns the only node that match the conditions defined by the function delegate match , or a default value if no node is found; this method throws an exception if more than one node is found. Declaration public static IHierarchy<T> FindSingle<T>(this IHierarchy<T> node, Func<IHierarchy<T>, bool> match) Parameters Type Name Description IHierarchy <T> node The node to search. System.Func < IHierarchy <T>, System.Boolean > match The function delegate that defines the conditions of the nodes to search for. Returns Type Description IHierarchy <T> An IHierarchy<T> node that match the conditions defined by the function delegate match , or a default value if no node is found. Type Parameters Name Description T The type of the instance that this node represents. | Improve this Doc FindSingleInstance<T>(IHierarchy<T>, Func<IHierarchy<T>, Boolean>) Returns the only node that match the conditions defined by the function delegate match , or a default value if no node instance is found; this method throws an exception if more than one node is found. Declaration public static T FindSingleInstance<T>(this IHierarchy<T> node, Func<IHierarchy<T>, bool> match) Parameters Type Name Description IHierarchy <T> node The node to search. System.Func < IHierarchy <T>, System.Boolean > match The function delegate that defines the conditions of the nodes to search for. Returns Type Description T An Instance node that match the conditions defined by the function delegate match , or a default value if no node instance is found. Type Parameters Name Description T The type of the instance that this node represents. | Improve this Doc FlattenAll<T>(IHierarchy<T>) Flattens the entirety of a hierarchical structure representation into an System.Collections.Generic.IEnumerable<T> sequence of nodes. Declaration public static IEnumerable<IHierarchy<T>> FlattenAll<T>(this IHierarchy<T> node) Parameters Type Name Description IHierarchy <T> node The node from which the flattening will begin. Returns Type Description System.Collections.Generic.IEnumerable < IHierarchy <T>> An System.Collections.Generic.IEnumerable<T> sequence of IHierarchy<T> all nodes represented by the hierarchical structure. Type Parameters Name Description T The type of the instance represented by the specified node in the hierarchical structure. Exceptions Type Condition System.ArgumentNullException node is null. | Improve this Doc NodeAt<T>(IHierarchy<T>, Int32) Returns the node at the specified index of a hierarchical structure. Declaration public static IHierarchy<T> NodeAt<T>(this IHierarchy<T> node, int index) Parameters Type Name Description IHierarchy <T> node The node from which the flattening will begin. System.Int32 index The zero-based index at which a node should be retrieved in the hierarchical structure. Returns Type Description IHierarchy <T> The node at the specified index in the hierarchical structure. Type Parameters Name Description T The type of the instance represented by the specified node in the hierarchical structure. Exceptions Type Condition System.ArgumentNullException node is null. System.ArgumentOutOfRangeException index is less than zero - or - index exceeded the count of nodes in the hierarchical structure. | Improve this Doc Replace<T>(IHierarchy<T>, Action<IHierarchy<T>, T>) Replace the instance of the node with a replacer delegate. Declaration public static void Replace<T>(this IHierarchy<T> node, Action<IHierarchy<T>, T> replacer) Parameters Type Name Description IHierarchy <T> node The node to replace with a new instance. System.Action < IHierarchy <T>, T> replacer The delegate that will replace the wrapped instance of the node . Type Parameters Name Description T The type of the instance that this node represents. | Improve this Doc ReplaceAll<T>(IEnumerable<IHierarchy<T>>, Action<IHierarchy<T>, T>) Replace all instances of the nodes with a replacer delegate. Declaration public static void ReplaceAll<T>(this IEnumerable<IHierarchy<T>> nodes, Action<IHierarchy<T>, T> replacer) Parameters Type Name Description System.Collections.Generic.IEnumerable < IHierarchy <T>> nodes The sequence of nodes to replace with a new instance. System.Action < IHierarchy <T>, T> replacer The delegate that will replace all wrapped instances of the nodes . Type Parameters Name Description T The type of the instance that these nodes represents. | Improve this Doc Root<T>(IHierarchy<T>) Returns the root node of the specified node in the hierarchical structure. Declaration public static IHierarchy<T> Root<T>(this IHierarchy<T> node) Parameters Type Name Description IHierarchy <T> node The node that the hierarchical structure represents. Returns Type Description IHierarchy <T> An IHierarchy<T> node that represents the root of the specified node . Type Parameters Name Description T The type of the instance represented by the specified node in the hierarchical structure. Exceptions Type Condition System.ArgumentNullException node is null. | Improve this Doc SiblingsAndSelf<T>(IHierarchy<T>) Gets all siblings and self after the current node in the hierarchical structure. Declaration public static IEnumerable<IHierarchy<T>> SiblingsAndSelf<T>(this IHierarchy<T> node) Parameters Type Name Description IHierarchy <T> node The node that the hierarchical structure represents. Returns Type Description System.Collections.Generic.IEnumerable < IHierarchy <T>> An System.Collections.Generic.IEnumerable<T> sequence equal to the siblings and self of the specified node . Type Parameters Name Description T The type of the instance represented by the specified node in the hierarchical structure. Exceptions Type Condition System.ArgumentNullException node is null. | Improve this Doc SiblingsAndSelfAt<T>(IHierarchy<T>, Int32) Gets all siblings and self after the current node in the hierarchical structure. Declaration public static IEnumerable<IHierarchy<T>> SiblingsAndSelfAt<T>(this IHierarchy<T> node, int depth) Parameters Type Name Description IHierarchy <T> node The node that the hierarchical structure represents. System.Int32 depth The depth in the hierarchical structure from where to locate the siblings and self nodes. Returns Type Description System.Collections.Generic.IEnumerable < IHierarchy <T>> An System.Collections.Generic.IEnumerable<T> sequence equal to the siblings and self of the specified node . Type Parameters Name Description T The type of the instance represented by the specified node in the hierarchical structure. Exceptions Type Condition System.ArgumentNullException node is null. System.ArgumentOutOfRangeException depth is less than zero. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Middleware-4.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Middleware-4.html",
    "title": "Class Middleware<T1, T2, T3, T4> | Cuemon .NET Standard",
    "keywords": "Class Middleware<T1, T2, T3, T4> Provides a base-class for middleware implementation in ASP.NET Core with four dependency injected parameters. Inheritance System.Object MiddlewareCore Middleware<T1, T2, T3, T4> Inherited Members MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class Middleware<T1, T2, T3, T4> : MiddlewareCore Type Parameters Name Description T1 The type of the first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T2 The type of the second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T3 The type of the third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T4 The type of the fourth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . Constructors | Improve this Doc Middleware(RequestDelegate) Initializes a new instance of the Middleware class. Declaration protected Middleware(RequestDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Methods | Improve this Doc InvokeAsync(HttpContext, T1, T2, T3, T4) Executes the Middleware<T1, T2, T3, T4> . Declaration public abstract Task InvokeAsync(HttpContext context, T1 di1, T2 di2, T3 di3, T4 di4) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T1 di1 The first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T2 di2 The second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T3 di3 The third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . T4 di4 The fourth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also ConfigurableMiddleware <T1, T2, T3, T4, TOptions> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Infrastructure.ConfigurableMiddlewareCore-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Infrastructure.ConfigurableMiddlewareCore-1.html",
    "title": "Class ConfigurableMiddlewareCore<TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableMiddlewareCore<TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern. This API supports the product infrastructure and is not intended to be used directly from your code. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore<TOptions> ConfigurableMiddleware<TOptions> ConfigurableMiddleware<T, TOptions> ConfigurableMiddleware<T1, T2, TOptions> ConfigurableMiddleware<T1, T2, T3, TOptions> ConfigurableMiddleware<T1, T2, T3, T4, TOptions> ConfigurableMiddleware<T1, T2, T3, T4, T5, TOptions> Implements IConfigurable <TOptions> Inherited Members MiddlewareCore.Next Namespace : Cuemon.AspNetCore.Infrastructure Assembly : Cuemon.AspNetCore.dll Syntax public abstract class ConfigurableMiddlewareCore<TOptions> : MiddlewareCore, IConfigurable<TOptions> where TOptions : class, new() Type Parameters Name Description TOptions The type of the options to setup. Properties | Improve this Doc Options Gets the configured options of this Middleware . Declaration public TOptions Options { get; } Property Value Type Description TOptions The configured options of this Middleware . Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Middleware (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.BasicAuthenticationMiddleware.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.BasicAuthenticationMiddleware.html",
    "title": "Class BasicAuthenticationMiddleware | Cuemon .NET Standard",
    "keywords": "Class BasicAuthenticationMiddleware Provides a HTTP Basic Authentication middleware implementation for ASP.NET Core. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore < BasicAuthenticationOptions > ConfigurableMiddleware < BasicAuthenticationOptions > BasicAuthenticationMiddleware Implements IConfigurable < BasicAuthenticationOptions > Inherited Members ConfigurableMiddlewareCore<BasicAuthenticationOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public class BasicAuthenticationMiddleware : ConfigurableMiddleware<BasicAuthenticationOptions>, IConfigurable<BasicAuthenticationOptions> Constructors | Improve this Doc BasicAuthenticationMiddleware(RequestDelegate, IOptions<BasicAuthenticationOptions>) Initializes a new instance of the BasicAuthenticationMiddleware class. Declaration public BasicAuthenticationMiddleware(RequestDelegate next, IOptions<BasicAuthenticationOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions < BasicAuthenticationOptions > setup The BasicAuthenticationOptions which need to be configured. | Improve this Doc BasicAuthenticationMiddleware(RequestDelegate, Action<BasicAuthenticationOptions>) Initializes a new instance of the BasicAuthenticationMiddleware class. Declaration public BasicAuthenticationMiddleware(RequestDelegate next, Action<BasicAuthenticationOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action < BasicAuthenticationOptions > setup The middleware BasicAuthenticationOptions which need to be configured. Properties | Improve this Doc AuthenticationScheme Gets the name of the authentication scheme. Declaration public string AuthenticationScheme { get; } Property Value Type Description System.String The name of the authentication scheme. Methods | Improve this Doc InvokeAsync(HttpContext) Executes the BasicAuthenticationMiddleware . Declaration public override Task InvokeAsync(HttpContext context) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Overrides Cuemon.AspNetCore.ConfigurableMiddleware<Cuemon.AspNetCore.Authentication.BasicAuthenticationOptions>.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext) Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.XmlReaderUtility.html": {
    "href": "api/core/Cuemon.Xml.XmlReaderUtility.html",
    "title": "Class XmlReaderUtility | Cuemon .NET Standard",
    "keywords": "Class XmlReaderUtility This utility class is designed to make System.Xml.XmlReader related operations easier to work with. Inheritance System.Object XmlReaderUtility Namespace : Cuemon.Xml Assembly : Cuemon.Xml.dll Syntax public static class XmlReaderUtility Methods | Improve this Doc Chunk(XmlReader) Creates and returns a chunked sequence of System.Xml.XmlReader objects with a maximum of 128 XML node elements located on a depth of 1. Declaration public static IEnumerable<XmlReader> Chunk(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data to chunk into smaller System.Xml.XmlReader objects for a batch run or similar. Returns Type Description System.Collections.Generic.IEnumerable < System.Xml.XmlReader > An sequence of System.Xml.XmlReader objects that contains no more than 128 XML node elements from the reader object. | Improve this Doc Chunk(XmlReader, Int32, Action<XmlWriterSettings>) Creates and returns a chunked sequence of System.Xml.XmlReader objects with a maximum of the specified size of XML node elements located on a depth of 1. Declaration public static IEnumerable<XmlReader> Chunk(XmlReader reader, int size, Action<XmlWriterSettings> setup = null) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data to chunk into smaller System.Xml.XmlReader objects for a batch run or similar. System.Int32 size The amount of XML node elements allowed per System.Xml.XmlReader object. Default is 128 XML node element. System.Action < System.Xml.XmlWriterSettings > setup The System.Xml.XmlWriterSettings which need to be configured. Returns Type Description System.Collections.Generic.IEnumerable < System.Xml.XmlReader > An sequence of System.Xml.XmlReader objects that contains no more than the specified size of XML node elements from the reader object. Exceptions Type Condition System.ArgumentNullException reader is null. System.ArgumentException The System.Xml.XmlReader.Read() method of the reader object has already been called. | Improve this Doc CreateSettings(Action<XmlReaderSettings>) Specifies a set of features to support the System.Xml.XmlReader object. Declaration public static XmlReaderSettings CreateSettings(Action<XmlReaderSettings> setup = null) Parameters Type Name Description System.Action < System.Xml.XmlReaderSettings > setup Returns Type Description System.Xml.XmlReaderSettings A System.Xml.XmlReaderSettings instance that specifies a set of features to support the System.Xml.XmlReader object. Remarks The following table shows the overridden initial property values for an instance of System.Xml.XmlReaderSettings . The initial property values can be viewed here: https://msdn.microsoft.com/EN-US/library/2ycwc04f(v=VS.110,d=hv.2).aspx Property Initial Value System.Xml.XmlReaderSettings.DtdProcessing System.Xml.DtdProcessing.Ignore | Improve this Doc MoveToFirstElement(XmlReader) Moves the reader object to the first element. Declaration public static bool MoveToFirstElement(XmlReader reader) Parameters Type Name Description System.Xml.XmlReader reader The System.Xml.XmlReader object that contains the XML data. Returns Type Description System.Boolean true if an element exists (the reader moves to the first element), otherwise, false (the reader has reached System.Xml.XmlReader.EOF ). Exceptions Type Condition System.ArgumentNullException reader is null. System.ArgumentException The System.Xml.XmlReader.Read() method of the reader object has already been called. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.Http.HttpMethodConverter.html": {
    "href": "api/core/Cuemon.Net.Http.HttpMethodConverter.html",
    "title": "Class HttpMethodConverter | Cuemon .NET Standard",
    "keywords": "Class HttpMethodConverter This utility class is designed to make System.Net.Http.HttpMethod related conversions easier to work with. Inheritance System.Object HttpMethodConverter Namespace : Cuemon.Net.Http Assembly : Cuemon.Net.dll Syntax public static class HttpMethodConverter Methods | Improve this Doc ToHttpMethod(HttpMethod) Converts the specified source to its equivalent HttpMethods representation. Declaration public static HttpMethods ToHttpMethod(HttpMethod source) Parameters Type Name Description System.Net.Http.HttpMethod source The System.Net.Http.HttpMethod to be converted. Returns Type Description HttpMethods A HttpMethods representation of the specified source . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.html": {
    "href": "api/core/Cuemon.IO.html",
    "title": "Namespace Cuemon.IO | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.IO Assembly : Cuemon.Core.dll Classes FileInfoConverter This utility class is designed to make System.IO.FileInfo related conversions easier to work with. JsonStreamConverter This utility class is designed to make JSON System.IO.Stream related conversions easier to work with. StreamConverter This utility class is designed to make System.IO.Stream related conversions easier to work with. StreamConverterExtensions This is an extension implementation of the StreamConverter class. StreamUtility This utility class is designed to make System.IO.Stream operations easier to work with. StreamUtilityExtensions This is an extension implementation of the most common methods on the StreamUtility class. StreamWriterOptions Specifies options that is related to System.IO.StreamWriter operations. This class cannot be inherited. StreamWriterUtility This utility class is designed to make System.IO.StreamWriter related operations easier to work with. TextReaderConverter This utility class is designed to make System.IO.TextReader related conversions easier to work with. TextReaderConverterExtensions This is an extension implementation of the TextReaderConverter class. XmlStreamConverter This utility class is designed to make XML System.IO.Stream related conversions easier to work with. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.IO.XmlStreamConverter.html": {
    "href": "api/core/Cuemon.IO.XmlStreamConverter.html",
    "title": "Class XmlStreamConverter | Cuemon .NET Standard",
    "keywords": "Class XmlStreamConverter This utility class is designed to make XML System.IO.Stream related conversions easier to work with. Inheritance System.Object XmlStreamConverter Namespace : Cuemon.IO Assembly : Cuemon.Xml.dll Syntax public static class XmlStreamConverter Methods | Improve this Doc ChangeEncoding(Stream, Encoding) Converts the entire XML System.IO.Stream object from the resolved source encoding to the specified target encoding, preserving any preamble sequences. Declaration public static Stream ChangeEncoding(Stream source, Encoding targetEncoding) Parameters Type Name Description System.IO.Stream source The System.IO.Stream to apply the conversion to. System.Text.Encoding targetEncoding The target encoding format. Returns Type Description System.IO.Stream A System.IO.Stream object containing the results of converting bytes from the resolved source encoding to the specified targetEncoding. | Improve this Doc ChangeEncoding(Stream, Encoding, PreambleSequence) Converts the entire XML System.IO.Stream object from the resolved encoding of source to the specified encoding. If an encoding cannot be resolved from source , UTF-8 encoding is assumed. Declaration public static Stream ChangeEncoding(Stream source, Encoding targetEncoding, PreambleSequence sequence) Parameters Type Name Description System.IO.Stream source The System.IO.Stream to apply the conversion to. System.Text.Encoding targetEncoding The target encoding format. PreambleSequence sequence Determines whether too keep or remove any preamble sequences. Returns Type Description System.IO.Stream A System.IO.Stream object containing the results of converting bytes from the resolved source encoding to the specified targetEncoding. | Improve this Doc ChangeEncoding(Stream, Encoding, Boolean) Converts the entire XML System.IO.Stream object from the resolved encoding of source to the specified encoding. If an encoding cannot be resolved from source , UTF-8 encoding is assumed. Declaration public static Stream ChangeEncoding(Stream source, Encoding targetEncoding, bool omitXmlDeclaration) Parameters Type Name Description System.IO.Stream source The System.IO.Stream to apply the conversion to. System.Text.Encoding targetEncoding The target encoding format. System.Boolean omitXmlDeclaration if set to true omit the XML declaration; otherwise false . The default is false. Returns Type Description System.IO.Stream A System.IO.Stream object containing the results of converting bytes from the resolved source encoding to the specified targetEncoding. | Improve this Doc ChangeEncoding(Stream, Encoding, Encoding, PreambleSequence) Converts the entire XML System.IO.Stream object from one encoding to another. Declaration public static Stream ChangeEncoding(Stream source, Encoding sourceEncoding, Encoding targetEncoding, PreambleSequence sequence) Parameters Type Name Description System.IO.Stream source The System.IO.Stream to apply the conversion to. System.Text.Encoding sourceEncoding The source encoding format. System.Text.Encoding targetEncoding The target encoding format. PreambleSequence sequence Determines whether too keep or remove any preamble sequences. Returns Type Description System.IO.Stream A System.IO.Stream object containing the results of converting bytes from sourceEncoding to targetEncoding. | Improve this Doc ChangeEncoding(Stream, Encoding, Encoding, PreambleSequence, Boolean) Converts the entire XML System.IO.Stream object from one encoding to another. Declaration public static Stream ChangeEncoding(Stream source, Encoding sourceEncoding, Encoding targetEncoding, PreambleSequence sequence, bool omitXmlDeclaration) Parameters Type Name Description System.IO.Stream source The System.IO.Stream to apply the conversion to. System.Text.Encoding sourceEncoding The source encoding format. System.Text.Encoding targetEncoding The target encoding format. PreambleSequence sequence Determines whether too keep or remove any preamble sequences. System.Boolean omitXmlDeclaration if set to true omit the XML declaration; otherwise false . The default is false. Returns Type Description System.IO.Stream A System.IO.Stream object containing the results of converting bytes from sourceEncoding to targetEncoding. | Improve this Doc ChangeEncoding(Stream, Encoding, Encoding, Boolean) Converts the entire XML System.IO.Stream object from one encoding to another. Declaration public static Stream ChangeEncoding(Stream source, Encoding sourceEncoding, Encoding targetEncoding, bool omitXmlDeclaration) Parameters Type Name Description System.IO.Stream source The System.IO.Stream to apply the conversion to. System.Text.Encoding sourceEncoding The source encoding format. System.Text.Encoding targetEncoding The target encoding format. System.Boolean omitXmlDeclaration if set to true omit the XML declaration; otherwise false . The default is false. Returns Type Description System.IO.Stream A System.IO.Stream object containing the results of converting bytes from sourceEncoding to targetEncoding. | Improve this Doc FromException(Exception) Converts the specified exception to an XML System.IO.Stream . Declaration public static Stream FromException(Exception exception) Parameters Type Name Description System.Exception exception The System.Exception to convert into an XML System.IO.Stream . Returns Type Description System.IO.Stream An XML System.IO.Stream variant of the specified exception . Remarks The converted exception defaults to using an instance of System.Text.UTF8Encoding unless specified otherwise. | Improve this Doc FromException(Exception, Encoding) Converts the specified exception to an XML System.IO.Stream . Declaration public static Stream FromException(Exception exception, Encoding encoding) Parameters Type Name Description System.Exception exception The System.Exception to convert into an XML System.IO.Stream . System.Text.Encoding encoding The preferred encoding to apply to the result. Returns Type Description System.IO.Stream An XML System.IO.Stream variant of the specified exception . | Improve this Doc FromException(Exception, Encoding, Boolean) Converts the specified exception to an XML System.IO.Stream . Declaration public static Stream FromException(Exception exception, Encoding encoding, bool includeStackTrace) Parameters Type Name Description System.Exception exception The System.Exception to convert into an XML System.IO.Stream . System.Text.Encoding encoding The preferred encoding to apply to the result. System.Boolean includeStackTrace if set to true the stack trace of the exception is included in the converted result. Returns Type Description System.IO.Stream An XML System.IO.Stream variant of the specified exception . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ChecksumMethod.html": {
    "href": "api/core/Cuemon.Integrity.ChecksumMethod.html",
    "title": "Enum ChecksumMethod | Cuemon .NET Standard",
    "keywords": "Enum ChecksumMethod Specifies ways for a checksum to be computed. Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public enum ChecksumMethod Fields Name Description Combined Indicates that a checksum is combined from all given input and hence always will be available. Default Indicates default behavior which is leaving the checksum unaltered. Timestamp Indicates that a checksum is generated from date-time inputs. Extension Methods ByteConverterExtensions.ToByteArray<ChecksumMethod>() ConverterExtensions.ParseWith<ChecksumMethod, TResult>(Func<ChecksumMethod, TResult>) ConverterExtensions.ParseWith<ChecksumMethod, T, TResult>(Func<ChecksumMethod, T, TResult>, T) ConverterExtensions.ParseWith<ChecksumMethod, T1, T2, TResult>(Func<ChecksumMethod, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<ChecksumMethod, T1, T2, T3, TResult>(Func<ChecksumMethod, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<ChecksumMethod, T1, T2, T3, T4, TResult>(Func<ChecksumMethod, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<ChecksumMethod, T1, T2, T3, T4, T5, TResult>(Func<ChecksumMethod, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<ChecksumMethod, T1, T2, T3, T4, T5, T6, TResult>(Func<ChecksumMethod, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<ChecksumMethod, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<ChecksumMethod, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<ChecksumMethod, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<ChecksumMethod, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<ChecksumMethod, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<ChecksumMethod, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<ChecksumMethod>() DelegateUtilityExtensions.DynamicWrap<ChecksumMethod>() TweakerExtensions.Adjust<ChecksumMethod>(Func<ChecksumMethod, ChecksumMethod>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<ChecksumMethod>() WrapperExtensions.UseWrapper<ChecksumMethod>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<ChecksumMethod>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<ChecksumMethod>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.QueryInsertAction.html": {
    "href": "api/core/Cuemon.Data.QueryInsertAction.html",
    "title": "Enum QueryInsertAction | Cuemon .NET Standard",
    "keywords": "Enum QueryInsertAction Defines the available insert actions for the DataAdapter class. Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public enum QueryInsertAction Fields Name Description AffectedRows Indicates that a System.Int32 value will be returned with the amount of affected rows by the insert query. IdentityDecimal Indicates that a System.Decimal value will be returned by the insert query. IdentityInt32 Indicates that a System.Int32 value will be returned by the insert query. IdentityInt64 Indicates that a System.Int64 value will be returned by the insert query. Void Indicates that no value will be returned by the insert query. Extension Methods ByteConverterExtensions.ToByteArray<QueryInsertAction>() ConverterExtensions.ParseWith<QueryInsertAction, TResult>(Func<QueryInsertAction, TResult>) ConverterExtensions.ParseWith<QueryInsertAction, T, TResult>(Func<QueryInsertAction, T, TResult>, T) ConverterExtensions.ParseWith<QueryInsertAction, T1, T2, TResult>(Func<QueryInsertAction, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<QueryInsertAction, T1, T2, T3, TResult>(Func<QueryInsertAction, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<QueryInsertAction, T1, T2, T3, T4, TResult>(Func<QueryInsertAction, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<QueryInsertAction, T1, T2, T3, T4, T5, TResult>(Func<QueryInsertAction, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<QueryInsertAction, T1, T2, T3, T4, T5, T6, TResult>(Func<QueryInsertAction, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<QueryInsertAction, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<QueryInsertAction, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<QueryInsertAction, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<QueryInsertAction, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<QueryInsertAction, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<QueryInsertAction, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<QueryInsertAction>() DelegateUtilityExtensions.DynamicWrap<QueryInsertAction>() TweakerExtensions.Adjust<QueryInsertAction>(Func<QueryInsertAction, QueryInsertAction>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<QueryInsertAction>() WrapperExtensions.UseWrapper<QueryInsertAction>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<QueryInsertAction>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<QueryInsertAction>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataParameterEqualityComparer.html": {
    "href": "api/core/Cuemon.Data.DataParameterEqualityComparer.html",
    "title": "Class DataParameterEqualityComparer | Cuemon .NET Standard",
    "keywords": "Class DataParameterEqualityComparer Provides an equality comparison for System.Data.Common.DbParameter objects. Inheritance System.Object System.Collections.Generic.EqualityComparer < System.Data.Common.DbParameter > DataParameterEqualityComparer Implements System.Collections.Generic.IEqualityComparer < System.Data.Common.DbParameter > System.Collections.IEqualityComparer Inherited Members System.Collections.Generic.EqualityComparer<System.Data.Common.DbParameter>.System.Collections.IEqualityComparer.Equals(System.Object, System.Object) System.Collections.Generic.EqualityComparer<System.Data.Common.DbParameter>.System.Collections.IEqualityComparer.GetHashCode(System.Object) Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public class DataParameterEqualityComparer : EqualityComparer<DbParameter>, IEqualityComparer<DbParameter>, IEqualityComparer Properties | Improve this Doc Default Returns a default equality comparer for System.Data.Common.DbParameter . Declaration public static IEqualityComparer<DbParameter> Default { get; } Property Value Type Description System.Collections.Generic.IEqualityComparer < System.Data.Common.DbParameter > Methods | Improve this Doc Equals(DbParameter, DbParameter) When overridden in a derived class, determines whether two objects of type T are equal. Declaration public override bool Equals(DbParameter x, DbParameter y) Parameters Type Name Description System.Data.Common.DbParameter x The first object to compare. System.Data.Common.DbParameter y The second object to compare. Returns Type Description System.Boolean true if the specified objects are equal; otherwise, false. Overrides System.Collections.Generic.EqualityComparer<System.Data.Common.DbParameter>.Equals(System.Data.Common.DbParameter, System.Data.Common.DbParameter) | Improve this Doc GetHashCode(DbParameter) Returns a hash code for this instance. Declaration public override int GetHashCode(DbParameter obj) Parameters Type Name Description System.Data.Common.DbParameter obj The obj. Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Collections.Generic.EqualityComparer<System.Data.Common.DbParameter>.GetHashCode(System.Data.Common.DbParameter) Exceptions Type Condition System.ArgumentNullException The type of obj is a reference type and obj is null. Implements System.Collections.Generic.IEqualityComparer<T> System.Collections.IEqualityComparer Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Net.Http.html": {
    "href": "api/core/Cuemon.Net.Http.html",
    "title": "Namespace Cuemon.Net.Http | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.Net.Http Assembly : Cuemon.Net.dll Classes HttpManager Provides ways for sending HTTP requests and receiving HTTP responses from a resource identified by a URI. This class cannot be inherited. HttpManagerExtensions This is an extension implementation of the most common methods on the HttpManager class. HttpManagerOptions Specifies options that is related to the HttpManager class. HttpMethodConverter This utility class is designed to make System.Net.Http.HttpMethod related conversions easier to work with. HttpMethodExtensions This is an extension implementation of the System.Net.Http.HttpMethod class. HttpRequestOptions Specifies options that is related to HttpManager operations. Enums HttpMethods Defines the official HTTP data transfer method (such as GET, POST, or HEAD) used by the client to query a web server. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Mapping.html": {
    "href": "api/core/Cuemon.Mapping.html",
    "title": "Class Mapping | Cuemon .NET Standard",
    "keywords": "Class Mapping Defines the mapping between a column/field/item in a data source and a column/field/item in the data destination. Inheritance System.Object Mapping IndexMapping Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Mapping Constructors | Improve this Doc Mapping(String, String) Initializes a new instance of the Mapping class. Declaration public Mapping(string source, string destination) Parameters Type Name Description System.String source The name of the source column/field/item within the data source. System.String destination The name of the destination column/field/item within the data destination. Properties | Improve this Doc Destination Get the name of the column/field/item being mapped in the data destination. Declaration public string Destination { get; } Property Value Type Description System.String The string value of the column/field/item being mapped in the data destination. | Improve this Doc Source Gets the name of the column/field/item being mapped in the data source. Declaration public string Source { get; } Property Value Type Description System.String The string value of the column/field/item being mapped in the data source. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.LoopUtility.html": {
    "href": "api/core/Cuemon.LoopUtility.html",
    "title": "Class LoopUtility | Cuemon .NET Standard",
    "keywords": "Class LoopUtility Provides support for a generic way of specifying loops while providing ways to encapsulate and re-use existing code. Inheritance System.Object LoopUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class LoopUtility Methods | Improve this Doc Condition<T>(T, RelationalOperator, T) Provides a default implementation of a for-condition callback method. Declaration public static bool Condition<T>(T current, RelationalOperator relational, T repeats) where T : struct, IComparable<T>, IEquatable<T>, IConvertible Parameters Type Name Description T current The current value of the counter in a for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply as the relational operator for left-hand operand current and right-hand operand repeats . T repeats The amount of repeats to do according to the rules specified by relational . Returns Type Description System.Boolean true if current does not meet the condition of relational and repeats ; otherwise false . Type Parameters Name Description T The type of the counter in a for-loop. | Improve this Doc For<TSource>(TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource>) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) . Declaration public static void For<TSource>(TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource> method) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource> method The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource>(TSource, RelationalOperator, TSource, Action<TSource>) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource>(TSource initial, RelationalOperator relational, TSource repeats, Action<TSource> method) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Action <TSource> method The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource>(TSource, Action<TSource>) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the former is initialized to set counter with an initial value of 0 and applying relational rule LessThan and the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource>(TSource repeats, Action<TSource> method) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource repeats The amount of repeats to do. System.Action <TSource> method The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource>(Func<TSource, RelationalOperator, TSource, Boolean>, TSource, RelationalOperator, TSource, Func<TSource, AssignmentOperator, TSource, TSource>, AssignmentOperator, TSource, Action<TSource>) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource>(Func<TSource, RelationalOperator, TSource, bool> condition, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, AssignmentOperator, TSource, TSource> iterator, AssignmentOperator assignment, TSource step, Action<TSource> method) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Func <TSource, RelationalOperator , TSource, System.Boolean > condition The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset. TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Func <TSource, AssignmentOperator , TSource, TSource> iterator The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the counter . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource> method The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException condition is null - or - iterator is null - or - method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T>, T) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) . Declaration public static void For<TSource, T>(TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T> method, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T> method The delegate that is invoked once per iteration. T arg The first parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T The type of the parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(TSource, RelationalOperator, TSource, Action<TSource, T>, T) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T>(TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T> method, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Action <TSource, T> method The delegate that is invoked once per iteration. T arg The parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T The type of the parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(TSource, Action<TSource, T>, T) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the former is initialized to set counter with an initial value of 0 and applying relational rule LessThan and the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T>(TSource repeats, Action<TSource, T> method, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource repeats The amount of repeats to do. System.Action <TSource, T> method The delegate that is invoked once per iteration. T arg The parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T The type of the parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T>(Func<TSource, RelationalOperator, TSource, Boolean>, TSource, RelationalOperator, TSource, Func<TSource, AssignmentOperator, TSource, TSource>, AssignmentOperator, TSource, Action<TSource, T>, T) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T>(Func<TSource, RelationalOperator, TSource, bool> condition, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, AssignmentOperator, TSource, TSource> iterator, AssignmentOperator assignment, TSource step, Action<TSource, T> method, T arg) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Func <TSource, RelationalOperator , TSource, System.Boolean > condition The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset. TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Func <TSource, AssignmentOperator , TSource, TSource> iterator The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the counter . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T> method The delegate that is invoked once per iteration. T arg The parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T The type of the parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException condition is null - or - iterator is null - or - method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) . Declaration public static void For<TSource, T1, T2>(TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2> method, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(TSource, RelationalOperator, TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T1, T2>(TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2> method, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Action <TSource, T1, T2> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the former is initialized to set counter with an initial value of 0 and applying relational rule LessThan and the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T1, T2>(TSource repeats, Action<TSource, T1, T2> method, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2>(Func<TSource, RelationalOperator, TSource, Boolean>, TSource, RelationalOperator, TSource, Func<TSource, AssignmentOperator, TSource, TSource>, AssignmentOperator, TSource, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2>(Func<TSource, RelationalOperator, TSource, bool> condition, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, AssignmentOperator, TSource, TSource> iterator, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2> method, T1 arg1, T2 arg2) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Func <TSource, RelationalOperator , TSource, System.Boolean > condition The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset. TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Func <TSource, AssignmentOperator , TSource, TSource> iterator The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the counter . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException condition is null - or - iterator is null - or - method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) . Declaration public static void For<TSource, T1, T2, T3>(TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T1, T2, T3>(TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Action <TSource, T1, T2, T3> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the former is initialized to set counter with an initial value of 0 and applying relational rule LessThan and the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T1, T2, T3>(TSource repeats, Action<TSource, T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3>(Func<TSource, RelationalOperator, TSource, Boolean>, TSource, RelationalOperator, TSource, Func<TSource, AssignmentOperator, TSource, TSource>, AssignmentOperator, TSource, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3>(Func<TSource, RelationalOperator, TSource, bool> condition, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, AssignmentOperator, TSource, TSource> iterator, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Func <TSource, RelationalOperator , TSource, System.Boolean > condition The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset. TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Func <TSource, AssignmentOperator , TSource, TSource> iterator The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the counter . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException condition is null - or - iterator is null - or - method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) . Declaration public static void For<TSource, T1, T2, T3, T4>(TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T1, T2, T3, T4>(TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Action <TSource, T1, T2, T3, T4> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the former is initialized to set counter with an initial value of 0 and applying relational rule LessThan and the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T1, T2, T3, T4>(TSource repeats, Action<TSource, T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4>(Func<TSource, RelationalOperator, TSource, Boolean>, TSource, RelationalOperator, TSource, Func<TSource, AssignmentOperator, TSource, TSource>, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4>(Func<TSource, RelationalOperator, TSource, bool> condition, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, AssignmentOperator, TSource, TSource> iterator, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Func <TSource, RelationalOperator , TSource, System.Boolean > condition The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset. TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Func <TSource, AssignmentOperator , TSource, TSource> iterator The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the counter . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException condition is null - or - iterator is null - or - method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(TSource, RelationalOperator, TSource, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) . Declaration public static void For<TSource, T1, T2, T3, T4, T5>(TSource initial, RelationalOperator relational, TSource repeats, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4, T5> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(TSource, RelationalOperator, TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(TSource initial, RelationalOperator relational, TSource repeats, Action<TSource, T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Action <TSource, T1, T2, T3, T4, T5> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. This overload uses the default implementation of the necessary two callback methods of the for-loop; Condition<T>(T, RelationalOperator, T) and Iterator<T>(T, AssignmentOperator, T) , where the former is initialized to set counter with an initial value of 0 and applying relational rule LessThan and the latter is initialized to increment counter by 1 on each iteration. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(TSource repeats, Action<TSource, T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description TSource repeats The amount of repeats to do. System.Action <TSource, T1, T2, T3, T4, T5> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc For<TSource, T1, T2, T3, T4, T5>(Func<TSource, RelationalOperator, TSource, Boolean>, TSource, RelationalOperator, TSource, Func<TSource, AssignmentOperator, TSource, TSource>, AssignmentOperator, TSource, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code. Declaration public static void For<TSource, T1, T2, T3, T4, T5>(Func<TSource, RelationalOperator, TSource, bool> condition, TSource initial, RelationalOperator relational, TSource repeats, Func<TSource, AssignmentOperator, TSource, TSource> iterator, AssignmentOperator assignment, TSource step, Action<TSource, T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : struct, IComparable<TSource>, IEquatable<TSource>, IConvertible Parameters Type Name Description System.Func <TSource, RelationalOperator , TSource, System.Boolean > condition The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset. TSource initial The initial value of the counter in the for-loop. RelationalOperator relational One of the enumeration values that specifies the rules to apply for the condition relational operator of the for-loop. TSource repeats The amount of repeats to do according to the rules specified by relational . System.Func <TSource, AssignmentOperator , TSource, TSource> iterator The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the counter . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the iterator assignment operator of the for-loop. TSource step The value to assign the counter according to the rule specified by assignment . System.Action <TSource, T1, T2, T3, T4, T5> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Type Parameters Name Description TSource The type of the counter in the encapsulated for-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . Remarks Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter TSource . Exceptions Type Condition System.ArgumentNullException condition is null - or - iterator is null - or - method is null. System.ArgumentOutOfRangeException TSource is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc ForEach<TSource>(IEnumerable<TSource>, Action<TSource>) Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource>(IEnumerable<TSource> source, Action<TSource> method) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence that is iterated in the encapsulated foreach-loop. System.Action <TSource> method The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the source in the encapsulated foreach-loop. Exceptions Type Condition System.ArgumentNullException method is null -or- source is null. | Improve this Doc ForEach<TSource, T>(IEnumerable<TSource>, Action<TSource, T>, T) Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T>(IEnumerable<TSource> source, Action<TSource, T> method, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence that is iterated in the encapsulated foreach-loop. System.Action <TSource, T> method The delegate that is invoked once per iteration. T arg The parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated foreach-loop. T The type of the parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null -or- source is null. | Improve this Doc ForEach<TSource, T1, T2>(IEnumerable<TSource>, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2>(IEnumerable<TSource> source, Action<TSource, T1, T2> method, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence that is iterated in the encapsulated foreach-loop. System.Action <TSource, T1, T2> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated foreach-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null -or- source is null. | Improve this Doc ForEach<TSource, T1, T2, T3>(IEnumerable<TSource>, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence that is iterated in the encapsulated foreach-loop. System.Action <TSource, T1, T2, T3> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated foreach-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null -or- source is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence that is iterated in the encapsulated foreach-loop. System.Action <TSource, T1, T2, T3, T4> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated foreach-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null -or- source is null. | Improve this Doc ForEach<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code. Declaration public static void ForEach<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource> source, Action<TSource, T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence that is iterated in the encapsulated foreach-loop. System.Action <TSource, T1, T2, T3, T4, T5> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated foreach-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException method is null -or- source is null. | Improve this Doc Iterator<T>(T, AssignmentOperator, T) Provides a default implementation of a for-iterator callback method. Declaration public static T Iterator<T>(T current, AssignmentOperator assignment, T step) where T : struct, IComparable<T>, IEquatable<T>, IConvertible Parameters Type Name Description T current The current value of the counter in a for-loop. AssignmentOperator assignment One of the enumeration values that specifies the rules to apply as the assignment operator for left-hand operand current and right-hand operand step . T step The value to assign to current according to the rule specified by assignment . Returns Type Description T The computed result of current having the assignment of step . Type Parameters Name Description T The type of the counter in a for-loop. | Improve this Doc While<TSource>(TSource, Func<Boolean>, Action<TSource>) Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource>(TSource source, Func<bool> condition, Action<TSource> method) where TSource : class Parameters Type Name Description TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Func < System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . System.Action <TSource> method The delegate that is invoked once per iteration. Type Parameters Name Description TSource The type of the source in the encapsulated while-loop. Exceptions Type Condition System.ArgumentNullException condition is null -or- method is null. condition delegate does not target an instance method on source TypeArgumentException source does not match the source of the condition delegate target. | Improve this Doc While<TSource, T>(TSource, Func<Boolean>, Action<TSource, T>, T) Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, T>(TSource source, Func<bool> condition, Action<TSource, T> method, T arg) where TSource : class Parameters Type Name Description TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Func < System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . System.Action <TSource, T> method The delegate that is invoked once per iteration. T arg The parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated while-loop. T The type of the parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException condition is null -or- method is null. condition delegate does not target an instance method on source TypeArgumentException source does not match the source of the condition delegate target. | Improve this Doc While<TSource, T1, T2>(TSource, Func<Boolean>, Action<TSource, T1, T2>, T1, T2) Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, T1, T2>(TSource source, Func<bool> condition, Action<TSource, T1, T2> method, T1 arg1, T2 arg2) where TSource : class Parameters Type Name Description TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Func < System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . System.Action <TSource, T1, T2> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated while-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException condition is null -or- method is null. condition delegate does not target an instance method on source TypeArgumentException source does not match the source of the condition delegate target. | Improve this Doc While<TSource, T1, T2, T3>(TSource, Func<Boolean>, Action<TSource, T1, T2, T3>, T1, T2, T3) Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, T1, T2, T3>(TSource source, Func<bool> condition, Action<TSource, T1, T2, T3> method, T1 arg1, T2 arg2, T3 arg3) where TSource : class Parameters Type Name Description TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Func < System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . System.Action <TSource, T1, T2, T3> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated while-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException condition is null -or- method is null. condition delegate does not target an instance method on source TypeArgumentException source does not match the source of the condition delegate target. | Improve this Doc While<TSource, T1, T2, T3, T4>(TSource, Func<Boolean>, Action<TSource, T1, T2, T3, T4>, T1, T2, T3, T4) Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, T1, T2, T3, T4>(TSource source, Func<bool> condition, Action<TSource, T1, T2, T3, T4> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TSource : class Parameters Type Name Description TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Func < System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . System.Action <TSource, T1, T2, T3, T4> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated while-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException condition is null -or- method is null. condition delegate does not target an instance method on source TypeArgumentException source does not match the source of the condition delegate target. | Improve this Doc While<TSource, T1, T2, T3, T4, T5>(TSource, Func<Boolean>, Action<TSource, T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code. Declaration public static void While<TSource, T1, T2, T3, T4, T5>(TSource source, Func<bool> condition, Action<TSource, T1, T2, T3, T4, T5> method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) where TSource : class Parameters Type Name Description TSource source The object being iterated in the encapsulated while-loop by the condition delegate. System.Func < System.Boolean > condition The condition delegate of the while-loop that is invoked once per iteration and is a member of source . System.Action <TSource, T1, T2, T3, T4, T5> method The delegate that is invoked once per iteration. T1 arg1 The first parameter of the delegate method . T2 arg2 The second parameter of the delegate method . T3 arg3 The third parameter of the delegate method . T4 arg4 The fourth parameter of the delegate method . T5 arg5 The fifth parameter of the delegate method . Type Parameters Name Description TSource The type of the source in the encapsulated while-loop. T1 The type of the first parameter of the delegate method . T2 The type of the second parameter of the delegate method . T3 The type of the third parameter of the delegate method . T4 The type of the fourth parameter of the delegate method . T5 The type of the fifth parameter of the delegate method . Exceptions Type Condition System.ArgumentNullException condition is null -or- method is null. condition delegate does not target an instance method on source TypeArgumentException source does not match the source of the condition delegate target. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ChecksumBuilderExtensions.html": {
    "href": "api/core/Cuemon.Integrity.ChecksumBuilderExtensions.html",
    "title": "Class ChecksumBuilderExtensions | Cuemon .NET Standard",
    "keywords": "Class ChecksumBuilderExtensions Extension methods for the ChecksumBuilder . Inheritance System.Object ChecksumBuilderExtensions Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public static class ChecksumBuilderExtensions Methods | Improve this Doc CombineWith<T>(T, Byte[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params byte[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.Byte [] additionalChecksum An array of bytes containing a checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, Double[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params double[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.Double [] additionalChecksum A System.Double array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, Int16[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params short[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.Int16 [] additionalChecksum An System.Int16 array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, Int32[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params int[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.Int32 [] additionalChecksum An System.Int32 array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, Int64[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params long[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.Int64 [] additionalChecksum An System.Int64 array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, Single[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params float[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.Single [] additionalChecksum A System.Single array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, String[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params string[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.String [] additionalChecksum A System.String array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, UInt16[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params ushort[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.UInt16 [] additionalChecksum An System.UInt16 array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, UInt32[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params uint[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.UInt32 [] additionalChecksum An System.UInt32 array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . | Improve this Doc CombineWith<T>(T, UInt64[]) Combines the additionalChecksum to the representation of this instance. Declaration public static T CombineWith<T>(this T cb, params ulong[] additionalChecksum) where T : ChecksumBuilder Parameters Type Name Description T cb An instance of a ChecksumBuilder . System.UInt64 [] additionalChecksum An System.UInt64 array that contains zero or more checksum of the additional data this instance must represent. Returns Type Description T An updated instance the specified cb of T . Type Parameters Name Description T The type of the ChecksumBuilder . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Integrity.ChecksumBuilder.html": {
    "href": "api/core/Cuemon.Integrity.ChecksumBuilder.html",
    "title": "Class ChecksumBuilder | Cuemon .NET Standard",
    "keywords": "Class ChecksumBuilder Provides a way to fluently represent checksum values of arbitrary data. Inheritance System.Object ChecksumBuilder CacheValidator Namespace : Cuemon.Integrity Assembly : Cuemon.Integrity.dll Syntax public class ChecksumBuilder Constructors | Improve this Doc ChecksumBuilder() Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder() | Improve this Doc ChecksumBuilder(Byte[], Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(byte[] checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.Byte [] checksum An array of bytes containing a checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(Double, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(double checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.Double checksum A System.Double value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(Int16, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(short checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.Int16 checksum A System.Int16 value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(Int32, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(int checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.Int32 checksum A System.Int32 value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(Int64, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(long checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.Int64 checksum A System.Int64 value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(Single, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(float checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.Single checksum A System.Single value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(String, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(string checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.String checksum A System.String value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(UInt16, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(ushort checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.UInt16 checksum A System.UInt16 value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(UInt32, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(uint checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.UInt32 checksum A System.UInt32 value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. | Improve this Doc ChecksumBuilder(UInt64, Action<ChecksumBuilderOptions>) Initializes a new instance of the ChecksumBuilder class. Declaration public ChecksumBuilder(ulong checksum, Action<ChecksumBuilderOptions> setup = null) Parameters Type Name Description System.UInt64 checksum A System.UInt64 value containing a byte-for-byte checksum of the data this instance represents. System.Action < ChecksumBuilderOptions > setup The ChecksumBuilderOptions which need to be configured. Properties | Improve this Doc AlgorithmType Gets the hash algorithm to use for the checksum computation. Declaration public HashAlgorithmType AlgorithmType { get; protected set; } Property Value Type Description HashAlgorithmType The hash algorithm to use for the checksum computation. | Improve this Doc Checksum Gets a ChecksumResult containing a computed hash value of the data this instance represents. Declaration public ChecksumResult Checksum { get; } Property Value Type Description ChecksumResult A ChecksumResult containing a computed hash value of the data this instance represents. Methods | Improve this Doc Equals(ChecksumBuilder) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ChecksumBuilder other) Parameters Type Name Description ChecksumBuilder other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current System.Object . Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() | Improve this Doc ToString() Converts the the Cuemon.Integrity.ChecksumBuilder.Bytes of this instance to its equivalent hexadecimal representation. Declaration public override string ToString() Returns Type Description System.String A hexadecimal representation of this instance. Overrides System.Object.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) ChecksumBuilderExtensions.CombineWith<T>(T, Double[]) ChecksumBuilderExtensions.CombineWith<T>(T, Int16[]) ChecksumBuilderExtensions.CombineWith<T>(T, String[]) ChecksumBuilderExtensions.CombineWith<T>(T, Int32[]) ChecksumBuilderExtensions.CombineWith<T>(T, Int64[]) ChecksumBuilderExtensions.CombineWith<T>(T, Single[]) ChecksumBuilderExtensions.CombineWith<T>(T, UInt16[]) ChecksumBuilderExtensions.CombineWith<T>(T, UInt32[]) ChecksumBuilderExtensions.CombineWith<T>(T, UInt64[]) ChecksumBuilderExtensions.CombineWith<T>(T, Byte[]) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.DynamicComparer.html": {
    "href": "api/core/Cuemon.Collections.Generic.DynamicComparer.html",
    "title": "Class DynamicComparer | Cuemon .NET Standard",
    "keywords": "Class DynamicComparer Provides a factory based way to create and wrap an System.Collections.Generic.IComparer<T> implementation. Inheritance System.Object DynamicComparer Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class DynamicComparer Methods | Improve this Doc Create<T>(Func<T, T, Int32>) Creates a dynamic instance of an System.Collections.Generic.IComparer<T> implementation wrapping System.Collections.Generic.IComparer<T>.Compare(T, T) through comparer . Declaration public static IComparer<T> Create<T>(Func<T, T, int> comparer) Parameters Type Name Description System.Func <T, T, System.Int32 > comparer The function delegate that performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other. Returns Type Description System.Collections.Generic.IComparer <T> A dynamic instance of System.Collections.Generic.IComparer<T> that serves as a sort order comparer for type T . Type Parameters Name Description T The type of objects to compare. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.DictionaryUtilityExtensions.html": {
    "href": "api/core/Cuemon.Collections.Generic.DictionaryUtilityExtensions.html",
    "title": "Class DictionaryUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class DictionaryUtilityExtensions This is an extension implementation of the most common methods on the DictionaryUtility class. Inheritance System.Object DictionaryUtilityExtensions Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public static class DictionaryUtilityExtensions Methods | Improve this Doc AddIfNotContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Adds an element with the provided key and value to the System.Collections.Generic.IDictionary<TKey, TValue> , if the key is not contained within the source . Declaration public static void AddIfNotContainsKey<TKey, TValue>(this IDictionary<TKey, TValue> source, TKey key, TValue value) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source The System.Collections.Generic.IDictionary<TKey, TValue> to perform the operation. TKey key The object to use as the key of the element to add. TValue value The object to use as the value of the element to add. Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. | Improve this Doc AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Adds or updates an existing element with the provided key in the System.Collections.Generic.IDictionary<TKey, TValue> with the specified value . Declaration public static void AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> source, TKey key, TValue value) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source The System.Collections.Generic.IDictionary<TKey, TValue> to perform the operation. TKey key The object to use as the key of the element to add. TValue value The object to use as the value of the element to add or update. Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary. | Improve this Doc FirstMatchOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey[]) Returns the first TValue matching one of the specified keys in a System.Collections.Generic.IDictionary<TKey, TValue> , or a default value if the source contains no elements or no match was found. Declaration public static TValue FirstMatchOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> source, params TKey[] keys) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source The System.Collections.Generic.IDictionary<TKey, TValue> to return a matching TValue from. TKey[] keys A variable number of keys to match in the specified source . Returns Type Description TValue default(TValue) if source is empty or no match was found; otherwise, the matching element in source . Type Parameters Name Description TKey The System.Type of the key. TValue The System.Type of the value. Remarks The default value for reference and nullable types is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.ByteExtensions.html": {
    "href": "api/core/Cuemon.ByteExtensions.html",
    "title": "Class ByteExtensions | Cuemon .NET Standard",
    "keywords": "Class ByteExtensions This is an extension implementation of the System.Byte structure using various methods already found in the Microsoft .NET Framework. Inheritance System.Object ByteExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class ByteExtensions Methods | Improve this Doc ToBase64(Byte[]) Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Declaration public static string ToBase64(this byte[] value) Parameters Type Name Description System.Byte [] value An array of 8-bit unsigned integers. Returns Type Description System.String The string representation, in base 64, of the contents of value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Collections.Generic.ReferenceComparer-1.html": {
    "href": "api/core/Cuemon.Collections.Generic.ReferenceComparer-1.html",
    "title": "Class ReferenceComparer<T> | Cuemon .NET Standard",
    "keywords": "Class ReferenceComparer<T> Provides object hierarchy comparison. Inheritance System.Object System.Collections.Generic.Comparer <T> ReferenceComparer<T> Implements System.Collections.Generic.IComparer <T> System.Collections.IComparer Inherited Members System.Collections.Generic.Comparer<T>.Create(System.Comparison<T>) System.Collections.Generic.Comparer<T>.System.Collections.IComparer.Compare(System.Object, System.Object) Namespace : Cuemon.Collections.Generic Assembly : Cuemon.Core.dll Syntax public class ReferenceComparer<T> : Comparer<T>, IComparer<T>, IComparer where T : class Type Parameters Name Description T The type of objects to compare. Properties | Improve this Doc Default Returns a default comparer for the type specified by the generic argument. Declaration public static IComparer<T> Default { get; } Property Value Type Description System.Collections.Generic.IComparer <T> Methods | Improve this Doc Compare(T, T) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public override int Compare(T x, T y) Parameters Type Name Description T x The first object to compare. T y The second object to compare. Returns Type Description System.Int32 A signed integer that indicates the relative values of x and y, as explained here: Less than zero - x is less than y. Zero - x equals y. Greater than zero - x is greater than y. Overrides System.Collections.Generic.Comparer<T>.Compare(T, T) Implements System.Collections.Generic.IComparer<T> System.Collections.IComparer Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.FaultDescriptorFilter.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.FaultDescriptorFilter.html",
    "title": "Class FaultDescriptorFilter | Cuemon .NET Standard",
    "keywords": "Class FaultDescriptorFilter A filter that, after an action has faulted, provides developer friendly information about an System.Exception along with a correct System.Net.HttpStatusCode . Inheritance System.Object Configurable < FaultDescriptorOptions > FaultDescriptorFilter Implements IConfigurable < FaultDescriptorOptions > Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members Configurable<FaultDescriptorOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters.Diagnostics Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class FaultDescriptorFilter : Configurable<FaultDescriptorOptions>, IConfigurable<FaultDescriptorOptions>, IExceptionFilter, IFilterMetadata Constructors | Improve this Doc FaultDescriptorFilter(IOptions<FaultDescriptorOptions>) Initializes a new instance of the FaultDescriptorFilter class. Declaration public FaultDescriptorFilter(IOptions<FaultDescriptorOptions> setup) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < FaultDescriptorOptions > setup The FaultDescriptorOptions which need to be configured. Methods | Improve this Doc OnException(ExceptionContext) Called after an action has thrown an System.Exception . Declaration public void OnException(ExceptionContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ExceptionContext context The Microsoft.AspNetCore.Mvc.Filters.ExceptionContext . Implements IConfigurable<TOptions> Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ConfigurableFactoryFilter-1.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.ConfigurableFactoryFilter-1.html",
    "title": "Class ConfigurableFactoryFilter<TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableFactoryFilter<TOptions> A base class implementation of a filter metadata which can create an instance of an executable filter. Inheritance System.Object Configurable <TOptions> ConfigurableFactoryFilter<TOptions> Implements IConfigurable <TOptions> Microsoft.AspNetCore.Mvc.Filters.IFilterFactory Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members Configurable<TOptions>.Options Namespace : Cuemon.AspNetCore.Mvc.Filters Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public abstract class ConfigurableFactoryFilter<TOptions> : Configurable<TOptions>, IConfigurable<TOptions>, IFilterFactory, IFilterMetadata where TOptions : class, new() Type Parameters Name Description TOptions The type of the configured options. Constructors | Improve this Doc ConfigurableFactoryFilter(IOptions<TOptions>) Initializes a new instance of the ConfigurableFactoryFilter<TOptions> class. Declaration protected ConfigurableFactoryFilter(IOptions<TOptions> setup) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableFactoryFilter(Action<TOptions>) Initializes a new instance of the ConfigurableFactoryFilter<TOptions> class. Declaration protected ConfigurableFactoryFilter(Action<TOptions> setup) Parameters Type Name Description System.Action <TOptions> setup The System.Action<T> which need to be configured. Properties | Improve this Doc IsReusable Gets a value that indicates if the result of Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(System.IServiceProvider) can be reused across requests. Declaration public virtual bool IsReusable { get; } Property Value Type Description System.Boolean true if this instance is reusable; otherwise, false . Methods | Improve this Doc CreateInstance(IServiceProvider) Creates an instance of the executable filter. Declaration public abstract IFilterMetadata CreateInstance(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The request System.IServiceProvider . Returns Type Description Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata An instance of the executable filter. Implements IConfigurable<TOptions> Microsoft.AspNetCore.Mvc.Filters.IFilterFactory Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Configurable <TOptions> Microsoft.AspNetCore.Mvc.Filters.IFilterFactory (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpEntityTagHeader.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpEntityTagHeader.html",
    "title": "Class HttpEntityTagHeader | Cuemon .NET Standard",
    "keywords": "Class HttpEntityTagHeader A filter that computes the response body and applies an appropriate HTTP Etag header. Inheritance System.Object HttpEntityTagHeader Implements IConfigurable < HttpEntityTagHeaderOptions > ICacheableAsyncResultFilter Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class HttpEntityTagHeader : IConfigurable<HttpEntityTagHeaderOptions>, ICacheableAsyncResultFilter Constructors | Improve this Doc HttpEntityTagHeader(Action<HttpEntityTagHeaderOptions>) Initializes a new instance of the HttpEntityTagHeader class. Declaration public HttpEntityTagHeader(Action<HttpEntityTagHeaderOptions> setup) Parameters Type Name Description System.Action < HttpEntityTagHeaderOptions > setup The HttpEntityTagHeaderOptions which need to be configured. Properties | Improve this Doc Options Gets the configured options of this instance. Declaration public HttpEntityTagHeaderOptions Options { get; } Property Value Type Description HttpEntityTagHeaderOptions The configured options of this instance. Methods | Improve this Doc OnResultExecutionAsync(ResultExecutingContext, ResultExecutionDelegate) Called asynchronously before the action result. Declaration public Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext context The Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext . Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate next The Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate . Invoked to execute the next result filter or the result itself. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion indicates the filter has executed. Implements IConfigurable<TOptions> ICacheableAsyncResultFilter Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also HttpCacheableFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Cuemon .NET Standard",
    "keywords": "Class ServiceCollectionExtensions Extension methods for the Microsoft.Extensions.DependencyInjection.IServiceCollection interface. Inheritance System.Object ServiceCollectionExtensions Namespace : Cuemon.AspNetCore.Mvc.DependencyInjection Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc AddCacheBusting(IServiceCollection) Adds a cache-busting service to the specified Microsoft.Extensions.DependencyInjection.IServiceCollection based on a default instance of AssemblyCacheBusting . Declaration public static IServiceCollection AddCacheBusting(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection An Microsoft.Extensions.DependencyInjection.IServiceCollection that can be used to further configure other services. | Improve this Doc AddCacheBusting<T>(IServiceCollection) Adds a cache-busting service to the specified Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static IServiceCollection AddCacheBusting<T>(this IServiceCollection services) where T : CacheBusting Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection An Microsoft.Extensions.DependencyInjection.IServiceCollection that can be used to further configure other services. Type Parameters Name Description T (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Breadcrumb.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Breadcrumb.html",
    "title": "Class Breadcrumb | Cuemon .NET Standard",
    "keywords": "Class Breadcrumb Represents a breadcrumb that can be used for navigation purposes on a website. Inheritance System.Object Breadcrumb Namespace : Cuemon.AspNetCore.Mvc Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class Breadcrumb Properties | Improve this Doc ActionName Gets the name of the action that this breadcrumb represents. Declaration public string ActionName { get; } Property Value Type Description System.String The name of the action that this breadcrumb represents. | Improve this Doc ControllerName Gets the name of the controller this breadcrumb is associated with. Declaration public string ControllerName { get; } Property Value Type Description System.String The name of the controller this breadcrumb is associated with. | Improve this Doc Label Gets or sets the label of the breadcrumb. Declaration public string Label { get; set; } Property Value Type Description System.String The label of the breadcrumb. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Integrity.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Integrity.html",
    "title": "Namespace Cuemon.AspNetCore.Integrity | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Integrity Assembly : Cuemon.AspNetCore.dll Classes CacheValidatorExtensions Extension methods for the CacheValidator class. ChecksumBuilderExtensions Extension methods for the ChecksumBuilder class. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Http.HeaderDictionaryExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Http.HeaderDictionaryExtensions.html",
    "title": "Class HeaderDictionaryExtensions | Cuemon .NET Standard",
    "keywords": "Class HeaderDictionaryExtensions Extension methods for the Microsoft.AspNetCore.Http.IHeaderDictionary interface. Inheritance System.Object HeaderDictionaryExtensions Namespace : Cuemon.AspNetCore.Http Assembly : Cuemon.AspNetCore.dll Syntax public static class HeaderDictionaryExtensions Methods | Improve this Doc AddOrUpdateHeader(IHeaderDictionary, String, StringValues, Boolean) Adds an element with the provided key and value to the Microsoft.AspNetCore.Http.IHeaderDictionary . Declaration public static void AddOrUpdateHeader(this IHeaderDictionary dic, string key, StringValues value, bool useAsciiEncodingConversion = true) Parameters Type Name Description Microsoft.AspNetCore.Http.IHeaderDictionary dic The Microsoft.AspNetCore.Http.IHeaderDictionary to extend. System.String key The string to use as the key of the element to add. Microsoft.Extensions.Primitives.StringValues value The string to use as the value of the element to add. System.Boolean useAsciiEncodingConversion if set to true an ASCII encoding conversion is applied to the value . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.UriScheme.html": {
    "href": "api/core/Cuemon.UriScheme.html",
    "title": "Enum UriScheme | Cuemon .NET Standard",
    "keywords": "Enum UriScheme Defines the schemes available for an System.Uri class. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public enum UriScheme Fields Name Description File Specifies that the URI is a pointer to a file. Ftp Specifies that the URI is accessed through the File Transfer Protocol (FTP). Gopher Specifies that the URI is accessed through the Gopher protocol. Http Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP). Https Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS). Mailto Specifies that the URI is an e-mail address and is accessed through the Simple Mail Transport Protocol (SMTP). NetPipe Specifies that the URI is accessed through the NetPipe scheme of the \"Indigo\" system. NetTcp Specifies that the URI is accessed through the NetTcp scheme of the \"Indigo\" system. News Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP). Nntp Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP). Undefined Specifies an undefined scheme. Extension Methods ByteConverterExtensions.ToByteArray<UriScheme>() ConverterExtensions.ParseWith<UriScheme, TResult>(Func<UriScheme, TResult>) ConverterExtensions.ParseWith<UriScheme, T, TResult>(Func<UriScheme, T, TResult>, T) ConverterExtensions.ParseWith<UriScheme, T1, T2, TResult>(Func<UriScheme, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<UriScheme, T1, T2, T3, TResult>(Func<UriScheme, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<UriScheme, T1, T2, T3, T4, TResult>(Func<UriScheme, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<UriScheme, T1, T2, T3, T4, T5, TResult>(Func<UriScheme, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<UriScheme, T1, T2, T3, T4, T5, T6, TResult>(Func<UriScheme, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<UriScheme, T1, T2, T3, T4, T5, T6, T7, TResult>(Func<UriScheme, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<UriScheme, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<UriScheme, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<UriScheme, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<UriScheme, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>() ConverterExtensions.As<TResult>(TResult) ConverterExtensions.As<TResult>(TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<UriScheme>() DelegateUtilityExtensions.DynamicWrap<UriScheme>() TweakerExtensions.Adjust<UriScheme>(Func<UriScheme, UriScheme>) TypeUtilityExtensions.Is<T>() TypeUtilityExtensions.IsNot<T>() TypeUtilityExtensions.IsNullable<UriScheme>() WrapperExtensions.UseWrapper<UriScheme>(Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<UriScheme>(MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<UriScheme>() HashUtilityExtensions.ComputeHash(Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-4.html": {
    "href": "api/core/Cuemon.TesterFunc-4.html",
    "title": "Delegate TesterFunc<T1, T2, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, TResult, TSuccess> Encapsulates a method that has two parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, TResult, out TSuccess>(T1 arg1, T2 arg2, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-3.html": {
    "href": "api/core/Cuemon.TesterFunc-3.html",
    "title": "Delegate TesterFunc<T, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T, TResult, TSuccess> Encapsulates a method that has one parameter and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T, TResult, out TSuccess>(T arg, out TResult result); Parameters Type Name Description T arg The parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T The type of the parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-2.html": {
    "href": "api/core/Cuemon.TesterFunc-2.html",
    "title": "Delegate TesterFunc<TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<TResult, TSuccess> Encapsulates a method and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<TResult, out TSuccess>(out TResult result); Parameters Type Name Description TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-18.html": {
    "href": "api/core/Cuemon.TesterFunc-18.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. T9 arg9 The ninth parameter of the method that this function delegate encapsulates. T10 arg10 The tenth parameter of the method that this function delegate encapsulates. T11 arg11 The eleventh parameter of the method that this function delegate encapsulates. T12 arg12 The twelfth parameter of the method that this function delegate encapsulates. T13 arg13 The thirteenth parameter of the method that this function delegate encapsulates. T14 arg14 The fourteenth parameter of the method that this function delegate encapsulates. T15 arg15 The fifteenth parameter of the method that this function delegate encapsulates. T16 arg16 The sixteenth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. T9 The type of the ninth parameter of the method that this function delegate encapsulates. T10 The type of the tenth parameter of the method that this function delegate encapsulates. T11 The type of the eleventh parameter of the method that this function delegate encapsulates. T12 The type of the twelfth parameter of the method that this function delegate encapsulates. T13 The type of the thirteenth parameter of the method that this function delegate encapsulates. T14 The type of the fourteenth parameter of the method that this function delegate encapsulates. T15 The type of the fifteenth parameter of the method that this function delegate encapsulates. T16 The type of the sixteenth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StringFormatter.html": {
    "href": "api/core/Cuemon.StringFormatter.html",
    "title": "Class StringFormatter | Cuemon .NET Standard",
    "keywords": "Class StringFormatter This utility class is designed to make System.String related formating operations easier to work with. Inheritance System.Object StringFormatter Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class StringFormatter Methods | Improve this Doc FromDateTime(DateTime, DateTimeFormatPattern) Returns a string expression representing a standardized date- and time value. Declaration public static string FromDateTime(DateTime value, DateTimeFormatPattern pattern) Parameters Type Name Description System.DateTime value The System.DateTime value to be formatted. DateTimeFormatPattern pattern The standardized patterns to apply on value . Returns Type Description System.String Returns a string expression representing a date- and time value. | Improve this Doc FromDateTime(DateTime, DateTimeFormatPattern, IFormatProvider) Returns a string expression representing a standardized date- and time value. Declaration public static string FromDateTime(DateTime value, DateTimeFormatPattern pattern, IFormatProvider provider) Parameters Type Name Description System.DateTime value The System.DateTime value to be formatted. DateTimeFormatPattern pattern The standardized patterns to apply on value . System.IFormatProvider provider An System.IFormatProvider that supplies culture-specific formatting information. Returns Type Description System.String Returns a string expression representing a date- and time value. | Improve this Doc FromDateTime(DateTime, StandardizedDateTimeFormatPattern) Returns a string expression representing a standardized date- and time value. Declaration public static string FromDateTime(DateTime value, StandardizedDateTimeFormatPattern pattern) Parameters Type Name Description System.DateTime value The System.DateTime value to be formatted. StandardizedDateTimeFormatPattern pattern The standardized patterns to apply on value . Returns Type Description System.String Returns a string expression representing a date- and time value. | Improve this Doc FromDateTime(DateTime, StandardizedDateTimeFormatPattern, Byte) Returns a string expression representing a standardized date- and time value. Declaration public static string FromDateTime(DateTime value, StandardizedDateTimeFormatPattern pattern, byte fractionalDecimalPlaces) Parameters Type Name Description System.DateTime value The System.DateTime value to be formatted. StandardizedDateTimeFormatPattern pattern The standardized patterns to apply on value . System.Byte fractionalDecimalPlaces The amount of fractional decimal places to apply to the string expression. Returns Type Description System.String Returns a string expression representing a date- and time value. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StringExtensions.html": {
    "href": "api/core/Cuemon.StringExtensions.html",
    "title": "Class StringExtensions | Cuemon .NET Standard",
    "keywords": "Class StringExtensions This is an extension implementation of the System.String class using various methods already found in the Microsoft .NET Framework. Inheritance System.Object StringExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class StringExtensions Methods | Improve this Doc FormatWith(String, IFormatProvider, Object[]) Replaces the format item in a specified string with the string representation of a corresponding object in a specified array. Declaration public static string FormatWith(this string format, IFormatProvider provider, params object[] args) Parameters Type Name Description System.String format A composite format string. System.IFormatProvider provider An object that supplies culture-specific formatting information. System.Object [] args An object array that contains zero or more objects to format. Returns Type Description System.String A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args . | Improve this Doc FormatWith(String, Object[]) Replaces the format item in a specified string with the string representation of a corresponding object in a specified array. Declaration public static string FormatWith(this string format, params object[] args) Parameters Type Name Description System.String format A composite format string. System.Object [] args An object array that contains zero or more objects to format. Returns Type Description System.String A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args . | Improve this Doc FromBase64(String) Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Declaration public static byte[] FromBase64(this string value) Parameters Type Name Description System.String value The string to convert. Returns Type Description System.Byte [] An array of 8-bit unsigned integers that is equivalent to value . | Improve this Doc IsNullOrEmpty(String) Determines whether the specified value is null or an System.String.Empty string. Declaration public static bool IsNullOrEmpty(this string value) Parameters Type Name Description System.String value The string to test. Returns Type Description System.Boolean true if the value is null or an empty string (\"\"); otherwise, false . | Improve this Doc IsNullOrWhiteSpace(String) Determines whether the specified value is null, empty, or consists only of white-space characters. Declaration public static bool IsNullOrWhiteSpace(this string value) Parameters Type Name Description System.String value The string to test. Returns Type Description System.Boolean true if the value parameter is null or an empty string (\"\"), or if value consists exclusively of white-space characters; otherwise, false . | Improve this Doc Join(String[], String) Concatenates all the elements of a string array, using the specified separator between each element. Declaration public static string Join(this string[] value, string separator) Parameters Type Name Description System.String [] value An array that contains the elements to concatenate. System.String separator The string to use as a separator. The separator is included in the returned string only if value has more than one element. Returns Type Description System.String A string that consists of the elements in value delimited by the separator string. If value is an empty array, the method returns System.String.Empty . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc Join(String[], String, Int32, Int32) Concatenates all the elements of a string array, using the specified separator between each element. Declaration public static string Join(this string[] value, string separator, int startIndex, int count) Parameters Type Name Description System.String [] value An array that contains the elements to concatenate. System.String separator The string to use as a separator. The separator is included in the returned string only if value has more than one element. System.Int32 startIndex The first element in value to use. System.Int32 count The number of elements of value to use. Returns Type Description System.String A string that consists of the elements in value delimited by the separator string. If value is an empty array, the method returns System.String.Empty . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc SubstringBefore(String, String, StringComparison) Retrieves a substring from the specified value . The substring starts at position 0 and continues until the first occurrence of match . Declaration public static string SubstringBefore(this string value, string match, StringComparison comparisonType = StringComparison.OrdinalIgnoreCase) Parameters Type Name Description System.String value The System.String to extend. System.String match The match that will define the stopping point. System.StringComparison comparisonType One of the enumeration values that specifies the rules for the search. Returns Type Description System.String A substring that contains only the value just before match . | Improve this Doc ToCasing(String, CasingMethod) Converts the specified value to either lowercase, UPPERCASE, Title Case or unaltered. Declaration public static string ToCasing(this string value, CasingMethod method) Parameters Type Name Description System.String value The value to convert to one of the values in CasingMethod . CasingMethod method The method to use in the conversion. Returns Type Description System.String A System.String that corresponds to value with the applied conversion method . Remarks Uses System.Globalization.CultureInfo.InvariantCulture for the conversion. | Improve this Doc ToCasing(String, CasingMethod, CultureInfo) Converts the specified value to either lowercase, UPPERCASE, Title Case or unaltered using the specified culture . Declaration public static string ToCasing(this string value, CasingMethod method, CultureInfo culture) Parameters Type Name Description System.String value The value to convert to one of the values in CasingMethod . CasingMethod method The method to use in the conversion. System.Globalization.CultureInfo culture The culture rules to apply the conversion. Returns Type Description System.String A System.String that corresponds to value with the applied conversion method . | Improve this Doc ToUri(String) Converts the specified absolute uriString to its equivalent System.Uri representation. Declaration public static Uri ToUri(this string uriString) Parameters Type Name Description System.String uriString A string that identifies the resource to be represented by the System.Uri instance. Returns Type Description System.Uri A System.Uri that corresponds to uriString . Remarks This method uses the System.UriKind.Absolute when converting the uriString . | Improve this Doc ToUri(String, UriKind) Converts the specified uriString to its equivalent System.Uri representation. Declaration public static Uri ToUri(this string uriString, UriKind uriKind) Parameters Type Name Description System.String uriString A string that identifies the resource to be represented by the System.Uri instance. System.UriKind uriKind Specifies whether the URI string is a relative URI, absolute URI, or is indeterminate. Returns Type Description System.Uri A System.Uri that corresponds to uriString and uriKind . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.StringConverterExtensions.html": {
    "href": "api/core/Cuemon.StringConverterExtensions.html",
    "title": "Class StringConverterExtensions | Cuemon .NET Standard",
    "keywords": "Class StringConverterExtensions This is an extension implementation of the StringConverter class. Inheritance System.Object StringConverterExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class StringConverterExtensions Methods | Improve this Doc FromChars(IEnumerable<Char>) Converts the specified value to its equivalent System.String representation. Declaration public static string FromChars(this IEnumerable<char> value) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Char > value The System.Char sequence to convert. Returns Type Description System.String A System.String equivalent to the specified value . | Improve this Doc FromHexadecimal(String, Action<EncodingOptions>) Converts the specified hexadecimal value to its equivalent System.String representation. Declaration public static string FromHexadecimal(this string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The hexadecimal string to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A System.String representation of the hexadecimal characters in value . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc ToBinary(Byte[]) Converts the specified value to its equivalent binary representation. Declaration public static string ToBinary(this byte[] value) Parameters Type Name Description System.Byte [] value The byte array to be converted. Returns Type Description System.String A binary System.String representation of the elements in value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>) Converts the specified source to a string of comma delimited values. Declaration public static string ToDelimitedString<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. Returns Type Description System.String A System.String of comma delimited values. Type Parameters Name Description TSource The type of the source to convert. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>, String) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource>(this IEnumerable<TSource> source, string delimiter) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of elements to be converted. System.String delimiter The delimiter specification. Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource>(this IEnumerable<TSource> source, string delimiter, Func<TSource, string> converter) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of elements to be converted. System.String delimiter The delimiter specification. System.Func <TSource, System.String > converter The function delegate that converts TSource to a string representation once per iteration. Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource>(this IEnumerable<TSource> source, string delimiter, string format) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of elements to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. | Improve this Doc ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource>(this IEnumerable<TSource> source, string delimiter, string format, Func<TSource, string> converter) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of elements to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, System.String > converter The function delegate that converts TSource to a string representation once per iteration. Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. | Improve this Doc ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T>(this IEnumerable<TSource> source, string delimiter, Func<TSource, T, string> converter, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T arg The parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T The type of the parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T>(this IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T, string> converter, T arg) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T arg The parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T The type of the parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2>(this IEnumerable<TSource> source, string delimiter, Func<TSource, T1, T2, string> converter, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T1, T2, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2>(this IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T1, T2, string> converter, T1 arg1, T2 arg2) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T1, T2, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3>(this IEnumerable<TSource> source, string delimiter, Func<TSource, T1, T2, T3, string> converter, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T1, T2, T3, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3>(this IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T1, T2, T3, string> converter, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T1, T2, T3, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3, T4>(this IEnumerable<TSource> source, string delimiter, Func<TSource, T1, T2, T3, T4, string> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T1, T2, T3, T4, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3, T4>(this IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T1, T2, T3, T4, string> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T1, T2, T3, T4, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3, T4, T5>(this IEnumerable<TSource> source, string delimiter, Func<TSource, T1, T2, T3, T4, T5, string> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.Func <TSource, T1, T2, T3, T4, T5, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . | Improve this Doc ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) Converts the specified source to a string of delimiter delimited values. Declaration public static string ToDelimitedString<TSource, T1, T2, T3, T4, T5>(this IEnumerable<TSource> source, string delimiter, string format, Func<TSource, T1, T2, T3, T4, T5, string> converter, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A collection of values to be converted. System.String delimiter The delimiter specification. System.String format The desired format of the converted values. System.Func <TSource, T1, T2, T3, T4, T5, System.String > converter The function delegate that converts TSource to a string representation once per iteration. T1 arg1 The first parameter of the function delegate converter . T2 arg2 The second parameter of the function delegate converter . T3 arg3 The third parameter of the function delegate converter . T4 arg4 The fourth parameter of the function delegate converter . T5 arg5 The fifth parameter of the function delegate converter . Returns Type Description System.String A System.String of delimited values from the by parameter specified delimiter. Type Parameters Name Description TSource The type of the elements of the sequence to convert. T1 The type of the first parameter of the function delegate converter . T2 The type of the second parameter of the function delegate converter . T3 The type of the third parameter of the function delegate converter . T4 The type of the fourth parameter of the function delegate converter . T5 The type of the fifth parameter of the function delegate converter . | Improve this Doc ToEncodedString(Byte[], Action<EncodingOptions>) Converts the specified value to a string using the provided preferred encoding. Declaration public static string ToEncodedString(this byte[] value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.Byte [] value The byte array to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A System.String containing the results of decoding the specified sequence of bytes. Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc ToEncodedString(Exception, Boolean) Renders the exception to a human readable System.String . Declaration public static string ToEncodedString(this Exception exception, bool includeStackTrace) Parameters Type Name Description System.Exception exception The System.Exception to render human readable. System.Boolean includeStackTrace if set to true the stack trace of the exception is included in the rendered result. Returns Type Description System.String A human readable System.String variant of the specified exception . | Improve this Doc ToEncodedString(Exception, Boolean, Encoding) Renders the exception to a human readable System.String . Declaration public static string ToEncodedString(this Exception exception, bool includeStackTrace, Encoding encoding) Parameters Type Name Description System.Exception exception The System.Exception to render human readable. System.Boolean includeStackTrace if set to true the stack trace of the exception is included in the rendered result. System.Text.Encoding encoding The encoding to use when rendering the exception . Returns Type Description System.String A human readable System.String variant of the specified exception . | Improve this Doc ToEncodedString(Stream, Action<EncodingOptions>) Converts the specified value to a string using the provided preferred encoding. Declaration public static string ToEncodedString(this Stream value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A System.String containing the decoded result of the specified value . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc ToEncodedString(Stream, Action<EncodingOptions>, Boolean) Converts the specified value to a string using the provided preferred encoding. Declaration public static string ToEncodedString(this Stream value, Action<EncodingOptions> setup, bool leaveStreamOpen) Parameters Type Name Description System.IO.Stream value The System.IO.Stream to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. System.Boolean leaveStreamOpen if true , the System.IO.Stream object is being left open; otherwise it is being closed and disposed. Returns Type Description System.String A System.String containing the decoded result of the specified value . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc ToEnumerable(IEnumerable<Char>) Converts the specified value to its equivalent System.String sequence. Declaration public static IEnumerable<string> ToEnumerable(this IEnumerable<char> value) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Char > value The value to convert into a sequence. Returns Type Description System.Collections.Generic.IEnumerable < System.String > A System.String sequence equivalent to the specified value . | Improve this Doc ToFriendlyName(Type) Converts the name of the source with the intend to be understood by humans. Declaration public static string ToFriendlyName(this Type source) Parameters Type Name Description System.Type source The type to sanitize the name from. Returns Type Description System.String A sanitized System.String representation of source . Remarks Only the simple name of the source is returned, not the fully qualified name. | Improve this Doc ToFriendlyName(Type, Boolean) Converts the name of the source with the intend to be understood by humans. Declaration public static string ToFriendlyName(this Type source, bool fullName) Parameters Type Name Description System.Type source The type to sanitize the name from. System.Boolean fullName Specify true to use the fully qualified name of the source ; otherwise, false for the simple name of source . Returns Type Description System.String A sanitized System.String representation of source . | Improve this Doc ToFriendlyName(Type, Boolean, Boolean) Converts the name of the source with the intend to be understood by humans. Declaration public static string ToFriendlyName(this Type source, bool fullName, bool excludeGenericArguments) Parameters Type Name Description System.Type source The type to sanitize the name from. System.Boolean fullName Specify true to use the fully qualified name of the source ; otherwise, false for the simple name of source . System.Boolean excludeGenericArguments Specify true to exclude generic arguments from the result; otherwise false to include generic arguments should the source be a generic type. Returns Type Description System.String A sanitized System.String representation of source . | Improve this Doc ToHexadecimal(Byte[]) Converts the specified value to its equivalent hexadecimal representation. Declaration public static string ToHexadecimal(this byte[] value) Parameters Type Name Description System.Byte [] value The byte array to be converted. Returns Type Description System.String A hexadecimal System.String representation of the elements in value . Exceptions Type Condition System.ArgumentNullException value is null. | Improve this Doc ToHexadecimal(String, Action<EncodingOptions>) Converts the specified value to its equivalent hexadecimal representation. Declaration public static string ToHexadecimal(this string value, Action<EncodingOptions> setup = null) Parameters Type Name Description System.String value The string to be converted. System.Action < EncodingOptions > setup The EncodingOptions which need to be configured. Returns Type Description System.String A hexadecimal System.String representation of the characters in value . Remarks EncodingOptions will be initialized with DefaultPreambleSequence and DefaultEncoding . | Improve this Doc ToUrlEncodedBase64(Byte[]) Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL. Declaration public static string ToUrlEncodedBase64(this byte[] value) Parameters Type Name Description System.Byte [] value The byte array to encode. Returns Type Description System.String The string containing the encoded token if the byte array length is greater than one; otherwise, an empty string (\"\"). (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Middleware-2.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Middleware-2.html",
    "title": "Class Middleware<T1, T2> | Cuemon .NET Standard",
    "keywords": "Class Middleware<T1, T2> Provides a base-class for middleware implementation in ASP.NET Core with two dependency injected parameters. Inheritance System.Object MiddlewareCore Middleware<T1, T2> Inherited Members MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class Middleware<T1, T2> : MiddlewareCore Type Parameters Name Description T1 The type of the first dependency injected parameter of InvokeAsync(HttpContext, T1, T2) . T2 The type of the second dependency injected parameter of InvokeAsync(HttpContext, T1, T2) . Constructors | Improve this Doc Middleware(RequestDelegate) Initializes a new instance of the Middleware class. Declaration protected Middleware(RequestDelegate next) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Methods | Improve this Doc InvokeAsync(HttpContext, T1, T2) Executes the Middleware<T1, T2> . Declaration public abstract Task InvokeAsync(HttpContext context, T1 di1, T2 di2) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T1 di1 The first dependency injected parameter of InvokeAsync(HttpContext, T1, T2) . T2 di2 The second dependency injected parameter of InvokeAsync(HttpContext, T1, T2) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also ConfigurableMiddleware <T1, T2, TOptions> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Http.HttpResponseExtensions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Http.HttpResponseExtensions.html",
    "title": "Class HttpResponseExtensions | Cuemon .NET Standard",
    "keywords": "Class HttpResponseExtensions Extension methods for the Microsoft.AspNetCore.Http.HttpResponse class. Inheritance System.Object HttpResponseExtensions Namespace : Cuemon.AspNetCore.Http Assembly : Cuemon.AspNetCore.dll Syntax public static class HttpResponseExtensions Methods | Improve this Doc IsNotModifiedStatusCode(HttpResponse) Determines whether the HTTP response equals a 304 Not Modified. Declaration public static bool IsNotModifiedStatusCode(this HttpResponse response) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpResponse response An instance of the Microsoft.AspNetCore.Http.HttpResponse object. Returns Type Description System.Boolean true if Microsoft.AspNetCore.Http.HttpResponse.StatusCode is NotModified (304); otherwise, false . | Improve this Doc IsSuccessStatusCode(HttpResponse) Determines whether the HTTP response was successful. Declaration public static bool IsSuccessStatusCode(this HttpResponse response) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpResponse response An instance of the Microsoft.AspNetCore.Http.HttpResponse object. Returns Type Description System.Boolean true if Microsoft.AspNetCore.Http.HttpResponse.StatusCode was in the Successful range (200-299); otherwise, false . | Improve this Doc SetEntityTagHeaderInformation(HttpResponse, HttpRequest, ChecksumBuilder, Boolean) This method will either add or update the necessary HTTP response headers needed to provide entity tag header information. Declaration public static void SetEntityTagHeaderInformation(this HttpResponse response, HttpRequest request, ChecksumBuilder builder, bool isWeak = false) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpResponse response The Microsoft.AspNetCore.Http.HttpResponse to extend. Microsoft.AspNetCore.Http.HttpRequest request An instance of the Microsoft.AspNetCore.Http.HttpRequest object. ChecksumBuilder builder A ChecksumBuilder that represents the integrity of the client. System.Boolean isWeak A value that indicates if this entity-tag header is a weak validator. | Improve this Doc SetLastModifiedHeaderInformation(HttpResponse, HttpRequest, DateTime) This method will either add or update the necessary HTTP response headers needed to provide last-modified information. Declaration public static void SetLastModifiedHeaderInformation(this HttpResponse response, HttpRequest request, DateTime lastModified) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpResponse response The Microsoft.AspNetCore.Http.HttpResponse to extend. Microsoft.AspNetCore.Http.HttpRequest request An instance of the Microsoft.AspNetCore.Http.HttpRequest object. System.DateTime lastModified A value that represents when the resource was either created or last modified. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-6.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.ConfigurableMiddleware-6.html",
    "title": "Class ConfigurableMiddleware<T1, T2, T3, T4, T5, TOptions> | Cuemon .NET Standard",
    "keywords": "Class ConfigurableMiddleware<T1, T2, T3, T4, T5, TOptions> Provides an base-class for configurable middleware implementation in ASP.NET Core that supports the options pattern with five dependency injected parameters. Inheritance System.Object MiddlewareCore ConfigurableMiddlewareCore <TOptions> ConfigurableMiddleware<T1, T2, T3, T4, T5, TOptions> Implements IConfigurable <TOptions> Inherited Members ConfigurableMiddlewareCore<TOptions>.Options MiddlewareCore.Next Namespace : Cuemon.AspNetCore Assembly : Cuemon.AspNetCore.dll Syntax public abstract class ConfigurableMiddleware<T1, T2, T3, T4, T5, TOptions> : ConfigurableMiddlewareCore<TOptions>, IConfigurable<TOptions> where TOptions : class, new() Type Parameters Name Description T1 The type of the first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T2 The type of the second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T3 The type of the third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T4 The type of the fourth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T5 The type of the fifth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . TOptions The type of the options to setup. Constructors | Improve this Doc ConfigurableMiddleware(RequestDelegate, IOptions<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, IOptions<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. Microsoft.Extensions.Options.IOptions <TOptions> setup The Microsoft.Extensions.Options.IOptions<TOptions> which need to be configured. | Improve this Doc ConfigurableMiddleware(RequestDelegate, Action<TOptions>) Initializes a new instance of the ConfigurableMiddleware<TOptions> class. Declaration protected ConfigurableMiddleware(RequestDelegate next, Action<TOptions> setup) Parameters Type Name Description Microsoft.AspNetCore.Http.RequestDelegate next The delegate of the request pipeline to invoke. System.Action <TOptions> setup The System.Action<T> which need to be configured. Methods | Improve this Doc InvokeAsync(HttpContext, T1, T2, T3, T4, T5) Executes the ConfigurableMiddleware<T1, T2, T3, T4, T5, TOptions> . Declaration public abstract Task InvokeAsync(HttpContext context, T1 di1, T2 di2, T3 di3, T4 di4, T5 di5) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context The context of the current request. T1 di1 The first dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T2 di2 The second dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T3 di3 The third dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T4 di4 The fourth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . T5 di5 The fifth dependency injected parameter of InvokeAsync(HttpContext, T1, T2, T3, T4, T5) . Returns Type Description System.Threading.Tasks.Task A task that represents the execution of this middleware. Implements IConfigurable<TOptions> Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Middleware <T1, T2, T3, T4, T5> (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticationParameters.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.HmacAuthenticationParameters.html",
    "title": "Class HmacAuthenticationParameters | Cuemon .NET Standard",
    "keywords": "Class HmacAuthenticationParameters Represents a set of parameters that is needed for creating a keyed-hash message authentication code (HMAC). Inheritance System.Object HmacAuthenticationParameters Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public class HmacAuthenticationParameters Properties | Improve this Doc Algorithm Gets the algorithm of the HMAC. Default is SHA1 . Declaration public HmacAlgorithmType Algorithm { get; } Property Value Type Description HmacAlgorithmType The algorithm of the HMAC. | Improve this Doc Message Gets the message to compute a hash code for. Declaration public string Message { get; } Property Value Type Description System.String The message to compute a hash code for. | Improve this Doc PrivateKey Gets the secret key for the hashed encryption. Declaration public byte[] PrivateKey { get; } Property Value Type Description System.Byte [] The secret key for the hashed encryption. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.TimeMeasureAttribute.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Diagnostics.TimeMeasureAttribute.html",
    "title": "Class TimeMeasureAttribute | Cuemon .NET Standard",
    "keywords": "Class TimeMeasureAttribute Represents an attribute that is used to mark an action method for time measure profiling. Inheritance System.Object System.Attribute Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute TimeMeasureAttribute Implements Microsoft.AspNetCore.Mvc.Filters.IActionFilter Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter Microsoft.AspNetCore.Mvc.Filters.IResultFilter Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter Microsoft.AspNetCore.Mvc.Filters.IFilterFactory Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Inherited Members Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext) Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext) Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate) Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext) Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext) Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate) Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.Order System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId Namespace : Cuemon.AspNetCore.Mvc.Filters.Diagnostics Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class TimeMeasureAttribute : ActionFilterAttribute, IActionFilter, IAsyncActionFilter, IResultFilter, IAsyncResultFilter, IOrderedFilter, IFilterFactory, IFilterMetadata Constructors | Improve this Doc TimeMeasureAttribute() Initializes a new instance of the TimeMeasureAttribute class. Declaration public TimeMeasureAttribute() | Improve this Doc TimeMeasureAttribute(Double, TimeUnit) Initializes a new instance of the TimeMeasureAttribute class. Declaration public TimeMeasureAttribute(double threshold, TimeUnit thresholdTimeUnit) Parameters Type Name Description System.Double threshold The System.Double value that in combination with thresholdTimeUnit specifies the threshold of the action method. TimeUnit thresholdTimeUnit One of the enumeration values that specifies the time unit of threshold . Properties | Improve this Doc IsReusable Gets a value that indicates if the result of Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(System.IServiceProvider) can be reused across requests. Declaration public bool IsReusable { get; } Property Value Type Description System.Boolean true if this instance is reusable; otherwise, false . | Improve this Doc Threshold Gets or sets the value that in combination with ThresholdTimeUnit specifies the threshold of the action method. Declaration public double Threshold { get; set; } Property Value Type Description System.Double The threshold value of the action method. | Improve this Doc ThresholdTimeUnit Gets or sets one of the enumeration values that specifies the time unit of Threshold . Declaration public TimeUnit ThresholdTimeUnit { get; set; } Property Value Type Description TimeUnit The TimeUnit that defines the actual Threshold . Methods | Improve this Doc CreateInstance(IServiceProvider) Creates an instance of the executable filter. Declaration public IFilterMetadata CreateInstance(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The request System.IServiceProvider . Returns Type Description Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata An instance of the executable filter. Implements Microsoft.AspNetCore.Mvc.Filters.IActionFilter Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter Microsoft.AspNetCore.Mvc.Filters.IResultFilter Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter Microsoft.AspNetCore.Mvc.Filters.IFilterFactory Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpEntityTagHeaderOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Filters.Cacheable.HttpEntityTagHeaderOptions.html",
    "title": "Class HttpEntityTagHeaderOptions | Cuemon .NET Standard",
    "keywords": "Class HttpEntityTagHeaderOptions Specifies options that is related to the HttpEntityTagHeader . Inheritance System.Object HttpEntityTagHeaderOptions Namespace : Cuemon.AspNetCore.Mvc.Filters.Cacheable Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class HttpEntityTagHeaderOptions Constructors | Improve this Doc HttpEntityTagHeaderOptions() Initializes a new instance of the HttpEntityTagHeaderOptions class. Declaration public HttpEntityTagHeaderOptions() Remarks The following table shows the initial property values for an instance of HttpEntityTagHeaderOptions . Property Initial Value EntityTagProvider (integrity, context) => { var builder = new ChecksumBuilder(integrity.Checksum.Value); context.Response.SetEntityTagHeaderInformation(context.Request, builder, integrity.ChecksumStrength == ChecksumStrength.Weak); }; EntityTagResponseParser (body, request, response) => { var builder = new ChecksumBuilder(body.ComputeHash(o => { o.AlgorithmType = HashAlgorithmType.MD5; o.LeaveStreamOpen = true; }).Value); response.SetEntityTagHeaderInformation(request, builder); }; UseEntityTagResponseParser false Properties | Improve this Doc EntityTagProvider Gets or sets the delegate that is invoked when a result of a Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext is an Microsoft.AspNetCore.Mvc.ObjectResult and the value is an ICacheableIntegrity implementation. Declaration public Action<ICacheableIntegrity, HttpContext> EntityTagProvider { get; set; } Property Value Type Description System.Action < ICacheableIntegrity , Microsoft.AspNetCore.Http.HttpContext > The delegate that provides an HTTP ETag header. | Improve this Doc EntityTagResponseParser Gets or sets the delegate that is invoked as a fallback from the EntityTagProvider when UseEntityTagResponseParser is set to true . Declaration public Action<Stream, HttpRequest, HttpResponse> EntityTagResponseParser { get; set; } Property Value Type Description System.Action < System.IO.Stream , Microsoft.AspNetCore.Http.HttpRequest , Microsoft.AspNetCore.Http.HttpResponse > The delegate that computes a HTTP ETag from the Microsoft.AspNetCore.Http.HttpResponse.Body . | Improve this Doc HasEntityTagProvider Gets a value indicating whether this instance has an EntityTagProvider . Declaration public bool HasEntityTagProvider { get; } Property Value Type Description System.Boolean true if this instance has an EntityTagProvider ; otherwise, false . | Improve this Doc HasEntityTagResponseParser Gets a value indicating whether this instance has an EntityTagResponseParser . Declaration public bool HasEntityTagResponseParser { get; } Property Value Type Description System.Boolean true if this instance has an EntityTagResponseParser ; otherwise, false . | Improve this Doc UseEntityTagResponseParser Gets or sets a value indicating whether to use computation of the HTTP ETag header reading and copying the Microsoft.AspNetCore.Http.HttpResponse.Body . Declaration public bool UseEntityTagResponseParser { get; set; } Property Value Type Description System.Boolean true to compute the HTTP ETag header from reading and copying the Microsoft.AspNetCore.Http.HttpResponse.Body ; otherwise, false . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also HttpCacheableFilter (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.ExceptionDescriptorResult.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.ExceptionDescriptorResult.html",
    "title": "Class ExceptionDescriptorResult | Cuemon .NET Standard",
    "keywords": "Class ExceptionDescriptorResult An Microsoft.AspNetCore.Mvc.ObjectResult that when executed will produce a response that varies depending on the encapsulated System.Exception . Inheritance System.Object Microsoft.AspNetCore.Mvc.ActionResult Microsoft.AspNetCore.Mvc.ObjectResult ExceptionDescriptorResult Implements Microsoft.AspNetCore.Mvc.IActionResult Inherited Members Microsoft.AspNetCore.Mvc.ObjectResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext) Microsoft.AspNetCore.Mvc.ObjectResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext) Microsoft.AspNetCore.Mvc.ObjectResult.Value Microsoft.AspNetCore.Mvc.ObjectResult.Formatters Microsoft.AspNetCore.Mvc.ObjectResult.ContentTypes Microsoft.AspNetCore.Mvc.ObjectResult.DeclaredType Microsoft.AspNetCore.Mvc.ObjectResult.StatusCode Microsoft.AspNetCore.Mvc.ActionResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext) Namespace : Cuemon.AspNetCore.Mvc Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class ExceptionDescriptorResult : ObjectResult, IActionResult Constructors | Improve this Doc ExceptionDescriptorResult(ExceptionDescriptor) Initializes a new instance of the ExceptionDescriptorResult class. Declaration public ExceptionDescriptorResult(ExceptionDescriptor value) Parameters Type Name Description ExceptionDescriptor value The descriptor value to return. Implements Microsoft.AspNetCore.Mvc.IActionResult Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also Microsoft.AspNetCore.Mvc.ObjectResult (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.AssemblyCacheBustingOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.Configuration.AssemblyCacheBustingOptions.html",
    "title": "Class AssemblyCacheBustingOptions | Cuemon .NET Standard",
    "keywords": "Class AssemblyCacheBustingOptions Specifies options that is related to AssemblyCacheBustingOptions operations. Inheritance System.Object CacheBustingOptions AssemblyCacheBustingOptions Inherited Members CacheBustingOptions.PreferredCasing Namespace : Cuemon.AspNetCore.Mvc.Configuration Assembly : Cuemon.AspNetCore.Mvc.dll Syntax public class AssemblyCacheBustingOptions : CacheBustingOptions Constructors | Improve this Doc AssemblyCacheBustingOptions() Initializes a new instance of the AssemblyCacheBustingOptions class. Declaration public AssemblyCacheBustingOptions() Remarks The following table shows the initial property values for an instance of DynamicCacheBustingOptions . Property Initial Value Assembly System.Reflection.Assembly.GetEntryAssembly() AlgorithmType CRC32 ReadByteForByteChecksum false Properties | Improve this Doc AlgorithmType Gets or sets the hash algorithm to use for the computation of Assembly . Declaration public HashAlgorithmType AlgorithmType { get; set; } Property Value Type Description HashAlgorithmType The hash algorithm to use for the computation of Assembly . | Improve this Doc Assembly Gets or sets the assembly that should be used as reference for the cache-busting. Declaration public Assembly Assembly { get; set; } Property Value Type Description System.Reflection.Assembly The assembly that should be used as reference for the cache-busting. | Improve this Doc ReadByteForByteChecksum Gets or sets a value indicating whether the Assembly will be read byte-for-byte when computing the checksum. Declaration public bool ReadByteForByteChecksum { get; set; } Property Value Type Description System.Boolean true if the Assembly will be read byte-for-byte when computing the checksum; otherwise, false . Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also CacheBustingOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationOptions.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Authentication.DigestAccessAuthenticationOptions.html",
    "title": "Class DigestAccessAuthenticationOptions | Cuemon .NET Standard",
    "keywords": "Class DigestAccessAuthenticationOptions Configuration options for DigestAccessAuthenticationMiddleware . This class cannot be inherited. Inheritance System.Object AuthenticationOptions DigestAccessAuthenticationOptions Inherited Members AuthenticationOptions.RequireSecureConnection AuthenticationOptions.HttpNotAuthorizedBody Namespace : Cuemon.AspNetCore.Authentication Assembly : Cuemon.AspNetCore.Authentication.dll Syntax public sealed class DigestAccessAuthenticationOptions : AuthenticationOptions Constructors | Improve this Doc DigestAccessAuthenticationOptions() Initializes a new instance of the DigestAccessAuthenticationOptions class. Declaration public DigestAccessAuthenticationOptions() Properties | Improve this Doc Algorithm Gets or sets the algorithm of the HTTP Digest Access Authentication. Default is MD5 . Declaration public HashAlgorithmType Algorithm { get; set; } Property Value Type Description HashAlgorithmType The algorithm of the HTTP Digest Access Authentication. | Improve this Doc Authenticator Gets or sets the function delegate that will perform the authentication from the specified username . Declaration public DigestAccessAuthenticator Authenticator { get; set; } Property Value Type Description DigestAccessAuthenticator The function delegate that will perform the authentication. | Improve this Doc DigestAccessSigner Gets or sets the function delegate that will sign a message retrieved from a HTTP request. Declaration public Func<DigestAccessAuthenticationParameters, byte[]> DigestAccessSigner { get; set; } Property Value Type Description System.Func < DigestAccessAuthenticationParameters , System.Byte []> The function delegate that will sign a message. | Improve this Doc NonceExpiredParser Gets or sets the function delegate for parsing nonce string values for expiration. Declaration public Func<string, TimeSpan, bool> NonceExpiredParser { get; set; } Property Value Type Description System.Func < System.String , System.TimeSpan , System.Boolean > The function delegate for parsing nonce string values for expiration. | Improve this Doc NonceGenerator Gets or sets the function delegate for generating nonce string values. Declaration public Func<DateTime, string, byte[], string> NonceGenerator { get; set; } Property Value Type Description System.Func < System.DateTime , System.String , System.Byte [], System.String > The function delegate for generating nonce string values. | Improve this Doc NonceSecret Gets or sets the function delegate for retrieving the cryptographic secret used in nonce string values. Declaration public Func<byte[]> NonceSecret { get; set; } Property Value Type Description System.Func < System.Byte []> The function delegate for retrieving the cryptographic secret used in nonce string values. | Improve this Doc OpaqueGenerator Gets or sets the function delegate for generating opaque string values. Declaration public Func<string> OpaqueGenerator { get; set; } Property Value Type Description System.Func < System.String > The function delegate for generating opaque string values. | Improve this Doc Realm Gets the realm that defines the protection space. Declaration public string Realm { get; set; } Property Value Type Description System.String The realm that defines the protection space. Extension Methods CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Action<TimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Byte[], Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, Byte[]>, Action<ContentBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Byte[], Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, DateTime, Func<T, Byte[]>, Action<ContentTimeBasedOptions>) CacheableObjectResultExtensions.ToCacheableObjectResult<T>(T, Func<T, DateTime>, Byte[], Action<ContentTimeBasedOptions>) See Also AuthenticationOptions (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Xml.Linq.XElementExtensions.html": {
    "href": "api/core/Cuemon.Xml.Linq.XElementExtensions.html",
    "title": "Class XElementExtensions | Cuemon .NET Standard",
    "keywords": "Class XElementExtensions Extension methods for the System.Xml.Linq.XElement . Inheritance System.Object XElementExtensions Namespace : Cuemon.Xml.Linq Assembly : Cuemon.Xml.dll Syntax public static class XElementExtensions Methods | Improve this Doc IsXmlString(String) Determines whether the specified value is a valid XML string. Declaration public static bool IsXmlString(this string value) Parameters Type Name Description System.String value The value to evaluate. Returns Type Description System.Boolean true if the specified value is a valid XML string; otherwise, false . | Improve this Doc TryParseXElement(String, LoadOptions, out XElement) Tries to load an System.Xml.Linq.XElement from a value that contains XML, optionally preserving white space and retaining line information. Declaration public static bool TryParseXElement(this string value, LoadOptions options, out XElement result) Parameters Type Name Description System.String value A System.String that contains XML. System.Xml.Linq.LoadOptions options A System.Xml.Linq.LoadOptions that specifies white space behavior, and whether to load base URI and line information. System.Xml.Linq.XElement result When this method returns, it contains the System.Xml.Linq.XElement populated from the value that contains XML, if the conversion succeeded, or a null reference (Nothing in Visual Basic) if the conversion failed. Returns Type Description System.Boolean true if the value parameter was converted successfully; otherwise, false . | Improve this Doc TryParseXElement(String, out XElement) Tries to load an System.Xml.Linq.XElement from a value that contains XML. Declaration public static bool TryParseXElement(this string value, out XElement result) Parameters Type Name Description System.String value A System.String that contains XML. System.Xml.Linq.XElement result When this method returns, it contains the System.Xml.Linq.XElement populated from the value that contains XML, if the conversion succeeded, or a null reference (Nothing in Visual Basic) if the conversion failed. Returns Type Description System.Boolean true if the value parameter was converted successfully; otherwise, false . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.WrapperExtensions.html": {
    "href": "api/core/Cuemon.WrapperExtensions.html",
    "title": "Class WrapperExtensions | Cuemon .NET Standard",
    "keywords": "Class WrapperExtensions Extension methods for the IWrapper<T> . Inheritance System.Object WrapperExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class WrapperExtensions Methods | Improve this Doc UseWrapper<T>(T, Action<IDictionary<String, Object>>) Wrap and extend an existing object of T with additional data. Declaration public static IWrapper<T> UseWrapper<T>(this T instance, Action<IDictionary<string, object>> extender = null) Parameters Type Name Description T instance The instance to wrap and extend. System.Action < System.Collections.Generic.IDictionary < System.String , System.Object >> extender The delegate that provides an easy way of supplying additional data to an object. Returns Type Description IWrapper <T> An implementation of IWrapper<T> encapsulating the specified instance . Type Parameters Name Description T The type of the object to extend. | Improve this Doc UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) Wrap and extend an existing object of T with additional data. Declaration public static IWrapper<T> UseWrapper<T>(this T instance, MemberInfo memberReference, Action<IDictionary<string, object>> extender = null) Parameters Type Name Description T instance The instance to wrap and extend. System.Reflection.MemberInfo memberReference The optional member reference to assign MemberReference . System.Action < System.Collections.Generic.IDictionary < System.String , System.Object >> extender The delegate that provides an easy way of supplying additional data to an object. Returns Type Description IWrapper <T> An implementation of IWrapper<T> encapsulating the specified instance . Type Parameters Name Description T The type of the object to extend. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Wrapper.html": {
    "href": "api/core/Cuemon.Wrapper.html",
    "title": "Class Wrapper | Cuemon .NET Standard",
    "keywords": "Class Wrapper Provides helper method for a Wrapper<T> object. Inheritance System.Object Wrapper Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class Wrapper Methods | Improve this Doc ParseInstance<T>(IWrapper<T>) Parses the encapsulated instance of the specified wrapper for a human-readable string value. Declaration public static string ParseInstance<T>(IWrapper<T> wrapper) Parameters Type Name Description IWrapper <T> wrapper The wrapper object to parse the instance. Returns Type Description System.String A human-readable System.String representation of the wrapped instance in the Wrapper<T> object. Type Parameters Name Description T The type of the encapsulated instance of wrapper . Exceptions Type Condition System.ArgumentNullException wrapper is null. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.TesterFunc-16.html": {
    "href": "api/core/Cuemon.TesterFunc-16.html",
    "title": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, TSuccess> | Cuemon .NET Standard",
    "keywords": "Delegate TesterFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, TSuccess> Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the TSuccess parameter and returns a out result value of the type specified by the TResult parameter. Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public delegate TSuccess TesterFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, TResult, out TSuccess>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result); Parameters Type Name Description T1 arg1 The first parameter of the method that this function delegate encapsulates. T2 arg2 The second parameter of the method that this function delegate encapsulates. T3 arg3 The third parameter of the method that this function delegate encapsulates. T4 arg4 The fourth parameter of the method that this function delegate encapsulates. T5 arg5 The fifth parameter of the method that this function delegate encapsulates. T6 arg6 The sixth parameter of the method that this function delegate encapsulates. T7 arg7 The seventh parameter of the method that this function delegate encapsulates. T8 arg8 The eighth parameter of the method that this function delegate encapsulates. T9 arg9 The ninth parameter of the method that this function delegate encapsulates. T10 arg10 The tenth parameter of the method that this function delegate encapsulates. T11 arg11 The eleventh parameter of the method that this function delegate encapsulates. T12 arg12 The twelfth parameter of the method that this function delegate encapsulates. T13 arg13 The thirteenth parameter of the method that this function delegate encapsulates. T14 arg14 The fourteenth parameter of the method that this function delegate encapsulates. TResult result The result of the method that this function delegate encapsulates. Returns Type Description TSuccess The return value that indicates success of the method that this function delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this function delegate encapsulates. T2 The type of the second parameter of the method that this function delegate encapsulates. T3 The type of the third parameter of the method that this function delegate encapsulates. T4 The type of the fourth parameter of the method that this function delegate encapsulates. T5 The type of the fourth parameter of the method that this function delegate encapsulates. T6 The type of the sixth parameter of the method that this function delegate encapsulates. T7 The type of the seventh parameter of the method that this function delegate encapsulates. T8 The type of the eighth parameter of the method that this function delegate encapsulates. T9 The type of the ninth parameter of the method that this function delegate encapsulates. T10 The type of the tenth parameter of the method that this function delegate encapsulates. T11 The type of the eleventh parameter of the method that this function delegate encapsulates. T12 The type of the twelfth parameter of the method that this function delegate encapsulates. T13 The type of the thirteenth parameter of the method that this function delegate encapsulates. T14 The type of the fourteenth parameter of the method that this function delegate encapsulates. TResult The type of the out result value of the method that this function delegate encapsulates. TSuccess The type of the return value that indicates success of the method that this function delegate encapsulates. Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Template-15.html": {
    "href": "api/core/Cuemon.Template-15.html",
    "title": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> | Cuemon .NET Standard",
    "keywords": "Class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Represents a Template with fifteen generic values. Inheritance System.Object Template Template <T1> Template <T1, T2> Template <T1, T2, T3> Template <T1, T2, T3, T4> Template <T1, T2, T3, T4, T5> Template <T1, T2, T3, T4, T5, T6> Template <T1, T2, T3, T4, T5, T6, T7> Template <T1, T2, T3, T4, T5, T6, T7, T8> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Template <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Inherited Members Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Arg14 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Arg13 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Arg12 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Arg11 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Arg10 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Arg9 Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Clone() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Arg8 Template<T1, T2, T3, T4, T5, T6, T7, T8>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7, T8>.Clone() Template<T1, T2, T3, T4, T5, T6, T7>.Arg7 Template<T1, T2, T3, T4, T5, T6, T7>.ToArray() Template<T1, T2, T3, T4, T5, T6, T7>.Clone() Template<T1, T2, T3, T4, T5, T6>.Arg6 Template<T1, T2, T3, T4, T5, T6>.ToArray() Template<T1, T2, T3, T4, T5, T6>.Clone() Template<T1, T2, T3, T4, T5>.Arg5 Template<T1, T2, T3, T4, T5>.ToArray() Template<T1, T2, T3, T4, T5>.Clone() Template<T1, T2, T3, T4>.Arg4 Template<T1, T2, T3, T4>.ToArray() Template<T1, T2, T3, T4>.Clone() Template<T1, T2, T3>.Arg3 Template<T1, T2, T3>.ToArray() Template<T1, T2, T3>.Clone() Template<T1, T2>.Arg2 Template<T1, T2>.ToArray() Template<T1, T2>.Clone() Template<T1>.Arg1 Template<T1>.IsEmpty Template.ToString() Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public class Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Type Parameters Name Description T1 The type of the first parameter of this Template . T2 The type of the second parameter of this Template . T3 The type of the third parameter of this Template . T4 The type of the fourth parameter of this Template . T5 The type of the fifth parameter of this Template . T6 The type of the sixth parameter of this Template . T7 The type of the seventh parameter of this Template . T8 The type of the eighth parameter of this Template . T9 The type of the ninth parameter of this Template . T10 The type of the tenth parameter of this Template . T11 The type of the eleventh parameter of this Template . T12 The type of the twelfth parameter of this Template . T13 The type of the thirteenth parameter of this Template . T14 The type of the fourteenth parameter of this Template . T15 The type of the fifteenth parameter of this Template . Remarks Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. The name, Template, was inspired by the Variadic Template in C++. Constructors | Improve this Doc Template(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Initializes a new instance of the Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class. Declaration public Template(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) Parameters Type Name Description T1 arg1 The value of the first parameter of this Template . T2 arg2 The value of the second parameter of this Template . T3 arg3 The value of the third parameter of this Template . T4 arg4 The value of the fourth parameter of this Template . T5 arg5 The value of the fifth parameter of this Template . T6 arg6 The value of the sixth parameter of this Template . T7 arg7 The value of the seventh parameter of this Template . T8 arg8 The value of the eighth parameter of this Template . T9 arg9 The value of the ninth parameter of this Template . T10 arg10 The value of the tenth parameter of this Template . T11 arg11 The value of the eleventh parameter of this Template . T12 arg12 The value of the twelfth parameter of this Template . T13 arg13 The value of the thirteenth parameter of this Template . T14 arg14 The value of the fourteenth parameter of this Template . T15 arg15 The value of the fifteenth parameter of this Template . Properties | Improve this Doc Arg15 Gets or sets the fifteenth parameter of this instance. Declaration public T15 Arg15 { get; set; } Property Value Type Description T15 The fifteenth parameter of this instance. Methods | Improve this Doc Clone() Creates a shallow copy of the current Template object. Declaration public override Template Clone() Returns Type Description Template A new Template that is a copy of this instance. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Clone() Remarks When thread safety is required this is the method to invoke. | Improve this Doc ToArray() Returns an array of objects that represent the arguments passed to this instance. Declaration public override object[] ToArray() Returns Type Description System.Object [] An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments. Overrides Cuemon.Template<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.ToArray() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.NumberUtilityExtensions.html": {
    "href": "api/core/Cuemon.NumberUtilityExtensions.html",
    "title": "Class NumberUtilityExtensions | Cuemon .NET Standard",
    "keywords": "Class NumberUtilityExtensions This is an extension implementation of the most common methods on the NumberUtility class. Inheritance System.Object NumberUtilityExtensions Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class NumberUtilityExtensions Methods | Improve this Doc BytesToGigabytes(Int64) Converts the specified bytes to its equivalent representation in gigabytes. Declaration public static double BytesToGigabytes(this long bytes) Parameters Type Name Description System.Int64 bytes The bytes to be converted. Returns Type Description System.Double A gigabyte representation equivalent to the specified bytes . | Improve this Doc BytesToKilobytes(Int64) Converts the specified bytes to its equivalent representation in kilobytes. Declaration public static double BytesToKilobytes(this long bytes) Parameters Type Name Description System.Int64 bytes The bytes to be converted. Returns Type Description System.Double A kilobyte representation equivalent to the specified bytes . | Improve this Doc BytesToMegabytes(Int64) Converts the specified bytes to its equivalent representation in megabytes. Declaration public static double BytesToMegabytes(this long bytes) Parameters Type Name Description System.Int64 bytes The bytes to be converted. Returns Type Description System.Double A megabyte representation equivalent to the specified bytes . | Improve this Doc BytesToTerabytes(Int64) Converts the specified bytes to its equivalent representation in terabytes. Declaration public static double BytesToTerabytes(this long bytes) Parameters Type Name Description System.Int64 bytes The bytes to be converted. Returns Type Description System.Double A terabyte representation equivalent to the specified bytes . | Improve this Doc Factorial(Double) Calculates the factorial of a positive integer n denoted by n!. Declaration public static double Factorial(this double n) Parameters Type Name Description System.Double n The positive integer to calculate a factorial number by. Returns Type Description System.Double The factorial number calculated from n , or System.Double.PositiveInfinity if n is to high a value. | Improve this Doc IsCountableSequence(IEnumerable<Int32>) Determines whether the specified source is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence). Declaration public static bool IsCountableSequence(this IEnumerable<int> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > source The value to test for a sequence of countable characters. Returns Type Description System.Boolean true if the specified source is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence); otherwise, false . | Improve this Doc IsCountableSequence(IEnumerable<Int64>) Determines whether the specified source is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence). Declaration public static bool IsCountableSequence(this IEnumerable<long> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int64 > source The value to test for a sequence of countable characters. Returns Type Description System.Boolean true if the specified source is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence); otherwise, false . | Improve this Doc IsEven(Int32) Determines whether the specified value is an even number. Declaration public static bool IsEven(this int value) Parameters Type Name Description System.Int32 value The value to evaluate. Returns Type Description System.Boolean true if the specified value is an even number; otherwise, false . | Improve this Doc IsOdd(Int32) Determines whether the specified value is an odd number. Declaration public static bool IsOdd(this int value) Parameters Type Name Description System.Int32 value The value to evaluate. Returns Type Description System.Boolean true if the specified value is an odd number; otherwise, false . | Improve this Doc IsPrime(Int32) Determines whether the specified value is a prime number. Declaration public static bool IsPrime(this int value) Parameters Type Name Description System.Int32 value The positive integer to determine whether is a prime number. Returns Type Description System.Boolean true if the specified value is a prime number; otherwise, false . Exceptions Type Condition System.ArgumentException value has a value smaller than 0. | Improve this Doc RoundOff(Double, RoundOffAccuracy) Rounds a double-precision floating-point value to the nearest integral value closest to the specified accuracy . Declaration public static double RoundOff(this double value, RoundOffAccuracy accuracy) Parameters Type Name Description System.Double value A double-precision floating-point number to be rounded. RoundOffAccuracy accuracy The accuracy to use in the rounding. Returns Type Description System.Double The integer value closest to the specified accuracy of value . Note that this method returns a System.Double instead of an integral type. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.NumberUtility.html": {
    "href": "api/core/Cuemon.NumberUtility.html",
    "title": "Class NumberUtility | Cuemon .NET Standard",
    "keywords": "Class NumberUtility This utility class is designed to make number operations easier to work with. Inheritance System.Object NumberUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class NumberUtility Methods | Improve this Doc BytesToGigabytes(Int64) Converts the specified bytes to its equivalent representation in gigabytes. Declaration public static double BytesToGigabytes(long bytes) Parameters Type Name Description System.Int64 bytes The bytes to be converted. Returns Type Description System.Double A gigabyte representation equivalent to the specified bytes . | Improve this Doc BytesToKilobytes(Int64) Converts the specified bytes to its equivalent representation in kilobytes. Declaration public static double BytesToKilobytes(long bytes) Parameters Type Name Description System.Int64 bytes The bytes to be converted. Returns Type Description System.Double A kilobyte representation equivalent to the specified bytes . | Improve this Doc BytesToMegabytes(Int64) Converts the specified bytes to its equivalent representation in megabytes. Declaration public static double BytesToMegabytes(long bytes) Parameters Type Name Description System.Int64 bytes The bytes to be converted. Returns Type Description System.Double A megabyte representation equivalent to the specified bytes . | Improve this Doc BytesToTerabytes(Int64) Converts the specified bytes to its equivalent representation in terabytes. Declaration public static double BytesToTerabytes(long bytes) Parameters Type Name Description System.Int64 bytes The bytes to be converted. Returns Type Description System.Double A terabyte representation equivalent to the specified bytes . | Improve this Doc Factorial(Double) Calculates the factorial of a positive integer n denoted by n!. Declaration public static double Factorial(double n) Parameters Type Name Description System.Double n The positive integer to calculate a factorial number by. Returns Type Description System.Double The factorial number calculated from n , or System.Double.PositiveInfinity if n is to high a value. | Improve this Doc GetHighestValue(Decimal[]) Gets the highest System.Decimal value of the specified System.Decimal values. Declaration public static decimal GetHighestValue(params decimal[] values) Parameters Type Name Description System.Decimal [] values A variable number of System.Decimal values to parse for the highest value. Returns Type Description System.Decimal The highest System.Decimal value of the specified System.Decimal values. | Improve this Doc GetHighestValue(Double[]) Gets the highest System.Double value of the specified System.Double values. Declaration public static double GetHighestValue(params double[] values) Parameters Type Name Description System.Double [] values A variable number of System.Double values to parse for the highest value. Returns Type Description System.Double The highest System.Double value of the specified System.Double values. | Improve this Doc GetHighestValue(Int32[]) Gets the highest System.Int32 value of the specified System.Int32 values. Declaration public static int GetHighestValue(params int[] values) Parameters Type Name Description System.Int32 [] values A variable number of System.Int32 values to parse for the highest value. Returns Type Description System.Int32 The highest System.Int32 value of the specified System.Int32 values. | Improve this Doc GetHighestValue(Int64[]) Gets the highest System.Int64 value of the specified System.Int64 values. Declaration public static long GetHighestValue(params long[] values) Parameters Type Name Description System.Int64 [] values A variable number of System.Int64 values to parse for the highest value. Returns Type Description System.Int64 The highest System.Int64 value of the specified System.Int64 values. | Improve this Doc GetLowestValue(Decimal[]) Gets the lowest System.Decimal value of the specified System.Decimal values. Declaration public static decimal GetLowestValue(params decimal[] values) Parameters Type Name Description System.Decimal [] values A variable number of System.Decimal values to parse for the lowest value. Returns Type Description System.Decimal The lowest System.Decimal value of the specified System.Decimal values. | Improve this Doc GetLowestValue(Double[]) Gets the lowest System.Double value of the specified System.Double values. Declaration public static double GetLowestValue(params double[] values) Parameters Type Name Description System.Double [] values A variable number of System.Double values to parse for the lowest value. Returns Type Description System.Double The lowest System.Double value of the specified System.Double values. | Improve this Doc GetLowestValue(Int32[]) Gets the lowest System.Int32 value of the specified System.Int32 values. Declaration public static int GetLowestValue(params int[] values) Parameters Type Name Description System.Int32 [] values A variable number of System.Int32 values to parse for the lowest value. Returns Type Description System.Int32 The lowest System.Int32 value of the specified System.Int32 values. | Improve this Doc GetLowestValue(Int64[]) Gets the lowest System.Int64 value of the specified System.Int64 values. Declaration public static long GetLowestValue(params long[] values) Parameters Type Name Description System.Int64 [] values A variable number of System.Int64 values to parse for the lowest value. Returns Type Description System.Int64 The lowest System.Int64 value of the specified System.Int64 values. | Improve this Doc GetRandomNumber() Generates a nonnegative random number. Declaration public static int GetRandomNumber() Returns Type Description System.Int32 A 32-bit signed integer greater than or equal to zero and less than System.Int32.MaxValue . | Improve this Doc GetRandomNumber(Int32) Generates a nonnegative random number less than the specified maximum. Declaration public static int GetRandomNumber(int maxValue) Parameters Type Name Description System.Int32 maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero. Returns Type Description System.Int32 A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values ordinarily includes zero but not maxValue. However, if maxValue equals zero, maxValue is returned. | Improve this Doc GetRandomNumber(Int32, Int32) Generates a random number within a specified range. Declaration public static int GetRandomNumber(int minValue, int maxValue) Parameters Type Name Description System.Int32 minValue The inclusive lower bound of the random number returned. System.Int32 maxValue The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. Returns Type Description System.Int32 A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned. | Improve this Doc GetRandomNumber(Int32, Int32, RandomSeverity) Generates a random number within a specified range. Declaration public static int GetRandomNumber(int minValue, int maxValue, RandomSeverity severity) Parameters Type Name Description System.Int32 minValue The inclusive lower bound of the random number returned. System.Int32 maxValue The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. RandomSeverity severity The severity of the random number being generated. Returns Type Description System.Int32 A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned. | Improve this Doc IsCountableSequence(IEnumerable<Int32>) Determines whether the specified source is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence). Declaration public static bool IsCountableSequence(IEnumerable<int> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > source The value to test for a sequence of countable characters. Returns Type Description System.Boolean true if the specified source is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence); otherwise, false . | Improve this Doc IsCountableSequence(IEnumerable<Int64>) Determines whether the specified source is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence). Declaration public static bool IsCountableSequence(IEnumerable<long> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int64 > source The value to test for a sequence of countable characters. Returns Type Description System.Boolean true if the specified source is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence); otherwise, false . | Improve this Doc IsEven(Int32) Determines whether the specified value is an even number. Declaration public static bool IsEven(int value) Parameters Type Name Description System.Int32 value The value to evaluate. Returns Type Description System.Boolean true if the specified value is an even number; otherwise, false . | Improve this Doc IsOdd(Int32) Determines whether the specified value is an odd number. Declaration public static bool IsOdd(int value) Parameters Type Name Description System.Int32 value The value to evaluate. Returns Type Description System.Boolean true if the specified value is an odd number; otherwise, false . | Improve this Doc IsPrime(Int32) Determines whether the specified value is a prime number. Declaration public static bool IsPrime(int value) Parameters Type Name Description System.Int32 value The positive integer to determine whether is a prime number. Returns Type Description System.Boolean true if the specified value is a prime number; otherwise, false . Exceptions Type Condition System.ArgumentException value has a value smaller than 0. | Improve this Doc RoundOff(Double, RoundOffAccuracy) Rounds a double-precision floating-point value to the nearest integral value closest to the specified accuracy . Declaration public static double RoundOff(double value, RoundOffAccuracy accuracy) Parameters Type Name Description System.Double value A double-precision floating-point number to be rounded. RoundOffAccuracy accuracy The accuracy to use in the rounding. Returns Type Description System.Double The integer value closest to the specified accuracy of value . Note that this method returns a System.Double instead of an integral type. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Data.DataTransferColumnCollection.html": {
    "href": "api/core/Cuemon.Data.DataTransferColumnCollection.html",
    "title": "Class DataTransferColumnCollection | Cuemon .NET Standard",
    "keywords": "Class DataTransferColumnCollection Represents a collection of DataTransferColumn objects for a table in a database. This class cannot be inherited. Inheritance System.Object System.Collections.Generic.List < DataTransferColumn > DataTransferColumnCollection Implements System.Collections.Generic.IList < DataTransferColumn > System.Collections.Generic.ICollection < DataTransferColumn > System.Collections.Generic.IReadOnlyList < DataTransferColumn > System.Collections.Generic.IReadOnlyCollection < DataTransferColumn > System.Collections.Generic.IEnumerable < DataTransferColumn > System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Add(Cuemon.Data.DataTransferColumn) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.AddRange(System.Collections.Generic.IEnumerable<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.AsReadOnly() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.BinarySearch(Cuemon.Data.DataTransferColumn) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.BinarySearch(Cuemon.Data.DataTransferColumn, System.Collections.Generic.IComparer<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.BinarySearch(System.Int32, System.Int32, Cuemon.Data.DataTransferColumn, System.Collections.Generic.IComparer<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Clear() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Contains(Cuemon.Data.DataTransferColumn) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.CopyTo(Cuemon.Data.DataTransferColumn[]) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.CopyTo(Cuemon.Data.DataTransferColumn[], System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.CopyTo(System.Int32, Cuemon.Data.DataTransferColumn[], System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Exists(System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Find(System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.FindAll(System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.FindIndex(System.Int32, System.Int32, System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.FindIndex(System.Int32, System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.FindIndex(System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.FindLast(System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.FindLastIndex(System.Int32, System.Int32, System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.FindLastIndex(System.Int32, System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.FindLastIndex(System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.ForEach(System.Action<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.GetEnumerator() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.GetRange(System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.IndexOf(Cuemon.Data.DataTransferColumn) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.IndexOf(Cuemon.Data.DataTransferColumn, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.IndexOf(Cuemon.Data.DataTransferColumn, System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Insert(System.Int32, Cuemon.Data.DataTransferColumn) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.LastIndexOf(Cuemon.Data.DataTransferColumn) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.LastIndexOf(Cuemon.Data.DataTransferColumn, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.LastIndexOf(Cuemon.Data.DataTransferColumn, System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Remove(Cuemon.Data.DataTransferColumn) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.RemoveAll(System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.RemoveAt(System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.RemoveRange(System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Reverse() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Reverse(System.Int32, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Sort() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Sort(System.Collections.Generic.IComparer<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Sort(System.Comparison<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.Generic.IEnumerable<Cuemon.Data.DataTransferColumn>.GetEnumerator() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.Add(System.Object) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.Contains(System.Object) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.IndexOf(System.Object) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.Remove(System.Object) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.ToArray() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.TrimExcess() System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.TrueForAll(System.Predicate<Cuemon.Data.DataTransferColumn>) System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Capacity System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Count System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.Item[System.Int32] System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.Generic.ICollection<Cuemon.Data.DataTransferColumn>.IsReadOnly System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.ICollection.SyncRoot System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.IsFixedSize System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.IsReadOnly System.Collections.Generic.List<Cuemon.Data.DataTransferColumn>.System.Collections.IList.Item[System.Int32] Namespace : Cuemon.Data Assembly : Cuemon.Data.dll Syntax public sealed class DataTransferColumnCollection : List<DataTransferColumn>, IList<DataTransferColumn>, ICollection<DataTransferColumn>, IReadOnlyList<DataTransferColumn>, IReadOnlyCollection<DataTransferColumn>, IEnumerable<DataTransferColumn>, IList, ICollection, IEnumerable Properties | Improve this Doc Item[String] Gets the DataTransferColumn from the collection with the specified name. Declaration public DataTransferColumn this[string name] { get; } Parameters Type Name Description System.String name The name of the column from which to return. Property Value Type Description DataTransferColumn A DataTransferColumn if found; otherwise null. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String) StringConverterExtensions.ToDelimitedString<TSource>(IEnumerable<TSource>, String, String, Func<TSource, String>) StringConverterExtensions.ToDelimitedString<TSource, T>(IEnumerable<TSource>, String, String, Func<TSource, T, String>, T) StringConverterExtensions.ToDelimitedString<TSource, T1, T2>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, String>, T1, T2) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, String>, T1, T2, T3) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, String>, T1, T2, T3, T4) StringConverterExtensions.ToDelimitedString<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, String, String, Func<TSource, T1, T2, T3, T4, T5, String>, T1, T2, T3, T4, T5) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableConverterExtensions.ParseSequenceWith<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) EnumerableConverterExtensions.ParseSequenceWith<TSource, T, TResult>(IEnumerable<TSource>, Func<TSource, T, TResult>, T) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, TResult>, T1, T2) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableConverterExtensions.ParseSequenceWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>, Func<Int32, Int32, Int32>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>) EnumerableUtilityExtensions.RandomOrDefault<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource>(IEnumerable<TSource>, Func<IEnumerable<TSource>, TSource>) EnumerableUtilityExtensions.SelectOne<TSource, T>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T, TSource>, T) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, TSource>, T1, T2) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, TSource>, T1, T2, T3) EnumerableUtilityExtensions.SelectOne<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<IEnumerable<TSource>, T1, T2, T3, T4, TSource>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>) EnumerableUtilityExtensions.FindAll<TSource, T>(IEnumerable<TSource>, Func<TSource, T, Boolean>, T) EnumerableUtilityExtensions.FindAll<TSource, T1, T2>(IEnumerable<TSource>, Func<TSource, T1, T2, Boolean>, T1, T2) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, Boolean>, T1, T2, T3) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, Boolean>, T1, T2, T3, T4) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, Boolean>, T1, T2, T3, T4, T5) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, Boolean>, T1, T2, T3, T4, T5, T6) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, Boolean>, T1, T2, T3, T4, T5, T6, T7) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8) EnumerableUtilityExtensions.FindAll<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9>(IEnumerable<TSource>, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, Boolean>, T1, T2, T3, T4, T5, T6, T7, T8, T9) EnumerableUtilityExtensions.Contains<TSource>(IEnumerable<TSource>, TSource, Func<TSource, TSource, Boolean>) EnumerableUtilityExtensions.Yield<TSource>(TSource) ListUtilityExtensions.HasIndex<TSource>(IList<TSource>, Int32) ListUtilityExtensions.Next<TSource>(IList<TSource>, Int32) ListUtilityExtensions.Previous<TSource>(IList<TSource>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, Int32, Int32, Int32) PagedCollectionExtensions.ToPagedCollection<T>(IEnumerable<T>, PagedSettings, Int32) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>) PartitionCollectionExtensions.ToPartitionCollection<T>(IEnumerable<T>, Int32) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.AssignmentUtility.html": {
    "href": "api/core/Cuemon.AssignmentUtility.html",
    "title": "Class AssignmentUtility | Cuemon .NET Standard",
    "keywords": "Class AssignmentUtility This utility class is designed to make arithmetic assignment operations for numeric operands easier to work with by using generics. Inheritance System.Object AssignmentUtility Namespace : Cuemon Assembly : Cuemon.Core.dll Syntax public static class AssignmentUtility Methods | Improve this Doc Add<T>(T, T) Performs a binary addition of the two specified values. Declaration public static T Add<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The first value to add. T y The second value to add. Returns Type Description T The sum of x and y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . System.OverflowException The sum of x and y is less than or greater than the by T valid MinValue and MaxValue . | Improve this Doc And<T>(T, T) Performs a a bitwise logical conjunction (AND) operation of the two specified values. Declaration public static T And<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The first value to AND. T y The second value to AND. Returns Type Description T The result of x AND y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc Assign<T>(T, T) Performs an assignment of the right-hand operand to the left-hand operand. Declaration public static T Assign<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The left-hand operand. T y The right-hand operand. Returns Type Description T The value of y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc Calculate<T>(T, AssignmentOperator, T) Performs a calculation following the assignment of the two specified values. Declaration public static T Calculate<T>(T x, AssignmentOperator assignment, T y) where T : struct, IConvertible Parameters Type Name Description T x The value to calculate with y . AssignmentOperator assignment One of the enumeration values that specifies the rules to apply for the assignment operator of x and y . T y The value to calculate with x . Returns Type Description T The result of the assignment for x and y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc Divide<T>(T, T) Performs a binary division of the two specified values. Declaration public static T Divide<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The dividend. T y The divisor. Returns Type Description T The result of dividing x by y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . System.DivideByZeroException y is zero. System.OverflowException The sum of x and y is less than or greater than the by T valid MinValue and MaxValue . | Improve this Doc ExclusiveOr<T>(T, T) Performs a bitwise exclusive or (XOR) operation of the two specified values. Declaration public static T ExclusiveOr<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The first value to XOR. T y The second value to XOR. Returns Type Description T The result of x XOR y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc LeftShift<T>(T, T) Performs an arithmetic left shift (<<) operation. Declaration public static T LeftShift<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The bit pattern to be shifted. T y The number of bits to shift the bit pattern. Returns Type Description T The result of shifting the bit pattern. Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Int16 , System.Int32 , System.SByte , System.UInt16 . | Improve this Doc Multiply<T>(T, T) Performs a binary multiplication of the two specified values. Declaration public static T Multiply<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The multiplicand. T y The multiplier. Returns Type Description T The result of multiplying x and y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . System.OverflowException The sum of x and y is less than or greater than the by T valid MinValue and MaxValue . | Improve this Doc Or<T>(T, T) Performs a bitwise logical disjunction (OR) operation of the two specified values. Declaration public static T Or<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The first value to OR. T y The second value to OR. Returns Type Description T The result of x OR y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.UInt16 , System.UInt32 or System.UInt64 . | Improve this Doc Remainder<T>(T, T) Performs a binary division of the two specified values and computes the remainder hereof. Declaration public static T Remainder<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The dividend. T y The divisor. Returns Type Description T The remainder after dividing x by y . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . System.DivideByZeroException y is zero. System.OverflowException The sum of x and y is less than or greater than the by T valid MinValue and MaxValue . | Improve this Doc RightShift<T>(T, T) Performs an arithmetic right shift (>>) operation. Declaration public static T RightShift<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The bit pattern to be shifted. T y The number of bits to shift the bit pattern. Returns Type Description T The result of shifting the bit pattern. Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Int16 , System.Int32 , System.SByte , System.UInt16 . | Improve this Doc Subtract<T>(T, T) Performs a binary subtraction of the two specified values. Declaration public static T Subtract<T>(T x, T y) where T : struct, IConvertible Parameters Type Name Description T x The minuend. T y The subtrahend. Returns Type Description T The result of subtracting y from x . Type Parameters Name Description T The type of the values for the operand operation. Exceptions Type Condition TypeArgumentException T is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . System.OverflowException The sum of x and y is less than or greater than the by T valid MinValue and MaxValue . | Improve this Doc ValidAsNumericOperand<T>() Validates if the specified T is within the allowed range of numeric operands. Declaration public static void ValidAsNumericOperand<T>() where T : struct, IComparable<T>, IEquatable<T>, IConvertible Type Parameters Name Description T The type of the value for an operand operation. Exceptions Type Condition System.ArgumentOutOfRangeException T is outside the range of allowed types. Allowed types are: System.Byte , System.Decimal , System.Double , System.Int16 , System.Int32 , System.Int64 , System.SByte , System.Single , System.UInt16 , System.UInt32 or System.UInt64 . (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/aspnetcore/Cuemon.AspNetCore.Mvc.DependencyInjection.html": {
    "href": "api/aspnetcore/Cuemon.AspNetCore.Mvc.DependencyInjection.html",
    "title": "Namespace Cuemon.AspNetCore.Mvc.DependencyInjection | Cuemon .NET Standard",
    "keywords": "Namespace Cuemon.AspNetCore.Mvc.DependencyInjection Assembly : Cuemon.AspNetCore.Mvc.dll Classes ServiceCollectionExtensions Extension methods for the Microsoft.Extensions.DependencyInjection.IServiceCollection interface. (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/core/Cuemon.Diagnostics.TimeMeasureProfiler.html": {
    "href": "api/core/Cuemon.Diagnostics.TimeMeasureProfiler.html",
    "title": "Class TimeMeasureProfiler | Cuemon .NET Standard",
    "keywords": "Class TimeMeasureProfiler Represents a profiler that is optimized for time measuring operations. Inheritance System.Object Profiler TimeMeasureProfiler TimeMeasureProfiler<TResult> Inherited Members Profiler.Member Profiler.Data Namespace : Cuemon.Diagnostics Assembly : Cuemon.Core.dll Syntax public class TimeMeasureProfiler : Profiler Properties | Improve this Doc Elapsed Gets the total elapsed time measured by this profiler. Declaration public TimeSpan Elapsed { get; } Property Value Type Description System.TimeSpan A read-only System.TimeSpan representing the total elapsed time measured by this profiler. | Improve this Doc IsRunning Gets a value indicating whether this time measuring profiler is still running. Declaration public bool IsRunning { get; } Property Value Type Description System.Boolean true if this time measuring profiler is still running; otherwise, false . Methods | Improve this Doc ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Extension Methods ConverterExtensions.ParseWith<TSource, TResult>(TSource, Func<TSource, TResult>) ConverterExtensions.ParseWith<TSource, T, TResult>(TSource, Func<TSource, T, TResult>, T) ConverterExtensions.ParseWith<TSource, T1, T2, TResult>(TSource, Func<TSource, T1, T2, TResult>, T1, T2) ConverterExtensions.ParseWith<TSource, T1, T2, T3, TResult>(TSource, Func<TSource, T1, T2, T3, TResult>, T1, T2, T3) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, TResult>(TSource, Func<TSource, T1, T2, T3, T4, TResult>, T1, T2, T3, T4) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8) ConverterExtensions.ParseWith<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(TSource, Func<TSource, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9) ConverterExtensions.As<TResult>(Object) ConverterExtensions.As<TResult>(Object, TResult) ConverterExtensions.As<TResult>(Object, TResult, IFormatProvider) DelegateUtilityExtensions.Wrap<TResult>(TResult) DelegateUtilityExtensions.DynamicWrap<TResult>(TResult) TweakerExtensions.Adjust<T>(T, Func<T, T>) TypeUtilityExtensions.Is<T>(Object) TypeUtilityExtensions.IsNot<T>(Object) TypeUtilityExtensions.IsNullable<T>(T) WrapperExtensions.UseWrapper<T>(T, Action<IDictionary<String, Object>>) WrapperExtensions.UseWrapper<T>(T, MemberInfo, Action<IDictionary<String, Object>>) EnumerableUtilityExtensions.Yield<TSource>(TSource) HashUtilityExtensions.ComputeHash(Object, Action<HashOptions>) HmacUtilityExtensions.ComputeKeyedHash(Object, Byte[], Action<KeyedHashOptions>) See Also Profiler (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://cuemon-github.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  }
}